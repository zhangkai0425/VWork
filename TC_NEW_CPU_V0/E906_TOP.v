// ADDR is 20-bit, 4K address
// Flag includes: Strong Order, Cacheable, Bufferable, Reserved, Reserved





`include "sysmap.h"

`define ICACHE
`define ICACHE_8K
`define DCACHE
`define DCACHE_8K
`define BHT
`define BHT_8K
`define HAD_MBKPT_C2E
`define FPGA
`define EXT_INT_NUM 32
`define CLIC_INTCTLBITS 3
`define PRODUCT_ID 12'h000

`define RESET_VAL 16'hABCD

`define REVISION    4'd1
`define SUB_VERSION 6'd4
`define PATCH       6'd0
//=============================================================================
// Category: Foundary and Process Configuration
//=============================================================================
//---------------------------------------------------------
// Foundary
//---------------------------------------------------------
`define TSMC

//---------------------------------------------------------
// Process
//---------------------------------------------------------
`define PROCESS28HPC


//=============================================================================
// Category: Processor Configuration
//=============================================================================

//---------------------------------------------------------
// Return Address Stack
//---------------------------------------------------------
`define RAS

//Int Accelerate
`define HARDWARE_STACK

//---------------------------------------------------------
//CLIC mode
//---------------------------------------------------------
`define CLIC_MODE



//---------------------------------------------------------
// Floating-Point configuration
//---------------------------------------------------------
`ifdef FPU_DOUBLE
  `define FLEN  64
`else
  `define FLEN  32
`endif
//---------------------------------------------------------
// AHB Lite Interface
// 1. Instruction AHB Lite Interface
// 2. Data AHB Lite Interface
//---------------------------------------------------------
`define IAHB_LITE
`define DAHB_LITE

`ifdef IAHB_LITE
  `define IBUS_32
`endif

`ifdef DAHB_LITE
  `define DBUS_32
`endif

//---------------------------------------------------------
// SYS Bus Protocol configuration
//---------------------------------------------------------
//`define SYS_AHB
`define SYS_AHB_LITE
`define BIU_32

//---------------------------------------------------------
// BIU flop out configuration
//---------------------------------------------------------
`define FLOP_OUT_BIU
`define MCU_EXTENSION
`define LS_MISALIGN
`define NEW_DFT


//---------------------------------------------------------
// BHT Configuration
//---------------------------------------------------------
`ifdef BHT_2K
  `define BHT_IDX_WIDTH  7
`endif

`ifdef BHT_4K
  `define BHT_IDX_WIDTH  8
`endif

`ifdef BHT_8K
  `define BHT_IDX_WIDTH  9
`endif

`ifdef BHT_16K
  `define BHT_IDX_WIDTH  10
`endif
//---------------------------------------------------------
// PMP Configuration
//---------------------------------------------------------

`ifdef PMP_REGION_2
  `define REGION_ENTRY0
  `define REGION_ENTRY1
`endif

`ifdef PMP_REGION_4
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
`endif

`ifdef PMP_REGION_8
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
  `define REGION_ENTRY4
  `define REGION_ENTRY5
  `define REGION_ENTRY6
  `define REGION_ENTRY7
`endif

`ifdef PMP_REGION_12
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
  `define REGION_ENTRY4
  `define REGION_ENTRY5
  `define REGION_ENTRY6
  `define REGION_ENTRY7
  `define REGION_ENTRY8
  `define REGION_ENTRY9
  `define REGION_ENTRY10
  `define REGION_ENTRY11
`endif

`ifdef PMP_REGION_16
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
  `define REGION_ENTRY4
  `define REGION_ENTRY5
  `define REGION_ENTRY6
  `define REGION_ENTRY7
  `define REGION_ENTRY8
  `define REGION_ENTRY9
  `define REGION_ENTRY10
  `define REGION_ENTRY11
  `define REGION_ENTRY12
  `define REGION_ENTRY13
  `define REGION_ENTRY14
  `define REGION_ENTRY15
`endif

//---------------------------------------------------------
//      Cache Configuration
//---------------------------------------------------------

`ifdef ICACHE_2K
  `define I_TAG_INDEX_WIDTH  5
  `define I_TAG_TAG_WIDTH    22
`endif

`ifdef ICACHE_4K
  `define I_TAG_INDEX_WIDTH  6
  `define I_TAG_TAG_WIDTH    21
`endif

`ifdef ICACHE_8K
  `define I_TAG_INDEX_WIDTH  7
  `define I_TAG_TAG_WIDTH    20
`endif

`ifdef ICACHE_16K
  `define I_TAG_INDEX_WIDTH  8
  `define I_TAG_TAG_WIDTH    19
`endif

`ifdef ICACHE_32K
  `define I_TAG_INDEX_WIDTH  9
  `define I_TAG_TAG_WIDTH    18
`endif



`ifdef DCACHE_2K
  `define D_TAG_INDEX_WIDTH  5
  `define D_TAG_TAG_WIDTH    22
  `define D_DATA_INDEX_WIDTH 7
`endif

`ifdef DCACHE_4K
  `define D_TAG_INDEX_WIDTH  6
  `define D_TAG_TAG_WIDTH    21
  `define D_DATA_INDEX_WIDTH 8
`endif

`ifdef DCACHE_8K
  `define D_TAG_INDEX_WIDTH  7
  `define D_TAG_TAG_WIDTH    20
  `define D_DATA_INDEX_WIDTH 9
`endif

`ifdef DCACHE_16K
  `define D_TAG_INDEX_WIDTH  8
  `define D_TAG_TAG_WIDTH    19
  `define D_DATA_INDEX_WIDTH 10
`endif

`ifdef DCACHE_32K
  `define D_TAG_INDEX_WIDTH  9
  `define D_TAG_TAG_WIDTH    18
  `define D_DATA_INDEX_WIDTH 11
`endif


//=============================================================================
// Category: CPU Configuration
//=============================================================================
//---------------------------------------------------------
// Tightly Coupled IP Configuration
//---------------------------------------------------------
`define TCIPIF

`ifdef CLIC_MODE
  `ifdef EXT_INT_NUM
    `define CLIC_INTNUM   `EXT_INT_NUM+16
  `else
    `define CLIC_INTNUM   16
  `endif
`endif

//---------------------------------------------------------
// HAD Hareware Implementation
//---------------------------------------------------------
`define HAD_IM

`ifdef HAD_IM
  `define PCFIFO_FOR_DBG
  //`define HAD_JTAG_5
  `define HAD_MBKPT_C2E //now, MBKPTB indicates five breakpoints: A, B, C, D, E
  `define DDMA //debug direct memory access
  `ifdef TCIPIF
    //`define DBG_EXP // debug exception
  `endif
`endif




module fpga_ram(
  PortAClk,
  PortAAddr,
  PortADataIn,
  PortAWriteEnable,
//  PortAChipEnable,
  PortADataOut
);

parameter  DATAWIDTH = 2;
parameter  ADDRWIDTH = 2;

input                     PortAClk;
input   [(ADDRWIDTH-1):0] PortAAddr;
input   [(DATAWIDTH-1):0] PortADataIn;
input                     PortAWriteEnable;
//input                     PortAChipEnable;
output  [(DATAWIDTH-1):0] PortADataOut;

parameter  MEMDEPTH = 2**(ADDRWIDTH);

reg [(DATAWIDTH-1):0] mem [(MEMDEPTH-1):0] /* synthesis syn_ramstyle = "no_rw_check" */;
reg [(DATAWIDTH-1):0] PortADataOut;

always @(posedge PortAClk)
begin
  if(PortAWriteEnable)
  begin
    mem[PortAAddr]  <= PortADataIn;
    PortADataOut    <= PortADataIn;
  end
  else
  begin
    PortADataOut    <= mem[PortAAddr];
  end
end

//wire [(DATAWIDTH-1):0] tt;
//assign t = mem[PortAAddr];
//always @(posedge PortAClk)
//begin
//  if(PortAWriteEnable)
//  begin
//    PortADataOut    <= PortADataIn;
//  end
//  else
//  begin
//    PortADataOut    <= mem[PortAAddr];
//  end
//end

endmodule





















module gated_clk_cell(
  clk_in,
  global_en,
  module_en,
  local_en,
  external_en,
  pad_yy_gate_clk_en_b,
  clk_out
);

input  clk_in;
input  global_en;
input  module_en;
input  local_en;
input  external_en;
input  pad_yy_gate_clk_en_b;
output clk_out;

wire   clk_en_bf_latch;
wire   SE;

assign clk_en_bf_latch = (global_en && (module_en || local_en)) || external_en ;


assign SE	       = pad_yy_gate_clk_en_b;


    // CKLNQD8BWP35P140  x_gated_clk_cell (
    //             .CP     (clk_in),
    //             .TE     (SE),
    //             .E      (clk_en_bf_latch),
    //             .Q      (clk_out)
    //             );
assign clk_out = clk_in;

endmodule






















// &ModuleBeg; @23
module pa_ahbl_if(
  ahbl_bmu_dbus_acc_err,
  ahbl_bmu_dbus_data,
  ahbl_bmu_dbus_grnt,
  ahbl_bmu_dbus_trans_cmplt,
  ahbl_bmu_had_acc_err,
  ahbl_bmu_had_data,
  ahbl_bmu_had_grnt,
  ahbl_bmu_had_trans_cmplt,
  ahbl_bmu_ibus_acc_err,
  ahbl_bmu_ibus_data,
  ahbl_bmu_ibus_grnt,
  ahbl_bmu_ibus_trans_cmplt,
  ahbl_clk_en,
  ahbl_gated_clk,
  ahbl_pad_haddr,
  ahbl_pad_hburst,
  ahbl_pad_hlock,
  ahbl_pad_hprot,
  ahbl_pad_hsize,
  ahbl_pad_htrans,
  ahbl_pad_hwdata,
  ahbl_pad_hwrite,
  ahbl_sysio_idle,
  bmu_ahbl_dbus_acc_deny,
  bmu_ahbl_dbus_addr,
  bmu_ahbl_dbus_burst,
  bmu_ahbl_dbus_lock,
  bmu_ahbl_dbus_lrsc,
  bmu_ahbl_dbus_prot,
  bmu_ahbl_dbus_req,
  bmu_ahbl_dbus_req_dp,
  bmu_ahbl_dbus_seq,
  bmu_ahbl_dbus_size,
  bmu_ahbl_dbus_wdata,
  bmu_ahbl_dbus_write,
  bmu_ahbl_had_acc_deny,
  bmu_ahbl_had_addr,
  bmu_ahbl_had_burst,
  bmu_ahbl_had_prot,
  bmu_ahbl_had_req,
  bmu_ahbl_had_req_dp,
  bmu_ahbl_had_seq,
  bmu_ahbl_had_size,
  bmu_ahbl_had_wdata,
  bmu_ahbl_had_write,
  bmu_ahbl_ibus_acc_deny,
  bmu_ahbl_ibus_addr,
  bmu_ahbl_ibus_burst,
  bmu_ahbl_ibus_prot,
  bmu_ahbl_ibus_req,
  bmu_ahbl_ibus_req_dp,
  bmu_ahbl_ibus_seq,
  bmu_ahbl_ibus_size,
  cpurst_b,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_xx_flush,
  pad_ahbl_hrdata,
  pad_ahbl_hready,
  pad_ahbl_hresp,
  rtu_yy_xx_async_flush,
  sysio_xx_halt_req
);

// &Ports; @24
input           ahbl_gated_clk;
input           bmu_ahbl_dbus_acc_deny;
input   [31:0]  bmu_ahbl_dbus_addr;
input   [2 :0]  bmu_ahbl_dbus_burst;
input           bmu_ahbl_dbus_lock;
input           bmu_ahbl_dbus_lrsc;
input   [3 :0]  bmu_ahbl_dbus_prot;
input           bmu_ahbl_dbus_req;
input           bmu_ahbl_dbus_req_dp;
input           bmu_ahbl_dbus_seq;
input   [1 :0]  bmu_ahbl_dbus_size;
input   [31:0]  bmu_ahbl_dbus_wdata;
input           bmu_ahbl_dbus_write;
input           bmu_ahbl_had_acc_deny;
input   [31:0]  bmu_ahbl_had_addr;
input   [2 :0]  bmu_ahbl_had_burst;
input   [3 :0]  bmu_ahbl_had_prot;
input           bmu_ahbl_had_req;
input           bmu_ahbl_had_req_dp;
input           bmu_ahbl_had_seq;
input   [1 :0]  bmu_ahbl_had_size;
input   [31:0]  bmu_ahbl_had_wdata;
input           bmu_ahbl_had_write;
input           bmu_ahbl_ibus_acc_deny;
input   [31:0]  bmu_ahbl_ibus_addr;
input   [2 :0]  bmu_ahbl_ibus_burst;
input   [3 :0]  bmu_ahbl_ibus_prot;
input           bmu_ahbl_ibus_req;
input           bmu_ahbl_ibus_req_dp;
input           bmu_ahbl_ibus_seq;
input   [1 :0]  bmu_ahbl_ibus_size;
input           cpurst_b;
input           lsu_biu_amo_pmp_deny;
input           lsu_biu_async_expt_ack;
input           lsu_xx_flush;
input   [31:0]  pad_ahbl_hrdata;
input           pad_ahbl_hready;
input           pad_ahbl_hresp;
input           rtu_yy_xx_async_flush;
input           sysio_xx_halt_req;
output          ahbl_bmu_dbus_acc_err;
output  [31:0]  ahbl_bmu_dbus_data;
output          ahbl_bmu_dbus_grnt;
output          ahbl_bmu_dbus_trans_cmplt;
output          ahbl_bmu_had_acc_err;
output  [31:0]  ahbl_bmu_had_data;
output          ahbl_bmu_had_grnt;
output          ahbl_bmu_had_trans_cmplt;
output          ahbl_bmu_ibus_acc_err;
output  [31:0]  ahbl_bmu_ibus_data;
output          ahbl_bmu_ibus_grnt;
output          ahbl_bmu_ibus_trans_cmplt;
output          ahbl_clk_en;
output  [31:0]  ahbl_pad_haddr;
output  [2 :0]  ahbl_pad_hburst;
output          ahbl_pad_hlock;
output  [3 :0]  ahbl_pad_hprot;
output  [2 :0]  ahbl_pad_hsize;
output  [1 :0]  ahbl_pad_htrans;
output  [31:0]  ahbl_pad_hwdata;
output          ahbl_pad_hwrite;
output          ahbl_sysio_idle;

// &Regs; @25
reg     [2 :0]  ahbLif_cur_state;
reg     [2 :0]  ahbLif_nxt_state;
reg     [2 :0]  burst_cnt;
reg             dbus_not_grant;
reg             ibus_not_grant;
reg     [1 :0]  lock_cur_state;
reg     [1 :0]  lock_next_state;
reg     [2 :0]  req_mask;
reg     [2 :0]  req_sel;

// &Wires; @26
wire            acc_err;
wire            ahbLif_req_idle;
wire            ahbLif_req_idle_dp;
wire            ahbl_bmu_dbus_acc_err;
wire    [31:0]  ahbl_bmu_dbus_data;
wire            ahbl_bmu_dbus_grnt;
wire            ahbl_bmu_dbus_trans_cmplt;
wire            ahbl_bmu_had_acc_err;
wire    [31:0]  ahbl_bmu_had_data;
wire            ahbl_bmu_had_grnt;
wire            ahbl_bmu_had_trans_cmplt;
wire            ahbl_bmu_ibus_acc_err;
wire    [31:0]  ahbl_bmu_ibus_data;
wire            ahbl_bmu_ibus_grnt;
wire            ahbl_bmu_ibus_trans_cmplt;
wire            ahbl_clk_en;
wire            ahbl_gated_clk;
wire    [31:0]  ahbl_pad_haddr;
wire    [2 :0]  ahbl_pad_hburst;
wire            ahbl_pad_hlock;
wire    [3 :0]  ahbl_pad_hprot;
wire    [2 :0]  ahbl_pad_hsize;
wire    [1 :0]  ahbl_pad_htrans;
wire    [31:0]  ahbl_pad_hwdata;
wire            ahbl_pad_hwrite;
wire            ahbl_sysio_idle;
wire    [31:0]  bmu_ahbl_dbus_addr;
wire    [2 :0]  bmu_ahbl_dbus_burst;
wire            bmu_ahbl_dbus_lock;
wire            bmu_ahbl_dbus_lrsc;
wire    [3 :0]  bmu_ahbl_dbus_prot;
wire            bmu_ahbl_dbus_req;
wire            bmu_ahbl_dbus_req_dp;
wire            bmu_ahbl_dbus_seq;
wire    [1 :0]  bmu_ahbl_dbus_size;
wire    [31:0]  bmu_ahbl_dbus_wdata;
wire            bmu_ahbl_dbus_write;
wire    [31:0]  bmu_ahbl_had_addr;
wire    [2 :0]  bmu_ahbl_had_burst;
wire    [3 :0]  bmu_ahbl_had_prot;
wire            bmu_ahbl_had_req;
wire            bmu_ahbl_had_req_dp;
wire            bmu_ahbl_had_seq;
wire    [1 :0]  bmu_ahbl_had_size;
wire    [31:0]  bmu_ahbl_had_wdata;
wire            bmu_ahbl_had_write;
wire    [31:0]  bmu_ahbl_ibus_addr;
wire    [2 :0]  bmu_ahbl_ibus_burst;
wire    [3 :0]  bmu_ahbl_ibus_prot;
wire            bmu_ahbl_ibus_req;
wire            bmu_ahbl_ibus_req_dp;
wire            bmu_ahbl_ibus_seq;
wire    [1 :0]  bmu_ahbl_ibus_size;
wire            burst_clr;
wire            burst_req;
wire    [31:0]  bus_rdata;
wire            bus_ready;
wire            bus_resp;
wire    [31:0]  cpu_addr;
wire    [2 :0]  cpu_burst;
wire            cpu_burst_vld;
wire            cpu_lock;
wire    [3 :0]  cpu_prot;
wire            cpu_req;
wire            cpu_req_gate;
wire            cpu_seq;
wire    [1 :0]  cpu_size;
wire    [31:0]  cpu_wdata;
wire            cpu_write;
wire            cpurst_b;
wire            dbus_req;
wire            dbus_sel;
wire            dbus_sel_raw;
wire            had_req;
wire            had_sel;
wire            had_sel_raw;
wire            ibus_req;
wire            ibus_sel;
wire            ibus_sel_raw;
wire            inc2;
wire    [2 :0]  init_cnt;
wire    [2 :0]  init_cnt_inc;
wire            lock_clr;
wire            lock_cur_idle;
wire            lock_req_vld;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_xx_flush;
wire    [31:0]  pad_ahbl_hrdata;
wire            pad_ahbl_hready;
wire            pad_ahbl_hresp;
wire            req_grnt;
wire            req_last;
wire    [2 :0]  req_mask_raw;
wire            req_mask_vld;
wire    [2 :0]  req_sel_dp;
wire    [2 :0]  req_valid;
wire    [2 :0]  req_valid_dp;
wire            rtu_yy_xx_async_flush;
wire            sysio_xx_halt_req;
wire            trans_cmplt;


parameter DATA_WIDTH = 32;


















parameter IDLE   = 3'b000,
          WFG    = 3'b010,
          WFD    = 3'b001,
          ERROR1 = 3'b110,
          ERROR2 = 3'b111;




always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ahbLif_cur_state[2:0] <= IDLE;
  else
    ahbLif_cur_state[2:0] <= ahbLif_nxt_state[2:0];
end

// &CombBeg; @64
always @( bus_ready
       or ahbLif_cur_state
       or cpu_req
       or sysio_xx_halt_req
       or bus_resp)
begin
case(ahbLif_cur_state)
  IDLE:
  begin
    if(cpu_req & !sysio_xx_halt_req) begin
      if(bus_ready)
        ahbLif_nxt_state = WFD;
      else //no ready
        ahbLif_nxt_state = WFG;
    end
    else //no request
      ahbLif_nxt_state = IDLE;
  end
  WFG:
  begin
    if(bus_ready)
      ahbLif_nxt_state = WFD;
    else //no ready
      ahbLif_nxt_state = WFG;
  end
  WFD:   // in this state AHBL wait for the data.
  begin
    if(bus_resp) //resp is ERROR
      ahbLif_nxt_state = ERROR1;
    else if(!bus_ready) //resp == OK, hready == 0
      ahbLif_nxt_state = WFD;
    else //resp == OK, hready == 1
    begin
      if(cpu_req)
        ahbLif_nxt_state = WFD;
      else
        ahbLif_nxt_state = IDLE;
    end
  end
  ERROR1: // error occurs
  begin
    if(bus_resp)               // resp is ERROR
    begin
      if(!bus_ready)           // ready == 0
        ahbLif_nxt_state = ERROR1;
      else
        ahbLif_nxt_state = ERROR2; // bus resp is ERROR, hready == 1
    end
    else
      ahbLif_nxt_state = ERROR2; // bus resp is ERROR, hready == 1
  end
  ERROR2: // error occurs
    ahbLif_nxt_state = IDLE;
  default:
    ahbLif_nxt_state = IDLE;
endcase
// &CombEnd; @115
end

assign ahbLif_req_idle_dp = (ahbLif_cur_state == IDLE) |
                            (ahbLif_cur_state == WFD);

assign ahbLif_req_idle = (ahbLif_cur_state == IDLE) & !sysio_xx_halt_req |
                         (ahbLif_cur_state == WFD) & bus_ready;










parameter LOCK_IDLE = 2'b00;
parameter LOCK_WFS  = 2'b01;
parameter LOCK_WFC  = 2'b10;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    lock_cur_state[1:0] <= LOCK_IDLE;
  else if (lsu_biu_amo_pmp_deny)
    lock_cur_state[1:0] <= LOCK_IDLE;
  else
    lock_cur_state[1:0] <= lock_next_state[1:0];
end

assign lock_req_vld = cpu_req & cpu_lock & ahbLif_req_idle & !cpu_write & !lsu_biu_amo_pmp_deny;

// &CombBeg; @148
always @( req_grnt
       or req_last
       or cpu_req
       or lsu_biu_async_expt_ack
       or lock_req_vld
       or cpu_burst_vld
       or acc_err
       or lock_cur_state
       or lsu_xx_flush
       or rtu_yy_xx_async_flush)
begin
  case(lock_cur_state)
  LOCK_IDLE: begin
    if (lock_req_vld)
      lock_next_state = (req_grnt & !cpu_burst_vld) ? LOCK_WFC : LOCK_WFS;
    else
      lock_next_state = LOCK_IDLE;
  end
  LOCK_WFS: begin
    if (acc_err)
      lock_next_state = LOCK_IDLE;
    else if (req_grnt & req_last)
      lock_next_state = LOCK_WFC;
    else
      lock_next_state = LOCK_WFS;
  end
  LOCK_WFC: begin
    if (cpu_req & req_grnt | lsu_xx_flush | acc_err | rtu_yy_xx_async_flush | lsu_biu_async_expt_ack)
      lock_next_state = LOCK_IDLE;
    else
      lock_next_state = LOCK_WFC;
  end
  default: lock_next_state = LOCK_IDLE;
  endcase
// &CombEnd; @172
end

assign lock_cur_idle =  lock_cur_state == LOCK_IDLE;
assign lock_clr  = (lock_cur_state == LOCK_WFC) & (cpu_req & req_grnt | acc_err | lsu_biu_async_expt_ack) |
                   (lock_cur_state == LOCK_WFS) & acc_err |
                   !lock_cur_idle & (lsu_xx_flush |
                                     lsu_biu_amo_pmp_deny);

assign cpu_burst_vld = cpu_burst[2:0] != 3'b000;
assign burst_req     = cpu_req & cpu_burst_vld & ahbLif_req_idle;
assign burst_clr     = burst_req & cpu_seq & req_last | acc_err | rtu_yy_xx_async_flush & (req_mask[2:0] == 3'b110);

assign req_mask_raw[2:0] = rtu_yy_xx_async_flush & (req_valid[2:0] == 3'b001)
                         ? 3'b0
                         : ~req_valid[2:0];

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    req_mask[2:0] <= 3'b0;
  else if (lock_clr & !burst_req | burst_clr)
    req_mask[2:0] <= 3'b0;
  else if (lock_req_vld & lock_cur_idle | burst_req)
    req_mask[2:0] <= req_mask_raw[2:0];
end

assign req_mask_vld = req_mask[2:0] != 3'b000;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    burst_cnt[2:0] <= 3'b0;
  else if (burst_req & !cpu_seq)
    burst_cnt[2:0] <= bus_ready ? init_cnt_inc[2:0] : init_cnt[2:0];
  else if (burst_req & burst_cnt[2:0] != 3'b0)
    burst_cnt[2:0] <= burst_cnt[2:0] - 3'b001;
end

assign inc2 = cpu_burst[2:0] == 3'b001;
assign init_cnt_inc[2:0] = inc2 ? 3'b000 : 3'b110;
assign init_cnt[2:0]     = inc2 ? 3'b001 : 3'b111;
assign req_last = req_mask_vld & burst_cnt[2:0] == 3'b000;




// &Force("input","bmu_ahbl_dbus_acc_deny"); @218
// &Force("input","bmu_ahbl_ibus_acc_deny"); @219
// &Force("input","bmu_ahbl_had_acc_deny"); @220
always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ibus_not_grant <= 1'b0;
  else if (ibus_req & !req_grnt)
    ibus_not_grant <= 1'b1;
  else if (req_grnt)
    ibus_not_grant <= 1'b0;
end

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    dbus_not_grant <= 1'b0;
  else if (dbus_req & !req_grnt)
    dbus_not_grant <= 1'b1;
  else if (req_grnt)
    dbus_not_grant <= 1'b0;
end

assign had_req  = bmu_ahbl_had_req  & !req_mask[2] & !ibus_not_grant & !dbus_not_grant;
assign dbus_req = bmu_ahbl_dbus_req & !req_mask[0] & !ibus_not_grant & !had_sel_raw;
assign ibus_req = bmu_ahbl_ibus_req & !req_mask[1] & !dbus_sel_raw & !had_sel_raw;
assign cpu_req = ibus_req | dbus_req | had_req;

assign req_valid[2:0] = {had_req,ibus_req,dbus_req};

assign had_sel_raw  = bmu_ahbl_had_req_dp  & !req_mask[2] & !ibus_not_grant & !dbus_not_grant;
assign dbus_sel_raw = bmu_ahbl_dbus_req_dp & !req_mask[0] & !ibus_not_grant & !had_sel_raw;
assign ibus_sel_raw = bmu_ahbl_ibus_req_dp & !req_mask[1] & !dbus_sel_raw & !had_sel_raw;

assign req_valid_dp[2:0] = {had_sel_raw, ibus_sel_raw, dbus_sel_raw};

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    req_sel[2:0] <= 3'b0;
  else if (ahbLif_req_idle & cpu_req)
    req_sel[2:0] <= req_valid[2:0];
end



assign req_sel_dp[2:0] = ahbLif_req_idle_dp ? req_valid_dp[2:0] : req_sel[2:0];

assign dbus_sel = req_sel_dp[0];
assign ibus_sel = req_sel_dp[1];
assign had_sel  = req_sel_dp[2];





assign cpu_addr[31:0]   = {32{dbus_sel}} & bmu_ahbl_dbus_addr[31:0]
                        | {32{ibus_sel}} & bmu_ahbl_ibus_addr[31:0]
                        | {32{had_sel}}  & bmu_ahbl_had_addr[31:0];

assign cpu_prot[3:0]    = {4{dbus_sel}}  & bmu_ahbl_dbus_prot[3:0]
                        | {4{ibus_sel}}  & bmu_ahbl_ibus_prot[3:0]
                        | {4{had_sel}}   & bmu_ahbl_had_prot[3:0];

assign cpu_size[1:0]    = {2{dbus_sel}}  & bmu_ahbl_dbus_size[1:0]
                        | {2{ibus_sel}}  & bmu_ahbl_ibus_size[1:0]
                        | {2{had_sel}}   & bmu_ahbl_had_size[1:0];

assign cpu_seq          = dbus_sel       & bmu_ahbl_dbus_seq
                        | ibus_sel       & bmu_ahbl_ibus_seq
                        | had_sel        & bmu_ahbl_had_seq;

assign cpu_burst[2:0]   = {3{dbus_sel}}  & bmu_ahbl_dbus_burst[2:0]
                        | {3{ibus_sel}}  & bmu_ahbl_ibus_burst[2:0]
                        | {3{had_sel}}   & bmu_ahbl_had_burst[2:0];

assign cpu_write        = dbus_sel       & bmu_ahbl_dbus_write
                        | had_sel        & bmu_ahbl_had_write;

assign cpu_wdata[DATA_WIDTH-1:0]  = req_sel[0] ? bmu_ahbl_dbus_wdata[DATA_WIDTH-1:0]
                                               : bmu_ahbl_had_wdata[DATA_WIDTH-1:0];

assign cpu_lock         = dbus_sel & bmu_ahbl_dbus_lock & !bmu_ahbl_dbus_lrsc;








// &Force("output","ahbl_pad_htrans"); @309
assign ahbl_pad_htrans[1] = cpu_req & ((ahbLif_cur_state==IDLE) & !sysio_xx_halt_req |
                                       (ahbLif_cur_state==WFD)) |
                            (ahbLif_cur_state==WFG);

assign ahbl_pad_htrans[0] = req_mask_vld & cpu_burst_vld;

assign ahbl_pad_haddr[31:0] = cpu_addr[31:0];
assign ahbl_pad_hwrite      = cpu_write;
assign ahbl_pad_hsize[2:0]  = {1'b0, cpu_size[1:0]};
assign ahbl_pad_hprot[3:0]  = cpu_prot[3:0];
assign ahbl_pad_hburst[2:0] = cpu_burst[2:0];
assign ahbl_pad_hlock       = ahbl_pad_htrans[1] & cpu_lock | !lock_cur_idle;
assign ahbl_pad_hwdata[DATA_WIDTH-1:0] = cpu_wdata[DATA_WIDTH-1:0];

assign bus_ready        = pad_ahbl_hready;
assign bus_resp         = pad_ahbl_hresp;
assign bus_rdata[DATA_WIDTH-1:0] = pad_ahbl_hrdata[DATA_WIDTH-1:0];





assign req_grnt = ((ahbLif_cur_state==IDLE && !sysio_xx_halt_req)
                 || ahbLif_cur_state==WFG
                 || ahbLif_cur_state==WFD)
                 && bus_ready && !bus_resp;


assign trans_cmplt  = (ahbLif_cur_state==WFD) &&  bus_ready && !bus_resp
                   || (ahbLif_cur_state==ERROR2); //error vld


assign acc_err = (ahbLif_cur_state==ERROR2);




assign ahbl_bmu_ibus_grnt        = req_sel_dp[1] & req_grnt;
assign ahbl_bmu_ibus_trans_cmplt = req_sel[1] & trans_cmplt;
assign ahbl_bmu_ibus_acc_err     = req_sel[1] & acc_err;
assign ahbl_bmu_ibus_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];

assign ahbl_bmu_dbus_grnt        = req_sel_dp[0] & req_grnt;
assign ahbl_bmu_dbus_trans_cmplt = req_sel[0] & trans_cmplt;
assign ahbl_bmu_dbus_acc_err     = req_sel[0] & acc_err;
assign ahbl_bmu_dbus_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];

assign ahbl_bmu_had_grnt        = req_sel_dp[2] & req_grnt;
assign ahbl_bmu_had_trans_cmplt = req_sel[2] & trans_cmplt;
assign ahbl_bmu_had_acc_err     = req_sel[2] & acc_err;
assign ahbl_bmu_had_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];




assign cpu_req_gate    = bmu_ahbl_had_req_dp |
                         bmu_ahbl_dbus_req_dp |
                         bmu_ahbl_ibus_req_dp;

assign ahbl_clk_en     = !(ahbLif_cur_state==IDLE) | cpu_req_gate |
                         !(lock_cur_state==LOCK_IDLE);
assign ahbl_sysio_idle = (ahbLif_cur_state==IDLE);


//     &Force("nonport",   "had_dbus_ibus_cmpt"); @453
//     &Force("nonport",   "had_ibus_cmpt"); @454
//     &Force("nonport",   "had_dbus_cmpt"); @455
//     &Force("nonport",   "ibus_req_reg"); @456

// &ModuleEnd; @459
endmodule
























// &ModuleBeg; @23
module pa_ahbl_if_fo(
  ahbl_bmu_dbus_acc_err,
  ahbl_bmu_dbus_data,
  ahbl_bmu_dbus_grnt,
  ahbl_bmu_dbus_trans_cmplt,
  ahbl_bmu_had_acc_err,
  ahbl_bmu_had_data,
  ahbl_bmu_had_grnt,
  ahbl_bmu_had_trans_cmplt,
  ahbl_bmu_ibus_acc_err,
  ahbl_bmu_ibus_data,
  ahbl_bmu_ibus_grnt,
  ahbl_bmu_ibus_trans_cmplt,
  ahbl_clk_en,
  ahbl_gated_clk,
  ahbl_pad_haddr,
  ahbl_pad_hburst,
  ahbl_pad_hlock,
  ahbl_pad_hprot,
  ahbl_pad_hsize,
  ahbl_pad_htrans,
  ahbl_pad_hwdata,
  ahbl_pad_hwrite,
  ahbl_sysio_idle,
  bmu_ahbl_dbus_acc_deny,
  bmu_ahbl_dbus_addr,
  bmu_ahbl_dbus_burst,
  bmu_ahbl_dbus_lock,
  bmu_ahbl_dbus_lrsc,
  bmu_ahbl_dbus_prot,
  bmu_ahbl_dbus_req,
  bmu_ahbl_dbus_req_dp,
  bmu_ahbl_dbus_seq,
  bmu_ahbl_dbus_size,
  bmu_ahbl_dbus_wdata,
  bmu_ahbl_dbus_write,
  bmu_ahbl_had_acc_deny,
  bmu_ahbl_had_addr,
  bmu_ahbl_had_burst,
  bmu_ahbl_had_prot,
  bmu_ahbl_had_req,
  bmu_ahbl_had_req_dp,
  bmu_ahbl_had_seq,
  bmu_ahbl_had_size,
  bmu_ahbl_had_wdata,
  bmu_ahbl_had_write,
  bmu_ahbl_ibus_acc_deny,
  bmu_ahbl_ibus_addr,
  bmu_ahbl_ibus_burst,
  bmu_ahbl_ibus_prot,
  bmu_ahbl_ibus_req,
  bmu_ahbl_ibus_req_dp,
  bmu_ahbl_ibus_seq,
  bmu_ahbl_ibus_size,
  clk_en,
  cpurst_b,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_xx_flush,
  lsu_xx_warm_up,
  pad_ahbl_hrdata,
  pad_ahbl_hready,
  pad_ahbl_hresp,
  sysio_xx_halt_req
);

// &Ports; @24
input           ahbl_gated_clk;
input           bmu_ahbl_dbus_acc_deny;
input   [31:0]  bmu_ahbl_dbus_addr;
input   [2 :0]  bmu_ahbl_dbus_burst;
input           bmu_ahbl_dbus_lock;
input           bmu_ahbl_dbus_lrsc;
input   [3 :0]  bmu_ahbl_dbus_prot;
input           bmu_ahbl_dbus_req;
input           bmu_ahbl_dbus_req_dp;
input           bmu_ahbl_dbus_seq;
input   [1 :0]  bmu_ahbl_dbus_size;
input   [31:0]  bmu_ahbl_dbus_wdata;
input           bmu_ahbl_dbus_write;
input           bmu_ahbl_had_acc_deny;
input   [31:0]  bmu_ahbl_had_addr;
input   [2 :0]  bmu_ahbl_had_burst;
input   [3 :0]  bmu_ahbl_had_prot;
input           bmu_ahbl_had_req;
input           bmu_ahbl_had_req_dp;
input           bmu_ahbl_had_seq;
input   [1 :0]  bmu_ahbl_had_size;
input   [31:0]  bmu_ahbl_had_wdata;
input           bmu_ahbl_had_write;
input           bmu_ahbl_ibus_acc_deny;
input   [31:0]  bmu_ahbl_ibus_addr;
input   [2 :0]  bmu_ahbl_ibus_burst;
input   [3 :0]  bmu_ahbl_ibus_prot;
input           bmu_ahbl_ibus_req;
input           bmu_ahbl_ibus_req_dp;
input           bmu_ahbl_ibus_seq;
input   [1 :0]  bmu_ahbl_ibus_size;
input           clk_en;
input           cpurst_b;
input           lsu_biu_amo_pmp_deny;
input           lsu_biu_async_expt_ack;
input           lsu_xx_flush;
input           lsu_xx_warm_up;
input   [31:0]  pad_ahbl_hrdata;
input           pad_ahbl_hready;
input           pad_ahbl_hresp;
input           sysio_xx_halt_req;
output          ahbl_bmu_dbus_acc_err;
output  [31:0]  ahbl_bmu_dbus_data;
output          ahbl_bmu_dbus_grnt;
output          ahbl_bmu_dbus_trans_cmplt;
output          ahbl_bmu_had_acc_err;
output  [31:0]  ahbl_bmu_had_data;
output          ahbl_bmu_had_grnt;
output          ahbl_bmu_had_trans_cmplt;
output          ahbl_bmu_ibus_acc_err;
output  [31:0]  ahbl_bmu_ibus_data;
output          ahbl_bmu_ibus_grnt;
output          ahbl_bmu_ibus_trans_cmplt;
output          ahbl_clk_en;
output  [31:0]  ahbl_pad_haddr;
output  [2 :0]  ahbl_pad_hburst;
output          ahbl_pad_hlock;
output  [3 :0]  ahbl_pad_hprot;
output  [2 :0]  ahbl_pad_hsize;
output  [1 :0]  ahbl_pad_htrans;
output  [31:0]  ahbl_pad_hwdata;
output          ahbl_pad_hwrite;
output          ahbl_sysio_idle;

// &Regs; @25
reg     [2 :0]  ahbLif_cur_state;
reg     [2 :0]  ahbLif_nxt_state;
reg     [1 :0]  lock_cur_state;
reg     [1 :0]  lock_next_state;
reg     [31:0]  req_buf_addr;
reg             req_buf_lock;
reg             req_buf_pmp_deny;
reg     [3 :0]  req_buf_prot;
reg     [1 :0]  req_buf_size;
reg             req_buf_vld;
reg     [31:0]  req_buf_wdata;
reg             req_buf_write;
reg     [2 :0]  req_mask;
reg     [2 :0]  req_sel;

// &Wires; @26
wire            acc_err;
wire            ahbLif_req_idle;
wire            ahbl_bmu_dbus_acc_err;
wire    [31:0]  ahbl_bmu_dbus_data;
wire            ahbl_bmu_dbus_grnt;
wire            ahbl_bmu_dbus_trans_cmplt;
wire            ahbl_bmu_had_acc_err;
wire    [31:0]  ahbl_bmu_had_data;
wire            ahbl_bmu_had_grnt;
wire            ahbl_bmu_had_trans_cmplt;
wire            ahbl_bmu_ibus_acc_err;
wire    [31:0]  ahbl_bmu_ibus_data;
wire            ahbl_bmu_ibus_grnt;
wire            ahbl_bmu_ibus_trans_cmplt;
wire            ahbl_clk_en;
wire            ahbl_gated_clk;
wire    [31:0]  ahbl_pad_haddr;
wire    [2 :0]  ahbl_pad_hburst;
wire            ahbl_pad_hlock;
wire    [3 :0]  ahbl_pad_hprot;
wire    [2 :0]  ahbl_pad_hsize;
wire    [1 :0]  ahbl_pad_htrans;
wire    [31:0]  ahbl_pad_hwdata;
wire            ahbl_pad_hwrite;
wire            ahbl_sysio_idle;
wire            bmu_ahbl_dbus_acc_deny;
wire    [31:0]  bmu_ahbl_dbus_addr;
wire            bmu_ahbl_dbus_lock;
wire            bmu_ahbl_dbus_lrsc;
wire    [3 :0]  bmu_ahbl_dbus_prot;
wire            bmu_ahbl_dbus_req;
wire            bmu_ahbl_dbus_req_dp;
wire    [1 :0]  bmu_ahbl_dbus_size;
wire    [31:0]  bmu_ahbl_dbus_wdata;
wire            bmu_ahbl_dbus_write;
wire            bmu_ahbl_had_acc_deny;
wire    [31:0]  bmu_ahbl_had_addr;
wire    [3 :0]  bmu_ahbl_had_prot;
wire            bmu_ahbl_had_req;
wire            bmu_ahbl_had_req_dp;
wire    [1 :0]  bmu_ahbl_had_size;
wire    [31:0]  bmu_ahbl_had_wdata;
wire            bmu_ahbl_had_write;
wire            bmu_ahbl_ibus_acc_deny;
wire    [31:0]  bmu_ahbl_ibus_addr;
wire    [3 :0]  bmu_ahbl_ibus_prot;
wire            bmu_ahbl_ibus_req;
wire            bmu_ahbl_ibus_req_dp;
wire    [1 :0]  bmu_ahbl_ibus_size;
wire    [31:0]  bus_rdata;
wire            bus_ready;
wire            bus_resp;
wire            clk_en;
wire            cpu_acc_deny;
wire    [31:0]  cpu_addr;
wire            cpu_grant;
wire            cpu_lock;
wire    [3 :0]  cpu_prot;
wire            cpu_req;
wire            cpu_req_gate;
wire    [1 :0]  cpu_size;
wire    [31:0]  cpu_wdata;
wire            cpu_write;
wire            cpurst_b;
wire            dbus_req;
wire            dbus_sel;
wire            had_req;
wire            had_sel;
wire            ibus_req;
wire            ibus_sel;
wire            lock_clr;
wire            lock_cur_idle;
wire            lock_req_vld;
wire            lsu_biu_async_expt_ack;
wire            lsu_xx_flush;
wire            lsu_xx_warm_up;
wire    [31:0]  pad_ahbl_hrdata;
wire            pad_ahbl_hready;
wire            pad_ahbl_hresp;
wire            req_buf_create_en;
wire            req_buf_lock_clr;
wire            req_buf_pop_en;
wire            req_buf_wdata_create_en;
wire    [2 :0]  req_valid;
wire            req_vld;
wire            sysio_xx_halt_req;
wire            trans_cmplt;


parameter DATA_WIDTH = 32;


















parameter IDLE   = 3'b000,
          WFG    = 3'b010,
          WFD    = 3'b001,
          ERROR1 = 3'b110,
          ERROR2 = 3'b111;




always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ahbLif_cur_state[2:0] <= IDLE;
  else if (clk_en)
    ahbLif_cur_state[2:0] <= ahbLif_nxt_state[2:0];
end

// &CombBeg; @64
always @( req_buf_pmp_deny
       or bus_ready
       or ahbLif_cur_state
       or req_buf_vld
       or bus_resp)
begin
case(ahbLif_cur_state)
  IDLE: begin
    if (req_buf_vld)
      ahbLif_nxt_state = (bus_ready | req_buf_pmp_deny) ? WFD : WFG;
    else
      ahbLif_nxt_state = IDLE;
  end
  WFG: begin
    if (bus_ready)
      ahbLif_nxt_state = WFD;
    else
      ahbLif_nxt_state = WFG;
  end
  WFD: begin
    if (bus_resp)
      ahbLif_nxt_state = ERROR1;
    else if (!bus_ready & !req_buf_pmp_deny)
      ahbLif_nxt_state = WFD;
    else
      ahbLif_nxt_state = IDLE;
  end
  ERROR1: begin
    if (bus_ready | !bus_resp)
      ahbLif_nxt_state = ERROR2;
    else
      ahbLif_nxt_state = ERROR1;
  end
  ERROR2:
    ahbLif_nxt_state = IDLE;
  default: ahbLif_nxt_state = IDLE;
endcase
// &CombEnd; @96
end

assign ahbLif_req_idle = (ahbLif_cur_state == IDLE) |
                         (ahbLif_cur_state == WFD) & bus_ready;





// &Force("input","lsu_biu_amo_pmp_deny"); @105
parameter LOCK_IDLE = 2'b00;
parameter LOCK_WFS  = 2'b01;
parameter LOCK_WFC  = 2'b10;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    lock_cur_state[1:0] <= LOCK_IDLE;
  else if (req_buf_vld & req_buf_pmp_deny)
    lock_cur_state[1:0] <= LOCK_IDLE;
  else if (clk_en)
    lock_cur_state[1:0] <= lock_next_state[1:0];
end

assign lock_req_vld = cpu_req & cpu_lock & !cpu_write &
                      cpu_grant;

// &CombBeg; @123
always @( acc_err
       or cpu_grant
       or lock_cur_state
       or cpu_req
       or lsu_biu_async_expt_ack
       or lock_req_vld)
begin
  case(lock_cur_state)
  LOCK_IDLE: begin
    if (lock_req_vld)
      lock_next_state = LOCK_WFC;
    else
      lock_next_state = LOCK_IDLE;
  end








  LOCK_WFC: begin
    if (acc_err | cpu_req & cpu_grant | lsu_biu_async_expt_ack)
      lock_next_state = LOCK_IDLE;
    else
      lock_next_state = LOCK_WFC;
  end
  default: lock_next_state = LOCK_IDLE;
  endcase
// &CombEnd; @147
end

assign lock_cur_idle =  lock_cur_state == LOCK_IDLE;
assign lock_clr  = (lock_cur_state == LOCK_WFC) & (cpu_grant & cpu_req | acc_err | lsu_biu_async_expt_ack) |
                   !lock_cur_idle & lsu_xx_flush |
                    req_buf_vld & req_buf_pmp_deny;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    req_mask[2:0] <= 3'b0;
  else if (lock_req_vld & lock_cur_idle)
    req_mask[2:0] <= ~req_valid[2:0];
  else if (lock_clr)
    req_mask[2:0] <= 3'b0;
end




// &Force("input", "bmu_ahbl_dbus_burst"); &Force("bus", "bmu_ahbl_dbus_burst",2,0); @167
// &Force("input", "bmu_ahbl_ibus_burst"); &Force("bus", "bmu_ahbl_ibus_burst",2,0); @168
// &Force("input", "bmu_ahbl_had_burst");  &Force("bus", "bmu_ahbl_had_burst",2,0); @169
// &Force("input", "bmu_ahbl_dbus_seq"); @170
// &Force("input", "bmu_ahbl_ibus_seq"); @171
// &Force("input", "bmu_ahbl_had_seq"); @172

assign had_req  = bmu_ahbl_had_req  & !req_mask[2];
assign dbus_req = bmu_ahbl_dbus_req & !req_mask[0] & !had_sel;
assign ibus_req = bmu_ahbl_ibus_req & !req_mask[1] & !had_sel & !dbus_sel;

assign cpu_req = ibus_req | dbus_req | had_req;

assign had_sel  = bmu_ahbl_had_req_dp  & !req_mask[2];
assign dbus_sel = bmu_ahbl_dbus_req_dp & !req_mask[0] & !had_sel;
assign ibus_sel = bmu_ahbl_ibus_req_dp & !req_mask[1] & !had_sel & !dbus_sel;

assign req_valid[2:0] = {had_req, ibus_req, dbus_req};

assign cpu_acc_deny     = dbus_sel       & bmu_ahbl_dbus_acc_deny
                        | ibus_sel       & bmu_ahbl_ibus_acc_deny
                        | had_sel        & bmu_ahbl_had_acc_deny;

assign cpu_addr[31:0]   = {32{dbus_sel}} & bmu_ahbl_dbus_addr[31:0]
                        | {32{ibus_sel}} & bmu_ahbl_ibus_addr[31:0]
                        | {32{had_sel}}  & bmu_ahbl_had_addr[31:0];

assign cpu_prot[3:0]    = {4{dbus_sel}}  & bmu_ahbl_dbus_prot[3:0]
                        | {4{ibus_sel}}  & bmu_ahbl_ibus_prot[3:0]
                        | {4{had_sel}}   & bmu_ahbl_had_prot[3:0];

assign cpu_size[1:0]    = {2{dbus_sel}}  & bmu_ahbl_dbus_size[1:0]
                        | {2{ibus_sel}}  & bmu_ahbl_ibus_size[1:0]
                        | {2{had_sel}}   & bmu_ahbl_had_size[1:0];

assign cpu_write        = dbus_sel       & bmu_ahbl_dbus_write
                        | had_sel        & bmu_ahbl_had_write;

assign cpu_wdata[DATA_WIDTH-1:0] = req_sel[0] ? bmu_ahbl_dbus_wdata[DATA_WIDTH-1:0]
                                              : bmu_ahbl_had_wdata[DATA_WIDTH-1:0];

assign cpu_lock         = dbus_sel & bmu_ahbl_dbus_lock & !bmu_ahbl_dbus_lrsc;


assign req_buf_create_en = cpu_req & cpu_grant;
assign req_buf_pop_en    = req_buf_vld & ahbLif_req_idle & clk_en;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_buf_vld <= 1'b0;
  else if (req_buf_create_en)
    req_buf_vld <= 1'b1;
  else if (req_buf_pop_en)
    req_buf_vld <= 1'b0;
end

always@(posedge ahbl_gated_clk)
begin
  if (lsu_xx_warm_up)begin
    req_sel[2:0]       <= 3'b0;
    req_buf_pmp_deny   <= 1'b0;
    req_buf_addr[31:0] <= 32'b0;
    req_buf_prot[3:0]  <= 4'b0;
    req_buf_size[1:0]  <= 2'b0;
    req_buf_write      <= 1'b0;
  end
  else if (req_buf_create_en) begin
    req_sel[2:0]       <= req_valid[2:0];
    req_buf_pmp_deny   <= cpu_acc_deny;
    req_buf_addr[31:0] <= cpu_addr[31:0];
    req_buf_prot[3:0]  <= cpu_prot[3:0];
    req_buf_size[1:0]  <= cpu_size[1:0];
    req_buf_write      <= cpu_write;
  end
end

assign req_buf_lock_clr = req_buf_pop_en & (bus_ready | req_buf_pmp_deny) |
                          ahbLif_cur_state==WFG & bus_ready & clk_en;

always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_buf_lock       <= 1'b0;
  else if (req_buf_create_en)
    req_buf_lock       <= cpu_lock;
  else if (req_buf_lock_clr & lock_cur_idle)
    req_buf_lock       <= 1'b0;
end

assign req_buf_wdata_create_en = req_buf_vld & bus_ready & clk_en;

always@(posedge ahbl_gated_clk)
begin
  if (lsu_xx_warm_up)
    req_buf_wdata[DATA_WIDTH-1:0]<= {DATA_WIDTH{1'b0}};
  else if (req_buf_wdata_create_en)
    req_buf_wdata[DATA_WIDTH-1:0]<= cpu_wdata[DATA_WIDTH-1:0];
end

assign req_vld = req_buf_vld & !req_buf_pmp_deny;





assign ahbl_pad_htrans[1] = req_vld & (ahbLif_cur_state==IDLE) |
                            (ahbLif_cur_state==WFG);

assign ahbl_pad_htrans[0] = 1'b0;

assign ahbl_pad_haddr[31:0] = req_buf_addr[31:0];
assign ahbl_pad_hwrite      = req_buf_write;
assign ahbl_pad_hsize[2:0]  = {1'b0, req_buf_size[1:0]};
assign ahbl_pad_hprot[3:0]  = req_buf_prot[3:0];
assign ahbl_pad_hburst[2:0] = 3'b000;
assign ahbl_pad_hlock       = req_buf_lock;
assign ahbl_pad_hwdata[DATA_WIDTH-1:0] = req_buf_wdata[DATA_WIDTH-1:0];

assign bus_ready        = pad_ahbl_hready;
assign bus_resp         = pad_ahbl_hresp;
assign bus_rdata[DATA_WIDTH-1:0] = pad_ahbl_hrdata[DATA_WIDTH-1:0];




assign cpu_grant  = !req_buf_vld & ahbLif_req_idle & clk_en & !sysio_xx_halt_req;


assign trans_cmplt  = clk_en &
                           ((ahbLif_cur_state==WFD) &&  (bus_ready && !bus_resp | req_buf_vld & req_buf_pmp_deny)
                        || (ahbLif_cur_state==ERROR2)); //error vld


assign acc_err = (ahbLif_cur_state==ERROR2) & clk_en;




assign ahbl_bmu_ibus_grnt        = ibus_sel   & cpu_grant;
assign ahbl_bmu_ibus_trans_cmplt = req_sel[1] & trans_cmplt;
assign ahbl_bmu_ibus_acc_err     = req_sel[1] & acc_err;
assign ahbl_bmu_ibus_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];

assign ahbl_bmu_dbus_grnt        = dbus_sel   & cpu_grant;
assign ahbl_bmu_dbus_trans_cmplt = req_sel[0] & trans_cmplt;
assign ahbl_bmu_dbus_acc_err     = req_sel[0] & acc_err;
assign ahbl_bmu_dbus_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];

assign ahbl_bmu_had_grnt        = had_sel    & cpu_grant;
assign ahbl_bmu_had_trans_cmplt = req_sel[2] & trans_cmplt;
assign ahbl_bmu_had_acc_err     = req_sel[2] & acc_err;
assign ahbl_bmu_had_data[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];



assign cpu_req_gate    = bmu_ahbl_had_req_dp  |
                         bmu_ahbl_dbus_req_dp |
                         bmu_ahbl_ibus_req_dp;
assign ahbl_clk_en     = !(ahbLif_cur_state==IDLE) | cpu_req_gate | req_buf_vld | !lock_cur_idle | lsu_xx_warm_up;
assign ahbl_sysio_idle = (ahbLif_cur_state==IDLE) & !req_buf_vld | lsu_xx_warm_up;

//     &Force("nonport",   "req_grnt_reg"); @444
//     &Force("output",    "ahbl_bmu_ibus_grnt"); @445
//     &Force("output",    "ahbl_bmu_dbus_grnt"); @446
//     &Force("nonport",   "had_dbus_ibus_hold"); @447
//     &Force("nonport",   "had_ibus_hold"); @448
//     &Force("nonport",   "had_dbus_hold"); @449
//     &Force("nonport",   "ibus_req_reg"); @450


// &ModuleEnd; @454
endmodule

























// &ModuleBeg; @24
module pa_bmu_bus_if(
  bmu_clk,
  bmu_dahbl_xx_acc_deny,
  bmu_dahbl_xx_addr,
  bmu_dahbl_xx_burst,
  bmu_dahbl_xx_prot,
  bmu_dahbl_xx_req,
  bmu_dahbl_xx_req_dp,
  bmu_dahbl_xx_seq,
  bmu_dahbl_xx_size,
  bmu_dahbl_xx_wdata,
  bmu_dahbl_xx_write,
  bmu_iahbl_xx_acc_deny,
  bmu_iahbl_xx_addr,
  bmu_iahbl_xx_burst,
  bmu_iahbl_xx_prot,
  bmu_iahbl_xx_req,
  bmu_iahbl_xx_req_dp,
  bmu_iahbl_xx_seq,
  bmu_iahbl_xx_size,
  bmu_iahbl_xx_wdata,
  bmu_iahbl_xx_write,
  bmu_sahbl_xx_acc_deny,
  bmu_sahbl_xx_addr,
  bmu_sahbl_xx_burst,
  bmu_sahbl_xx_prot,
  bmu_sahbl_xx_req,
  bmu_sahbl_xx_req_dp,
  bmu_sahbl_xx_seq,
  bmu_sahbl_xx_size,
  bmu_sahbl_xx_wdata,
  bmu_sahbl_xx_write,
  bmu_tcipif_xx_acc_deny,
  bmu_tcipif_xx_addr,
  bmu_tcipif_xx_req,
  bmu_tcipif_xx_req_dp,
  bmu_tcipif_xx_size,
  bmu_tcipif_xx_supv_mode,
  bmu_tcipif_xx_wdata,
  bmu_tcipif_xx_write,
  bmu_tt_acc_err,
  bmu_tt_clk_en,
  bmu_tt_grant,
  bmu_tt_rdata,
  bmu_tt_trans_cmplt,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbl_bmu_xx_acc_err,
  dahbl_bmu_xx_data,
  dahbl_bmu_xx_grnt,
  dahbl_bmu_xx_trans_cmplt,
  iahbl_bmu_xx_acc_err,
  iahbl_bmu_xx_data,
  iahbl_bmu_xx_grnt,
  iahbl_bmu_xx_trans_cmplt,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  sahbl_bmu_xx_acc_err,
  sahbl_bmu_xx_data,
  sahbl_bmu_xx_grnt,
  sahbl_bmu_xx_trans_cmplt,
  tcipif_bmu_xx_acc_err,
  tcipif_bmu_xx_data,
  tcipif_bmu_xx_grnt,
  tcipif_bmu_xx_trans_cmplt,
  tt_bmu_acc_deny,
  tt_bmu_addr,
  tt_bmu_burst,
  tt_bmu_data_req,
  tt_bmu_prot,
  tt_bmu_req,
  tt_bmu_seq,
  tt_bmu_size,
  tt_bmu_wdata,
  tt_bmu_write
);

// &Ports; @25
input           bmu_clk;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbl_bmu_xx_acc_err;
input   [31:0]  dahbl_bmu_xx_data;
input           dahbl_bmu_xx_grnt;
input           dahbl_bmu_xx_trans_cmplt;
input           iahbl_bmu_xx_acc_err;
input   [31:0]  iahbl_bmu_xx_data;
input           iahbl_bmu_xx_grnt;
input           iahbl_bmu_xx_trans_cmplt;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input           sahbl_bmu_xx_acc_err;
input   [31:0]  sahbl_bmu_xx_data;
input           sahbl_bmu_xx_grnt;
input           sahbl_bmu_xx_trans_cmplt;
input           tcipif_bmu_xx_acc_err;
input   [31:0]  tcipif_bmu_xx_data;
input           tcipif_bmu_xx_grnt;
input           tcipif_bmu_xx_trans_cmplt;
input           tt_bmu_acc_deny;
input   [31:0]  tt_bmu_addr;
input   [2 :0]  tt_bmu_burst;
input           tt_bmu_data_req;
input   [3 :0]  tt_bmu_prot;
input           tt_bmu_req;
input           tt_bmu_seq;
input   [1 :0]  tt_bmu_size;
input   [31:0]  tt_bmu_wdata;
input           tt_bmu_write;
output          bmu_dahbl_xx_acc_deny;
output  [31:0]  bmu_dahbl_xx_addr;
output  [2 :0]  bmu_dahbl_xx_burst;
output  [3 :0]  bmu_dahbl_xx_prot;
output          bmu_dahbl_xx_req;
output          bmu_dahbl_xx_req_dp;
output          bmu_dahbl_xx_seq;
output  [1 :0]  bmu_dahbl_xx_size;
output  [31:0]  bmu_dahbl_xx_wdata;
output          bmu_dahbl_xx_write;
output          bmu_iahbl_xx_acc_deny;
output  [31:0]  bmu_iahbl_xx_addr;
output  [2 :0]  bmu_iahbl_xx_burst;
output  [3 :0]  bmu_iahbl_xx_prot;
output          bmu_iahbl_xx_req;
output          bmu_iahbl_xx_req_dp;
output          bmu_iahbl_xx_seq;
output  [1 :0]  bmu_iahbl_xx_size;
output  [31:0]  bmu_iahbl_xx_wdata;
output          bmu_iahbl_xx_write;
output          bmu_sahbl_xx_acc_deny;
output  [31:0]  bmu_sahbl_xx_addr;
output  [2 :0]  bmu_sahbl_xx_burst;
output  [3 :0]  bmu_sahbl_xx_prot;
output          bmu_sahbl_xx_req;
output          bmu_sahbl_xx_req_dp;
output          bmu_sahbl_xx_seq;
output  [1 :0]  bmu_sahbl_xx_size;
output  [31:0]  bmu_sahbl_xx_wdata;
output          bmu_sahbl_xx_write;
output          bmu_tcipif_xx_acc_deny;
output  [31:0]  bmu_tcipif_xx_addr;
output          bmu_tcipif_xx_req;
output          bmu_tcipif_xx_req_dp;
output  [1 :0]  bmu_tcipif_xx_size;
output          bmu_tcipif_xx_supv_mode;
output  [31:0]  bmu_tcipif_xx_wdata;
output          bmu_tcipif_xx_write;
output          bmu_tt_acc_err;
output          bmu_tt_clk_en;
output          bmu_tt_grant;
output  [31:0]  bmu_tt_rdata;
output          bmu_tt_trans_cmplt;

// &Regs; @26
reg     [1 :0]  bmu_cur_state;
reg     [1 :0]  bmu_next_state;
reg     [3 :0]  bus_sel_f;

// &Wires; @27
wire            bmu_clk;
wire            bmu_dahbl_xx_acc_deny;
wire    [31:0]  bmu_dahbl_xx_addr;
wire    [2 :0]  bmu_dahbl_xx_burst;
wire    [3 :0]  bmu_dahbl_xx_prot;
wire            bmu_dahbl_xx_req;
wire            bmu_dahbl_xx_req_dp;
wire            bmu_dahbl_xx_seq;
wire    [1 :0]  bmu_dahbl_xx_size;
wire    [31:0]  bmu_dahbl_xx_wdata;
wire            bmu_dahbl_xx_write;
wire            bmu_iahbl_xx_acc_deny;
wire    [31:0]  bmu_iahbl_xx_addr;
wire    [2 :0]  bmu_iahbl_xx_burst;
wire    [3 :0]  bmu_iahbl_xx_prot;
wire            bmu_iahbl_xx_req;
wire            bmu_iahbl_xx_req_dp;
wire            bmu_iahbl_xx_seq;
wire    [1 :0]  bmu_iahbl_xx_size;
wire    [31:0]  bmu_iahbl_xx_wdata;
wire            bmu_iahbl_xx_write;
wire            bmu_sahbl_xx_acc_deny;
wire    [31:0]  bmu_sahbl_xx_addr;
wire    [2 :0]  bmu_sahbl_xx_burst;
wire    [3 :0]  bmu_sahbl_xx_prot;
wire            bmu_sahbl_xx_req;
wire            bmu_sahbl_xx_req_dp;
wire            bmu_sahbl_xx_seq;
wire    [1 :0]  bmu_sahbl_xx_size;
wire    [31:0]  bmu_sahbl_xx_wdata;
wire            bmu_sahbl_xx_write;
wire            bmu_tcipif_xx_acc_deny;
wire    [31:0]  bmu_tcipif_xx_addr;
wire            bmu_tcipif_xx_req;
wire            bmu_tcipif_xx_req_dp;
wire    [1 :0]  bmu_tcipif_xx_size;
wire            bmu_tcipif_xx_supv_mode;
wire    [31:0]  bmu_tcipif_xx_wdata;
wire            bmu_tcipif_xx_write;
wire            bmu_tt_acc_err;
wire            bmu_tt_clk_en;
wire            bmu_tt_grant;
wire    [31:0]  bmu_tt_rdata;
wire            bmu_tt_trans_cmplt;
wire            bus_acc_err;
wire            bus_cmplt;
wire            bus_grant;
wire    [3 :0]  bus_sel;
wire            bus_sel_same;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbl_bmu_xx_acc_err;
wire    [31:0]  dahbl_bmu_xx_data;
wire            dahbl_bmu_xx_grnt;
wire            dahbl_bmu_xx_trans_cmplt;
wire            dahbl_hit;
wire            dahbl_sel_pred;
wire            iahbl_bmu_xx_acc_err;
wire    [31:0]  iahbl_bmu_xx_data;
wire            iahbl_bmu_xx_grnt;
wire            iahbl_bmu_xx_trans_cmplt;
wire            iahbl_hit;
wire            iahbl_sel_pred;
wire            new_req_en;
wire    [11:0]  pad_bmu_dahbl_base;
wire    [11:0]  pad_bmu_dahbl_mask;
wire    [11:0]  pad_bmu_iahbl_base;
wire    [11:0]  pad_bmu_iahbl_mask;
wire            req_en;
wire            sahbl_bmu_xx_acc_err;
wire    [31:0]  sahbl_bmu_xx_data;
wire            sahbl_bmu_xx_grnt;
wire            sahbl_bmu_xx_trans_cmplt;
wire            sahbl_hit;
wire            sahbl_sel_pred;
wire            tcip_sel_pred;
wire    [15:0]  tcipif_addr_low;
wire            tcipif_bmu_xx_acc_err;
wire    [31:0]  tcipif_bmu_xx_data;
wire            tcipif_bmu_xx_grnt;
wire            tcipif_bmu_xx_trans_cmplt;
wire            tcipif_hit;
wire            tt_bmu_acc_deny;
wire    [31:0]  tt_bmu_addr;
wire    [2 :0]  tt_bmu_burst;
wire            tt_bmu_data_req;
wire    [3 :0]  tt_bmu_prot;
wire            tt_bmu_req;
wire            tt_bmu_seq;
wire    [1 :0]  tt_bmu_size;
wire    [31:0]  tt_bmu_wdata;
wire            tt_bmu_write;


parameter TCIPIF_BASE = 4'b1110;




assign iahbl_hit = ((tt_bmu_addr[31:20] & pad_bmu_iahbl_mask[11:0]) == pad_bmu_iahbl_base[11:0])
                 & ~tcipif_hit & ~dahbl_hit;

assign dahbl_hit = ((tt_bmu_addr[31:20] & pad_bmu_dahbl_mask[11:0]) == pad_bmu_dahbl_base[11:0])
                 & ~tcipif_hit;

// &Force("bus","tt_bmu_addr",31,0); @49
assign tcipif_hit = (tt_bmu_addr[31:28] == TCIPIF_BASE);

assign sahbl_hit = ~dahbl_hit & ~iahbl_hit & ~tcipif_hit;

assign bus_sel[3:0] = {sahbl_hit,tcipif_hit,iahbl_hit,dahbl_hit};




parameter REQ = 2'b00;
parameter WFG = 2'b01;
parameter WFD = 2'b10;

always @(posedge bmu_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bmu_cur_state[1:0] <= REQ;
  else
    bmu_cur_state[1:0] <= bmu_next_state[1:0];
end
// &CombBeg; @73
always @( bus_grant
       or bus_cmplt
       or bus_acc_err
       or bus_sel_same
       or tt_bmu_req
       or bmu_cur_state)
begin
  case(bmu_cur_state)
    REQ: begin
      if (tt_bmu_req)
        bmu_next_state = bus_grant ? WFD : WFG;
      else
        bmu_next_state = REQ;
    end
    WFG:begin
      if (bus_grant)
        bmu_next_state = WFD;
      else
        bmu_next_state = WFG;
    end
    WFD: begin
      if (bus_cmplt)begin
        if (tt_bmu_req & bus_sel_same & !bus_acc_err)
          bmu_next_state = bus_grant ? WFD : WFG;
        else
          bmu_next_state = REQ;
      end
      else
        bmu_next_state = WFD;
    end
    default: bmu_next_state = REQ;
  endcase
// &CombEnd; @99
end

assign req_en = (bmu_cur_state == REQ) |
                (bmu_cur_state == WFG) |
                (bmu_cur_state == WFD) & bus_sel_same;

assign new_req_en = (bmu_cur_state == REQ);

always @(posedge bmu_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bus_sel_f[3:0] <= 4'b0;
  else if (tt_bmu_req & new_req_en)
    bus_sel_f[3:0] <= bus_sel[3:0];
end
assign bus_sel_same = (bus_sel_f[3:0] == bus_sel[3:0]);

assign sahbl_sel_pred = bus_sel_f[3];
assign dahbl_sel_pred = bus_sel_f[0];
assign iahbl_sel_pred = bus_sel_f[1];
assign tcip_sel_pred  = bus_sel_f[2];




assign bus_grant   = iahbl_hit & iahbl_bmu_xx_grnt  |
                     dahbl_hit & dahbl_bmu_xx_grnt  |
                     tcipif_hit & tcipif_bmu_xx_grnt |
                     sahbl_hit & sahbl_bmu_xx_grnt;
assign bus_cmplt   = iahbl_bmu_xx_trans_cmplt  |
                     dahbl_bmu_xx_trans_cmplt  |
                     tcipif_bmu_xx_trans_cmplt |
                     sahbl_bmu_xx_trans_cmplt;
assign bus_acc_err = iahbl_bmu_xx_acc_err |
                     dahbl_bmu_xx_acc_err |
                     tcipif_bmu_xx_acc_err|
                     sahbl_bmu_xx_acc_err;

assign bmu_tt_grant       = bus_grant & req_en;
assign bmu_tt_trans_cmplt = bus_cmplt;
assign bmu_tt_acc_err     = bus_acc_err;
assign bmu_tt_rdata[31:0] = ({32{bus_sel_f[0]}} & dahbl_bmu_xx_data[31:0])  |
                            ({32{bus_sel_f[1]}} & iahbl_bmu_xx_data[31:0])  |
                            ({32{bus_sel_f[2]}} & tcipif_bmu_xx_data[31:0]) |
                            ({32{bus_sel_f[3]}} & sahbl_bmu_xx_data[31:0]);





assign bmu_iahbl_xx_req         = tt_bmu_req & iahbl_hit & req_en & iahbl_sel_pred;
assign bmu_iahbl_xx_req_dp      = tt_bmu_data_req & iahbl_sel_pred;
assign bmu_iahbl_xx_acc_deny    = tt_bmu_acc_deny;
assign bmu_iahbl_xx_size[1:0]   = tt_bmu_size[1:0];
assign bmu_iahbl_xx_addr[31:0]  = tt_bmu_addr[31:0];
assign bmu_iahbl_xx_prot[3:0]   = tt_bmu_prot[3:0];
assign bmu_iahbl_xx_write       = tt_bmu_write;
assign bmu_iahbl_xx_wdata[31:0] = tt_bmu_wdata[31:0];
assign bmu_iahbl_xx_seq         = tt_bmu_seq;
assign bmu_iahbl_xx_burst[2:0]  = tt_bmu_burst[2:0];


assign bmu_dahbl_xx_req         = tt_bmu_req & dahbl_hit & req_en & dahbl_sel_pred;
assign bmu_dahbl_xx_req_dp      = tt_bmu_data_req & dahbl_sel_pred;
assign bmu_dahbl_xx_acc_deny    = tt_bmu_acc_deny;
assign bmu_dahbl_xx_size[1:0]   = tt_bmu_size[1:0];
assign bmu_dahbl_xx_addr[31:0]  = tt_bmu_addr[31:0];
assign bmu_dahbl_xx_prot[3:0]   = tt_bmu_prot[3:0];
assign bmu_dahbl_xx_write       = tt_bmu_write;
assign bmu_dahbl_xx_wdata[31:0] = tt_bmu_wdata[31:0];
assign bmu_dahbl_xx_seq         = tt_bmu_seq;
assign bmu_dahbl_xx_burst[2:0]  = tt_bmu_burst[2:0];


assign bmu_tcipif_xx_req         = tt_bmu_req & req_en & tcipif_hit & tcip_sel_pred;
assign bmu_tcipif_xx_req_dp      = tt_bmu_data_req & tcip_sel_pred;
assign bmu_tcipif_xx_acc_deny    = tt_bmu_acc_deny;
assign bmu_tcipif_xx_write       = tt_bmu_write;
assign bmu_tcipif_xx_size[1:0]   = tt_bmu_size[1:0];
assign bmu_tcipif_xx_supv_mode   = cp0_yy_mach_mode;
assign bmu_tcipif_xx_wdata[31:0] = tt_bmu_wdata[31:0];
assign bmu_tcipif_xx_addr[31:0]  = {tt_bmu_addr[31:16], tcipif_addr_low[15:0]};
assign tcipif_addr_low[15:0]       = {16{tcipif_hit}} & tt_bmu_addr[15:0];


assign bmu_sahbl_xx_req         = tt_bmu_req & sahbl_hit & req_en & sahbl_sel_pred;
assign bmu_sahbl_xx_req_dp      = tt_bmu_data_req & sahbl_sel_pred;
assign bmu_sahbl_xx_acc_deny    = tt_bmu_acc_deny;
assign bmu_sahbl_xx_size[1:0]   = tt_bmu_size[1:0];
assign bmu_sahbl_xx_addr[31:0]  = tt_bmu_addr[31:0];
assign bmu_sahbl_xx_prot[3:0]   = tt_bmu_prot[3:0];
assign bmu_sahbl_xx_write       = tt_bmu_write;
assign bmu_sahbl_xx_wdata[31:0] = tt_bmu_wdata[31:0];
assign bmu_sahbl_xx_seq         = tt_bmu_seq;
assign bmu_sahbl_xx_burst[2:0]  = tt_bmu_burst[2:0];

assign bmu_tt_clk_en = tt_bmu_data_req | ~(bmu_cur_state == REQ);


// &ModuleEnd; @229
endmodule























// &ModuleBeg; @21
module pa_bmu_dbus_if(
  bmu_clk,
  bmu_dahbl_dbus_acc_deny,
  bmu_dahbl_dbus_addr,
  bmu_dahbl_dbus_burst,
  bmu_dahbl_dbus_lock,
  bmu_dahbl_dbus_lrsc,
  bmu_dahbl_dbus_prot,
  bmu_dahbl_dbus_req,
  bmu_dahbl_dbus_req_dp,
  bmu_dahbl_dbus_seq,
  bmu_dahbl_dbus_size,
  bmu_dahbl_dbus_wdata,
  bmu_dahbl_dbus_write,
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_burst,
  bmu_iahbl_dbus_lock,
  bmu_iahbl_dbus_lrsc,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_dp,
  bmu_iahbl_dbus_seq,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_lsu_acc_err,
  bmu_lsu_clk_en,
  bmu_lsu_grant,
  bmu_lsu_rdata,
  bmu_lsu_trans_cmplt,
  bmu_sahbl_dbus_acc_deny,
  bmu_sahbl_dbus_addr,
  bmu_sahbl_dbus_burst,
  bmu_sahbl_dbus_lock,
  bmu_sahbl_dbus_lrsc,
  bmu_sahbl_dbus_prot,
  bmu_sahbl_dbus_req,
  bmu_sahbl_dbus_req_dp,
  bmu_sahbl_dbus_seq,
  bmu_sahbl_dbus_size,
  bmu_sahbl_dbus_wdata,
  bmu_sahbl_dbus_write,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_req_dp,
  bmu_tcipif_dbus_size,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbl_bmu_dbus_acc_err,
  dahbl_bmu_dbus_data,
  dahbl_bmu_dbus_grnt,
  dahbl_bmu_dbus_trans_cmplt,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  lsu_bmu_acc_deny,
  lsu_bmu_addr,
  lsu_bmu_burst,
  lsu_bmu_lock,
  lsu_bmu_lrsc,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_dp,
  lsu_bmu_seq,
  lsu_bmu_size,
  lsu_bmu_wdata,
  lsu_bmu_write,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  rtu_yy_xx_async_flush,
  sahbl_bmu_dbus_acc_err,
  sahbl_bmu_dbus_data,
  sahbl_bmu_dbus_grnt,
  sahbl_bmu_dbus_trans_cmplt,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt
);

// &Ports; @22
input           bmu_clk;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbl_bmu_dbus_acc_err;
input   [31:0]  dahbl_bmu_dbus_data;
input           dahbl_bmu_dbus_grnt;
input           dahbl_bmu_dbus_trans_cmplt;
input           iahbl_bmu_dbus_acc_err;
input   [31:0]  iahbl_bmu_dbus_data;
input           iahbl_bmu_dbus_grnt;
input           iahbl_bmu_dbus_trans_cmplt;
input           lsu_bmu_acc_deny;
input   [31:0]  lsu_bmu_addr;
input   [2 :0]  lsu_bmu_burst;
input           lsu_bmu_lock;
input           lsu_bmu_lrsc;
input   [3 :0]  lsu_bmu_prot;
input           lsu_bmu_req;
input           lsu_bmu_req_dp;
input           lsu_bmu_seq;
input   [1 :0]  lsu_bmu_size;
input   [31:0]  lsu_bmu_wdata;
input           lsu_bmu_write;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input           rtu_yy_xx_async_flush;
input           sahbl_bmu_dbus_acc_err;
input   [31:0]  sahbl_bmu_dbus_data;
input           sahbl_bmu_dbus_grnt;
input           sahbl_bmu_dbus_trans_cmplt;
input           tcipif_bmu_dbus_acc_err;
input   [31:0]  tcipif_bmu_dbus_data;
input           tcipif_bmu_dbus_grnt;
input           tcipif_bmu_dbus_trans_cmplt;
output          bmu_dahbl_dbus_acc_deny;
output  [31:0]  bmu_dahbl_dbus_addr;
output  [2 :0]  bmu_dahbl_dbus_burst;
output          bmu_dahbl_dbus_lock;
output          bmu_dahbl_dbus_lrsc;
output  [3 :0]  bmu_dahbl_dbus_prot;
output          bmu_dahbl_dbus_req;
output          bmu_dahbl_dbus_req_dp;
output          bmu_dahbl_dbus_seq;
output  [1 :0]  bmu_dahbl_dbus_size;
output  [31:0]  bmu_dahbl_dbus_wdata;
output          bmu_dahbl_dbus_write;
output          bmu_iahbl_dbus_acc_deny;
output  [31:0]  bmu_iahbl_dbus_addr;
output  [2 :0]  bmu_iahbl_dbus_burst;
output          bmu_iahbl_dbus_lock;
output          bmu_iahbl_dbus_lrsc;
output  [3 :0]  bmu_iahbl_dbus_prot;
output          bmu_iahbl_dbus_req;
output          bmu_iahbl_dbus_req_dp;
output          bmu_iahbl_dbus_seq;
output  [1 :0]  bmu_iahbl_dbus_size;
output  [31:0]  bmu_iahbl_dbus_wdata;
output          bmu_iahbl_dbus_write;
output          bmu_lsu_acc_err;
output          bmu_lsu_clk_en;
output          bmu_lsu_grant;
output  [31:0]  bmu_lsu_rdata;
output          bmu_lsu_trans_cmplt;
output          bmu_sahbl_dbus_acc_deny;
output  [31:0]  bmu_sahbl_dbus_addr;
output  [2 :0]  bmu_sahbl_dbus_burst;
output          bmu_sahbl_dbus_lock;
output          bmu_sahbl_dbus_lrsc;
output  [3 :0]  bmu_sahbl_dbus_prot;
output          bmu_sahbl_dbus_req;
output          bmu_sahbl_dbus_req_dp;
output          bmu_sahbl_dbus_seq;
output  [1 :0]  bmu_sahbl_dbus_size;
output  [31:0]  bmu_sahbl_dbus_wdata;
output          bmu_sahbl_dbus_write;
output          bmu_tcipif_dbus_acc_deny;
output  [31:0]  bmu_tcipif_dbus_addr;
output          bmu_tcipif_dbus_req;
output          bmu_tcipif_dbus_req_dp;
output  [1 :0]  bmu_tcipif_dbus_size;
output          bmu_tcipif_dbus_supv_mode;
output  [31:0]  bmu_tcipif_dbus_wdata;
output          bmu_tcipif_dbus_write;

// &Regs; @23
reg     [1 :0]  bmu_cur_state;
reg     [1 :0]  bmu_next_state;
reg     [3 :0]  bus_sel_f;

// &Wires; @24
wire            bmu_clk;
wire            bmu_dahbl_dbus_acc_deny;
wire    [31:0]  bmu_dahbl_dbus_addr;
wire    [2 :0]  bmu_dahbl_dbus_burst;
wire            bmu_dahbl_dbus_lock;
wire            bmu_dahbl_dbus_lrsc;
wire    [3 :0]  bmu_dahbl_dbus_prot;
wire            bmu_dahbl_dbus_req;
wire            bmu_dahbl_dbus_req_dp;
wire            bmu_dahbl_dbus_seq;
wire    [1 :0]  bmu_dahbl_dbus_size;
wire    [31:0]  bmu_dahbl_dbus_wdata;
wire            bmu_dahbl_dbus_write;
wire            bmu_iahbl_dbus_acc_deny;
wire    [31:0]  bmu_iahbl_dbus_addr;
wire    [2 :0]  bmu_iahbl_dbus_burst;
wire            bmu_iahbl_dbus_lock;
wire            bmu_iahbl_dbus_lrsc;
wire    [3 :0]  bmu_iahbl_dbus_prot;
wire            bmu_iahbl_dbus_req;
wire            bmu_iahbl_dbus_req_dp;
wire            bmu_iahbl_dbus_seq;
wire    [1 :0]  bmu_iahbl_dbus_size;
wire    [31:0]  bmu_iahbl_dbus_wdata;
wire            bmu_iahbl_dbus_write;
wire            bmu_lsu_acc_err;
wire            bmu_lsu_clk_en;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire            bmu_req_vld;
wire            bmu_sahbl_dbus_acc_deny;
wire    [31:0]  bmu_sahbl_dbus_addr;
wire    [2 :0]  bmu_sahbl_dbus_burst;
wire            bmu_sahbl_dbus_lock;
wire            bmu_sahbl_dbus_lrsc;
wire    [3 :0]  bmu_sahbl_dbus_prot;
wire            bmu_sahbl_dbus_req;
wire            bmu_sahbl_dbus_req_dp;
wire            bmu_sahbl_dbus_seq;
wire    [1 :0]  bmu_sahbl_dbus_size;
wire    [31:0]  bmu_sahbl_dbus_wdata;
wire            bmu_sahbl_dbus_write;
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire    [3 :0]  bus_sel;
wire            bus_sel_same;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbl_bmu_dbus_acc_err;
wire    [31:0]  dahbl_bmu_dbus_data;
wire            dahbl_bmu_dbus_grnt;
wire            dahbl_bmu_dbus_trans_cmplt;
wire            dahbl_hit;
wire            dahbl_sel_pred;
wire            dbus_acc_err;
wire            dbus_cmplt;
wire            dbus_grant;
wire            iahbl_bmu_dbus_acc_err;
wire    [31:0]  iahbl_bmu_dbus_data;
wire            iahbl_bmu_dbus_grnt;
wire            iahbl_bmu_dbus_trans_cmplt;
wire            iahbl_hit;
wire            iahbl_sel_pred;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire            new_req_en;
wire    [11:0]  pad_bmu_dahbl_base;
wire    [11:0]  pad_bmu_dahbl_mask;
wire    [11:0]  pad_bmu_iahbl_base;
wire    [11:0]  pad_bmu_iahbl_mask;
wire            req_en;
wire            rtu_yy_xx_async_flush;
wire            sahbl_bmu_dbus_acc_err;
wire    [31:0]  sahbl_bmu_dbus_data;
wire            sahbl_bmu_dbus_grnt;
wire            sahbl_bmu_dbus_trans_cmplt;
wire            sahbl_hit;
wire            sahbl_sel_pred;
wire            tcip_sel_pred;
wire    [15:0]  tcipif_addr_low;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_hit;


parameter TCIPIF_BASE = 4'b1110;




assign iahbl_hit = ((lsu_bmu_addr[31:20] & pad_bmu_iahbl_mask[11:0]) == pad_bmu_iahbl_base[11:0])
                 & ~tcipif_hit & ~dahbl_hit;

assign dahbl_hit = ((lsu_bmu_addr[31:20] & pad_bmu_dahbl_mask[11:0]) == pad_bmu_dahbl_base[11:0])
                 & ~tcipif_hit;

assign tcipif_hit = (lsu_bmu_addr[31:28] == TCIPIF_BASE);

assign sahbl_hit = ~dahbl_hit & ~iahbl_hit & ~tcipif_hit;

assign bus_sel[3:0] = {sahbl_hit,tcipif_hit,iahbl_hit,dahbl_hit};




parameter REQ  = 2'b00;
parameter WFG  = 2'b11;
parameter WFD  = 2'b01;

always @(posedge bmu_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bmu_cur_state[1:0] <= REQ;
  else if (rtu_yy_xx_async_flush)
    bmu_cur_state[1:0] <= REQ;
  else
    bmu_cur_state[1:0] <= bmu_next_state[1:0];
end

assign bmu_req_vld = lsu_bmu_req;

// &CombBeg; @74
always @( dbus_grant
       or dbus_cmplt
       or dbus_acc_err
       or bus_sel_same
       or bmu_cur_state
       or bmu_req_vld)
begin
  case(bmu_cur_state)
    REQ: begin
      if (bmu_req_vld)
        bmu_next_state = dbus_grant ? WFD : WFG;
      else
        bmu_next_state = REQ;
    end
    WFG:begin
      if (dbus_grant)
        bmu_next_state = WFD;
      else
        bmu_next_state = WFG;
    end
    WFD: begin
      if (dbus_cmplt)begin
        if (bmu_req_vld & bus_sel_same & !dbus_acc_err)
          bmu_next_state = dbus_grant ? WFD : WFG;
        else
          bmu_next_state = REQ;
      end
      else
        bmu_next_state = WFD;
    end
    default: bmu_next_state = REQ;
  endcase
// &CombEnd; @100
end

assign req_en = (bmu_cur_state == REQ) |
                (bmu_cur_state == WFG) |
                (bmu_cur_state == WFD) & bus_sel_same;

assign new_req_en = (bmu_cur_state == REQ);

always @(posedge bmu_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bus_sel_f[3:0] <= 4'b0;
  else if (bmu_req_vld & new_req_en)
    bus_sel_f[3:0] <= bus_sel[3:0];
end

assign bus_sel_same = (bus_sel_f[3:0] == bus_sel[3:0]);

assign sahbl_sel_pred = bus_sel_f[3];
assign dahbl_sel_pred = bus_sel_f[0];
assign iahbl_sel_pred = bus_sel_f[1];
assign tcip_sel_pred  = bus_sel_f[2];





assign dbus_grant   = dahbl_hit & dahbl_bmu_dbus_grnt  |
                      iahbl_hit & iahbl_bmu_dbus_grnt  |
                      tcipif_hit & tcipif_bmu_dbus_grnt |
                      sahbl_hit & sahbl_bmu_dbus_grnt;
assign dbus_cmplt   = dahbl_bmu_dbus_trans_cmplt  |
                      iahbl_bmu_dbus_trans_cmplt  |
                      tcipif_bmu_dbus_trans_cmplt |
                      sahbl_bmu_dbus_trans_cmplt;
assign dbus_acc_err = dahbl_bmu_dbus_acc_err  |
                      iahbl_bmu_dbus_acc_err  |
                      tcipif_bmu_dbus_acc_err |
                      sahbl_bmu_dbus_acc_err;

assign bmu_lsu_grant       = dbus_grant & req_en;
assign bmu_lsu_trans_cmplt = dbus_cmplt;
assign bmu_lsu_acc_err     = dbus_acc_err;
assign bmu_lsu_rdata[31:0] = ({32{bus_sel_f[0]}} & dahbl_bmu_dbus_data[31:0])  |
                             ({32{bus_sel_f[1]}} & iahbl_bmu_dbus_data[31:0])  |
                             ({32{bus_sel_f[2]}} & tcipif_bmu_dbus_data[31:0]) |
                             ({32{bus_sel_f[3]}} & sahbl_bmu_dbus_data[31:0]);





assign bmu_iahbl_dbus_req         = lsu_bmu_req & req_en & iahbl_hit & iahbl_sel_pred;
assign bmu_iahbl_dbus_req_dp      = lsu_bmu_req_dp & iahbl_sel_pred;
assign bmu_iahbl_dbus_addr[31:0]  = lsu_bmu_addr[31:0];
assign bmu_iahbl_dbus_acc_deny    = lsu_bmu_acc_deny;
assign bmu_iahbl_dbus_write       = lsu_bmu_write;
assign bmu_iahbl_dbus_size[1:0]   = lsu_bmu_size[1:0];
assign bmu_iahbl_dbus_prot[3:0]   = lsu_bmu_prot[3:0];
assign bmu_iahbl_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign bmu_iahbl_dbus_lock        = lsu_bmu_lock;
assign bmu_iahbl_dbus_lrsc        = lsu_bmu_lrsc;
assign bmu_iahbl_dbus_seq         = lsu_bmu_seq;
assign bmu_iahbl_dbus_burst[2:0]  = lsu_bmu_burst[2:0];


assign bmu_dahbl_dbus_req         = lsu_bmu_req & req_en & dahbl_hit & dahbl_sel_pred;
assign bmu_dahbl_dbus_req_dp      = lsu_bmu_req_dp & dahbl_sel_pred;
assign bmu_dahbl_dbus_addr[31:0]  = lsu_bmu_addr[31:0];
assign bmu_dahbl_dbus_acc_deny    = lsu_bmu_acc_deny;
assign bmu_dahbl_dbus_write       = lsu_bmu_write;
assign bmu_dahbl_dbus_size[1:0]   = lsu_bmu_size[1:0];
assign bmu_dahbl_dbus_prot[3:0]   = lsu_bmu_prot[3:0];
assign bmu_dahbl_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign bmu_dahbl_dbus_lock        = lsu_bmu_lock;
assign bmu_dahbl_dbus_lrsc        = lsu_bmu_lrsc;
assign bmu_dahbl_dbus_seq         = lsu_bmu_seq;
assign bmu_dahbl_dbus_burst[2:0]  = lsu_bmu_burst[2:0];


assign bmu_tcipif_dbus_req         = lsu_bmu_req & req_en & tcipif_hit & tcip_sel_pred;
assign bmu_tcipif_dbus_req_dp      = lsu_bmu_req_dp & tcip_sel_pred;
assign bmu_tcipif_dbus_acc_deny    = lsu_bmu_acc_deny;
assign bmu_tcipif_dbus_write       = lsu_bmu_write;
assign bmu_tcipif_dbus_size[1:0]   = lsu_bmu_size[1:0];
assign bmu_tcipif_dbus_supv_mode   = cp0_yy_mach_mode;
assign bmu_tcipif_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign bmu_tcipif_dbus_addr[31:0]  = {lsu_bmu_addr[31:16], tcipif_addr_low[15:0]};
assign tcipif_addr_low[15:0]       = {16{tcipif_hit}} & lsu_bmu_addr[15:0];


assign bmu_sahbl_dbus_req         = lsu_bmu_req & req_en & sahbl_hit & sahbl_sel_pred;
assign bmu_sahbl_dbus_req_dp      = lsu_bmu_req_dp & sahbl_sel_pred;
assign bmu_sahbl_dbus_addr[31:0]  = lsu_bmu_addr[31:0];
assign bmu_sahbl_dbus_acc_deny    = lsu_bmu_acc_deny;
assign bmu_sahbl_dbus_write       = lsu_bmu_write;
assign bmu_sahbl_dbus_size[1:0]   = lsu_bmu_size[1:0];
assign bmu_sahbl_dbus_prot[3:0]   = lsu_bmu_prot[3:0];
assign bmu_sahbl_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign bmu_sahbl_dbus_lock        = lsu_bmu_lock;
assign bmu_sahbl_dbus_lrsc        = lsu_bmu_lrsc;
assign bmu_sahbl_dbus_seq         = lsu_bmu_seq;
assign bmu_sahbl_dbus_burst[2:0]  = lsu_bmu_burst[2:0];

assign bmu_lsu_clk_en = lsu_bmu_req_dp |
                       ~(bmu_cur_state == REQ);
// &ModuleEnd; @237
endmodule
























// &ModuleBeg; @22
module pa_bmu_top(
  bmu_dahbl_dbus_acc_deny,
  bmu_dahbl_dbus_addr,
  bmu_dahbl_dbus_burst,
  bmu_dahbl_dbus_lock,
  bmu_dahbl_dbus_lrsc,
  bmu_dahbl_dbus_prot,
  bmu_dahbl_dbus_req,
  bmu_dahbl_dbus_req_dp,
  bmu_dahbl_dbus_seq,
  bmu_dahbl_dbus_size,
  bmu_dahbl_dbus_wdata,
  bmu_dahbl_dbus_write,
  bmu_dahbl_had_acc_deny,
  bmu_dahbl_had_addr,
  bmu_dahbl_had_burst,
  bmu_dahbl_had_prot,
  bmu_dahbl_had_req,
  bmu_dahbl_had_req_dp,
  bmu_dahbl_had_seq,
  bmu_dahbl_had_size,
  bmu_dahbl_had_wdata,
  bmu_dahbl_had_write,
  bmu_dahbl_ibus_acc_deny,
  bmu_dahbl_ibus_addr,
  bmu_dahbl_ibus_burst,
  bmu_dahbl_ibus_prot,
  bmu_dahbl_ibus_req,
  bmu_dahbl_ibus_req_dp,
  bmu_dahbl_ibus_seq,
  bmu_dahbl_ibus_size,
  bmu_had_acc_err,
  bmu_had_grant,
  bmu_had_rdata,
  bmu_had_trans_cmplt,
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_burst,
  bmu_iahbl_dbus_lock,
  bmu_iahbl_dbus_lrsc,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_dp,
  bmu_iahbl_dbus_seq,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_iahbl_had_acc_deny,
  bmu_iahbl_had_addr,
  bmu_iahbl_had_burst,
  bmu_iahbl_had_prot,
  bmu_iahbl_had_req,
  bmu_iahbl_had_req_dp,
  bmu_iahbl_had_seq,
  bmu_iahbl_had_size,
  bmu_iahbl_had_wdata,
  bmu_iahbl_had_write,
  bmu_iahbl_ibus_acc_deny,
  bmu_iahbl_ibus_addr,
  bmu_iahbl_ibus_burst,
  bmu_iahbl_ibus_prot,
  bmu_iahbl_ibus_req,
  bmu_iahbl_ibus_req_dp,
  bmu_iahbl_ibus_seq,
  bmu_iahbl_ibus_size,
  bmu_ifu_acc_err,
  bmu_ifu_grant,
  bmu_ifu_rdata,
  bmu_ifu_trans_cmplt,
  bmu_lsu_acc_err,
  bmu_lsu_grant,
  bmu_lsu_rdata,
  bmu_lsu_trans_cmplt,
  bmu_sahbl_dbus_acc_deny,
  bmu_sahbl_dbus_addr,
  bmu_sahbl_dbus_burst,
  bmu_sahbl_dbus_lock,
  bmu_sahbl_dbus_lrsc,
  bmu_sahbl_dbus_prot,
  bmu_sahbl_dbus_req,
  bmu_sahbl_dbus_req_dp,
  bmu_sahbl_dbus_seq,
  bmu_sahbl_dbus_size,
  bmu_sahbl_dbus_wdata,
  bmu_sahbl_dbus_write,
  bmu_sahbl_had_acc_deny,
  bmu_sahbl_had_addr,
  bmu_sahbl_had_burst,
  bmu_sahbl_had_prot,
  bmu_sahbl_had_req,
  bmu_sahbl_had_req_dp,
  bmu_sahbl_had_seq,
  bmu_sahbl_had_size,
  bmu_sahbl_had_wdata,
  bmu_sahbl_had_write,
  bmu_sahbl_ibus_acc_deny,
  bmu_sahbl_ibus_addr,
  bmu_sahbl_ibus_burst,
  bmu_sahbl_ibus_prot,
  bmu_sahbl_ibus_req,
  bmu_sahbl_ibus_req_dp,
  bmu_sahbl_ibus_seq,
  bmu_sahbl_ibus_size,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_req_dp,
  bmu_tcipif_dbus_size,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_had_acc_deny,
  bmu_tcipif_had_addr,
  bmu_tcipif_had_req,
  bmu_tcipif_had_req_dp,
  bmu_tcipif_had_size,
  bmu_tcipif_had_supv_mode,
  bmu_tcipif_had_wdata,
  bmu_tcipif_had_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_req_dp,
  bmu_tcipif_ibus_size,
  bmu_tcipif_ibus_supv_mode,
  bmu_tcipif_ibus_wdata,
  bmu_tcipif_ibus_write,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbl_bmu_dbus_acc_err,
  dahbl_bmu_dbus_data,
  dahbl_bmu_dbus_grnt,
  dahbl_bmu_dbus_trans_cmplt,
  dahbl_bmu_had_acc_err,
  dahbl_bmu_had_data,
  dahbl_bmu_had_grnt,
  dahbl_bmu_had_trans_cmplt,
  dahbl_bmu_ibus_acc_err,
  dahbl_bmu_ibus_data,
  dahbl_bmu_ibus_grnt,
  dahbl_bmu_ibus_trans_cmplt,
  forever_cpuclk,
  had_bmu_addr,
  had_bmu_burst,
  had_bmu_prot,
  had_bmu_req,
  had_bmu_seq,
  had_bmu_size,
  had_bmu_wdata,
  had_bmu_write,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  iahbl_bmu_had_acc_err,
  iahbl_bmu_had_data,
  iahbl_bmu_had_grnt,
  iahbl_bmu_had_trans_cmplt,
  iahbl_bmu_ibus_acc_err,
  iahbl_bmu_ibus_data,
  iahbl_bmu_ibus_grnt,
  iahbl_bmu_ibus_trans_cmplt,
  ifu_bmu_acc_deny,
  ifu_bmu_addr,
  ifu_bmu_burst,
  ifu_bmu_data_req,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_seq,
  ifu_bmu_size,
  lsu_bmu_acc_deny,
  lsu_bmu_addr,
  lsu_bmu_burst,
  lsu_bmu_lock,
  lsu_bmu_lrsc,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_dp,
  lsu_bmu_seq,
  lsu_bmu_size,
  lsu_bmu_wdata,
  lsu_bmu_write,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_async_flush,
  sahbl_bmu_dbus_acc_err,
  sahbl_bmu_dbus_data,
  sahbl_bmu_dbus_grnt,
  sahbl_bmu_dbus_trans_cmplt,
  sahbl_bmu_had_acc_err,
  sahbl_bmu_had_data,
  sahbl_bmu_had_grnt,
  sahbl_bmu_had_trans_cmplt,
  sahbl_bmu_ibus_acc_err,
  sahbl_bmu_ibus_data,
  sahbl_bmu_ibus_grnt,
  sahbl_bmu_ibus_trans_cmplt,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_had_acc_err,
  tcipif_bmu_had_data,
  tcipif_bmu_had_grnt,
  tcipif_bmu_had_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);

// &Ports; @23
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbl_bmu_dbus_acc_err;
input   [31:0]  dahbl_bmu_dbus_data;
input           dahbl_bmu_dbus_grnt;
input           dahbl_bmu_dbus_trans_cmplt;
input           dahbl_bmu_had_acc_err;
input   [31:0]  dahbl_bmu_had_data;
input           dahbl_bmu_had_grnt;
input           dahbl_bmu_had_trans_cmplt;
input           dahbl_bmu_ibus_acc_err;
input   [31:0]  dahbl_bmu_ibus_data;
input           dahbl_bmu_ibus_grnt;
input           dahbl_bmu_ibus_trans_cmplt;
input           forever_cpuclk;
input   [31:0]  had_bmu_addr;
input   [2 :0]  had_bmu_burst;
input   [3 :0]  had_bmu_prot;
input           had_bmu_req;
input           had_bmu_seq;
input   [1 :0]  had_bmu_size;
input   [31:0]  had_bmu_wdata;
input           had_bmu_write;
input           iahbl_bmu_dbus_acc_err;
input   [31:0]  iahbl_bmu_dbus_data;
input           iahbl_bmu_dbus_grnt;
input           iahbl_bmu_dbus_trans_cmplt;
input           iahbl_bmu_had_acc_err;
input   [31:0]  iahbl_bmu_had_data;
input           iahbl_bmu_had_grnt;
input           iahbl_bmu_had_trans_cmplt;
input           iahbl_bmu_ibus_acc_err;
input   [31:0]  iahbl_bmu_ibus_data;
input           iahbl_bmu_ibus_grnt;
input           iahbl_bmu_ibus_trans_cmplt;
input           ifu_bmu_acc_deny;
input   [31:0]  ifu_bmu_addr;
input   [2 :0]  ifu_bmu_burst;
input           ifu_bmu_data_req;
input   [3 :0]  ifu_bmu_prot;
input           ifu_bmu_req;
input           ifu_bmu_seq;
input   [1 :0]  ifu_bmu_size;
input           lsu_bmu_acc_deny;
input   [31:0]  lsu_bmu_addr;
input   [2 :0]  lsu_bmu_burst;
input           lsu_bmu_lock;
input           lsu_bmu_lrsc;
input   [3 :0]  lsu_bmu_prot;
input           lsu_bmu_req;
input           lsu_bmu_req_dp;
input           lsu_bmu_seq;
input   [1 :0]  lsu_bmu_size;
input   [31:0]  lsu_bmu_wdata;
input           lsu_bmu_write;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input           sahbl_bmu_dbus_acc_err;
input   [31:0]  sahbl_bmu_dbus_data;
input           sahbl_bmu_dbus_grnt;
input           sahbl_bmu_dbus_trans_cmplt;
input           sahbl_bmu_had_acc_err;
input   [31:0]  sahbl_bmu_had_data;
input           sahbl_bmu_had_grnt;
input           sahbl_bmu_had_trans_cmplt;
input           sahbl_bmu_ibus_acc_err;
input   [31:0]  sahbl_bmu_ibus_data;
input           sahbl_bmu_ibus_grnt;
input           sahbl_bmu_ibus_trans_cmplt;
input           tcipif_bmu_dbus_acc_err;
input   [31:0]  tcipif_bmu_dbus_data;
input           tcipif_bmu_dbus_grnt;
input           tcipif_bmu_dbus_trans_cmplt;
input           tcipif_bmu_had_acc_err;
input   [31:0]  tcipif_bmu_had_data;
input           tcipif_bmu_had_grnt;
input           tcipif_bmu_had_trans_cmplt;
input           tcipif_bmu_ibus_acc_err;
input   [31:0]  tcipif_bmu_ibus_data;
input           tcipif_bmu_ibus_grnt;
input           tcipif_bmu_ibus_trans_cmplt;
output          bmu_dahbl_dbus_acc_deny;
output  [31:0]  bmu_dahbl_dbus_addr;
output  [2 :0]  bmu_dahbl_dbus_burst;
output          bmu_dahbl_dbus_lock;
output          bmu_dahbl_dbus_lrsc;
output  [3 :0]  bmu_dahbl_dbus_prot;
output          bmu_dahbl_dbus_req;
output          bmu_dahbl_dbus_req_dp;
output          bmu_dahbl_dbus_seq;
output  [1 :0]  bmu_dahbl_dbus_size;
output  [31:0]  bmu_dahbl_dbus_wdata;
output          bmu_dahbl_dbus_write;
output          bmu_dahbl_had_acc_deny;
output  [31:0]  bmu_dahbl_had_addr;
output  [2 :0]  bmu_dahbl_had_burst;
output  [3 :0]  bmu_dahbl_had_prot;
output          bmu_dahbl_had_req;
output          bmu_dahbl_had_req_dp;
output          bmu_dahbl_had_seq;
output  [1 :0]  bmu_dahbl_had_size;
output  [31:0]  bmu_dahbl_had_wdata;
output          bmu_dahbl_had_write;
output          bmu_dahbl_ibus_acc_deny;
output  [31:0]  bmu_dahbl_ibus_addr;
output  [2 :0]  bmu_dahbl_ibus_burst;
output  [3 :0]  bmu_dahbl_ibus_prot;
output          bmu_dahbl_ibus_req;
output          bmu_dahbl_ibus_req_dp;
output          bmu_dahbl_ibus_seq;
output  [1 :0]  bmu_dahbl_ibus_size;
output          bmu_had_acc_err;
output          bmu_had_grant;
output  [31:0]  bmu_had_rdata;
output          bmu_had_trans_cmplt;
output          bmu_iahbl_dbus_acc_deny;
output  [31:0]  bmu_iahbl_dbus_addr;
output  [2 :0]  bmu_iahbl_dbus_burst;
output          bmu_iahbl_dbus_lock;
output          bmu_iahbl_dbus_lrsc;
output  [3 :0]  bmu_iahbl_dbus_prot;
output          bmu_iahbl_dbus_req;
output          bmu_iahbl_dbus_req_dp;
output          bmu_iahbl_dbus_seq;
output  [1 :0]  bmu_iahbl_dbus_size;
output  [31:0]  bmu_iahbl_dbus_wdata;
output          bmu_iahbl_dbus_write;
output          bmu_iahbl_had_acc_deny;
output  [31:0]  bmu_iahbl_had_addr;
output  [2 :0]  bmu_iahbl_had_burst;
output  [3 :0]  bmu_iahbl_had_prot;
output          bmu_iahbl_had_req;
output          bmu_iahbl_had_req_dp;
output          bmu_iahbl_had_seq;
output  [1 :0]  bmu_iahbl_had_size;
output  [31:0]  bmu_iahbl_had_wdata;
output          bmu_iahbl_had_write;
output          bmu_iahbl_ibus_acc_deny;
output  [31:0]  bmu_iahbl_ibus_addr;
output  [2 :0]  bmu_iahbl_ibus_burst;
output  [3 :0]  bmu_iahbl_ibus_prot;
output          bmu_iahbl_ibus_req;
output          bmu_iahbl_ibus_req_dp;
output          bmu_iahbl_ibus_seq;
output  [1 :0]  bmu_iahbl_ibus_size;
output          bmu_ifu_acc_err;
output          bmu_ifu_grant;
output  [31:0]  bmu_ifu_rdata;
output          bmu_ifu_trans_cmplt;
output          bmu_lsu_acc_err;
output          bmu_lsu_grant;
output  [31:0]  bmu_lsu_rdata;
output          bmu_lsu_trans_cmplt;
output          bmu_sahbl_dbus_acc_deny;
output  [31:0]  bmu_sahbl_dbus_addr;
output  [2 :0]  bmu_sahbl_dbus_burst;
output          bmu_sahbl_dbus_lock;
output          bmu_sahbl_dbus_lrsc;
output  [3 :0]  bmu_sahbl_dbus_prot;
output          bmu_sahbl_dbus_req;
output          bmu_sahbl_dbus_req_dp;
output          bmu_sahbl_dbus_seq;
output  [1 :0]  bmu_sahbl_dbus_size;
output  [31:0]  bmu_sahbl_dbus_wdata;
output          bmu_sahbl_dbus_write;
output          bmu_sahbl_had_acc_deny;
output  [31:0]  bmu_sahbl_had_addr;
output  [2 :0]  bmu_sahbl_had_burst;
output  [3 :0]  bmu_sahbl_had_prot;
output          bmu_sahbl_had_req;
output          bmu_sahbl_had_req_dp;
output          bmu_sahbl_had_seq;
output  [1 :0]  bmu_sahbl_had_size;
output  [31:0]  bmu_sahbl_had_wdata;
output          bmu_sahbl_had_write;
output          bmu_sahbl_ibus_acc_deny;
output  [31:0]  bmu_sahbl_ibus_addr;
output  [2 :0]  bmu_sahbl_ibus_burst;
output  [3 :0]  bmu_sahbl_ibus_prot;
output          bmu_sahbl_ibus_req;
output          bmu_sahbl_ibus_req_dp;
output          bmu_sahbl_ibus_seq;
output  [1 :0]  bmu_sahbl_ibus_size;
output          bmu_tcipif_dbus_acc_deny;
output  [31:0]  bmu_tcipif_dbus_addr;
output          bmu_tcipif_dbus_req;
output          bmu_tcipif_dbus_req_dp;
output  [1 :0]  bmu_tcipif_dbus_size;
output          bmu_tcipif_dbus_supv_mode;
output  [31:0]  bmu_tcipif_dbus_wdata;
output          bmu_tcipif_dbus_write;
output          bmu_tcipif_had_acc_deny;
output  [31:0]  bmu_tcipif_had_addr;
output          bmu_tcipif_had_req;
output          bmu_tcipif_had_req_dp;
output  [1 :0]  bmu_tcipif_had_size;
output          bmu_tcipif_had_supv_mode;
output  [31:0]  bmu_tcipif_had_wdata;
output          bmu_tcipif_had_write;
output          bmu_tcipif_ibus_acc_deny;
output  [31:0]  bmu_tcipif_ibus_addr;
output          bmu_tcipif_ibus_req;
output          bmu_tcipif_ibus_req_dp;
output  [1 :0]  bmu_tcipif_ibus_size;
output          bmu_tcipif_ibus_supv_mode;
output  [31:0]  bmu_tcipif_ibus_wdata;
output          bmu_tcipif_ibus_write;

// &Regs; @24

// &Wires; @25
wire            bmu_clk;
wire            bmu_clk_en;
wire            bmu_dahbl_dbus_acc_deny;
wire    [31:0]  bmu_dahbl_dbus_addr;
wire    [2 :0]  bmu_dahbl_dbus_burst;
wire            bmu_dahbl_dbus_lock;
wire            bmu_dahbl_dbus_lrsc;
wire    [3 :0]  bmu_dahbl_dbus_prot;
wire            bmu_dahbl_dbus_req;
wire            bmu_dahbl_dbus_req_dp;
wire            bmu_dahbl_dbus_seq;
wire    [1 :0]  bmu_dahbl_dbus_size;
wire    [31:0]  bmu_dahbl_dbus_wdata;
wire            bmu_dahbl_dbus_write;
wire            bmu_dahbl_had_acc_deny;
wire    [31:0]  bmu_dahbl_had_addr;
wire    [2 :0]  bmu_dahbl_had_burst;
wire    [3 :0]  bmu_dahbl_had_prot;
wire            bmu_dahbl_had_req;
wire            bmu_dahbl_had_req_dp;
wire            bmu_dahbl_had_seq;
wire    [1 :0]  bmu_dahbl_had_size;
wire    [31:0]  bmu_dahbl_had_wdata;
wire            bmu_dahbl_had_write;
wire            bmu_dahbl_ibus_acc_deny;
wire    [31:0]  bmu_dahbl_ibus_addr;
wire    [2 :0]  bmu_dahbl_ibus_burst;
wire    [3 :0]  bmu_dahbl_ibus_prot;
wire            bmu_dahbl_ibus_req;
wire            bmu_dahbl_ibus_req_dp;
wire            bmu_dahbl_ibus_seq;
wire    [1 :0]  bmu_dahbl_ibus_size;
wire    [31:0]  bmu_dahbl_ibus_wdata;
wire            bmu_dahbl_ibus_write;
wire            bmu_had_acc_err;
wire            bmu_had_clk_en;
wire            bmu_had_grant;
wire    [31:0]  bmu_had_rdata;
wire            bmu_had_trans_cmplt;
wire            bmu_iahbl_dbus_acc_deny;
wire    [31:0]  bmu_iahbl_dbus_addr;
wire    [2 :0]  bmu_iahbl_dbus_burst;
wire            bmu_iahbl_dbus_lock;
wire            bmu_iahbl_dbus_lrsc;
wire    [3 :0]  bmu_iahbl_dbus_prot;
wire            bmu_iahbl_dbus_req;
wire            bmu_iahbl_dbus_req_dp;
wire            bmu_iahbl_dbus_seq;
wire    [1 :0]  bmu_iahbl_dbus_size;
wire    [31:0]  bmu_iahbl_dbus_wdata;
wire            bmu_iahbl_dbus_write;
wire            bmu_iahbl_had_acc_deny;
wire    [31:0]  bmu_iahbl_had_addr;
wire    [2 :0]  bmu_iahbl_had_burst;
wire    [3 :0]  bmu_iahbl_had_prot;
wire            bmu_iahbl_had_req;
wire            bmu_iahbl_had_req_dp;
wire            bmu_iahbl_had_seq;
wire    [1 :0]  bmu_iahbl_had_size;
wire    [31:0]  bmu_iahbl_had_wdata;
wire            bmu_iahbl_had_write;
wire            bmu_iahbl_ibus_acc_deny;
wire    [31:0]  bmu_iahbl_ibus_addr;
wire    [2 :0]  bmu_iahbl_ibus_burst;
wire    [3 :0]  bmu_iahbl_ibus_prot;
wire            bmu_iahbl_ibus_req;
wire            bmu_iahbl_ibus_req_dp;
wire            bmu_iahbl_ibus_seq;
wire    [1 :0]  bmu_iahbl_ibus_size;
wire    [31:0]  bmu_iahbl_ibus_wdata;
wire            bmu_iahbl_ibus_write;
wire            bmu_ifu_acc_err;
wire            bmu_ifu_clk_en;
wire            bmu_ifu_grant;
wire    [31:0]  bmu_ifu_rdata;
wire            bmu_ifu_trans_cmplt;
wire            bmu_lsu_acc_err;
wire            bmu_lsu_clk_en;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire            bmu_sahbl_dbus_acc_deny;
wire    [31:0]  bmu_sahbl_dbus_addr;
wire    [2 :0]  bmu_sahbl_dbus_burst;
wire            bmu_sahbl_dbus_lock;
wire            bmu_sahbl_dbus_lrsc;
wire    [3 :0]  bmu_sahbl_dbus_prot;
wire            bmu_sahbl_dbus_req;
wire            bmu_sahbl_dbus_req_dp;
wire            bmu_sahbl_dbus_seq;
wire    [1 :0]  bmu_sahbl_dbus_size;
wire    [31:0]  bmu_sahbl_dbus_wdata;
wire            bmu_sahbl_dbus_write;
wire            bmu_sahbl_had_acc_deny;
wire    [31:0]  bmu_sahbl_had_addr;
wire    [2 :0]  bmu_sahbl_had_burst;
wire    [3 :0]  bmu_sahbl_had_prot;
wire            bmu_sahbl_had_req;
wire            bmu_sahbl_had_req_dp;
wire            bmu_sahbl_had_seq;
wire    [1 :0]  bmu_sahbl_had_size;
wire    [31:0]  bmu_sahbl_had_wdata;
wire            bmu_sahbl_had_write;
wire            bmu_sahbl_ibus_acc_deny;
wire    [31:0]  bmu_sahbl_ibus_addr;
wire    [2 :0]  bmu_sahbl_ibus_burst;
wire    [3 :0]  bmu_sahbl_ibus_prot;
wire            bmu_sahbl_ibus_req;
wire            bmu_sahbl_ibus_req_dp;
wire            bmu_sahbl_ibus_seq;
wire    [1 :0]  bmu_sahbl_ibus_size;
wire    [31:0]  bmu_sahbl_ibus_wdata;
wire            bmu_sahbl_ibus_write;
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire            bmu_tcipif_had_acc_deny;
wire    [31:0]  bmu_tcipif_had_addr;
wire            bmu_tcipif_had_req;
wire            bmu_tcipif_had_req_dp;
wire    [1 :0]  bmu_tcipif_had_size;
wire            bmu_tcipif_had_supv_mode;
wire    [31:0]  bmu_tcipif_had_wdata;
wire            bmu_tcipif_had_write;
wire            bmu_tcipif_ibus_acc_deny;
wire    [31:0]  bmu_tcipif_ibus_addr;
wire            bmu_tcipif_ibus_req;
wire            bmu_tcipif_ibus_req_dp;
wire    [1 :0]  bmu_tcipif_ibus_size;
wire            bmu_tcipif_ibus_supv_mode;
wire    [31:0]  bmu_tcipif_ibus_wdata;
wire            bmu_tcipif_ibus_write;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbl_bmu_dbus_acc_err;
wire    [31:0]  dahbl_bmu_dbus_data;
wire            dahbl_bmu_dbus_grnt;
wire            dahbl_bmu_dbus_trans_cmplt;
wire            dahbl_bmu_had_acc_err;
wire    [31:0]  dahbl_bmu_had_data;
wire            dahbl_bmu_had_grnt;
wire            dahbl_bmu_had_trans_cmplt;
wire            dahbl_bmu_ibus_acc_err;
wire    [31:0]  dahbl_bmu_ibus_data;
wire            dahbl_bmu_ibus_grnt;
wire            dahbl_bmu_ibus_trans_cmplt;
wire            forever_cpuclk;
wire            had_bmu_acc_deny;
wire    [31:0]  had_bmu_addr;
wire    [2 :0]  had_bmu_burst;
wire            had_bmu_data_req;
wire    [3 :0]  had_bmu_prot;
wire            had_bmu_req;
wire            had_bmu_seq;
wire    [1 :0]  had_bmu_size;
wire    [31:0]  had_bmu_wdata;
wire            had_bmu_write;
wire            iahbl_bmu_dbus_acc_err;
wire    [31:0]  iahbl_bmu_dbus_data;
wire            iahbl_bmu_dbus_grnt;
wire            iahbl_bmu_dbus_trans_cmplt;
wire            iahbl_bmu_had_acc_err;
wire    [31:0]  iahbl_bmu_had_data;
wire            iahbl_bmu_had_grnt;
wire            iahbl_bmu_had_trans_cmplt;
wire            iahbl_bmu_ibus_acc_err;
wire    [31:0]  iahbl_bmu_ibus_data;
wire            iahbl_bmu_ibus_grnt;
wire            iahbl_bmu_ibus_trans_cmplt;
wire            ifu_bmu_acc_deny;
wire    [31:0]  ifu_bmu_addr;
wire    [2 :0]  ifu_bmu_burst;
wire            ifu_bmu_data_req;
wire    [3 :0]  ifu_bmu_prot;
wire            ifu_bmu_req;
wire            ifu_bmu_seq;
wire    [1 :0]  ifu_bmu_size;
wire    [31:0]  ifu_bmu_wdata;
wire            ifu_bmu_write;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire    [11:0]  pad_bmu_dahbl_base;
wire    [11:0]  pad_bmu_dahbl_mask;
wire    [11:0]  pad_bmu_iahbl_base;
wire    [11:0]  pad_bmu_iahbl_mask;
wire            pad_yy_gate_clk_en_b;
wire            rtu_yy_xx_async_flush;
wire            sahbl_bmu_dbus_acc_err;
wire    [31:0]  sahbl_bmu_dbus_data;
wire            sahbl_bmu_dbus_grnt;
wire            sahbl_bmu_dbus_trans_cmplt;
wire            sahbl_bmu_had_acc_err;
wire    [31:0]  sahbl_bmu_had_data;
wire            sahbl_bmu_had_grnt;
wire            sahbl_bmu_had_trans_cmplt;
wire            sahbl_bmu_ibus_acc_err;
wire    [31:0]  sahbl_bmu_ibus_data;
wire            sahbl_bmu_ibus_grnt;
wire            sahbl_bmu_ibus_trans_cmplt;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_bmu_had_acc_err;
wire    [31:0]  tcipif_bmu_had_data;
wire            tcipif_bmu_had_grnt;
wire            tcipif_bmu_had_trans_cmplt;
wire            tcipif_bmu_ibus_acc_err;
wire    [31:0]  tcipif_bmu_ibus_data;
wire            tcipif_bmu_ibus_grnt;
wire            tcipif_bmu_ibus_trans_cmplt;






assign ifu_bmu_write = 1'b0;
assign ifu_bmu_wdata[31:0] = 32'b0;
// &Force("nonport", "bmu_dahbl_ibus_write") @33
// &Force("nonport", "bmu_dahbl_ibus_wdata") @34
// &Force("nonport", "bmu_iahbl_ibus_write") @35
// &Force("nonport", "bmu_iahbl_ibus_wdata") @36
// &Force("nonport", "bmu_sahbl_ibus_write") @37
// &Force("nonport", "bmu_sahbl_ibus_wdata") @38

assign bmu_clk_en = bmu_lsu_clk_en | bmu_had_clk_en | bmu_ifu_clk_en;

// &Instance("gated_clk_cell", "x_pa_lsu_bmu_gated_clk"); @42
gated_clk_cell  x_pa_lsu_bmu_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bmu_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (bmu_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @43
//          .external_en (1'b0), @44
//          .global_en   (1'b1), @45
//          .module_en   (1'b0), @46
//          .local_en    (bmu_clk_en), @47
//          .clk_out     (bmu_clk)); @48

// &ConnRule(s/xx/ibus/); @50
// &ConnRule(s/tt/ifu/); @51
// &Instance("pa_bmu_bus_if","x_pa_bmu_ibus_if"); @52
pa_bmu_bus_if  x_pa_bmu_ibus_if (
  .bmu_clk                     (bmu_clk                    ),
  .bmu_dahbl_xx_acc_deny       (bmu_dahbl_ibus_acc_deny    ),
  .bmu_dahbl_xx_addr           (bmu_dahbl_ibus_addr        ),
  .bmu_dahbl_xx_burst          (bmu_dahbl_ibus_burst       ),
  .bmu_dahbl_xx_prot           (bmu_dahbl_ibus_prot        ),
  .bmu_dahbl_xx_req            (bmu_dahbl_ibus_req         ),
  .bmu_dahbl_xx_req_dp         (bmu_dahbl_ibus_req_dp      ),
  .bmu_dahbl_xx_seq            (bmu_dahbl_ibus_seq         ),
  .bmu_dahbl_xx_size           (bmu_dahbl_ibus_size        ),
  .bmu_dahbl_xx_wdata          (bmu_dahbl_ibus_wdata       ),
  .bmu_dahbl_xx_write          (bmu_dahbl_ibus_write       ),
  .bmu_iahbl_xx_acc_deny       (bmu_iahbl_ibus_acc_deny    ),
  .bmu_iahbl_xx_addr           (bmu_iahbl_ibus_addr        ),
  .bmu_iahbl_xx_burst          (bmu_iahbl_ibus_burst       ),
  .bmu_iahbl_xx_prot           (bmu_iahbl_ibus_prot        ),
  .bmu_iahbl_xx_req            (bmu_iahbl_ibus_req         ),
  .bmu_iahbl_xx_req_dp         (bmu_iahbl_ibus_req_dp      ),
  .bmu_iahbl_xx_seq            (bmu_iahbl_ibus_seq         ),
  .bmu_iahbl_xx_size           (bmu_iahbl_ibus_size        ),
  .bmu_iahbl_xx_wdata          (bmu_iahbl_ibus_wdata       ),
  .bmu_iahbl_xx_write          (bmu_iahbl_ibus_write       ),
  .bmu_sahbl_xx_acc_deny       (bmu_sahbl_ibus_acc_deny    ),
  .bmu_sahbl_xx_addr           (bmu_sahbl_ibus_addr        ),
  .bmu_sahbl_xx_burst          (bmu_sahbl_ibus_burst       ),
  .bmu_sahbl_xx_prot           (bmu_sahbl_ibus_prot        ),
  .bmu_sahbl_xx_req            (bmu_sahbl_ibus_req         ),
  .bmu_sahbl_xx_req_dp         (bmu_sahbl_ibus_req_dp      ),
  .bmu_sahbl_xx_seq            (bmu_sahbl_ibus_seq         ),
  .bmu_sahbl_xx_size           (bmu_sahbl_ibus_size        ),
  .bmu_sahbl_xx_wdata          (bmu_sahbl_ibus_wdata       ),
  .bmu_sahbl_xx_write          (bmu_sahbl_ibus_write       ),
  .bmu_tcipif_xx_acc_deny      (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_xx_addr          (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_xx_req           (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_xx_req_dp        (bmu_tcipif_ibus_req_dp     ),
  .bmu_tcipif_xx_size          (bmu_tcipif_ibus_size       ),
  .bmu_tcipif_xx_supv_mode     (bmu_tcipif_ibus_supv_mode  ),
  .bmu_tcipif_xx_wdata         (bmu_tcipif_ibus_wdata      ),
  .bmu_tcipif_xx_write         (bmu_tcipif_ibus_write      ),
  .bmu_tt_acc_err              (bmu_ifu_acc_err            ),
  .bmu_tt_clk_en               (bmu_ifu_clk_en             ),
  .bmu_tt_grant                (bmu_ifu_grant              ),
  .bmu_tt_rdata                (bmu_ifu_rdata              ),
  .bmu_tt_trans_cmplt          (bmu_ifu_trans_cmplt        ),
  .cp0_yy_mach_mode            (cp0_yy_mach_mode           ),
  .cpurst_b                    (cpurst_b                   ),
  .dahbl_bmu_xx_acc_err        (dahbl_bmu_ibus_acc_err     ),
  .dahbl_bmu_xx_data           (dahbl_bmu_ibus_data        ),
  .dahbl_bmu_xx_grnt           (dahbl_bmu_ibus_grnt        ),
  .dahbl_bmu_xx_trans_cmplt    (dahbl_bmu_ibus_trans_cmplt ),
  .iahbl_bmu_xx_acc_err        (iahbl_bmu_ibus_acc_err     ),
  .iahbl_bmu_xx_data           (iahbl_bmu_ibus_data        ),
  .iahbl_bmu_xx_grnt           (iahbl_bmu_ibus_grnt        ),
  .iahbl_bmu_xx_trans_cmplt    (iahbl_bmu_ibus_trans_cmplt ),
  .pad_bmu_dahbl_base          (pad_bmu_dahbl_base         ),
  .pad_bmu_dahbl_mask          (pad_bmu_dahbl_mask         ),
  .pad_bmu_iahbl_base          (pad_bmu_iahbl_base         ),
  .pad_bmu_iahbl_mask          (pad_bmu_iahbl_mask         ),
  .sahbl_bmu_xx_acc_err        (sahbl_bmu_ibus_acc_err     ),
  .sahbl_bmu_xx_data           (sahbl_bmu_ibus_data        ),
  .sahbl_bmu_xx_grnt           (sahbl_bmu_ibus_grnt        ),
  .sahbl_bmu_xx_trans_cmplt    (sahbl_bmu_ibus_trans_cmplt ),
  .tcipif_bmu_xx_acc_err       (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_xx_data          (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_xx_grnt          (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_xx_trans_cmplt   (tcipif_bmu_ibus_trans_cmplt),
  .tt_bmu_acc_deny             (ifu_bmu_acc_deny           ),
  .tt_bmu_addr                 (ifu_bmu_addr               ),
  .tt_bmu_burst                (ifu_bmu_burst              ),
  .tt_bmu_data_req             (ifu_bmu_data_req           ),
  .tt_bmu_prot                 (ifu_bmu_prot               ),
  .tt_bmu_req                  (ifu_bmu_req                ),
  .tt_bmu_seq                  (ifu_bmu_seq                ),
  .tt_bmu_size                 (ifu_bmu_size               ),
  .tt_bmu_wdata                (ifu_bmu_wdata              ),
  .tt_bmu_write                (ifu_bmu_write              )
);


// &Instance("pa_bmu_dbus_if","x_pa_bmu_dbus_if"); @54
pa_bmu_dbus_if  x_pa_bmu_dbus_if (
  .bmu_clk                     (bmu_clk                    ),
  .bmu_dahbl_dbus_acc_deny     (bmu_dahbl_dbus_acc_deny    ),
  .bmu_dahbl_dbus_addr         (bmu_dahbl_dbus_addr        ),
  .bmu_dahbl_dbus_burst        (bmu_dahbl_dbus_burst       ),
  .bmu_dahbl_dbus_lock         (bmu_dahbl_dbus_lock        ),
  .bmu_dahbl_dbus_lrsc         (bmu_dahbl_dbus_lrsc        ),
  .bmu_dahbl_dbus_prot         (bmu_dahbl_dbus_prot        ),
  .bmu_dahbl_dbus_req          (bmu_dahbl_dbus_req         ),
  .bmu_dahbl_dbus_req_dp       (bmu_dahbl_dbus_req_dp      ),
  .bmu_dahbl_dbus_seq          (bmu_dahbl_dbus_seq         ),
  .bmu_dahbl_dbus_size         (bmu_dahbl_dbus_size        ),
  .bmu_dahbl_dbus_wdata        (bmu_dahbl_dbus_wdata       ),
  .bmu_dahbl_dbus_write        (bmu_dahbl_dbus_write       ),
  .bmu_iahbl_dbus_acc_deny     (bmu_iahbl_dbus_acc_deny    ),
  .bmu_iahbl_dbus_addr         (bmu_iahbl_dbus_addr        ),
  .bmu_iahbl_dbus_burst        (bmu_iahbl_dbus_burst       ),
  .bmu_iahbl_dbus_lock         (bmu_iahbl_dbus_lock        ),
  .bmu_iahbl_dbus_lrsc         (bmu_iahbl_dbus_lrsc        ),
  .bmu_iahbl_dbus_prot         (bmu_iahbl_dbus_prot        ),
  .bmu_iahbl_dbus_req          (bmu_iahbl_dbus_req         ),
  .bmu_iahbl_dbus_req_dp       (bmu_iahbl_dbus_req_dp      ),
  .bmu_iahbl_dbus_seq          (bmu_iahbl_dbus_seq         ),
  .bmu_iahbl_dbus_size         (bmu_iahbl_dbus_size        ),
  .bmu_iahbl_dbus_wdata        (bmu_iahbl_dbus_wdata       ),
  .bmu_iahbl_dbus_write        (bmu_iahbl_dbus_write       ),
  .bmu_lsu_acc_err             (bmu_lsu_acc_err            ),
  .bmu_lsu_clk_en              (bmu_lsu_clk_en             ),
  .bmu_lsu_grant               (bmu_lsu_grant              ),
  .bmu_lsu_rdata               (bmu_lsu_rdata              ),
  .bmu_lsu_trans_cmplt         (bmu_lsu_trans_cmplt        ),
  .bmu_sahbl_dbus_acc_deny     (bmu_sahbl_dbus_acc_deny    ),
  .bmu_sahbl_dbus_addr         (bmu_sahbl_dbus_addr        ),
  .bmu_sahbl_dbus_burst        (bmu_sahbl_dbus_burst       ),
  .bmu_sahbl_dbus_lock         (bmu_sahbl_dbus_lock        ),
  .bmu_sahbl_dbus_lrsc         (bmu_sahbl_dbus_lrsc        ),
  .bmu_sahbl_dbus_prot         (bmu_sahbl_dbus_prot        ),
  .bmu_sahbl_dbus_req          (bmu_sahbl_dbus_req         ),
  .bmu_sahbl_dbus_req_dp       (bmu_sahbl_dbus_req_dp      ),
  .bmu_sahbl_dbus_seq          (bmu_sahbl_dbus_seq         ),
  .bmu_sahbl_dbus_size         (bmu_sahbl_dbus_size        ),
  .bmu_sahbl_dbus_wdata        (bmu_sahbl_dbus_wdata       ),
  .bmu_sahbl_dbus_write        (bmu_sahbl_dbus_write       ),
  .bmu_tcipif_dbus_acc_deny    (bmu_tcipif_dbus_acc_deny   ),
  .bmu_tcipif_dbus_addr        (bmu_tcipif_dbus_addr       ),
  .bmu_tcipif_dbus_req         (bmu_tcipif_dbus_req        ),
  .bmu_tcipif_dbus_req_dp      (bmu_tcipif_dbus_req_dp     ),
  .bmu_tcipif_dbus_size        (bmu_tcipif_dbus_size       ),
  .bmu_tcipif_dbus_supv_mode   (bmu_tcipif_dbus_supv_mode  ),
  .bmu_tcipif_dbus_wdata       (bmu_tcipif_dbus_wdata      ),
  .bmu_tcipif_dbus_write       (bmu_tcipif_dbus_write      ),
  .cp0_yy_mach_mode            (cp0_yy_mach_mode           ),
  .cpurst_b                    (cpurst_b                   ),
  .dahbl_bmu_dbus_acc_err      (dahbl_bmu_dbus_acc_err     ),
  .dahbl_bmu_dbus_data         (dahbl_bmu_dbus_data        ),
  .dahbl_bmu_dbus_grnt         (dahbl_bmu_dbus_grnt        ),
  .dahbl_bmu_dbus_trans_cmplt  (dahbl_bmu_dbus_trans_cmplt ),
  .iahbl_bmu_dbus_acc_err      (iahbl_bmu_dbus_acc_err     ),
  .iahbl_bmu_dbus_data         (iahbl_bmu_dbus_data        ),
  .iahbl_bmu_dbus_grnt         (iahbl_bmu_dbus_grnt        ),
  .iahbl_bmu_dbus_trans_cmplt  (iahbl_bmu_dbus_trans_cmplt ),
  .lsu_bmu_acc_deny            (lsu_bmu_acc_deny           ),
  .lsu_bmu_addr                (lsu_bmu_addr               ),
  .lsu_bmu_burst               (lsu_bmu_burst              ),
  .lsu_bmu_lock                (lsu_bmu_lock               ),
  .lsu_bmu_lrsc                (lsu_bmu_lrsc               ),
  .lsu_bmu_prot                (lsu_bmu_prot               ),
  .lsu_bmu_req                 (lsu_bmu_req                ),
  .lsu_bmu_req_dp              (lsu_bmu_req_dp             ),
  .lsu_bmu_seq                 (lsu_bmu_seq                ),
  .lsu_bmu_size                (lsu_bmu_size               ),
  .lsu_bmu_wdata               (lsu_bmu_wdata              ),
  .lsu_bmu_write               (lsu_bmu_write              ),
  .pad_bmu_dahbl_base          (pad_bmu_dahbl_base         ),
  .pad_bmu_dahbl_mask          (pad_bmu_dahbl_mask         ),
  .pad_bmu_iahbl_base          (pad_bmu_iahbl_base         ),
  .pad_bmu_iahbl_mask          (pad_bmu_iahbl_mask         ),
  .rtu_yy_xx_async_flush       (rtu_yy_xx_async_flush      ),
  .sahbl_bmu_dbus_acc_err      (sahbl_bmu_dbus_acc_err     ),
  .sahbl_bmu_dbus_data         (sahbl_bmu_dbus_data        ),
  .sahbl_bmu_dbus_grnt         (sahbl_bmu_dbus_grnt        ),
  .sahbl_bmu_dbus_trans_cmplt  (sahbl_bmu_dbus_trans_cmplt ),
  .tcipif_bmu_dbus_acc_err     (tcipif_bmu_dbus_acc_err    ),
  .tcipif_bmu_dbus_data        (tcipif_bmu_dbus_data       ),
  .tcipif_bmu_dbus_grnt        (tcipif_bmu_dbus_grnt       ),
  .tcipif_bmu_dbus_trans_cmplt (tcipif_bmu_dbus_trans_cmplt)
);


// &ConnRule(s/xx/had/); @56
// &ConnRule(s/tt/had/); @57
// &Instance("pa_bmu_bus_if","x_pa_bmu_had_if"); @58
pa_bmu_bus_if  x_pa_bmu_had_if (
  .bmu_clk                    (bmu_clk                   ),
  .bmu_dahbl_xx_acc_deny      (bmu_dahbl_had_acc_deny    ),
  .bmu_dahbl_xx_addr          (bmu_dahbl_had_addr        ),
  .bmu_dahbl_xx_burst         (bmu_dahbl_had_burst       ),
  .bmu_dahbl_xx_prot          (bmu_dahbl_had_prot        ),
  .bmu_dahbl_xx_req           (bmu_dahbl_had_req         ),
  .bmu_dahbl_xx_req_dp        (bmu_dahbl_had_req_dp      ),
  .bmu_dahbl_xx_seq           (bmu_dahbl_had_seq         ),
  .bmu_dahbl_xx_size          (bmu_dahbl_had_size        ),
  .bmu_dahbl_xx_wdata         (bmu_dahbl_had_wdata       ),
  .bmu_dahbl_xx_write         (bmu_dahbl_had_write       ),
  .bmu_iahbl_xx_acc_deny      (bmu_iahbl_had_acc_deny    ),
  .bmu_iahbl_xx_addr          (bmu_iahbl_had_addr        ),
  .bmu_iahbl_xx_burst         (bmu_iahbl_had_burst       ),
  .bmu_iahbl_xx_prot          (bmu_iahbl_had_prot        ),
  .bmu_iahbl_xx_req           (bmu_iahbl_had_req         ),
  .bmu_iahbl_xx_req_dp        (bmu_iahbl_had_req_dp      ),
  .bmu_iahbl_xx_seq           (bmu_iahbl_had_seq         ),
  .bmu_iahbl_xx_size          (bmu_iahbl_had_size        ),
  .bmu_iahbl_xx_wdata         (bmu_iahbl_had_wdata       ),
  .bmu_iahbl_xx_write         (bmu_iahbl_had_write       ),
  .bmu_sahbl_xx_acc_deny      (bmu_sahbl_had_acc_deny    ),
  .bmu_sahbl_xx_addr          (bmu_sahbl_had_addr        ),
  .bmu_sahbl_xx_burst         (bmu_sahbl_had_burst       ),
  .bmu_sahbl_xx_prot          (bmu_sahbl_had_prot        ),
  .bmu_sahbl_xx_req           (bmu_sahbl_had_req         ),
  .bmu_sahbl_xx_req_dp        (bmu_sahbl_had_req_dp      ),
  .bmu_sahbl_xx_seq           (bmu_sahbl_had_seq         ),
  .bmu_sahbl_xx_size          (bmu_sahbl_had_size        ),
  .bmu_sahbl_xx_wdata         (bmu_sahbl_had_wdata       ),
  .bmu_sahbl_xx_write         (bmu_sahbl_had_write       ),
  .bmu_tcipif_xx_acc_deny     (bmu_tcipif_had_acc_deny   ),
  .bmu_tcipif_xx_addr         (bmu_tcipif_had_addr       ),
  .bmu_tcipif_xx_req          (bmu_tcipif_had_req        ),
  .bmu_tcipif_xx_req_dp       (bmu_tcipif_had_req_dp     ),
  .bmu_tcipif_xx_size         (bmu_tcipif_had_size       ),
  .bmu_tcipif_xx_supv_mode    (bmu_tcipif_had_supv_mode  ),
  .bmu_tcipif_xx_wdata        (bmu_tcipif_had_wdata      ),
  .bmu_tcipif_xx_write        (bmu_tcipif_had_write      ),
  .bmu_tt_acc_err             (bmu_had_acc_err           ),
  .bmu_tt_clk_en              (bmu_had_clk_en            ),
  .bmu_tt_grant               (bmu_had_grant             ),
  .bmu_tt_rdata               (bmu_had_rdata             ),
  .bmu_tt_trans_cmplt         (bmu_had_trans_cmplt       ),
  .cp0_yy_mach_mode           (cp0_yy_mach_mode          ),
  .cpurst_b                   (cpurst_b                  ),
  .dahbl_bmu_xx_acc_err       (dahbl_bmu_had_acc_err     ),
  .dahbl_bmu_xx_data          (dahbl_bmu_had_data        ),
  .dahbl_bmu_xx_grnt          (dahbl_bmu_had_grnt        ),
  .dahbl_bmu_xx_trans_cmplt   (dahbl_bmu_had_trans_cmplt ),
  .iahbl_bmu_xx_acc_err       (iahbl_bmu_had_acc_err     ),
  .iahbl_bmu_xx_data          (iahbl_bmu_had_data        ),
  .iahbl_bmu_xx_grnt          (iahbl_bmu_had_grnt        ),
  .iahbl_bmu_xx_trans_cmplt   (iahbl_bmu_had_trans_cmplt ),
  .pad_bmu_dahbl_base         (pad_bmu_dahbl_base        ),
  .pad_bmu_dahbl_mask         (pad_bmu_dahbl_mask        ),
  .pad_bmu_iahbl_base         (pad_bmu_iahbl_base        ),
  .pad_bmu_iahbl_mask         (pad_bmu_iahbl_mask        ),
  .sahbl_bmu_xx_acc_err       (sahbl_bmu_had_acc_err     ),
  .sahbl_bmu_xx_data          (sahbl_bmu_had_data        ),
  .sahbl_bmu_xx_grnt          (sahbl_bmu_had_grnt        ),
  .sahbl_bmu_xx_trans_cmplt   (sahbl_bmu_had_trans_cmplt ),
  .tcipif_bmu_xx_acc_err      (tcipif_bmu_had_acc_err    ),
  .tcipif_bmu_xx_data         (tcipif_bmu_had_data       ),
  .tcipif_bmu_xx_grnt         (tcipif_bmu_had_grnt       ),
  .tcipif_bmu_xx_trans_cmplt  (tcipif_bmu_had_trans_cmplt),
  .tt_bmu_acc_deny            (had_bmu_acc_deny          ),
  .tt_bmu_addr                (had_bmu_addr              ),
  .tt_bmu_burst               (had_bmu_burst             ),
  .tt_bmu_data_req            (had_bmu_data_req          ),
  .tt_bmu_prot                (had_bmu_prot              ),
  .tt_bmu_req                 (had_bmu_req               ),
  .tt_bmu_seq                 (had_bmu_seq               ),
  .tt_bmu_size                (had_bmu_size              ),
  .tt_bmu_wdata               (had_bmu_wdata             ),
  .tt_bmu_write               (had_bmu_write             )
);

assign had_bmu_acc_deny = 1'b0;
assign had_bmu_data_req = had_bmu_req;

// &Force("nonport", "had_dbginfo"); @64
// &ModuleEnd; @66
endmodule
























// &Depend("pa_clic_arb_kernel.v") @22
// &Depend("pa_clic_arb_32to1_kernel.v") @23
// &Depend("pa_clic_ff1_onehot.v") @24
// &Depend("pa_clic_expand.v") @25
// &Depend("pa_clic_sel.v") @26

// &ModuleBeg; @28
module pa_clic_arb(
  arb_ctrl_int_hv,
  arb_ctrl_int_id,
  arb_ctrl_int_il,
  arb_ctrl_int_mode,
  arb_ctrl_int_req_raw,
  ctrl_xx_int_lv_or_mask,
  kid_arb_int_all_vec,
  kid_arb_int_hv,
  kid_arb_int_req
);

// &Ports; @29
input   [2  :0]  ctrl_xx_int_lv_or_mask;
input   [191:0]  kid_arb_int_all_vec;
input   [47 :0]  kid_arb_int_hv;
input   [47 :0]  kid_arb_int_req;
output           arb_ctrl_int_hv;
output  [11 :0]  arb_ctrl_int_id;
output  [7  :0]  arb_ctrl_int_il;
output           arb_ctrl_int_mode;
output           arb_ctrl_int_req_raw;

// &Regs; @30

// &Wires; @31
wire             arb_ctrl_int_hv;
wire    [11 :0]  arb_ctrl_int_id;
wire    [7  :0]  arb_ctrl_int_il;
wire             arb_ctrl_int_mode;
wire             arb_ctrl_int_req_raw;
wire    [3  :0]  arb_final_int_all;
wire             arb_final_int_hv;
wire    [11 :0]  arb_final_int_id;
wire    [2  :0]  arb_final_int_lv;
wire             arb_final_int_mode;
wire             arb_final_int_req;
wire    [2  :0]  ctrl_xx_int_lv_or_mask;
wire    [47 :0]  kid_arb_int_req;


parameter CLICINTNUM     = `CLIC_INTNUM;
parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;
parameter ID_WIDTH       = 12;

// &Force("input", "kid_arb_int_all_vec"); @37
// &Force("bus", "kid_arb_int_all_vec", (CLICINTCTLBITS+1)*(CLICINTNUM)-1, 0); @38
// &Force("input", "kid_arb_int_hv"); &Force("bus", "kid_arb_int_hv", CLICINTNUM-1, 0); @39
// &Force("input", "kid_arb_int_req"); &Force("bus", "kid_arb_int_req", CLICINTNUM-1, 0); @40




//csky vperl_off
wire [ID_WIDTH*CLICINTNUM-1:0] id_vec;

genvar i;
generate
  for (i = 0; i < CLICINTNUM; i = i+1)
  begin: GEN_ID
    assign id_vec[ID_WIDTH*i+:ID_WIDTH] = $unsigned(i) & {ID_WIDTH{1'b1}};
  end
endgenerate

pa_clic_arb_kernel #((CLICINTCTLBITS+1), CLICINTNUM) x_pa_clic_arb_kernel (
  .id_in_vec      (id_vec),
  .hv_in_vec      (kid_arb_int_hv),
  .prio_in_vec    (kid_arb_int_all_vec),
  .req_in_vec     (kid_arb_int_req),
  .id_out         (arb_final_int_id),
  .hv_out         (arb_final_int_hv),
  .prio_out       (arb_final_int_all),
  .req_out        (arb_final_int_req)
);
//csky vperl_on


// &Force("nonport", "arb_final_int_id"); @69
// &Force("nonport", "arb_final_int_hv"); @70
// &Force("nonport", "arb_final_int_all"); @71
// &Force("nonport", "arb_final_int_req"); @72

assign arb_final_int_mode = arb_final_int_all[CLICINTCTLBITS];
assign arb_final_int_lv[CLICINTCTLBITS-1:0] = arb_final_int_all[CLICINTCTLBITS-1:0]
                                         | ctrl_xx_int_lv_or_mask[CLICINTCTLBITS-1:0]
                                         & {CLICINTCTLBITS{arb_final_int_req}};





assign arb_ctrl_int_hv               = arb_final_int_hv;
assign arb_ctrl_int_id[ID_WIDTH-1:0] = arb_final_int_id[ID_WIDTH-1:0];
assign arb_ctrl_int_mode             = arb_final_int_mode;
assign arb_ctrl_int_il[7:0]          = {arb_final_int_lv[CLICINTCTLBITS-1:0],
                                        {(8-CLICINTCTLBITS){arb_final_int_req}}};




assign arb_ctrl_int_req_raw = |kid_arb_int_req[CLICINTNUM-1:0];

// &ModuleEnd; @94
endmodule























module pa_clic_arb_32to1_kernel(

  prio_in_vec,

  prio_out_mid,
  sel_out_onehot
);

parameter PRIO_WIDTH   = 6;
parameter INT_NUM     = 32;
parameter PRIO_EXP_NUM = 1 <<< PRIO_WIDTH;

input  [PRIO_EXP_NUM*INT_NUM-1:0] prio_in_vec;
output [PRIO_EXP_NUM-1:0]         prio_out_mid;
output [INT_NUM-1:0]              sel_out_onehot;

wire   [PRIO_EXP_NUM*INT_NUM-1:0] prio_in_vec;
wire   [PRIO_EXP_NUM-1:0]         prio_out_mid;
wire   [INT_NUM-1:0]              sel_out_onehot;

wire   [PRIO_EXP_NUM-1:0]    prio_in_2d[INT_NUM-1:0];
reg    [INT_NUM-1:0]         prio_in_2d_rev[PRIO_EXP_NUM-1:0];

genvar k;



generate
  for (k = 0; k < INT_NUM; k = k+1)
  begin: EXPEND_PRIO
    assign prio_in_2d[k][PRIO_EXP_NUM-1:0] = prio_in_vec[PRIO_EXP_NUM*k+:PRIO_EXP_NUM];
  end
endgenerate

integer i;
integer j;




always @ (*)
begin
  for (i = 0; i < INT_NUM; i = i+1) begin
    for (j = 0; j < PRIO_EXP_NUM; j = j+1) begin
      prio_in_2d_rev[j][i] = prio_in_2d[i][j];
    end
  end
end

wire   [PRIO_EXP_NUM-1:0]         high_prio_onehot;
reg    [PRIO_EXP_NUM-1:0]         prio_out;



always @ (*)
begin
  for (i = 0; i < PRIO_EXP_NUM; i = i+1) begin
    prio_out[i] = |prio_in_2d_rev[i][INT_NUM-1:0];
  end
end

assign prio_out_mid[PRIO_EXP_NUM-1:0] = prio_out[PRIO_EXP_NUM-1:0];

pa_clic_ff1_onehot #(PRIO_EXP_NUM) x_pa_clic_high_prio(
  .data_in        (prio_out),
  .ff1_out_onehot (high_prio_onehot)
);

wire   [PRIO_EXP_NUM-1:0]    prio_after_mask_2d[INT_NUM-1:0];
wire   [INT_NUM-1:0]         int_hit_prio;
generate
  for (k = 0; k < INT_NUM; k = k+1)
  begin: PRIO_MASK
    assign prio_after_mask_2d[k][PRIO_EXP_NUM-1:0] = prio_in_2d[k][PRIO_EXP_NUM-1:0] & high_prio_onehot[PRIO_EXP_NUM-1:0];
    assign int_hit_prio[k] = |prio_after_mask_2d[k][PRIO_EXP_NUM-1:0];
  end
endgenerate

wire   [INT_NUM-1:0]          int_sel_onehot;

pa_clic_ff1_onehot #(INT_NUM) x_pa_clic_num(
  .data_in        (int_hit_prio),
  .ff1_out_onehot (int_sel_onehot)
);

assign sel_out_onehot[INT_NUM-1:0] = int_sel_onehot[INT_NUM-1:0];

endmodule






















module pa_clic_arb_kernel(

  id_in_vec,
  hv_in_vec,
  prio_in_vec,
  req_in_vec,

  id_out,
  hv_out,
  prio_out,
  req_out
);

parameter PRIO_WIDTH    = 6;
parameter INT_NUM       = 64;
parameter NUM_PER_GROUP = 16;

parameter ID_WIDTH      = 12;
parameter PRIO_EXP_NUM  = 1 <<< PRIO_WIDTH;
parameter GROUP_NUM     = (INT_NUM-1) / NUM_PER_GROUP + 1;
parameter ALL_ARB_WIDTH = PRIO_WIDTH*GROUP_NUM*NUM_PER_GROUP;
parameter ALL_EXP_WIDTH = PRIO_EXP_NUM*GROUP_NUM*NUM_PER_GROUP;
parameter ALL_ID_WIDTH  = ID_WIDTH*GROUP_NUM*NUM_PER_GROUP;
parameter ALL_INT_WIDTH = GROUP_NUM*NUM_PER_GROUP;

input  [ID_WIDTH*INT_NUM-1:0]   id_in_vec;
input  [INT_NUM-1:0]            hv_in_vec;
input  [PRIO_WIDTH*INT_NUM-1:0] prio_in_vec;
input  [INT_NUM-1:0]            req_in_vec;
output [ID_WIDTH-1:0]           id_out;
output                          hv_out;
output [PRIO_WIDTH-1:0]         prio_out;
output                          req_out;

wire   [ID_WIDTH*INT_NUM-1:0]   id_in_vec;
wire   [INT_NUM-1:0]            hv_in_vec;
wire   [PRIO_WIDTH*INT_NUM-1:0] prio_in_vec;
wire   [INT_NUM-1:0]            req_in_vec;
wire   [ID_WIDTH-1:0]           id_out;
wire                            hv_out;
wire   [PRIO_WIDTH-1:0]         prio_out;
wire                            req_out;




wire   [PRIO_EXP_NUM*INT_NUM-1:0] prio_expand_vec;

pa_clic_expand #(PRIO_WIDTH, INT_NUM) x_pa_clic_prio_expand(
  .data_in_vec    (prio_in_vec),
  .expand_out_vec (prio_expand_vec)
);




wire   [ALL_EXP_WIDTH-1:0]   prio_expand_vec_padding;
assign prio_expand_vec_padding[ALL_EXP_WIDTH-1:0] = {{(ALL_EXP_WIDTH-PRIO_EXP_NUM*INT_NUM){1'b0}},
                                                 prio_expand_vec[PRIO_EXP_NUM*INT_NUM-1:0]};

wire   [ALL_ARB_WIDTH-1:0]   prio_in_vec_padding;
assign prio_in_vec_padding[ALL_ARB_WIDTH-1:0] = {{(ALL_ARB_WIDTH-PRIO_WIDTH*INT_NUM){1'b0}},
                                                 prio_in_vec[PRIO_WIDTH*INT_NUM-1:0]};

wire   [ALL_ID_WIDTH-1:0]    id_vec_padding;
assign id_vec_padding[ALL_ID_WIDTH-1:0] = {{(ALL_ID_WIDTH-ID_WIDTH*INT_NUM){1'b0}},
                                              id_in_vec[ID_WIDTH*INT_NUM-1:0]};

wire   [ALL_INT_WIDTH-1:0]   hv_vec_padding;
assign hv_vec_padding[ALL_INT_WIDTH-1:0] =  {{(ALL_INT_WIDTH-INT_NUM){1'b0}}, hv_in_vec[INT_NUM-1:0]};

wire   [ALL_INT_WIDTH-1:0]   req_vec_padding;
assign req_vec_padding[ALL_INT_WIDTH-1:0] = {{(ALL_INT_WIDTH-INT_NUM){1'b0}}, req_in_vec[INT_NUM-1:0]};




wire   [PRIO_EXP_NUM*GROUP_NUM-1:0]  prio_out_mid_1st;
wire   [NUM_PER_GROUP*GROUP_NUM-1:0] sel_out_onehot_1st;

wire   [PRIO_WIDTH*GROUP_NUM-1:0]    sel_out_prio_vec_1st;
wire   [ID_WIDTH*GROUP_NUM-1:0]      sel_out_id_vec_1st;

wire   [GROUP_NUM-1:0]               sel_out_hv_vec_1st;
wire   [GROUP_NUM-1:0]               sel_out_req_vec_1st;

genvar i;

generate
for (i = 0; i < GROUP_NUM; i = i+1)
begin: GROUP



  pa_clic_arb_32to1_kernel #(PRIO_WIDTH, NUM_PER_GROUP) x_pa_clic_arb_1st_round(
    .prio_in_vec    (prio_expand_vec_padding[(PRIO_EXP_NUM*NUM_PER_GROUP)*i+:(PRIO_EXP_NUM*NUM_PER_GROUP)]),
    .prio_out_mid   (prio_out_mid_1st[PRIO_EXP_NUM*i+:PRIO_EXP_NUM]),
    .sel_out_onehot (sel_out_onehot_1st[NUM_PER_GROUP*i+:NUM_PER_GROUP])
  );




  pa_clic_sel #(PRIO_WIDTH, NUM_PER_GROUP) x_pa_clic_lv_sel_1st_round(
    .data_in        (prio_in_vec_padding[(PRIO_WIDTH*NUM_PER_GROUP)*i+:(PRIO_WIDTH*NUM_PER_GROUP)]),
    .sel_in_onehot  (sel_out_onehot_1st[NUM_PER_GROUP*i+:NUM_PER_GROUP]),
    .data_out       (sel_out_prio_vec_1st[PRIO_WIDTH*i+:PRIO_WIDTH])
  );




  pa_clic_sel #(ID_WIDTH, NUM_PER_GROUP) x_pa_clic_id_sel_1st_round(
    .data_in        (id_vec_padding[(ID_WIDTH*NUM_PER_GROUP)*i+:(ID_WIDTH*NUM_PER_GROUP)]),
    .sel_in_onehot  (sel_out_onehot_1st[NUM_PER_GROUP*i+:NUM_PER_GROUP]),
    .data_out       (sel_out_id_vec_1st[ID_WIDTH*i+:ID_WIDTH])
  );




  assign sel_out_hv_vec_1st[i]  = |(sel_out_onehot_1st[NUM_PER_GROUP*i+:NUM_PER_GROUP] & hv_vec_padding[NUM_PER_GROUP*i+:NUM_PER_GROUP]);
  assign sel_out_req_vec_1st[i] = |(sel_out_onehot_1st[NUM_PER_GROUP*i+:NUM_PER_GROUP] & req_vec_padding[NUM_PER_GROUP*i+:NUM_PER_GROUP]);

end
endgenerate







wire [PRIO_EXP_NUM-1:0] prio_out_mid_2nd;
wire [GROUP_NUM-1:0]    sel_out_2nd_round;

pa_clic_arb_32to1_kernel #(PRIO_WIDTH, GROUP_NUM) x_pa_clic_arb_2nd_round(
  .prio_in_vec     (prio_out_mid_1st),
  .prio_out_mid    (prio_out_mid_2nd), // Not Use.
  .sel_out_onehot  (sel_out_2nd_round)
);




pa_clic_sel #(PRIO_WIDTH, GROUP_NUM) x_pa_clic_lv_sel_2nd_round(
  .data_in         (sel_out_prio_vec_1st),
  .sel_in_onehot   (sel_out_2nd_round),
  .data_out        (prio_out)
);




pa_clic_sel #(ID_WIDTH, GROUP_NUM) x_pa_clic_id_sel_2nd_round(
  .data_in         (sel_out_id_vec_1st),
  .sel_in_onehot   (sel_out_2nd_round),
  .data_out        (id_out)
);




assign hv_out  = |(sel_out_hv_vec_1st[GROUP_NUM-1:0]  & sel_out_2nd_round);
assign req_out = |(sel_out_req_vec_1st[GROUP_NUM-1:0] & sel_out_2nd_round);

endmodule






















// &Depend("pa_clic_sel.v"); @22
// &ModuleBeg; @23
module pa_clic_busif(
  busif_ctrl_cliccfg_sel,
  busif_ctrl_clicinfo_sel,
  busif_ctrl_mintthresh_sel,
  busif_kid_clicintattr_sel,
  busif_kid_clicintctl_sel,
  busif_kid_clicintie_sel,
  busif_kid_clicintip_sel,
  busif_kid_wdata,
  busif_xx_write_vld,
  clic_clk_en,
  clic_tcipif_cmplt,
  clic_tcipif_rdata,
  ctrl_busif_cliccfg_val,
  ctrl_busif_clicinfo_val,
  ctrl_busif_mintthresh_val,
  kid_busif_rdata_vec,
  rtu_clic_warm_up,
  tcipif_clic_addr,
  tcipif_clic_sel,
  tcipif_clic_size,
  tcipif_clic_wdata,
  tcipif_clic_write
);

// &Ports; @24
input             clic_clk_en;
input   [31  :0]  ctrl_busif_cliccfg_val;
input   [31  :0]  ctrl_busif_clicinfo_val;
input   [31  :0]  ctrl_busif_mintthresh_val;
input   [1535:0]  kid_busif_rdata_vec;
input             rtu_clic_warm_up;
input   [15  :0]  tcipif_clic_addr;
input             tcipif_clic_sel;
input   [1   :0]  tcipif_clic_size;
input   [31  :0]  tcipif_clic_wdata;
input             tcipif_clic_write;
output            busif_ctrl_cliccfg_sel;
output            busif_ctrl_clicinfo_sel;
output            busif_ctrl_mintthresh_sel;
output  [47  :0]  busif_kid_clicintattr_sel;
output  [47  :0]  busif_kid_clicintctl_sel;
output  [47  :0]  busif_kid_clicintie_sel;
output  [47  :0]  busif_kid_clicintip_sel;
output  [31  :0]  busif_kid_wdata;
output            busif_xx_write_vld;
output            clic_tcipif_cmplt;
output  [31  :0]  clic_tcipif_rdata;

// &Regs; @25
reg     [3   :0]  busif_kid_reg_sel;

// &Wires; @26
wire    [15  :0]  busif_addr;
wire              busif_cmplt;
wire              busif_ctrl_cliccfg_sel;
wire              busif_ctrl_clicinfo_sel;
wire              busif_ctrl_mintthresh_sel;
wire    [47  :0]  busif_kid_sel;
wire    [31  :0]  busif_kid_wdata;
wire              busif_read_vld;
wire              busif_sel;
wire    [1   :0]  busif_size;
wire    [31  :0]  busif_wdata;
wire              busif_write;
wire              busif_xx_write_vld;
wire              clic_clk_en;
wire              clic_tcipif_cmplt;
wire    [31  :0]  clic_tcipif_rdata;
wire              cliccfg_sel;
wire              clicinfo_sel;
wire    [31  :0]  ctrl_busif_cliccfg_val;
wire    [31  :0]  ctrl_busif_clicinfo_val;
wire    [31  :0]  ctrl_busif_mintthresh_val;
wire    [31  :0]  kid_busif_rdata;
wire              mintthresh_sel;
wire    [15  :0]  tcipif_clic_addr;
wire              tcipif_clic_sel;
wire    [1   :0]  tcipif_clic_size;
wire    [31  :0]  tcipif_clic_wdata;
wire              tcipif_clic_write;


parameter CLICINTNUM = `CLIC_INTNUM;

parameter CLICCFG_BASE    = 16'h0000;
parameter CLICINFO_BASE   = 16'h0004;
parameter MINTTHRESH_BASE = 16'h0008;

parameter CLICKID_BASE    = 16'h1000;

// &Instance("gated_clk_cell", "x_tcip_clk"); @72
// &Connect(.clk_in      (clic_clk), @73
//          .external_en (1'b0), @74
//          .global_en   (1'b1), @75
//          .module_en   (1'b0), @76
//          .local_en    (tcip_clk_en), @77
//          .clk_out     (tcip_clk)); @78
assign busif_sel         = tcipif_clic_sel;
assign busif_addr[15:0]  = tcipif_clic_addr[15:0];
assign busif_write       = tcipif_clic_write;
assign busif_size[1:0]   = tcipif_clic_size[1:0];
assign busif_wdata[31:0] = tcipif_clic_wdata[31:0];
// &Force("input", "rtu_clic_warm_up"); @86

assign cliccfg_sel    = busif_addr[15:0] == CLICCFG_BASE;
assign clicinfo_sel   = busif_addr[15:0] == CLICINFO_BASE;
assign mintthresh_sel = busif_addr[15:0] == MINTTHRESH_BASE;
assign busif_ctrl_cliccfg_sel    = cliccfg_sel;
assign busif_ctrl_clicinfo_sel   = clicinfo_sel;
assign busif_ctrl_mintthresh_sel = mintthresh_sel;

assign busif_cmplt = busif_sel;
assign clic_tcipif_cmplt = busif_cmplt && clic_clk_en;
assign busif_kid_wdata[31:0] = busif_wdata[31:0];

// &CombBeg; @100
always @( busif_addr[1:0]
       or busif_size[1:0])
begin
  case({busif_addr[1:0], busif_size[1:0]})
    4'b00_00: busif_kid_reg_sel[3:0] = 4'b0001; // Byte
    4'b01_00: busif_kid_reg_sel[3:0] = 4'b0010;
    4'b10_00: busif_kid_reg_sel[3:0] = 4'b0100;
    4'b11_00: busif_kid_reg_sel[3:0] = 4'b1000; // Half word
    4'b00_01: busif_kid_reg_sel[3:0] = 4'b0011;
    4'b10_01: busif_kid_reg_sel[3:0] = 4'b1100;
    4'b00_10: busif_kid_reg_sel[3:0] = 4'b1111;
    default:  busif_kid_reg_sel[3:0] = 4'b0000;
  endcase
// &CombEnd; @111
end
// &Force("nonport", "busif_kid_reg_sel"); @112
// &Force("nonport", "busif_kid_sel"); @113

// &Force("output", "busif_kid_clicintip_sel"); @115
// &Force("output", "busif_kid_clicintie_sel"); @116
// &Force("output", "busif_kid_clicintattr_sel"); @117
// &Force("output", "busif_kid_clicintctl_sel"); @118
// &Force("bus", "busif_kid_clicintip_sel", CLICINTNUM-1, 0); @119
// &Force("bus", "busif_kid_clicintie_sel", CLICINTNUM-1, 0); @120
// &Force("bus", "busif_kid_clicintattr_sel", CLICINTNUM-1, 0); @121
// &Force("bus", "busif_kid_clicintctl_sel", CLICINTNUM-1, 0); @122

//csky vperl_off
wire [CLICINTNUM-1:0] busif_kid_clicintip_sel;
wire [CLICINTNUM-1:0] busif_kid_clicintie_sel;
wire [CLICINTNUM-1:0] busif_kid_clicintattr_sel;
wire [CLICINTNUM-1:0] busif_kid_clicintctl_sel;

genvar i;
generate
for (i = 0; i < CLICINTNUM; i = i+1)
begin: BUSIF_KID
  assign busif_kid_sel[i]             = (busif_addr[15:2] - CLICKID_BASE[15:2]) == i;
  assign busif_kid_clicintip_sel[i]   = busif_kid_sel[i] && busif_kid_reg_sel[0];
  assign busif_kid_clicintie_sel[i]   = busif_kid_sel[i] && busif_kid_reg_sel[1];
  assign busif_kid_clicintattr_sel[i] = busif_kid_sel[i] && busif_kid_reg_sel[2];
  assign busif_kid_clicintctl_sel[i]  = busif_kid_sel[i] && busif_kid_reg_sel[3];
end
endgenerate
//csky vperl_on

assign busif_xx_write_vld = busif_sel && busif_write;
assign busif_read_vld     = busif_sel && !busif_write;



// &Force("input", "kid_busif_rdata_vec"); @148
// &Force("bus", "kid_busif_rdata_vec", (CLICINTNUM)*32-1, 0); @149
// &Force("nonport", "kid_busif_rdata"); @150
//csky vperl_off
pa_clic_sel #(32, CLICINTNUM) x_pa_clic_kid_rdata_sel(
  .data_in         (kid_busif_rdata_vec),
  .sel_in_onehot   (busif_kid_sel),
  .data_out        (kid_busif_rdata)
);
//csky vperl_on

assign clic_tcipif_rdata[31:0] = {{32{cliccfg_sel}}    & ctrl_busif_cliccfg_val[31:0]
                                | {32{clicinfo_sel}}   & ctrl_busif_clicinfo_val[31:0]
                                | {32{mintthresh_sel}} & ctrl_busif_mintthresh_val[31:0]
                                | {32{|busif_kid_sel[CLICINTNUM-1:0]}} & kid_busif_rdata[31:0]}
                                & {32{busif_read_vld}};

// &ModuleEnd; @165
endmodule
























// &ModuleBeg; @23
module pa_clic_cpuif(
  clic_clk_en,
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  clic_int_hv,
  clic_int_id,
  clic_int_il_raw,
  clic_int_priv,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpu_int_exit,
  ctrl_kid_ack_int
);


// &Ports; @25
input           clic_clk_en;
input           clic_int_hv;
input   [11:0]  clic_int_id;
input   [7 :0]  clic_int_il_raw;
input   [1 :0]  clic_int_priv;
input   [11:0]  cpu_clic_curid;
input           cpu_clic_int_exit;
output          clic_cpu_int_hv;
output  [11:0]  clic_cpu_int_id;
output  [7 :0]  clic_cpu_int_il;
output  [1 :0]  clic_cpu_int_priv;
output          cpu_int_exit;
output  [47:0]  ctrl_kid_ack_int;

// &Regs; @26

// &Wires; @27
wire            clic_clk_en;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire            clic_int_hv;
wire    [11:0]  clic_int_id;
wire    [7 :0]  clic_int_il;
wire    [7 :0]  clic_int_il_raw;
wire    [1 :0]  clic_int_priv;
wire            cpu_clic_int_exit;
wire            cpu_int_exit;


parameter CLICINTNUM = `CLIC_INTNUM;
parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;
parameter ID_WIDTH = 12;




assign cpu_int_exit = cpu_clic_int_exit;
// &Force("output", "ctrl_kid_ack_int"); &Force("bus", "ctrl_kid_ack_int", CLICINTNUM-1, 0); @37
// &Force("input", "cpu_clic_curid"); &Force("bus", "cpu_clic_curid", ID_WIDTH-1, 0); @38

//csky vperl_off
wire [CLICINTNUM-1:0]   ctrl_kid_ack_sel;
wire [CLICINTNUM-1:0]   ctrl_kid_ack_int;
wire [ID_WIDTH-1:0]     cpu_clic_curid;

genvar i;
generate
for (i = 0; i < CLICINTNUM; i = i+1)
begin: KID_ACK
  assign ctrl_kid_ack_sel[i] = cpu_clic_curid[ID_WIDTH-1:0] == ($unsigned(i) & {ID_WIDTH{1'b1}});
  assign ctrl_kid_ack_int[i] = ctrl_kid_ack_sel[i] && cpu_clic_int_exit;
end
endgenerate
//csky vperl_on




assign clic_int_il[7:0] = {8{clic_clk_en}} & clic_int_il_raw[7:0];

assign clic_cpu_int_hv               = clic_int_hv;
assign clic_cpu_int_id[ID_WIDTH-1:0] = clic_int_id[ID_WIDTH-1:0];
assign clic_cpu_int_priv[1:0]        = clic_int_priv[1:0];
assign clic_cpu_int_il[7:0]          = clic_int_il[7:0];

// &ModuleEnd; @65
endmodule
























// &ModuleBeg; @22
module pa_clic_ctrl(
  arb_ctrl_int_hv,
  arb_ctrl_int_id,
  arb_ctrl_int_il,
  arb_ctrl_int_mode,
  arb_ctrl_int_req_raw,
  busif_ctrl_cliccfg_sel,
  busif_ctrl_clicinfo_sel,
  busif_ctrl_mintthresh_sel,
  busif_kid_wdata,
  busif_xx_write_vld,
  clic_clk,
  clic_clk_en,
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  clicreg_clk,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpu_clic_mode,
  cpurst_b,
  ctrl_busif_cliccfg_val,
  ctrl_busif_clicinfo_val,
  ctrl_busif_mintthresh_val,
  ctrl_clicreg_en,
  ctrl_kid_ack_int,
  ctrl_xx_int_lv_or_mask,
  ctrl_xx_mode_or_mask,
  pad_yy_gate_clk_en_b
);

// &Ports; @23
input           arb_ctrl_int_hv;
input   [11:0]  arb_ctrl_int_id;
input   [7 :0]  arb_ctrl_int_il;
input           arb_ctrl_int_mode;
input           arb_ctrl_int_req_raw;
input           busif_ctrl_cliccfg_sel;
input           busif_ctrl_clicinfo_sel;
input           busif_ctrl_mintthresh_sel;
input   [31:0]  busif_kid_wdata;
input           busif_xx_write_vld;
input           clic_clk;
input           clic_clk_en;
input           clicreg_clk;
input   [11:0]  cpu_clic_curid;
input           cpu_clic_int_exit;
input   [1 :0]  cpu_clic_mode;
input           cpurst_b;
input           pad_yy_gate_clk_en_b;
output          clic_cpu_int_hv;
output  [11:0]  clic_cpu_int_id;
output  [7 :0]  clic_cpu_int_il;
output  [1 :0]  clic_cpu_int_priv;
output  [31:0]  ctrl_busif_cliccfg_val;
output  [31:0]  ctrl_busif_clicinfo_val;
output  [31:0]  ctrl_busif_mintthresh_val;
output          ctrl_clicreg_en;
output  [47:0]  ctrl_kid_ack_int;
output  [2 :0]  ctrl_xx_int_lv_or_mask;
output          ctrl_xx_mode_or_mask;

// &Regs; @24
reg             clic_int_hv;
reg     [11:0]  clic_int_id;
reg     [7 :0]  clic_int_il_raw;
reg     [1 :0]  clic_int_priv;
reg     [3 :0]  cliccfg_nlbits;
reg     [7 :0]  mintthresh_mth;

// &Wires; @25
wire            arb_ctrl_int_hv;
wire    [11:0]  arb_ctrl_int_id;
wire    [7 :0]  arb_ctrl_int_il;
wire            arb_ctrl_int_mode;
wire            arb_ctrl_int_req_raw;
wire            busif_ctrl_cliccfg_sel;
wire            busif_ctrl_mintthresh_sel;
wire    [31:0]  busif_kid_wdata;
wire            busif_xx_write_vld;
wire            clic_clk;
wire            clic_clk_en;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire    [1 :0]  cliccfg_nmbits;
wire            cliccfg_nmbits_0;
wire            cliccfg_nvbits;
wire    [31:0]  cliccfg_reg;
wire    [7 :0]  cliccfg_updt_val;
wire    [3 :0]  clicinfo_arch_ver;
wire    [3 :0]  clicinfo_clicintctlbits;
wire    [3 :0]  clicinfo_impl_ver;
wire    [12:0]  clicinfo_num_int;
wire    [31:0]  clicinfo_reg;
wire            clicreg_clk;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire    [1 :0]  cpu_clic_mode;
wire            cpu_int_exit;
wire            cpurst_b;
wire    [31:0]  ctrl_busif_cliccfg_val;
wire    [31:0]  ctrl_busif_clicinfo_val;
wire    [31:0]  ctrl_busif_mintthresh_val;
wire            ctrl_cliccfg_updt_vld;
wire            ctrl_clicreg_en;
wire            ctrl_int_gt_thresh;
wire    [47:0]  ctrl_kid_ack_int;
wire            ctrl_mintthresh_updt_vld;
wire            ctrl_mode_vld;
wire    [7 :0]  ctrl_thresh;
wire            ctrl_write_vld;
wire            ctrl_xx_mode_or_mask;
wire    [7 :0]  mintthresh_hth;
wire    [31:0]  mintthresh_reg;
wire    [7 :0]  mintthresh_sth;
wire    [31:0]  mintthresh_updt_val;
wire    [7 :0]  mintthresh_uth;
wire            out_clk;
wire            out_clk_en;
wire            pad_yy_gate_clk_en_b;


parameter CLICINTNUM = `CLIC_INTNUM;
parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;
parameter ID_WIDTH = 12;

parameter INT_MODE_U     = 1'b0;
parameter INT_MODE_M     = 1'b1;
parameter CPU_MODE_U     = 2'b00;
parameter CPU_MODE_M     = 2'b11;




assign cliccfg_updt_val[7:0]     = busif_kid_wdata[7:0];

assign mintthresh_updt_val[31:0] = busif_kid_wdata[31:0];





assign ctrl_mode_vld = cpu_clic_mode[1:0] == CPU_MODE_M;
assign ctrl_write_vld = busif_xx_write_vld && ctrl_mode_vld;
assign ctrl_cliccfg_updt_vld    = ctrl_write_vld && busif_ctrl_cliccfg_sel;
// &Force("input", "busif_ctrl_clicinfo_sel"); @50

assign ctrl_mintthresh_updt_vld = ctrl_write_vld && busif_ctrl_mintthresh_sel;




always @ (posedge clicreg_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    cliccfg_nlbits[3:0] <= 4'b0;
  else if (clic_clk_en && ctrl_cliccfg_updt_vld)
    cliccfg_nlbits[3:0] <= cliccfg_updt_val[4] ? 4'd8 : cliccfg_updt_val[4:1];  // if nlbits > 8, it will be 8.
  else
    cliccfg_nlbits[3:0] <= cliccfg_nlbits[3:0];
end

assign cliccfg_nmbits_0 = 1'b0;
assign ctrl_xx_mode_or_mask = !cliccfg_nmbits_0;


assign cliccfg_nmbits[1:0] = {1'b0, cliccfg_nmbits_0};
assign cliccfg_nvbits      = 1'b1;
assign cliccfg_reg[31:0]    = {25'b0,
                               cliccfg_nmbits[1:0],
                               cliccfg_nlbits[3:0],
                               cliccfg_nvbits};






//csky vperl_off
assign clicinfo_clicintctlbits[3:0] = $unsigned(CLICINTCTLBITS) & 4'hf;
assign clicinfo_arch_ver[3:0] = 4'b0;
assign clicinfo_impl_ver[3:0] = 4'b0;
assign clicinfo_num_int[12:0] = $unsigned(CLICINTNUM) & 13'h1fff;
//csky vperl_on
// &Force("nonport", "clicinfo_clicintctlbits"); @101
// &Force("nonport", "clicinfo_arch_ver"); @102
// &Force("nonport", "clicinfo_impl_ver"); @103
// &Force("nonport", "clicinfo_num_int"); @104

assign clicinfo_reg[31:0] = {7'b0,
                             clicinfo_clicintctlbits[3:0],
                             clicinfo_arch_ver[3:0],
                             clicinfo_impl_ver[3:0],
                             clicinfo_num_int[12:0]};





always @ (posedge clicreg_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    mintthresh_mth[7:0] <= 8'b0;


  end
  else if (clic_clk_en && ctrl_mintthresh_updt_vld) begin
    mintthresh_mth[7:0] <= mintthresh_updt_val[31:24];


  end
  else begin
    mintthresh_mth[7:0] <= mintthresh_mth[7:0];


  end
end

assign mintthresh_uth[7:0] = 8'b0;

assign mintthresh_hth[7:0] = 8'b0;
assign mintthresh_sth[7:0] = 8'b0;

assign mintthresh_reg[31:0] = {mintthresh_mth[7:0],
                               mintthresh_hth[7:0],
                               mintthresh_sth[7:0],
                               mintthresh_uth[7:0]};





assign ctrl_clicreg_en     = ctrl_mintthresh_updt_vld || ctrl_cliccfg_updt_vld;



// &Force("output", "ctrl_xx_int_lv_or_mask"); &Force("bus", "ctrl_xx_int_lv_or_mask", CLICINTCTLBITS-1, 0); @165
//csky vperl_off
wire [CLICINTCTLBITS-1:0] ctrl_xx_int_lv_or_mask;

genvar i;
generate
for (i = 0; i < CLICINTCTLBITS; i = i+1)
begin: LEVEL_MASK
  assign ctrl_xx_int_lv_or_mask[CLICINTCTLBITS-1-i] = !(($unsigned(i) & {4'hf}) < cliccfg_nlbits[3:0]);
end
endgenerate
//csky vperl_on




assign ctrl_busif_cliccfg_val[31:0]    = cliccfg_reg    & {32{ctrl_mode_vld}};
assign ctrl_busif_clicinfo_val[31:0]   = clicinfo_reg   & {32{ctrl_mode_vld}};
assign ctrl_busif_mintthresh_val[31:0] = mintthresh_reg & {32{ctrl_mode_vld}};




assign ctrl_thresh[7:0] = arb_ctrl_int_mode == INT_MODE_M ? mintthresh_mth[7:0]
                                                          : mintthresh_uth[7:0];
assign ctrl_int_gt_thresh = ctrl_thresh[7:0] < arb_ctrl_int_il[7:0];

always @ (posedge out_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    clic_int_hv               <= 1'b0;
    clic_int_id[ID_WIDTH-1:0] <= {ID_WIDTH{1'b0}};
    clic_int_priv[1:0]        <= 2'b0;
    clic_int_il_raw[7:0]      <= 8'b0;
  end
  else if (cpu_int_exit) begin
    clic_int_hv               <= 1'b0;
    clic_int_id[ID_WIDTH-1:0] <= {ID_WIDTH{1'b0}};
    clic_int_priv[1:0]        <= 2'b0;
    clic_int_il_raw[7:0]      <= 8'b0;
  end
  else if (clic_clk_en && out_clk_en) begin
    clic_int_hv               <= arb_ctrl_int_hv;
    clic_int_id[ID_WIDTH-1:0] <= arb_ctrl_int_id[ID_WIDTH-1:0];
    clic_int_priv[1:0]        <= {2{arb_ctrl_int_mode}};
    clic_int_il_raw[7:0]      <= {8{ctrl_int_gt_thresh}} & arb_ctrl_int_il[7:0];
  end
end

assign out_clk_en = arb_ctrl_int_req_raw
                 || |clic_int_il_raw[7:0];

// &Instance("gated_clk_cell", "x_out_clk"); @217
gated_clk_cell  x_out_clk (
  .clk_in               (clic_clk            ),
  .clk_out              (out_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (out_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (clic_clk), @218
//          .external_en (1'b0), @219
//          .global_en   (1'b1), @220
//          .module_en   (1'b0), @221
//          .local_en    (out_clk_en), @222
//          .clk_out     (out_clk)); @223

// &Instance("pa_clic_cpuif_2cycle"); @226
// &Instance("pa_clic_cpuif"); @228
pa_clic_cpuif  x_pa_clic_cpuif (
  .clic_clk_en       (clic_clk_en      ),
  .clic_cpu_int_hv   (clic_cpu_int_hv  ),
  .clic_cpu_int_id   (clic_cpu_int_id  ),
  .clic_cpu_int_il   (clic_cpu_int_il  ),
  .clic_cpu_int_priv (clic_cpu_int_priv),
  .clic_int_hv       (clic_int_hv      ),
  .clic_int_id       (clic_int_id      ),
  .clic_int_il_raw   (clic_int_il_raw  ),
  .clic_int_priv     (clic_int_priv    ),
  .cpu_clic_curid    (cpu_clic_curid   ),
  .cpu_clic_int_exit (cpu_clic_int_exit),
  .cpu_int_exit      (cpu_int_exit     ),
  .ctrl_kid_ack_int  (ctrl_kid_ack_int )
);


// &ModuleEnd; @231
endmodule























module pa_clic_expand(

  data_in_vec,

  expand_out_vec
);

parameter WIDTH = 6;
parameter NUM   = 32;
parameter EXP_WIDTH = 1 <<< WIDTH;

input  [WIDTH*NUM-1:0]      data_in_vec;
output [EXP_WIDTH*NUM-1:0]  expand_out_vec;

wire   [WIDTH*NUM-1:0]      data_in_vec;
wire   [EXP_WIDTH*NUM-1:0]  expand_out_vec;

genvar i;

generate
  for (i = 0; i < NUM; i = i+1)
  begin: EXPAND
    assign expand_out_vec[EXP_WIDTH*i+:EXP_WIDTH] = {{EXP_WIDTH-1{1'b0}}, 1'b1} << data_in_vec[WIDTH*i+:WIDTH];
  end
endgenerate

endmodule






















module pa_clic_ff1_onehot(
  data_in,
  ff1_out_onehot
);

parameter WIDTH = 32;

input  [WIDTH-1:0] data_in;
output [WIDTH-1:0] ff1_out_onehot;

wire [WIDTH:0] ff1_tmp;

assign ff1_tmp[WIDTH] = 1'b0;
genvar i;

generate
  for (i = 0; i < WIDTH; i = i+1)
  begin: FF1_ONEHOT
    assign ff1_tmp[i] = data_in[i] || ff1_tmp[i+1];
  end
endgenerate

assign ff1_out_onehot[WIDTH-1:0] = ff1_tmp[WIDTH:1] ^ ff1_tmp[WIDTH-1:0];

endmodule






















// &ModuleBeg; @22
module pa_clic_kid(
  busif_kid_clicintattr_sel,
  busif_kid_clicintctl_sel,
  busif_kid_clicintie_sel,
  busif_kid_clicintip_sel,
  busif_kid_wdata,
  busif_xx_write_vld,
  clic_clk,
  clic_clk_en,
  cpu_clic_mode,
  cpurst_b,
  ctrl_kid_ack_int,
  ctrl_xx_mode_or_mask,
  forever_cpuclk,
  kid_arb_int_all,
  kid_arb_int_hv,
  kid_arb_int_req,
  kid_busif_rdata,
  kid_int_vld,
  pad_yy_gate_clk_en_b
);

// &Ports; @23
input           busif_kid_clicintattr_sel;
input           busif_kid_clicintctl_sel;
input           busif_kid_clicintie_sel;
input           busif_kid_clicintip_sel;
input   [31:0]  busif_kid_wdata;
input           busif_xx_write_vld;
input           clic_clk;
input           clic_clk_en;
input   [1 :0]  cpu_clic_mode;
input           cpurst_b;
input           ctrl_kid_ack_int;
input           ctrl_xx_mode_or_mask;
input           forever_cpuclk;
input           kid_int_vld;
input           pad_yy_gate_clk_en_b;
output  [3 :0]  kid_arb_int_all;
output          kid_arb_int_hv;
output          kid_arb_int_req;
output  [31:0]  kid_busif_rdata;

// &Regs; @24
reg             clicintattr_shv;
reg     [1 :0]  clicintattr_trig;
reg             int_enable;
reg             int_pending;
reg             int_pending_updt_val;
reg     [2 :0]  int_prio;
reg             int_vld_ff_1;

// &Wires; @25
wire            busif_kid_clicintattr_sel;
wire            busif_kid_clicintctl_sel;
wire            busif_kid_clicintie_sel;
wire            busif_kid_clicintip_sel;
wire    [31:0]  busif_kid_wdata;
wire            busif_xx_write_vld;
wire            clic_clk;
wire            clic_clk_en;
wire            clic_kid_clk;
wire            clic_kid_clk_en;
wire    [1 :0]  clicintattr_mode;
wire    [7 :0]  clicintattr_reg;
wire    [7 :0]  clicintattr_updt_val;
wire            clicintattr_updt_vld;
wire    [7 :0]  clicintctl_reg;
wire    [7 :0]  clicintctl_updt_val;
wire            clicintctl_updt_vld;
wire    [7 :0]  clicintie_reg;
wire            clicintie_updt_vld;
wire    [7 :0]  clicintip_reg;
wire    [1 :0]  cpu_clic_mode;
wire            cpurst_b;
wire            ctrl_kid_ack_int;
wire            forever_cpuclk;
wire            int_enable_updt_val;
wire            int_level;
wire            int_neg_pulse;
wire            int_neg_pulse_1;
wire            int_neg_pulse_2;
wire            int_pending_clear;
wire            int_pending_set;
wire            int_pending_updt_val_raw;
wire            int_pending_updt_vld;
wire            int_pos_pulse;
wire            int_pos_pulse_1;
wire            int_pos_pulse_2;
wire            int_pulse;
wire            int_vld;
wire    [3 :0]  kid_arb_int_all;
wire            kid_arb_int_hv;
wire            kid_arb_int_req;
wire    [31:0]  kid_busif_rdata;
wire            kid_ctrl_clicintattr_en;
wire            kid_ctrl_clicintctl_en;
wire            kid_ctrl_clicintie_en;
wire            kid_ctrl_clicintip_en;
wire            kid_int_mode;
wire            kid_int_vld;
wire            kid_mode_vld;
wire            kid_sample_clk;
wire            kid_sample_clk_en;
wire            kid_write_vld;
wire            pad_yy_gate_clk_en_b;
wire            sw_clear_pending;
wire            sw_set_pending;


parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;

parameter INT_MODE_U     = 1'b0;
parameter INT_MODE_M     = 1'b1;
parameter CPU_MODE_U     = 2'b00;
parameter CPU_MODE_M     = 2'b11;




assign int_pending_updt_val_raw  = busif_kid_wdata[0];
assign int_enable_updt_val       = busif_kid_wdata[8];
assign clicintattr_updt_val[7:0] = busif_kid_wdata[23:16];
assign clicintctl_updt_val[7:0]  = busif_kid_wdata[31:24];

assign int_vld = kid_int_vld;







assign kid_mode_vld = cpu_clic_mode[1:0] == CPU_MODE_M
                   || cpu_clic_mode[1:0] == CPU_MODE_U && kid_int_mode == INT_MODE_U;




assign kid_write_vld  = busif_xx_write_vld && kid_mode_vld;
assign sw_set_pending       = kid_write_vld && busif_kid_clicintip_sel && int_pending_updt_val_raw;
assign sw_clear_pending     = kid_write_vld && busif_kid_clicintip_sel && !int_pending_updt_val_raw;
assign clicintie_updt_vld   = kid_write_vld && busif_kid_clicintie_sel;
assign clicintattr_updt_vld = kid_write_vld && busif_kid_clicintattr_sel;
assign clicintctl_updt_vld  = kid_write_vld && busif_kid_clicintctl_sel;




assign kid_sample_clk_en = int_vld ^ int_vld_ff_1;

always@(posedge kid_sample_clk or negedge cpurst_b)
begin
  if(!cpurst_b) begin
    int_vld_ff_1 <= 1'b0;
  end
  else begin
    int_vld_ff_1 <= int_vld;
  end
end

assign int_level = int_vld;

assign int_pos_pulse_1 =  int_vld && !int_vld_ff_1;
assign int_neg_pulse_1 = !int_vld &&  int_vld_ff_1;

assign int_pos_pulse_2 = 1'b0;
assign int_neg_pulse_2 = 1'b0;

assign int_pos_pulse = int_pos_pulse_1 || int_pos_pulse_2;
assign int_neg_pulse = int_neg_pulse_1 || int_neg_pulse_2;

































assign int_pulse = clicintattr_trig[1:0] == 2'b01 && int_pos_pulse
                || clicintattr_trig[1:0] == 2'b11 && int_neg_pulse;

assign int_pending_set   = int_pulse || sw_set_pending;
assign int_pending_clear = ctrl_kid_ack_int || sw_clear_pending;

assign int_pending_updt_vld = int_pending_set || int_pending_clear;



assign kid_ctrl_clicintip_en = int_pending_set
                            || int_pending
                            || !clicintattr_trig[0] && (int_pending ^ int_level);


// &CombBeg; @152
always @( int_pending_clear
       or int_pending
       or int_pending_set)
begin
if (int_pending_set)
  int_pending_updt_val = 1'b1;
else if (int_pending_clear)
  int_pending_updt_val = 1'b0;
else
  int_pending_updt_val = int_pending;
// &CombEnd; @159
end

always@(posedge clic_kid_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_pending <= 1'b0;
  else if (clic_clk_en) begin
    if (!clicintattr_trig[0])
      int_pending <= int_level;
    else if (int_pending_updt_vld)
      int_pending <= int_pending_updt_val;
    else
      int_pending <= int_pending;
  end
end
assign clicintip_reg[7:0] = {7'b0, int_pending};




assign kid_ctrl_clicintie_en = clicintie_updt_vld;

always@(posedge clic_kid_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_enable <= 1'b0;
  else if (clic_clk_en && clicintie_updt_vld)
    int_enable <= int_enable_updt_val;
  else
    int_enable <= int_enable;
end
assign clicintie_reg[7:0] = {7'b0, int_enable};



assign kid_ctrl_clicintattr_en = clicintattr_updt_vld;

always @ (posedge clic_kid_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    clicintattr_trig[1:0] <= 2'b0;
    clicintattr_shv       <= 1'b0;
  end
  else if (clic_clk_en && clicintattr_updt_vld) begin
    clicintattr_trig[1:0] <= clicintattr_updt_val[2:1];
    clicintattr_shv       <= clicintattr_updt_val[0];
  end
  else begin
    clicintattr_trig[1:0] <= clicintattr_trig[1:0];
    clicintattr_shv       <= clicintattr_shv;
  end
end
// &Force("input", "ctrl_xx_mode_or_mask"); @227
assign clicintattr_mode[1:0] = 2'b11;
assign kid_int_mode = 1'b1;

assign clicintattr_reg[7:0] = {clicintattr_mode[1:0],
                               3'b0,
                               clicintattr_trig[1:0],
                               clicintattr_shv};





assign kid_ctrl_clicintctl_en = clicintctl_updt_vld;

always@(posedge clic_kid_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_prio[CLICINTCTLBITS-1:0] <= {CLICINTCTLBITS{1'b0}};
  else if (clic_clk_en && clicintctl_updt_vld)
    int_prio[CLICINTCTLBITS-1:0] <= clicintctl_updt_val[7:8-CLICINTCTLBITS];
  else
    int_prio[CLICINTCTLBITS-1:0] <= int_prio[CLICINTCTLBITS-1:0];
end

assign clicintctl_reg[7:0] = {int_prio[CLICINTCTLBITS-1:0],
                              {(8-CLICINTCTLBITS){1'b1}}};





assign kid_busif_rdata[31:0] = {({8{busif_kid_clicintctl_sel}}  & clicintctl_reg[7:0]),
                                ({8{busif_kid_clicintattr_sel}} & clicintattr_reg[7:0]),
                                ({8{busif_kid_clicintie_sel}}   & clicintie_reg[7:0]),
                                ({8{busif_kid_clicintip_sel}}   & clicintip_reg[7:0])}
                             & {32{kid_mode_vld}};








assign kid_arb_int_req       = int_enable & int_pending;
// &Force("output", "kid_arb_int_req"); @274
assign kid_arb_int_hv        = clicintattr_shv;




assign kid_arb_int_all[CLICINTCTLBITS:0] = {kid_int_mode,
                                           int_prio[CLICINTCTLBITS-1:0]}
                                        & {(CLICINTCTLBITS+1){kid_arb_int_req}};






assign clic_kid_clk_en = kid_ctrl_clicintip_en
                      || kid_ctrl_clicintie_en
                      || kid_ctrl_clicintattr_en
                      || kid_ctrl_clicintctl_en;

// &Instance("gated_clk_cell", "x_clic_kid_clk"); @294
gated_clk_cell  x_clic_kid_clk (
  .clk_in               (clic_clk            ),
  .clk_out              (clic_kid_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (clic_kid_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (clic_clk), @295
//          .external_en (1'b0), @296
//          .global_en   (1'b1), @297
//          .module_en   (1'b0), @298
//          .local_en    (clic_kid_clk_en), @299
//          .clk_out     (clic_kid_clk)); @300

// &Instance("gated_clk_cell", "x_kid_sample_clk"); @302
gated_clk_cell  x_kid_sample_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (kid_sample_clk      ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (kid_sample_clk_en   ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @303
//          .external_en (1'b0), @304
//          .global_en   (1'b1), @305
//          .module_en   (1'b0), @306
//          .local_en    (kid_sample_clk_en), @307
//          .clk_out     (kid_sample_clk)); @308

// &ModuleEnd; @310
endmodule























// &ModuleBeg; @22
module pa_clic_kid_dummy(
  kid_arb_int_all,
  kid_arb_int_hv,
  kid_arb_int_req,
  kid_busif_rdata
);

// &Ports; @23
output  [3 :0]  kid_arb_int_all;
output          kid_arb_int_hv;
output          kid_arb_int_req;
output  [31:0]  kid_busif_rdata;

// &Regs; @24

// &Wires; @25
wire    [3 :0]  kid_arb_int_all;
wire            kid_arb_int_hv;
wire            kid_arb_int_req;
wire    [31:0]  kid_busif_rdata;


parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;

assign kid_arb_int_all[CLICINTCTLBITS:0] = {CLICINTCTLBITS+1{1'b0}};
assign kid_arb_int_hv = 1'b0;
assign kid_arb_int_req = 1'b0;
assign kid_busif_rdata[31:0] = 32'b0;

// &ModuleEnd; @34
endmodule























module pa_clic_sel(

  data_in,
  sel_in_onehot,

  data_out
);

parameter DATA_WIDTH   = 32;
parameter SEL_NUM      = 256;

input  [DATA_WIDTH*SEL_NUM-1:0] data_in;
input  [SEL_NUM-1:0]            sel_in_onehot;

output [DATA_WIDTH-1:0]         data_out;

reg    [DATA_WIDTH-1:0]         data_in_2d[SEL_NUM-1:0];
reg    [SEL_NUM-1:0]            data_in_2d_rev[DATA_WIDTH-1:0];
reg    [DATA_WIDTH-1:0]         data_out;




integer i;
integer j;

always @ (*)
begin
  for (i = 0; i < SEL_NUM; i = i+1) begin
    data_in_2d[i][DATA_WIDTH-1:0] = data_in[i*DATA_WIDTH+:DATA_WIDTH] & {DATA_WIDTH{sel_in_onehot[i]}};
  end
end




always @ (*)
begin
  for (i = 0; i < SEL_NUM; i = i+1) begin
    for (j = 0; j < DATA_WIDTH; j = j+1) begin
      data_in_2d_rev[j][i] = data_in_2d[i][j];
    end
  end
end




always @ (*)
begin
  for (i = 0; i < DATA_WIDTH; i = i+1) begin
    data_out[i] = |data_in_2d_rev[i][SEL_NUM-1:0];
  end
end


endmodule





















// &Depend("pa_clic_kid.vp"); @22
// &Depend("pa_clic_kid_dummy.vp"); @23
// &Depend("cpu_cfig.h"); @24

// &ModuleBeg; @26
module pa_clic_top(
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  clic_tcipif_cmplt,
  clic_tcipif_rdata,
  clint_cpu_me_int,
  clint_cpu_ms_int,
  clint_cpu_mt_int,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpu_clic_mode,
  cpurst_b,
  forever_cpuclk,
  pad_clic_int_vld,
  pad_yy_gate_clk_en_b,
  rtu_clic_warm_up,
  tcipif_clic_addr,
  tcipif_clic_sel,
  tcipif_clic_size,
  tcipif_clic_wdata,
  tcipif_clic_write
);

// &Ports; @27
input             clint_cpu_me_int;
input             clint_cpu_ms_int;
input             clint_cpu_mt_int;
input   [11  :0]  cpu_clic_curid;
input             cpu_clic_int_exit;
input   [1   :0]  cpu_clic_mode;
input             cpurst_b;
input             forever_cpuclk;
input   [31  :0]  pad_clic_int_vld;
input             pad_yy_gate_clk_en_b;
input             rtu_clic_warm_up;
input   [15  :0]  tcipif_clic_addr;
input             tcipif_clic_sel;
input   [1   :0]  tcipif_clic_size;
input   [31  :0]  tcipif_clic_wdata;
input             tcipif_clic_write;
output            clic_cpu_int_hv;
output  [11  :0]  clic_cpu_int_id;
output  [7   :0]  clic_cpu_int_il;
output  [1   :0]  clic_cpu_int_priv;
output            clic_tcipif_cmplt;
output  [31  :0]  clic_tcipif_rdata;

// &Regs; @28

// &Wires; @29
wire              arb_ctrl_int_hv;
wire    [11  :0]  arb_ctrl_int_id;
wire    [7   :0]  arb_ctrl_int_il;
wire              arb_ctrl_int_mode;
wire              arb_ctrl_int_req_raw;
wire              busif_ctrl_cliccfg_sel;
wire              busif_ctrl_clicinfo_sel;
wire              busif_ctrl_mintthresh_sel;
wire    [47  :0]  busif_kid_clicintattr_sel;
wire    [47  :0]  busif_kid_clicintctl_sel;
wire    [47  :0]  busif_kid_clicintie_sel;
wire    [47  :0]  busif_kid_clicintip_sel;
wire    [31  :0]  busif_kid_wdata;
wire              busif_xx_write_vld;
wire              clic_clk;
wire              clic_clk_en;
wire              clic_cpu_int_hv;
wire    [11  :0]  clic_cpu_int_id;
wire    [7   :0]  clic_cpu_int_il;
wire    [1   :0]  clic_cpu_int_priv;
wire              clic_tcipif_cmplt;
wire    [31  :0]  clic_tcipif_rdata;
wire              clicreg_clk;
wire              clint_cpu_me_int;
wire              clint_cpu_ms_int;
wire              clint_cpu_mt_int;
wire    [11  :0]  cpu_clic_curid;
wire              cpu_clic_int_exit;
wire    [1   :0]  cpu_clic_mode;
wire              cpurst_b;
wire    [31  :0]  ctrl_busif_cliccfg_val;
wire    [31  :0]  ctrl_busif_clicinfo_val;
wire    [31  :0]  ctrl_busif_mintthresh_val;
wire              ctrl_clicreg_en;
wire    [47  :0]  ctrl_kid_ack_int;
wire    [2   :0]  ctrl_xx_int_lv_or_mask;
wire              ctrl_xx_mode_or_mask;
wire              forever_cpuclk;
wire    [191 :0]  kid_arb_int_all_vec;
wire    [47  :0]  kid_arb_int_hv;
wire    [47  :0]  kid_arb_int_req;
wire    [1535:0]  kid_busif_rdata_vec;
wire    [47  :0]  kid_int_vld;
wire    [31  :0]  pad_clic_int_vld;
wire              pad_yy_gate_clk_en_b;
wire              rtu_clic_warm_up;
wire    [15  :0]  tcipif_clic_addr;
wire              tcipif_clic_sel;
wire    [1   :0]  tcipif_clic_size;
wire    [31  :0]  tcipif_clic_wdata;
wire              tcipif_clic_write;


parameter CLICINTNUM     = `CLIC_INTNUM;
parameter CLICINTCTLBITS = `CLIC_INTCTLBITS;

// &Instance("pa_clic_arb"); @34
pa_clic_arb  x_pa_clic_arb (
  .arb_ctrl_int_hv        (arb_ctrl_int_hv       ),
  .arb_ctrl_int_id        (arb_ctrl_int_id       ),
  .arb_ctrl_int_il        (arb_ctrl_int_il       ),
  .arb_ctrl_int_mode      (arb_ctrl_int_mode     ),
  .arb_ctrl_int_req_raw   (arb_ctrl_int_req_raw  ),
  .ctrl_xx_int_lv_or_mask (ctrl_xx_int_lv_or_mask),
  .kid_arb_int_all_vec    (kid_arb_int_all_vec   ),
  .kid_arb_int_hv         (kid_arb_int_hv        ),
  .kid_arb_int_req        (kid_arb_int_req       )
);

// &Instance("pa_clic_busif"); @35
pa_clic_busif  x_pa_clic_busif (
  .busif_ctrl_cliccfg_sel    (busif_ctrl_cliccfg_sel   ),
  .busif_ctrl_clicinfo_sel   (busif_ctrl_clicinfo_sel  ),
  .busif_ctrl_mintthresh_sel (busif_ctrl_mintthresh_sel),
  .busif_kid_clicintattr_sel (busif_kid_clicintattr_sel),
  .busif_kid_clicintctl_sel  (busif_kid_clicintctl_sel ),
  .busif_kid_clicintie_sel   (busif_kid_clicintie_sel  ),
  .busif_kid_clicintip_sel   (busif_kid_clicintip_sel  ),
  .busif_kid_wdata           (busif_kid_wdata          ),
  .busif_xx_write_vld        (busif_xx_write_vld       ),
  .clic_clk_en               (clic_clk_en              ),
  .clic_tcipif_cmplt         (clic_tcipif_cmplt        ),
  .clic_tcipif_rdata         (clic_tcipif_rdata        ),
  .ctrl_busif_cliccfg_val    (ctrl_busif_cliccfg_val   ),
  .ctrl_busif_clicinfo_val   (ctrl_busif_clicinfo_val  ),
  .ctrl_busif_mintthresh_val (ctrl_busif_mintthresh_val),
  .kid_busif_rdata_vec       (kid_busif_rdata_vec      ),
  .rtu_clic_warm_up          (rtu_clic_warm_up         ),
  .tcipif_clic_addr          (tcipif_clic_addr         ),
  .tcipif_clic_sel           (tcipif_clic_sel          ),
  .tcipif_clic_size          (tcipif_clic_size         ),
  .tcipif_clic_wdata         (tcipif_clic_wdata        ),
  .tcipif_clic_write         (tcipif_clic_write        )
);

// &Instance("pa_clic_ctrl"); @36
pa_clic_ctrl  x_pa_clic_ctrl (
  .arb_ctrl_int_hv           (arb_ctrl_int_hv          ),
  .arb_ctrl_int_id           (arb_ctrl_int_id          ),
  .arb_ctrl_int_il           (arb_ctrl_int_il          ),
  .arb_ctrl_int_mode         (arb_ctrl_int_mode        ),
  .arb_ctrl_int_req_raw      (arb_ctrl_int_req_raw     ),
  .busif_ctrl_cliccfg_sel    (busif_ctrl_cliccfg_sel   ),
  .busif_ctrl_clicinfo_sel   (busif_ctrl_clicinfo_sel  ),
  .busif_ctrl_mintthresh_sel (busif_ctrl_mintthresh_sel),
  .busif_kid_wdata           (busif_kid_wdata          ),
  .busif_xx_write_vld        (busif_xx_write_vld       ),
  .clic_clk                  (clic_clk                 ),
  .clic_clk_en               (clic_clk_en              ),
  .clic_cpu_int_hv           (clic_cpu_int_hv          ),
  .clic_cpu_int_id           (clic_cpu_int_id          ),
  .clic_cpu_int_il           (clic_cpu_int_il          ),
  .clic_cpu_int_priv         (clic_cpu_int_priv        ),
  .clicreg_clk               (clicreg_clk              ),
  .cpu_clic_curid            (cpu_clic_curid           ),
  .cpu_clic_int_exit         (cpu_clic_int_exit        ),
  .cpu_clic_mode             (cpu_clic_mode            ),
  .cpurst_b                  (cpurst_b                 ),
  .ctrl_busif_cliccfg_val    (ctrl_busif_cliccfg_val   ),
  .ctrl_busif_clicinfo_val   (ctrl_busif_clicinfo_val  ),
  .ctrl_busif_mintthresh_val (ctrl_busif_mintthresh_val),
  .ctrl_clicreg_en           (ctrl_clicreg_en          ),
  .ctrl_kid_ack_int          (ctrl_kid_ack_int         ),
  .ctrl_xx_int_lv_or_mask    (ctrl_xx_int_lv_or_mask   ),
  .ctrl_xx_mode_or_mask      (ctrl_xx_mode_or_mask     ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);


assign kid_int_vld[CLICINTNUM-1:16] = pad_clic_int_vld[CLICINTNUM-17:0];
// &Force("input", "pad_clic_int_vld"); &Force("bus", "pad_clic_int_vld", CLICINTNUM-17, 0); @40
assign kid_int_vld[15:0] = {3'b0, 1'b0,   // clic software int
                            clint_cpu_me_int, 3'b0,
                            clint_cpu_mt_int, 3'b0,
                            clint_cpu_ms_int, 3'b0};
// &Force("nonport", "kid_int_vld"); @46

// &Force("nonport", "kid_busif_rdata_bus"); @48
// &Force("nonport", "busif_kid_clicintattr_sel"); @49
// &Force("nonport", "busif_kid_clicintctl_sel"); @50
// &Force("nonport", "busif_kid_clicintie_sel"); @51
// &Force("nonport", "busif_kid_clicintip_sel"); @52
// &Force("nonport", "ctrl_kid_ack_int"); @53
// &Force("nonport", "ctrl_kid_int_exit_gate"); @54
// &Force("nonport", "ctrl_xx_mode_or_mask"); @55
// &Force("nonport", "kid_arb_int_all_vec"); @56
// &Force("nonport", "kid_arb_int_hv"); @57
// &Force("nonport", "kid_arb_int_req"); @58
// &Force("nonport", "kid_busif_rdata_vec"); @59
//csky vperl_off
genvar i;
generate
for (i = 0; i < CLICINTNUM; i = i+1)
begin:INT_KID
  case(i)
    0, 1, 2,
    4, 5, 6,
    8, 9, 10,
    13, 14, 15:
      pa_clic_kid_dummy x_pa_clic_kid(
        .kid_arb_int_all            (kid_arb_int_all_vec[(CLICINTCTLBITS+1)*i+:(CLICINTCTLBITS+1)]),
        .kid_arb_int_hv             (kid_arb_int_hv[i]),
        .kid_arb_int_req            (kid_arb_int_req[i]),
        .kid_busif_rdata            (kid_busif_rdata_vec[32*i+:32])
      );
    default:
      pa_clic_kid x_pa_clic_kid(
        .busif_kid_clicintattr_sel  (busif_kid_clicintattr_sel[i]),
        .busif_kid_clicintctl_sel   (busif_kid_clicintctl_sel[i]),
        .busif_kid_clicintie_sel    (busif_kid_clicintie_sel[i]),
        .busif_kid_clicintip_sel    (busif_kid_clicintip_sel[i]),
        .busif_kid_wdata            (busif_kid_wdata),
        .busif_xx_write_vld         (busif_xx_write_vld),
        .clic_clk                   (clic_clk),
        .clic_clk_en                (clic_clk_en),
        .cpu_clic_mode              (cpu_clic_mode),
        .cpurst_b                   (cpurst_b),
        .ctrl_kid_ack_int           (ctrl_kid_ack_int[i]),
        .ctrl_xx_mode_or_mask       (ctrl_xx_mode_or_mask),
        .forever_cpuclk             (forever_cpuclk),
        .kid_arb_int_all            (kid_arb_int_all_vec[(CLICINTCTLBITS+1)*i+:(CLICINTCTLBITS+1)]),
        .kid_arb_int_hv             (kid_arb_int_hv[i]),
        .kid_arb_int_req            (kid_arb_int_req[i]),
        .kid_busif_rdata            (kid_busif_rdata_vec[32*i+:32]),
        .kid_int_vld                (kid_int_vld[i]),
        .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b)
      );
  endcase
end
endgenerate
//csky vperl_on

// &Instance("gated_clk_cell", "x_clic_clk"); @118
// &Connect(.clk_in      (forever_cpuclk), @119
//          .external_en (1'b0), @120
//          .global_en   (1'b1), @121
//          .module_en   (1'b0), @122
//          .local_en    (clic_clk_en_raw), @123
//          .clk_out     (clic_clk), @124
//          .pad_yy_gate_clk_en_b (1'b0)); @125
assign clic_clk_en = 1'b1;
assign clic_clk = forever_cpuclk;




// &Instance("gated_clk_cell", "x_clicreg_clk"); @134
gated_clk_cell  x_clicreg_clk (
  .clk_in               (clic_clk            ),
  .clk_out              (clicreg_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ctrl_clicreg_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (clic_clk), @135
//          .external_en (1'b0), @136
//          .global_en   (1'b1), @137
//          .module_en   (1'b0), @138
//          .local_en    (ctrl_clicreg_en), @139
//          .clk_out     (clicreg_clk)); @140

// &ModuleEnd; @142
endmodule























// &ModuleBeg; @22
module pa_clint_busif(
  busif_regs_msip_sel,
  busif_regs_mtimecmp_hi_sel,
  busif_regs_mtimecmp_lo_sel,
  busif_regs_wdata,
  busif_regs_write_vld,
  clint_tcipif_cmplt,
  clint_tcipif_rdata,
  msip_value,
  mtime_hi_value,
  mtime_lo_value,
  mtimecmp_hi_value,
  mtimecmp_lo_value,
  tcipif_clint_addr,
  tcipif_clint_sel,
  tcipif_clint_wdata,
  tcipif_clint_write
);

// &Ports; @23
input   [31:0]  msip_value;
input   [31:0]  mtime_hi_value;
input   [31:0]  mtime_lo_value;
input   [31:0]  mtimecmp_hi_value;
input   [31:0]  mtimecmp_lo_value;
input   [15:0]  tcipif_clint_addr;
input           tcipif_clint_sel;
input   [31:0]  tcipif_clint_wdata;
input           tcipif_clint_write;
output          busif_regs_msip_sel;
output          busif_regs_mtimecmp_hi_sel;
output          busif_regs_mtimecmp_lo_sel;
output  [31:0]  busif_regs_wdata;
output          busif_regs_write_vld;
output          clint_tcipif_cmplt;
output  [31:0]  clint_tcipif_rdata;

// &Regs; @24

// &Wires; @25
wire            busif_read_vld;
wire            busif_regs_msip_sel;
wire            busif_regs_mtimecmp_hi_sel;
wire            busif_regs_mtimecmp_lo_sel;
wire    [31:0]  busif_regs_wdata;
wire            busif_regs_write_vld;
wire            clint_tcipif_cmplt;
wire    [31:0]  clint_tcipif_rdata;
wire            msip_sel;
wire    [31:0]  msip_value;
wire            mtime_hi_sel;
wire    [31:0]  mtime_hi_value;
wire            mtime_lo_sel;
wire    [31:0]  mtime_lo_value;
wire            mtimecmp_hi_sel;
wire    [31:0]  mtimecmp_hi_value;
wire            mtimecmp_lo_sel;
wire    [31:0]  mtimecmp_lo_value;
wire    [15:0]  tcipif_clint_addr;
wire            tcipif_clint_sel;
wire    [31:0]  tcipif_clint_wdata;
wire            tcipif_clint_write;


parameter MSIP       = 16'h0000;

parameter MTIMECMPLO = 16'h4000;
parameter MTIMECMPHI = 16'h4004;

parameter MTIMELO    = 16'hbff8;
parameter MTIMEHI    = 16'hbffc;

assign msip_sel        = tcipif_clint_addr[15:0] == MSIP;
assign mtimecmp_lo_sel = tcipif_clint_addr[15:0] == MTIMECMPLO;
assign mtimecmp_hi_sel = tcipif_clint_addr[15:0] == MTIMECMPHI;
assign mtime_lo_sel    = tcipif_clint_addr[15:0] == MTIMELO;
assign mtime_hi_sel    = tcipif_clint_addr[15:0] == MTIMEHI;

assign busif_regs_msip_sel        = msip_sel;
assign busif_regs_mtimecmp_lo_sel = mtimecmp_lo_sel;
assign busif_regs_mtimecmp_hi_sel = mtimecmp_hi_sel;

assign clint_tcipif_cmplt = tcipif_clint_sel;

assign busif_regs_write_vld = tcipif_clint_sel && tcipif_clint_write;
assign busif_read_vld     = tcipif_clint_sel && !tcipif_clint_write;

assign clint_tcipif_rdata[31:0] = ({32{msip_sel}}        & msip_value[31:0]
                                 | {32{mtimecmp_lo_sel}} & mtimecmp_lo_value[31:0]
                                 | {32{mtimecmp_hi_sel}} & mtimecmp_hi_value[31:0]
                                 | {32{mtime_lo_sel}}    & mtime_lo_value[31:0]
                                 | {32{mtime_hi_sel}}    & mtime_hi_value[31:0])
                                 & {32{busif_read_vld}};

assign busif_regs_wdata[31:0] = tcipif_clint_wdata[31:0];

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_clint_regs(
  busif_regs_msip_sel,
  busif_regs_mtimecmp_hi_sel,
  busif_regs_mtimecmp_lo_sel,
  busif_regs_wdata,
  busif_regs_write_vld,
  clint_clk,
  clint_cpu_me_int,
  clint_cpu_ms_int,
  clint_cpu_mt_int,
  cpu_clint_mode,
  cpurst_b,
  msip_value,
  mtime_hi_value,
  mtime_lo_value,
  mtimecmp_hi_value,
  mtimecmp_lo_value,
  sysio_clint_me_int,
  sysio_clint_mtime
);

// &Ports; @23
input           busif_regs_msip_sel;
input           busif_regs_mtimecmp_hi_sel;
input           busif_regs_mtimecmp_lo_sel;
input   [31:0]  busif_regs_wdata;
input           busif_regs_write_vld;
input           clint_clk;
input   [1 :0]  cpu_clint_mode;
input           cpurst_b;
input           sysio_clint_me_int;
input   [63:0]  sysio_clint_mtime;
output          clint_cpu_me_int;
output          clint_cpu_ms_int;
output          clint_cpu_mt_int;
output  [31:0]  msip_value;
output  [31:0]  mtime_hi_value;
output  [31:0]  mtime_lo_value;
output  [31:0]  mtimecmp_hi_value;
output  [31:0]  mtimecmp_lo_value;

// &Regs; @24
reg             msip_en;
reg     [31:0]  mtimecmp_hi;
reg     [31:0]  mtimecmp_lo;

// &Wires; @25
wire            busif_regs_msip_sel;
wire            busif_regs_mtimecmp_hi_sel;
wire            busif_regs_mtimecmp_lo_sel;
wire    [31:0]  busif_regs_wdata;
wire            busif_regs_write_vld;
wire            clint_clk;
wire            clint_cpu_me_int;
wire            clint_cpu_ms_int;
wire            clint_cpu_mt_int;
wire    [1 :0]  cpu_clint_mode;
wire            cpu_is_m_mode;
wire            cpurst_b;
wire            mregs_write_vld;
wire    [31:0]  msip_value;
wire    [31:0]  mtime_hi_value;
wire    [31:0]  mtime_lo_value;
wire    [31:0]  mtimecmp_hi_value;
wire    [31:0]  mtimecmp_lo_value;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;


parameter CPU_M_MODE = 2'b11;




assign cpu_is_m_mode = cpu_clint_mode[1:0] == CPU_M_MODE;

assign mregs_write_vld = busif_regs_write_vld && cpu_is_m_mode;





always @ (posedge clint_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    msip_en <= 1'b0;
  else if (mregs_write_vld && busif_regs_msip_sel)
    msip_en <= busif_regs_wdata[0];
  else
    msip_en <= msip_en;
end
assign msip_value[31:0] = {31'b0, msip_en};



always @ (posedge clint_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mtimecmp_lo[31:0] <= 32'hffffffff;
  else if (mregs_write_vld && busif_regs_mtimecmp_lo_sel)
    mtimecmp_lo[31:0] <= busif_regs_wdata[31:0];
  else
    mtimecmp_lo[31:0] <= mtimecmp_lo[31:0];
end
assign mtimecmp_lo_value[31:0] = mtimecmp_lo[31:0];



always @ (posedge clint_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mtimecmp_hi[31:0] <= 32'hffffffff;
  else if (mregs_write_vld && busif_regs_mtimecmp_hi_sel)
    mtimecmp_hi[31:0] <= busif_regs_wdata[31:0];
  else
    mtimecmp_hi[31:0] <= mtimecmp_hi[31:0];
end
assign mtimecmp_hi_value[31:0] = mtimecmp_hi[31:0];



assign mtime_lo_value[31:0] = sysio_clint_mtime[31:0];


assign mtime_hi_value[31:0] = sysio_clint_mtime[63:32];





assign clint_cpu_ms_int = msip_en;
assign clint_cpu_mt_int = !({mtimecmp_hi[31:0], mtimecmp_lo[31:0]}
                           > sysio_clint_mtime[63:0]);
assign clint_cpu_me_int = sysio_clint_me_int;

// &ModuleEnd; @93
endmodule























// &ModuleBeg; @22
module pa_clint_top(
  clint_cpu_me_int,
  clint_cpu_ms_int,
  clint_cpu_mt_int,
  clint_tcipif_cmplt,
  clint_tcipif_rdata,
  cpu_clint_mode,
  cpurst_b,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  sysio_clint_me_int,
  sysio_clint_mtime,
  tcipif_clint_addr,
  tcipif_clint_sel,
  tcipif_clint_wdata,
  tcipif_clint_write
);

// &Ports; @23
input   [1 :0]  cpu_clint_mode;
input           cpurst_b;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input           sysio_clint_me_int;
input   [63:0]  sysio_clint_mtime;
input   [15:0]  tcipif_clint_addr;
input           tcipif_clint_sel;
input   [31:0]  tcipif_clint_wdata;
input           tcipif_clint_write;
output          clint_cpu_me_int;
output          clint_cpu_ms_int;
output          clint_cpu_mt_int;
output          clint_tcipif_cmplt;
output  [31:0]  clint_tcipif_rdata;

// &Regs; @24

// &Wires; @25
wire            busif_regs_msip_sel;
wire            busif_regs_mtimecmp_hi_sel;
wire            busif_regs_mtimecmp_lo_sel;
wire    [31:0]  busif_regs_wdata;
wire            busif_regs_write_vld;
wire            clint_clk;
wire            clint_clk_en;
wire            clint_cpu_me_int;
wire            clint_cpu_ms_int;
wire            clint_cpu_mt_int;
wire            clint_tcipif_cmplt;
wire    [31:0]  clint_tcipif_rdata;
wire    [1 :0]  cpu_clint_mode;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  msip_value;
wire    [31:0]  mtime_hi_value;
wire    [31:0]  mtime_lo_value;
wire    [31:0]  mtimecmp_hi_value;
wire    [31:0]  mtimecmp_lo_value;
wire            pad_yy_gate_clk_en_b;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;
wire    [15:0]  tcipif_clint_addr;
wire            tcipif_clint_sel;
wire    [31:0]  tcipif_clint_wdata;
wire            tcipif_clint_write;


// &Instance("pa_clint_regs"); @27
pa_clint_regs  x_pa_clint_regs (
  .busif_regs_msip_sel        (busif_regs_msip_sel       ),
  .busif_regs_mtimecmp_hi_sel (busif_regs_mtimecmp_hi_sel),
  .busif_regs_mtimecmp_lo_sel (busif_regs_mtimecmp_lo_sel),
  .busif_regs_wdata           (busif_regs_wdata          ),
  .busif_regs_write_vld       (busif_regs_write_vld      ),
  .clint_clk                  (clint_clk                 ),
  .clint_cpu_me_int           (clint_cpu_me_int          ),
  .clint_cpu_ms_int           (clint_cpu_ms_int          ),
  .clint_cpu_mt_int           (clint_cpu_mt_int          ),
  .cpu_clint_mode             (cpu_clint_mode            ),
  .cpurst_b                   (cpurst_b                  ),
  .msip_value                 (msip_value                ),
  .mtime_hi_value             (mtime_hi_value            ),
  .mtime_lo_value             (mtime_lo_value            ),
  .mtimecmp_hi_value          (mtimecmp_hi_value         ),
  .mtimecmp_lo_value          (mtimecmp_lo_value         ),
  .sysio_clint_me_int         (sysio_clint_me_int        ),
  .sysio_clint_mtime          (sysio_clint_mtime         )
);

// &Instance("pa_clint_busif"); @28
pa_clint_busif  x_pa_clint_busif (
  .busif_regs_msip_sel        (busif_regs_msip_sel       ),
  .busif_regs_mtimecmp_hi_sel (busif_regs_mtimecmp_hi_sel),
  .busif_regs_mtimecmp_lo_sel (busif_regs_mtimecmp_lo_sel),
  .busif_regs_wdata           (busif_regs_wdata          ),
  .busif_regs_write_vld       (busif_regs_write_vld      ),
  .clint_tcipif_cmplt         (clint_tcipif_cmplt        ),
  .clint_tcipif_rdata         (clint_tcipif_rdata        ),
  .msip_value                 (msip_value                ),
  .mtime_hi_value             (mtime_hi_value            ),
  .mtime_lo_value             (mtime_lo_value            ),
  .mtimecmp_hi_value          (mtimecmp_hi_value         ),
  .mtimecmp_lo_value          (mtimecmp_lo_value         ),
  .tcipif_clint_addr          (tcipif_clint_addr         ),
  .tcipif_clint_sel           (tcipif_clint_sel          ),
  .tcipif_clint_wdata         (tcipif_clint_wdata        ),
  .tcipif_clint_write         (tcipif_clint_write        )
);


assign clint_clk_en = tcipif_clint_sel;
// &Instance("gated_clk_cell", "x_clint_gateclk"); @31
gated_clk_cell  x_clint_gateclk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (clint_clk           ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (clint_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( .clk_in     (forever_cpuclk), @32
//           .external_en(1'b0          ), @33
//           .global_en  (1'b1          ), @34
//           .module_en  (1'b0          ), @35
//           .local_en   (clint_clk_en  ), @36
//           .clk_out    (clint_clk     ) @37
//          ); @38


// &ModuleEnd; @41
endmodule
























// &ModuleBeg; @23
module pa_clk_top(
  forever_cpuclk,
  forever_jtgclk,
  pad_had_jtg_tclk,
  pll_core_cpuclk
);

// &Ports; @24
input        pad_had_jtg_tclk;
input        pll_core_cpuclk;
output       forever_cpuclk;
output       forever_jtgclk;

// &Regs; @25

// &Wires; @26
wire         forever_cpuclk;
wire         forever_jtgclk;
wire         pad_had_jtg_tclk;
wire         pll_core_cpuclk;


assign forever_jtgclk = pad_had_jtg_tclk;
assign forever_cpuclk = pll_core_cpuclk;

// &ModuleEnd; @31
endmodule























// &ModuleBeg; @22
module pa_clkrst_top(
  cpurst_b,
  forever_cpuclk,
  forever_jtgclk,
  hadrst_b,
  pad_cpu_rst_b,
  pad_had_jtg_tclk,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_yy_scan_mode,
  pad_yy_scan_rst_b,
  pll_core_cpuclk,
  trst_b
);

// &Ports; @23
input        pad_cpu_rst_b;
input        pad_had_jtg_tclk;
input        pad_had_jtg_trst_b;
input        pad_had_rst_b;
input        pad_yy_scan_mode;
input        pad_yy_scan_rst_b;
input        pll_core_cpuclk;
output       cpurst_b;
output       forever_cpuclk;
output       forever_jtgclk;
output       hadrst_b;
output       trst_b;

// &Regs; @24

// &Wires; @25
wire         cpurst_b;
wire         forever_cpuclk;
wire         forever_jtgclk;
wire         hadrst_b;
wire         pad_cpu_rst_b;
wire         pad_had_jtg_tclk;
wire         pad_had_jtg_trst_b;
wire         pad_had_rst_b;
wire         pad_yy_scan_mode;
wire         pad_yy_scan_rst_b;
wire         pll_core_cpuclk;
wire         trst_b;


// &Force("output", "forever_cpuclk"); @27




// &Instance("pa_clk_top"); @32
pa_clk_top  x_pa_clk_top (
  .forever_cpuclk   (forever_cpuclk  ),
  .forever_jtgclk   (forever_jtgclk  ),
  .pad_had_jtg_tclk (pad_had_jtg_tclk),
  .pll_core_cpuclk  (pll_core_cpuclk )
);





// &Instance("pa_rst_top"); @37
pa_rst_top  x_pa_rst_top (
  .cpurst_b           (cpurst_b          ),
  .hadrst_b           (hadrst_b          ),
  .pad_cpu_rst_b      (pad_cpu_rst_b     ),
  .pad_had_jtg_trst_b (pad_had_jtg_trst_b),
  .pad_had_rst_b      (pad_had_rst_b     ),
  .pad_yy_scan_mode   (pad_yy_scan_mode  ),
  .pad_yy_scan_rst_b  (pad_yy_scan_rst_b ),
  .trst_b             (trst_b            )
);

// &ModuleEnd; @38
endmodule
























// &Depend("cpu_cfig.h"); @23

// &ModuleBeg; @25
module pa_core(
  bmu_ifu_acc_err,
  bmu_ifu_grant,
  bmu_ifu_rdata,
  bmu_ifu_trans_cmplt,
  bmu_lsu_acc_err,
  bmu_lsu_grant,
  bmu_lsu_rdata,
  bmu_lsu_trans_cmplt,
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_mcause_data,
  cp0_had_pcfifo_wen,
  cp0_hpcp_index,
  cp0_hpcp_pmdm,
  cp0_hpcp_pmdu,
  cp0_hpcp_wdata,
  cp0_hpcp_wreg,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_sysio_srst,
  cp0_yy_mach_mode,
  cp0_yy_priv_mode,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpurst_b,
  forever_cpuclk,
  had_cp0_mcause_data,
  had_cp0_xx_dbg,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_ifu_pc,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_ex1_trace_potential,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_rtu_xx_tme,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  had_yy_xx_dbg,
  had_yy_xx_exit_dbg,
  hpcp_cp0_data,
  idu_had_id_chgflw_inst,
  idu_had_id_inst_bkpt,
  idu_had_no_op,
  ifu_bmu_acc_deny,
  ifu_bmu_addr,
  ifu_bmu_burst,
  ifu_bmu_data_req,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_seq,
  ifu_bmu_size,
  ifu_hpcp_icache_access,
  ifu_hpcp_icache_miss,
  ifu_pmp_addr,
  ifu_pmp_machine_mode,
  ifu_sysmap_pa,
  iu_hpcp_inst_bht_mispred,
  iu_hpcp_inst_condbr,
  iu_hpcp_inst_condbr_gate,
  iu_xx_no_op,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_bmu_acc_deny,
  lsu_bmu_addr,
  lsu_bmu_burst,
  lsu_bmu_lock,
  lsu_bmu_lrsc,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_dp,
  lsu_bmu_seq,
  lsu_bmu_size,
  lsu_bmu_wdata,
  lsu_bmu_write,
  lsu_hpcp_cache_read_access,
  lsu_hpcp_cache_read_access_gate,
  lsu_hpcp_cache_read_miss,
  lsu_hpcp_cache_read_miss_gate,
  lsu_hpcp_cache_write_access,
  lsu_hpcp_cache_write_access_gate,
  lsu_hpcp_cache_write_miss,
  lsu_hpcp_cache_write_miss_gate,
  lsu_hpcp_inst_store,
  lsu_hpcp_inst_store_gate,
  lsu_pad_sc_pass,
  lsu_pmp_addr,
  lsu_pmp_write,
  lsu_sysmap_pa,
  lsu_xx_flush,
  lsu_xx_no_op,
  lsu_xx_warm_up,
  pad_yy_gate_clk_en_b,
  pmp_ifu_acc_deny,
  pmp_lsu_acc_deny,
  rtu_clic_warm_up,
  rtu_had_data_bkpta_vld,
  rtu_had_data_bkptb_vld,
  rtu_had_data_bkptc_vld,
  rtu_had_data_bkptd_vld,
  rtu_had_data_bkpte_vld,
  rtu_had_dbg_disable_for_tee,
  rtu_had_ex1_data_bkpta_vld,
  rtu_had_ex1_data_bkptb_vld,
  rtu_had_ex1_data_bkptc_vld,
  rtu_had_ex1_data_bkptd_vld,
  rtu_had_ex1_data_bkpte_vld,
  rtu_had_ex1_inst_bkpta_vld,
  rtu_had_ex1_inst_bkptb_vld,
  rtu_had_ex1_inst_bkptc_vld,
  rtu_had_ex1_inst_bkptd_vld,
  rtu_had_ex1_inst_bkpte_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_had_inst_bkpta_vld,
  rtu_had_inst_bkptb_vld,
  rtu_had_inst_bkptc_vld,
  rtu_had_inst_bkptd_vld,
  rtu_had_inst_bkpte_vld,
  rtu_had_inst_ld,
  rtu_had_int_ack,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_next_pc,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_retire_pc,
  rtu_had_xx_split,
  rtu_hpcp_retire_inst_vld,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  rtu_sysio_lockup_on,
  rtu_xx_no_op,
  rtu_yy_xx_async_flush,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  rtu_yy_xx_retire,
  sysio_cp0_clk_en,
  sysio_cp0_clkratio,
  sysio_cp0_rst_addr,
  sysio_cp0_sys_view_lpmd_b,
  sysio_ifu_rst_addr,
  sysio_ifu_rst_addr_done,
  sysio_iu_rst_addr,
  sysio_rtu_nmi_int,
  sysio_rtu_wk_event,
  sysio_xx_halt_req,
  sysmap_ifu_flg,
  sysmap_lsu_flg,
  tcip_cp0_clic_base
);

// &Ports; @26
input           bmu_ifu_acc_err;
input           bmu_ifu_grant;
input   [31:0]  bmu_ifu_rdata;
input           bmu_ifu_trans_cmplt;
input           bmu_lsu_acc_err;
input           bmu_lsu_grant;
input   [31:0]  bmu_lsu_rdata;
input           bmu_lsu_trans_cmplt;
input           clic_cpu_int_hv;
input   [11:0]  clic_cpu_int_id;
input   [7 :0]  clic_cpu_int_il;
input   [1 :0]  clic_cpu_int_priv;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_cp0_mcause_data;
input           had_cp0_xx_dbg;
input   [8 :0]  had_idu_id_inst_bkpt;
input           had_idu_id_inst_bkpt_brir;
input           had_idu_id_inst_bkpt_hit;
input   [31:0]  had_idu_wbbr_data;
input           had_idu_wbbr_vld;
input   [31:0]  had_ifu_ir;
input           had_ifu_ir_vld;
input   [31:0]  had_ifu_pc;
input           had_rtu_async_dbgreq;
input           had_rtu_data_bkpt_dbgreq;
input           had_rtu_data_bkpt_dbgreq_raw;
input           had_rtu_ex1_bkpt_potential;
input           had_rtu_ex1_inst_bkpt_dbgreq;
input           had_rtu_ex1_trace_potential;
input           had_rtu_fdb;
input           had_rtu_hw_dbgreq;
input           had_rtu_inst_bkpt_dbgreq;
input           had_rtu_rst_dbgreq;
input           had_rtu_trace_dbgreq;
input           had_rtu_trace_dbgreq_raw;
input           had_rtu_xx_tme;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input           had_yy_xx_dbg;
input           had_yy_xx_exit_dbg;
input   [31:0]  hpcp_cp0_data;
input           pad_yy_gate_clk_en_b;
input           pmp_ifu_acc_deny;
input           pmp_lsu_acc_deny;
input           sysio_cp0_clk_en;
input   [2 :0]  sysio_cp0_clkratio;
input   [31:0]  sysio_cp0_rst_addr;
input   [1 :0]  sysio_cp0_sys_view_lpmd_b;
input   [31:0]  sysio_ifu_rst_addr;
input           sysio_ifu_rst_addr_done;
input   [31:0]  sysio_iu_rst_addr;
input           sysio_rtu_nmi_int;
input           sysio_rtu_wk_event;
input           sysio_xx_halt_req;
input   [4 :0]  sysmap_ifu_flg;
input   [4 :0]  sysmap_lsu_flg;
input   [31:0]  tcip_cp0_clic_base;
output  [31:0]  cp0_had_cpuid_idx0;
output  [1 :0]  cp0_had_lpmd_b;
output  [31:0]  cp0_had_mcause_data;
output          cp0_had_pcfifo_wen;
output  [11:0]  cp0_hpcp_index;
output          cp0_hpcp_pmdm;
output          cp0_hpcp_pmdu;
output  [31:0]  cp0_hpcp_wdata;
output          cp0_hpcp_wreg;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output          cp0_sysio_ipend_b;
output  [1 :0]  cp0_sysio_lpmd_b;
output  [1 :0]  cp0_sysio_srst;
output          cp0_yy_mach_mode;
output  [1 :0]  cp0_yy_priv_mode;
output  [11:0]  cpu_clic_curid;
output          cpu_clic_int_exit;
output          idu_had_id_chgflw_inst;
output  [8 :0]  idu_had_id_inst_bkpt;
output          idu_had_no_op;
output          ifu_bmu_acc_deny;
output  [31:0]  ifu_bmu_addr;
output  [2 :0]  ifu_bmu_burst;
output          ifu_bmu_data_req;
output  [3 :0]  ifu_bmu_prot;
output          ifu_bmu_req;
output          ifu_bmu_seq;
output  [1 :0]  ifu_bmu_size;
output          ifu_hpcp_icache_access;
output          ifu_hpcp_icache_miss;
output  [31:0]  ifu_pmp_addr;
output          ifu_pmp_machine_mode;
output  [31:0]  ifu_sysmap_pa;
output          iu_hpcp_inst_bht_mispred;
output          iu_hpcp_inst_condbr;
output          iu_hpcp_inst_condbr_gate;
output          iu_xx_no_op;
output          lsu_biu_amo_pmp_deny;
output          lsu_biu_async_expt_ack;
output          lsu_bmu_acc_deny;
output  [31:0]  lsu_bmu_addr;
output  [2 :0]  lsu_bmu_burst;
output          lsu_bmu_lock;
output          lsu_bmu_lrsc;
output  [3 :0]  lsu_bmu_prot;
output          lsu_bmu_req;
output          lsu_bmu_req_dp;
output          lsu_bmu_seq;
output  [1 :0]  lsu_bmu_size;
output  [31:0]  lsu_bmu_wdata;
output          lsu_bmu_write;
output          lsu_hpcp_cache_read_access;
output          lsu_hpcp_cache_read_access_gate;
output          lsu_hpcp_cache_read_miss;
output          lsu_hpcp_cache_read_miss_gate;
output          lsu_hpcp_cache_write_access;
output          lsu_hpcp_cache_write_access_gate;
output          lsu_hpcp_cache_write_miss;
output          lsu_hpcp_cache_write_miss_gate;
output          lsu_hpcp_inst_store;
output          lsu_hpcp_inst_store_gate;
output          lsu_pad_sc_pass;
output  [31:0]  lsu_pmp_addr;
output          lsu_pmp_write;
output  [31:0]  lsu_sysmap_pa;
output          lsu_xx_flush;
output          lsu_xx_no_op;
output          lsu_xx_warm_up;
output          rtu_clic_warm_up;
output          rtu_had_data_bkpta_vld;
output          rtu_had_data_bkptb_vld;
output          rtu_had_data_bkptc_vld;
output          rtu_had_data_bkptd_vld;
output          rtu_had_data_bkpte_vld;
output          rtu_had_dbg_disable_for_tee;
output          rtu_had_ex1_data_bkpta_vld;
output          rtu_had_ex1_data_bkptb_vld;
output          rtu_had_ex1_data_bkptc_vld;
output          rtu_had_ex1_data_bkptd_vld;
output          rtu_had_ex1_data_bkpte_vld;
output          rtu_had_ex1_inst_bkpta_vld;
output          rtu_had_ex1_inst_bkptb_vld;
output          rtu_had_ex1_inst_bkptc_vld;
output          rtu_had_ex1_inst_bkptd_vld;
output          rtu_had_ex1_inst_bkpte_vld;
output          rtu_had_ex1_inst_ld;
output          rtu_had_ex1_spec_fail;
output          rtu_had_ex1_split;
output          rtu_had_inst_bkpta_vld;
output          rtu_had_inst_bkptb_vld;
output          rtu_had_inst_bkptc_vld;
output          rtu_had_inst_bkptd_vld;
output          rtu_had_inst_bkpte_vld;
output          rtu_had_inst_ld;
output          rtu_had_int_ack;
output          rtu_had_rst_dbgreq_ack;
output          rtu_had_xx_bkpt_inst;
output          rtu_had_xx_chgflow;
output  [31:0]  rtu_had_xx_data;
output          rtu_had_xx_data_vld;
output          rtu_had_xx_dbg_ack_pc;
output  [31:0]  rtu_had_xx_next_pc;
output          rtu_had_xx_retire;
output          rtu_had_xx_retire_normal;
output          rtu_had_xx_retire_normal_for_dbg;
output  [31:0]  rtu_had_xx_retire_pc;
output          rtu_had_xx_split;
output          rtu_hpcp_retire_inst_vld;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output          rtu_sysio_lockup_on;
output          rtu_xx_no_op;
output          rtu_yy_xx_async_flush;
output          rtu_yy_xx_dbgon;
output          rtu_yy_xx_flush;
output          rtu_yy_xx_retire;

// &Regs; @27

// &Wires; @28
wire            bmu_ifu_acc_err;
wire            bmu_ifu_grant;
wire    [31:0]  bmu_ifu_rdata;
wire            bmu_ifu_trans_cmplt;
wire            bmu_lsu_acc_err;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cp0_had_pcfifo_wen;
wire    [11:0]  cp0_hpcp_index;
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_hpcp_wdata;
wire            cp0_hpcp_wreg;
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_ifu_in_lpmd;
wire            cp0_ifu_lpmd_req;
wire    [31:0]  cp0_ifu_mtvec;
wire            cp0_ifu_ras_en;
wire            cp0_ifu_rst_inv_done;
wire            cp0_ifu_srst_mask;
wire            cp0_ifu_srst_req;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cp0_lsu_dcache_wb;
wire            cp0_lsu_fence_req;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire            cp0_lsu_mm;
wire    [31:0]  cp0_pad_mcause;
wire    [31:0]  cp0_pad_mintstatus;
wire    [31:0]  cp0_pad_mstatus;
wire    [31:0]  cp0_rtu_chgflw_pc;
wire            cp0_rtu_chgflw_vld;
wire            cp0_rtu_ex1_cmplt;
wire    [31:0]  cp0_rtu_ex1_data;
wire    [3 :0]  cp0_rtu_ex1_expt_vec;
wire            cp0_rtu_ex1_expt_vld;
wire            cp0_rtu_ex1_flush;
wire    [8 :0]  cp0_rtu_ex1_inst_bkpt;
wire            cp0_rtu_ex1_inst_ebreak;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_ex1_stall;
wire    [5 :0]  cp0_rtu_ex1_wb_preg;
wire            cp0_rtu_ex1_wb_vld;
wire            cp0_rtu_in_expt;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire    [1 :0]  cp0_rtu_int_mode;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_rtu_wfe_en;
wire            cp0_sysio_ipend_b;
wire    [1 :0]  cp0_sysio_lpmd_b;
wire    [1 :0]  cp0_sysio_srst;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_clk_en;
wire            cp0_yy_cskyisaee;
wire            cp0_yy_mach_mode;
wire    [1 :0]  cp0_yy_priv_mode;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  had_cp0_mcause_data;
wire            had_cp0_xx_dbg;
wire    [8 :0]  had_idu_id_inst_bkpt;
wire            had_idu_id_inst_bkpt_brir;
wire            had_idu_id_inst_bkpt_hit;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire    [31:0]  had_ifu_pc;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_ex1_trace_potential;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_rtu_xx_tme;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire            had_yy_xx_dbg;
wire            had_yy_xx_exit_dbg;
wire    [31:0]  hpcp_cp0_data;
wire    [5 :0]  idu_cp0_ex1_dst_idx;
wire            idu_cp0_ex1_dst_vld;
wire            idu_cp0_ex1_expt_type;
wire            idu_cp0_ex1_expt_vld;
wire    [4 :0]  idu_cp0_ex1_func;
wire    [8 :0]  idu_cp0_ex1_inst_bkpt;
wire    [31:0]  idu_cp0_ex1_opcode;
wire    [31:0]  idu_cp0_ex1_rs1;
wire    [11:0]  idu_cp0_ex1_rs2;
wire            idu_cp0_ex1_sel;
wire    [4 :0]  idu_cp0_ex1_sub_func;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_had_id_chgflw_inst;
wire    [8 :0]  idu_had_id_inst_bkpt;
wire            idu_had_no_op;
wire            idu_ifu_id_stall;
wire            idu_ifu_tail_vld;
wire    [31:0]  idu_ifu_x1;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire            idu_iu_ex1_alu_sel;
wire    [1 :0]  idu_iu_ex1_bht_pred;
wire            idu_iu_ex1_bju_depd_lsu_src0;
wire            idu_iu_ex1_bju_depd_lsu_src1;
wire            idu_iu_ex1_bju_sel;
wire            idu_iu_ex1_bju_use_pc;
wire            idu_iu_ex1_div_sel;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_len;
wire            idu_iu_ex1_inst_vld;
wire            idu_iu_ex1_mul_high_sel;
wire            idu_iu_ex1_mul_sel;
wire            idu_iu_ex1_split;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_iu_ex1_wb_vld;
wire            idu_iu_tail_fail;
wire            idu_iu_tail_fail_gate;
wire    [31:0]  idu_lsu_ex1_ag_imm;
wire    [31:0]  idu_lsu_ex1_base;
wire            idu_lsu_ex1_base_sel;
wire            idu_lsu_ex1_base_wb;
wire    [31:0]  idu_lsu_ex1_data;
wire    [5 :0]  idu_lsu_ex1_dest_reg;
wire            idu_lsu_ex1_dest_vld;
wire            idu_lsu_ex1_fls;
wire    [3 :0]  idu_lsu_ex1_func;
wire            idu_lsu_ex1_mls;
wire            idu_lsu_ex1_offset_sel;
wire            idu_lsu_ex1_sel;
wire            idu_lsu_ex1_sign_extend;
wire    [1 :0]  idu_lsu_ex1_size;
wire            idu_lsu_ex1_src1_depd;
wire    [5 :0]  idu_lsu_ex1_src1_reg;
wire            idu_rtu_ex1_dst_vld;
wire            idu_rtu_ex1_inst_vld;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_rtu_ex1_ipush_spec_fail;
wire            idu_rtu_ex1_lsu_sel;
wire            idu_rtu_ex1_tail_int_vld;
wire            idu_rtu_ipush_spec;
wire            idu_rtu_tail_fail;
wire            idu_xx_ex1_warm_up;
wire            idu_yy_xx_tail_ack;
wire            ifu_bmu_acc_deny;
wire    [31:0]  ifu_bmu_addr;
wire    [2 :0]  ifu_bmu_burst;
wire            ifu_bmu_data_req;
wire    [3 :0]  ifu_bmu_prot;
wire            ifu_bmu_req;
wire            ifu_bmu_seq;
wire    [1 :0]  ifu_bmu_size;
wire            ifu_cp0_bht_inv_done;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_lpmd_ack;
wire            ifu_cp0_rst_inv_req;
wire            ifu_cp0_srst_ack;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire            ifu_idu_chgflw_flush;
wire            ifu_idu_id_expt_vld;
wire    [31:0]  ifu_idu_id_inst;
wire    [8 :0]  ifu_idu_id_inst_bkpt;
wire            ifu_idu_id_inst_vld;
wire    [1 :0]  ifu_idu_id_pred_taken;
wire            ifu_idu_id_warm_up;
wire    [31:0]  ifu_iu_chgflw_pc;
wire            ifu_iu_chgflw_vld;
wire    [31:0]  ifu_iu_ex1_pc_pred;
wire            ifu_iu_reset_vld;
wire    [31:0]  ifu_pmp_addr;
wire            ifu_pmp_machine_mode;
wire            ifu_rtu_cpu_in_init;
wire            ifu_rtu_lockup_ack;
wire    [31:0]  ifu_sysmap_pa;
wire            ifu_xx_warm_up_clk;
wire            iu_hpcp_inst_bht_mispred;
wire            iu_hpcp_inst_condbr;
wire            iu_hpcp_inst_condbr_gate;
wire    [31:0]  iu_idu_ex1_src1_update_value;
wire    [31:0]  iu_ifu_bht_cur_pc;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire    [31:0]  iu_ifu_ex1_tar_pc;
wire            iu_ifu_ex1_tar_pc_vld;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            iu_rtu_div_ex1_stall;
wire            iu_rtu_ex1_alu_cmplt;
wire    [31:0]  iu_rtu_ex1_alu_data;
wire            iu_rtu_ex1_bju_chgflw_vld;
wire            iu_rtu_ex1_bju_cmplt;
wire            iu_rtu_ex1_bju_cmplt_dp;
wire    [31:0]  iu_rtu_ex1_bju_data;
wire            iu_rtu_ex1_bju_stall;
wire            iu_rtu_ex1_bju_wb_vld;
wire            iu_rtu_ex1_branch_inst;
wire    [31:0]  iu_rtu_ex1_cur_pc;
wire            iu_rtu_ex1_div_cmplt;
wire    [31:0]  iu_rtu_ex1_div_data;
wire            iu_rtu_ex1_div_wb_vld;
wire    [31:0]  iu_rtu_ex1_lsu_wb_data;
wire    [5 :0]  iu_rtu_ex1_lsu_wb_preg;
wire            iu_rtu_ex1_lsu_wb_vld;
wire            iu_rtu_ex1_mul_cmplt;
wire    [31:0]  iu_rtu_ex1_next_pc;
wire            iu_rtu_ex1_split_inst;
wire    [5 :0]  iu_rtu_ex1_wb_preg;
wire            iu_rtu_ex1_wb_vld;
wire    [31:0]  iu_rtu_ex2_chgflw_pc;
wire            iu_rtu_ex2_chgflw_vld;
wire    [31:0]  iu_rtu_ex2_div_data;
wire    [4 :0]  iu_rtu_ex2_div_preg;
wire            iu_rtu_ex2_div_wb_vld;
wire    [31:0]  iu_rtu_ex2_mul_wb_data;
wire    [5 :0]  iu_rtu_ex2_mul_wb_preg;
wire            iu_xx_no_op;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire            lsu_cp0_icc_done;
wire            lsu_hpcp_cache_read_access;
wire            lsu_hpcp_cache_read_access_gate;
wire            lsu_hpcp_cache_read_miss;
wire            lsu_hpcp_cache_read_miss_gate;
wire            lsu_hpcp_cache_write_access;
wire            lsu_hpcp_cache_write_access_gate;
wire            lsu_hpcp_cache_write_miss;
wire            lsu_hpcp_cache_write_miss_gate;
wire            lsu_hpcp_inst_store;
wire            lsu_hpcp_inst_store_gate;
wire            lsu_idu_ex1_src1_update_en;
wire            lsu_idu_ex1_src1_update_en_gate;
wire    [31:0]  lsu_idu_update_addr;
wire            lsu_idu_update_en;
wire            lsu_idu_update_en_gate;
wire    [31:0]  lsu_idu_update_offset;
wire            lsu_iu_ex1_base_wb;
wire            lsu_iu_ex1_src1_sel;
wire    [31:0]  lsu_iu_ex2_data;
wire            lsu_iu_ex2_data_vld;
wire            lsu_iu_ex2_data_vld_gate;
wire            lsu_pad_sc_pass;
wire    [31:0]  lsu_pmp_addr;
wire            lsu_pmp_write;
wire            lsu_rtu_async_expt_vld;
wire            lsu_rtu_async_ld_inst;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_ex1_bkpta_trap;
wire            lsu_rtu_ex1_bkptb_trap;
wire            lsu_rtu_ex1_bkptc_trap;
wire            lsu_rtu_ex1_bkptd_trap;
wire            lsu_rtu_ex1_bkpte_trap;
wire            lsu_rtu_ex1_cmplt;
wire            lsu_rtu_ex1_cmplt_dp;
wire    [3 :0]  lsu_rtu_ex1_expt_vec;
wire            lsu_rtu_ex1_expt_vld;
wire            lsu_rtu_ex1_inst_ld;
wire    [31:0]  lsu_rtu_ex1_mtval;
wire            lsu_rtu_ex1_stall;
wire    [31:0]  lsu_rtu_ex2_data;
wire            lsu_rtu_ex2_data_vld;
wire            lsu_rtu_ex2_data_vld_gate;
wire    [5 :0]  lsu_rtu_ex2_dest_reg;
wire            lsu_rtu_ex2_stall;
wire            lsu_rtu_ex2_stall_gate;
wire            lsu_rtu_pmp_deny;
wire    [31:0]  lsu_sysmap_pa;
wire            lsu_xx_flush;
wire            lsu_xx_no_op;
wire            lsu_xx_warm_up;
wire            pad_yy_gate_clk_en_b;
wire            pmp_ifu_acc_deny;
wire            pmp_lsu_acc_deny;
wire            rtu_clic_warm_up;
wire            rtu_cp0_bus_error;
wire    [31:0]  rtu_cp0_epc;
wire            rtu_cp0_ex1_dbg_cancel;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mie_en_gate;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_cp0_wk_int;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_had_xx_split;
wire            rtu_hpcp_retire_inst_vld;
wire    [31:0]  rtu_idu_ex1_fwd_data;
wire            rtu_idu_ex1_fwd_vld;
wire            rtu_idu_ex1_stall;
wire    [31:0]  rtu_idu_ex2_lsu_fwd_data;
wire    [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
wire            rtu_idu_ex2_lsu_fwd_vld;
wire    [31:0]  rtu_idu_ex2_rbus_fwd_data;
wire    [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
wire            rtu_idu_ex2_rbus_fwd_vld;
wire            rtu_idu_id_cancel;
wire            rtu_idu_id_stall;
wire            rtu_idu_id_tail_int_vld;
wire            rtu_idu_int_vld_raw;
wire            rtu_idu_late_flush;
wire    [31:0]  rtu_idu_wb_lsu_data;
wire    [5 :0]  rtu_idu_wb_lsu_preg;
wire            rtu_idu_wb_lsu_vld;
wire    [31:0]  rtu_idu_wb_rbus_data;
wire    [5 :0]  rtu_idu_wb_rbus_preg;
wire            rtu_idu_wb_rbus_vld;
wire            rtu_idu_wb_warm_up;
wire    [31:0]  rtu_ifu_chgflow_pc;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_lockup_expt_vld;
wire            rtu_ifu_lockup_mask;
wire            rtu_ifu_lockup_req;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;
wire            rtu_iu_ex1_stall;
wire    [31:0]  rtu_iu_ex2_cur_pc;
wire            rtu_iu_ex2_div_wb_en;
wire            rtu_iu_ex2_stall;
wire            rtu_lsu_async_expt_ack;
wire            rtu_lsu_ex1_cancel;
wire            rtu_lsu_ex2_stall;
wire            rtu_lsu_expt_ack;
wire            rtu_lsu_expt_exit;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_pad_inst_retire;
wire            rtu_pad_inst_split;
wire    [31:0]  rtu_pad_retire_pc;
wire    [31:0]  rtu_pad_wb0_data;
wire    [5 :0]  rtu_pad_wb0_preg;
wire            rtu_pad_wb0_vld;
wire    [31:0]  rtu_pad_wb1_data;
wire    [5 :0]  rtu_pad_wb1_preg;
wire            rtu_pad_wb1_vld;
wire            rtu_sysio_lockup_on;
wire            rtu_xx_ex1_cancel;
wire            rtu_xx_ex2_cancel;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_async_flush;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_retire;
wire            rtu_yy_xx_tail_int_vld;
wire            sysio_cp0_clk_en;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;
wire    [31:0]  sysio_ifu_rst_addr;
wire            sysio_ifu_rst_addr_done;
wire    [31:0]  sysio_iu_rst_addr;
wire            sysio_rtu_nmi_int;
wire            sysio_rtu_wk_event;
wire            sysio_xx_halt_req;
wire    [4 :0]  sysmap_ifu_flg;
wire    [4 :0]  sysmap_lsu_flg;
wire    [31:0]  tcip_cp0_clic_base;





// &Instance("pa_ifu_top"); @33
pa_ifu_top  x_pa_ifu_top (
  .bmu_ifu_acc_err          (bmu_ifu_acc_err         ),
  .bmu_ifu_grant            (bmu_ifu_grant           ),
  .bmu_ifu_rdata            (bmu_ifu_rdata           ),
  .bmu_ifu_trans_cmplt      (bmu_ifu_trans_cmplt     ),
  .cp0_ifu_bht_en           (cp0_ifu_bht_en          ),
  .cp0_ifu_bht_inv          (cp0_ifu_bht_inv         ),
  .cp0_ifu_icache_en        (cp0_ifu_icache_en       ),
  .cp0_ifu_icache_inv_addr  (cp0_ifu_icache_inv_addr ),
  .cp0_ifu_icache_inv_req   (cp0_ifu_icache_inv_req  ),
  .cp0_ifu_icache_inv_type  (cp0_ifu_icache_inv_type ),
  .cp0_ifu_in_lpmd          (cp0_ifu_in_lpmd         ),
  .cp0_ifu_lpmd_req         (cp0_ifu_lpmd_req        ),
  .cp0_ifu_mtvec            (cp0_ifu_mtvec           ),
  .cp0_ifu_ras_en           (cp0_ifu_ras_en          ),
  .cp0_ifu_rst_inv_done     (cp0_ifu_rst_inv_done    ),
  .cp0_ifu_srst_mask        (cp0_ifu_srst_mask       ),
  .cp0_ifu_srst_req         (cp0_ifu_srst_req        ),
  .cp0_yy_clk_en            (cp0_yy_clk_en           ),
  .cp0_yy_mach_mode         (cp0_yy_mach_mode        ),
  .cpurst_b                 (cpurst_b                ),
  .forever_cpuclk           (forever_cpuclk          ),
  .had_ifu_ir               (had_ifu_ir              ),
  .had_ifu_ir_vld           (had_ifu_ir_vld          ),
  .had_ifu_pc               (had_ifu_pc              ),
  .had_yy_xx_bkpta_base     (had_yy_xx_bkpta_base    ),
  .had_yy_xx_bkpta_mask     (had_yy_xx_bkpta_mask    ),
  .had_yy_xx_bkpta_rc       (had_yy_xx_bkpta_rc      ),
  .had_yy_xx_bkptb_base     (had_yy_xx_bkptb_base    ),
  .had_yy_xx_bkptb_mask     (had_yy_xx_bkptb_mask    ),
  .had_yy_xx_bkptb_rc       (had_yy_xx_bkptb_rc      ),
  .had_yy_xx_bkptc_base     (had_yy_xx_bkptc_base    ),
  .had_yy_xx_bkptc_mask     (had_yy_xx_bkptc_mask    ),
  .had_yy_xx_bkptd_base     (had_yy_xx_bkptd_base    ),
  .had_yy_xx_bkptd_mask     (had_yy_xx_bkptd_mask    ),
  .had_yy_xx_bkpte_base     (had_yy_xx_bkpte_base    ),
  .had_yy_xx_bkpte_mask     (had_yy_xx_bkpte_mask    ),
  .had_yy_xx_exit_dbg       (had_yy_xx_exit_dbg      ),
  .idu_ifu_id_stall         (idu_ifu_id_stall        ),
  .idu_ifu_tail_vld         (idu_ifu_tail_vld        ),
  .idu_ifu_x1               (idu_ifu_x1              ),
  .ifu_bmu_acc_deny         (ifu_bmu_acc_deny        ),
  .ifu_bmu_addr             (ifu_bmu_addr            ),
  .ifu_bmu_burst            (ifu_bmu_burst           ),
  .ifu_bmu_data_req         (ifu_bmu_data_req        ),
  .ifu_bmu_prot             (ifu_bmu_prot            ),
  .ifu_bmu_req              (ifu_bmu_req             ),
  .ifu_bmu_seq              (ifu_bmu_seq             ),
  .ifu_bmu_size             (ifu_bmu_size            ),
  .ifu_cp0_bht_inv_done     (ifu_cp0_bht_inv_done    ),
  .ifu_cp0_icache_inv_done  (ifu_cp0_icache_inv_done ),
  .ifu_cp0_lpmd_ack         (ifu_cp0_lpmd_ack        ),
  .ifu_cp0_rst_inv_req      (ifu_cp0_rst_inv_req     ),
  .ifu_cp0_srst_ack         (ifu_cp0_srst_ack        ),
  .ifu_cp0_vec_err          (ifu_cp0_vec_err         ),
  .ifu_cp0_vec_succeed      (ifu_cp0_vec_succeed     ),
  .ifu_hpcp_icache_access   (ifu_hpcp_icache_access  ),
  .ifu_hpcp_icache_miss     (ifu_hpcp_icache_miss    ),
  .ifu_idu_chgflw_flush     (ifu_idu_chgflw_flush    ),
  .ifu_idu_id_expt_vld      (ifu_idu_id_expt_vld     ),
  .ifu_idu_id_inst          (ifu_idu_id_inst         ),
  .ifu_idu_id_inst_bkpt     (ifu_idu_id_inst_bkpt    ),
  .ifu_idu_id_inst_vld      (ifu_idu_id_inst_vld     ),
  .ifu_idu_id_pred_taken    (ifu_idu_id_pred_taken   ),
  .ifu_idu_id_warm_up       (ifu_idu_id_warm_up      ),
  .ifu_iu_chgflw_pc         (ifu_iu_chgflw_pc        ),
  .ifu_iu_chgflw_vld        (ifu_iu_chgflw_vld       ),
  .ifu_iu_ex1_pc_pred       (ifu_iu_ex1_pc_pred      ),
  .ifu_iu_reset_vld         (ifu_iu_reset_vld        ),
  .ifu_pmp_addr             (ifu_pmp_addr            ),
  .ifu_pmp_machine_mode     (ifu_pmp_machine_mode    ),
  .ifu_rtu_cpu_in_init      (ifu_rtu_cpu_in_init     ),
  .ifu_rtu_lockup_ack       (ifu_rtu_lockup_ack      ),
  .ifu_sysmap_pa            (ifu_sysmap_pa           ),
  .ifu_xx_warm_up_clk       (ifu_xx_warm_up_clk      ),
  .iu_ifu_bht_cur_pc        (iu_ifu_bht_cur_pc       ),
  .iu_ifu_bht_mispred       (iu_ifu_bht_mispred      ),
  .iu_ifu_bht_pred          (iu_ifu_bht_pred         ),
  .iu_ifu_bht_taken         (iu_ifu_bht_taken        ),
  .iu_ifu_br_vld            (iu_ifu_br_vld           ),
  .iu_ifu_br_vld_gate       (iu_ifu_br_vld_gate      ),
  .iu_ifu_ex1_tar_pc        (iu_ifu_ex1_tar_pc       ),
  .iu_ifu_ex1_tar_pc_vld    (iu_ifu_ex1_tar_pc_vld   ),
  .iu_ifu_link_vld          (iu_ifu_link_vld         ),
  .iu_ifu_link_vld_gate     (iu_ifu_link_vld_gate    ),
  .iu_ifu_pc_mispred        (iu_ifu_pc_mispred       ),
  .iu_ifu_ret_vld           (iu_ifu_ret_vld          ),
  .iu_ifu_ret_vld_gate      (iu_ifu_ret_vld_gate     ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .pmp_ifu_acc_deny         (pmp_ifu_acc_deny        ),
  .rtu_ifu_chgflow_pc       (rtu_ifu_chgflow_pc      ),
  .rtu_ifu_chgflow_vld      (rtu_ifu_chgflow_vld     ),
  .rtu_ifu_lockup_expt_vld  (rtu_ifu_lockup_expt_vld ),
  .rtu_ifu_lockup_mask      (rtu_ifu_lockup_mask     ),
  .rtu_ifu_lockup_req       (rtu_ifu_lockup_req      ),
  .rtu_ifu_xx_fe_flush      (rtu_ifu_xx_fe_flush     ),
  .rtu_ifu_xx_fe_flush_gate (rtu_ifu_xx_fe_flush_gate),
  .rtu_yy_xx_dbgon          (rtu_yy_xx_dbgon         ),
  .rtu_yy_xx_expt_int       (rtu_yy_xx_expt_int      ),
  .rtu_yy_xx_expt_vld       (rtu_yy_xx_expt_vld      ),
  .rtu_yy_xx_expt_vld_gate  (rtu_yy_xx_expt_vld_gate ),
  .rtu_yy_xx_int_hv         (rtu_yy_xx_int_hv        ),
  .rtu_yy_xx_tail_int_vld   (rtu_yy_xx_tail_int_vld  ),
  .sysio_ifu_rst_addr       (sysio_ifu_rst_addr      ),
  .sysio_ifu_rst_addr_done  (sysio_ifu_rst_addr_done ),
  .sysio_xx_halt_req        (sysio_xx_halt_req       ),
  .sysmap_ifu_flg           (sysmap_ifu_flg          )
);





// &Instance("pa_idu_top"); @38
pa_idu_top  x_pa_idu_top (
  .cp0_idu_mcause                  (cp0_idu_mcause                 ),
  .cp0_idu_mepc                    (cp0_idu_mepc                   ),
  .cp0_idu_sp_use_scratch          (cp0_idu_sp_use_scratch         ),
  .cp0_idu_sp_wdata                (cp0_idu_sp_wdata               ),
  .cp0_idu_sp_wen                  (cp0_idu_sp_wen                 ),
  .cp0_idu_sp_wen_gate             (cp0_idu_sp_wen_gate            ),
  .cp0_idu_spec_push_en            (cp0_idu_spec_push_en           ),
  .cp0_idu_swap_sp_en              (cp0_idu_swap_sp_en             ),
  .cp0_yy_clk_en                   (cp0_yy_clk_en                  ),
  .cp0_yy_cskyisaee                (cp0_yy_cskyisaee               ),
  .cp0_yy_mach_mode                (cp0_yy_mach_mode               ),
  .cpurst_b                        (cpurst_b                       ),
  .forever_cpuclk                  (forever_cpuclk                 ),
  .had_idu_id_inst_bkpt            (had_idu_id_inst_bkpt           ),
  .had_idu_id_inst_bkpt_brir       (had_idu_id_inst_bkpt_brir      ),
  .had_idu_id_inst_bkpt_hit        (had_idu_id_inst_bkpt_hit       ),
  .had_idu_wbbr_data               (had_idu_wbbr_data              ),
  .had_idu_wbbr_vld                (had_idu_wbbr_vld               ),
  .idu_cp0_ex1_dst_idx             (idu_cp0_ex1_dst_idx            ),
  .idu_cp0_ex1_dst_vld             (idu_cp0_ex1_dst_vld            ),
  .idu_cp0_ex1_expt_type           (idu_cp0_ex1_expt_type          ),
  .idu_cp0_ex1_expt_vld            (idu_cp0_ex1_expt_vld           ),
  .idu_cp0_ex1_func                (idu_cp0_ex1_func               ),
  .idu_cp0_ex1_inst_bkpt           (idu_cp0_ex1_inst_bkpt          ),
  .idu_cp0_ex1_opcode              (idu_cp0_ex1_opcode             ),
  .idu_cp0_ex1_rs1                 (idu_cp0_ex1_rs1                ),
  .idu_cp0_ex1_rs2                 (idu_cp0_ex1_rs2                ),
  .idu_cp0_ex1_sel                 (idu_cp0_ex1_sel                ),
  .idu_cp0_ex1_sub_func            (idu_cp0_ex1_sub_func           ),
  .idu_cp0_ipop_data               (idu_cp0_ipop_data              ),
  .idu_cp0_mcause_wen              (idu_cp0_mcause_wen             ),
  .idu_cp0_mepc_wen                (idu_cp0_mepc_wen               ),
  .idu_cp0_sp_reg                  (idu_cp0_sp_reg                 ),
  .idu_cp0_sp_swap_pending         (idu_cp0_sp_swap_pending        ),
  .idu_cp0_sp_swap_req             (idu_cp0_sp_swap_req            ),
  .idu_cp0_sp_swap_req_gate        (idu_cp0_sp_swap_req_gate       ),
  .idu_had_id_chgflw_inst          (idu_had_id_chgflw_inst         ),
  .idu_had_id_inst_bkpt            (idu_had_id_inst_bkpt           ),
  .idu_had_no_op                   (idu_had_no_op                  ),
  .idu_ifu_id_stall                (idu_ifu_id_stall               ),
  .idu_ifu_tail_vld                (idu_ifu_tail_vld               ),
  .idu_ifu_x1                      (idu_ifu_x1                     ),
  .idu_iu_ex1_ag_imm               (idu_iu_ex1_ag_imm              ),
  .idu_iu_ex1_alu_sel              (idu_iu_ex1_alu_sel             ),
  .idu_iu_ex1_bht_pred             (idu_iu_ex1_bht_pred            ),
  .idu_iu_ex1_bju_depd_lsu_src0    (idu_iu_ex1_bju_depd_lsu_src0   ),
  .idu_iu_ex1_bju_depd_lsu_src1    (idu_iu_ex1_bju_depd_lsu_src1   ),
  .idu_iu_ex1_bju_sel              (idu_iu_ex1_bju_sel             ),
  .idu_iu_ex1_bju_use_pc           (idu_iu_ex1_bju_use_pc          ),
  .idu_iu_ex1_div_sel              (idu_iu_ex1_div_sel             ),
  .idu_iu_ex1_dst_preg             (idu_iu_ex1_dst_preg            ),
  .idu_iu_ex1_func                 (idu_iu_ex1_func                ),
  .idu_iu_ex1_inst_len             (idu_iu_ex1_inst_len            ),
  .idu_iu_ex1_inst_vld             (idu_iu_ex1_inst_vld            ),
  .idu_iu_ex1_mul_high_sel         (idu_iu_ex1_mul_high_sel        ),
  .idu_iu_ex1_mul_sel              (idu_iu_ex1_mul_sel             ),
  .idu_iu_ex1_split                (idu_iu_ex1_split               ),
  .idu_iu_ex1_src0                 (idu_iu_ex1_src0                ),
  .idu_iu_ex1_src0_reg             (idu_iu_ex1_src0_reg            ),
  .idu_iu_ex1_src1                 (idu_iu_ex1_src1                ),
  .idu_iu_ex1_src2                 (idu_iu_ex1_src2                ),
  .idu_iu_ex1_sub_func             (idu_iu_ex1_sub_func            ),
  .idu_iu_ex1_wb_vld               (idu_iu_ex1_wb_vld              ),
  .idu_iu_tail_fail                (idu_iu_tail_fail               ),
  .idu_iu_tail_fail_gate           (idu_iu_tail_fail_gate          ),
  .idu_lsu_ex1_ag_imm              (idu_lsu_ex1_ag_imm             ),
  .idu_lsu_ex1_base                (idu_lsu_ex1_base               ),
  .idu_lsu_ex1_base_sel            (idu_lsu_ex1_base_sel           ),
  .idu_lsu_ex1_base_wb             (idu_lsu_ex1_base_wb            ),
  .idu_lsu_ex1_data                (idu_lsu_ex1_data               ),
  .idu_lsu_ex1_dest_reg            (idu_lsu_ex1_dest_reg           ),
  .idu_lsu_ex1_dest_vld            (idu_lsu_ex1_dest_vld           ),
  .idu_lsu_ex1_fls                 (idu_lsu_ex1_fls                ),
  .idu_lsu_ex1_func                (idu_lsu_ex1_func               ),
  .idu_lsu_ex1_mls                 (idu_lsu_ex1_mls                ),
  .idu_lsu_ex1_offset_sel          (idu_lsu_ex1_offset_sel         ),
  .idu_lsu_ex1_sel                 (idu_lsu_ex1_sel                ),
  .idu_lsu_ex1_sign_extend         (idu_lsu_ex1_sign_extend        ),
  .idu_lsu_ex1_size                (idu_lsu_ex1_size               ),
  .idu_lsu_ex1_src1_depd           (idu_lsu_ex1_src1_depd          ),
  .idu_lsu_ex1_src1_reg            (idu_lsu_ex1_src1_reg           ),
  .idu_rtu_ex1_dst_vld             (idu_rtu_ex1_dst_vld            ),
  .idu_rtu_ex1_inst_vld            (idu_rtu_ex1_inst_vld           ),
  .idu_rtu_ex1_ipop_int_mask       (idu_rtu_ex1_ipop_int_mask      ),
  .idu_rtu_ex1_ipush_mie_en        (idu_rtu_ex1_ipush_mie_en       ),
  .idu_rtu_ex1_ipush_spec_fail     (idu_rtu_ex1_ipush_spec_fail    ),
  .idu_rtu_ex1_lsu_sel             (idu_rtu_ex1_lsu_sel            ),
  .idu_rtu_ex1_tail_int_vld        (idu_rtu_ex1_tail_int_vld       ),
  .idu_rtu_ipush_spec              (idu_rtu_ipush_spec             ),
  .idu_rtu_tail_fail               (idu_rtu_tail_fail              ),
  .idu_xx_ex1_warm_up              (idu_xx_ex1_warm_up             ),
  .idu_yy_xx_tail_ack              (idu_yy_xx_tail_ack             ),
  .ifu_idu_chgflw_flush            (ifu_idu_chgflw_flush           ),
  .ifu_idu_id_expt_vld             (ifu_idu_id_expt_vld            ),
  .ifu_idu_id_inst                 (ifu_idu_id_inst                ),
  .ifu_idu_id_inst_bkpt            (ifu_idu_id_inst_bkpt           ),
  .ifu_idu_id_inst_vld             (ifu_idu_id_inst_vld            ),
  .ifu_idu_id_pred_taken           (ifu_idu_id_pred_taken          ),
  .ifu_idu_id_warm_up              (ifu_idu_id_warm_up             ),
  .ifu_xx_warm_up_clk              (ifu_xx_warm_up_clk             ),
  .iu_idu_ex1_src1_update_value    (iu_idu_ex1_src1_update_value   ),
  .iu_xx_no_op                     (iu_xx_no_op                    ),
  .lsu_idu_ex1_src1_update_en      (lsu_idu_ex1_src1_update_en     ),
  .lsu_idu_ex1_src1_update_en_gate (lsu_idu_ex1_src1_update_en_gate),
  .lsu_idu_update_addr             (lsu_idu_update_addr            ),
  .lsu_idu_update_en               (lsu_idu_update_en              ),
  .lsu_idu_update_en_gate          (lsu_idu_update_en_gate         ),
  .lsu_idu_update_offset           (lsu_idu_update_offset          ),
  .lsu_xx_no_op                    (lsu_xx_no_op                   ),
  .pad_yy_gate_clk_en_b            (pad_yy_gate_clk_en_b           ),
  .rtu_idu_ex1_fwd_data            (rtu_idu_ex1_fwd_data           ),
  .rtu_idu_ex1_fwd_vld             (rtu_idu_ex1_fwd_vld            ),
  .rtu_idu_ex1_stall               (rtu_idu_ex1_stall              ),
  .rtu_idu_ex2_lsu_fwd_data        (rtu_idu_ex2_lsu_fwd_data       ),
  .rtu_idu_ex2_lsu_fwd_preg        (rtu_idu_ex2_lsu_fwd_preg       ),
  .rtu_idu_ex2_lsu_fwd_vld         (rtu_idu_ex2_lsu_fwd_vld        ),
  .rtu_idu_ex2_rbus_fwd_data       (rtu_idu_ex2_rbus_fwd_data      ),
  .rtu_idu_ex2_rbus_fwd_preg       (rtu_idu_ex2_rbus_fwd_preg      ),
  .rtu_idu_ex2_rbus_fwd_vld        (rtu_idu_ex2_rbus_fwd_vld       ),
  .rtu_idu_id_cancel               (rtu_idu_id_cancel              ),
  .rtu_idu_id_stall                (rtu_idu_id_stall               ),
  .rtu_idu_id_tail_int_vld         (rtu_idu_id_tail_int_vld        ),
  .rtu_idu_int_vld_raw             (rtu_idu_int_vld_raw            ),
  .rtu_idu_late_flush              (rtu_idu_late_flush             ),
  .rtu_idu_wb_lsu_data             (rtu_idu_wb_lsu_data            ),
  .rtu_idu_wb_lsu_preg             (rtu_idu_wb_lsu_preg            ),
  .rtu_idu_wb_lsu_vld              (rtu_idu_wb_lsu_vld             ),
  .rtu_idu_wb_rbus_data            (rtu_idu_wb_rbus_data           ),
  .rtu_idu_wb_rbus_preg            (rtu_idu_wb_rbus_preg           ),
  .rtu_idu_wb_rbus_vld             (rtu_idu_wb_rbus_vld            ),
  .rtu_idu_wb_warm_up              (rtu_idu_wb_warm_up             ),
  .rtu_xx_no_op                    (rtu_xx_no_op                   ),
  .rtu_yy_xx_dbgon                 (rtu_yy_xx_dbgon                ),
  .rtu_yy_xx_expt_int              (rtu_yy_xx_expt_int             ),
  .rtu_yy_xx_expt_vld              (rtu_yy_xx_expt_vld             ),
  .rtu_yy_xx_flush                 (rtu_yy_xx_flush                )
);





// &Instance("pa_iu_top"); @43
pa_iu_top  x_pa_iu_top (
  .cp0_yy_clk_en                (cp0_yy_clk_en               ),
  .cpurst_b                     (cpurst_b                    ),
  .forever_cpuclk               (forever_cpuclk              ),
  .idu_iu_ex1_ag_imm            (idu_iu_ex1_ag_imm           ),
  .idu_iu_ex1_alu_sel           (idu_iu_ex1_alu_sel          ),
  .idu_iu_ex1_bht_pred          (idu_iu_ex1_bht_pred         ),
  .idu_iu_ex1_bju_depd_lsu_src0 (idu_iu_ex1_bju_depd_lsu_src0),
  .idu_iu_ex1_bju_depd_lsu_src1 (idu_iu_ex1_bju_depd_lsu_src1),
  .idu_iu_ex1_bju_sel           (idu_iu_ex1_bju_sel          ),
  .idu_iu_ex1_bju_use_pc        (idu_iu_ex1_bju_use_pc       ),
  .idu_iu_ex1_div_sel           (idu_iu_ex1_div_sel          ),
  .idu_iu_ex1_dst_preg          (idu_iu_ex1_dst_preg         ),
  .idu_iu_ex1_func              (idu_iu_ex1_func             ),
  .idu_iu_ex1_inst_len          (idu_iu_ex1_inst_len         ),
  .idu_iu_ex1_inst_vld          (idu_iu_ex1_inst_vld         ),
  .idu_iu_ex1_mul_high_sel      (idu_iu_ex1_mul_high_sel     ),
  .idu_iu_ex1_mul_sel           (idu_iu_ex1_mul_sel          ),
  .idu_iu_ex1_split             (idu_iu_ex1_split            ),
  .idu_iu_ex1_src0              (idu_iu_ex1_src0             ),
  .idu_iu_ex1_src0_reg          (idu_iu_ex1_src0_reg         ),
  .idu_iu_ex1_src1              (idu_iu_ex1_src1             ),
  .idu_iu_ex1_src2              (idu_iu_ex1_src2             ),
  .idu_iu_ex1_sub_func          (idu_iu_ex1_sub_func         ),
  .idu_iu_ex1_wb_vld            (idu_iu_ex1_wb_vld           ),
  .idu_iu_tail_fail             (idu_iu_tail_fail            ),
  .idu_iu_tail_fail_gate        (idu_iu_tail_fail_gate       ),
  .idu_xx_ex1_warm_up           (idu_xx_ex1_warm_up          ),
  .ifu_iu_chgflw_pc             (ifu_iu_chgflw_pc            ),
  .ifu_iu_chgflw_vld            (ifu_iu_chgflw_vld           ),
  .ifu_iu_ex1_pc_pred           (ifu_iu_ex1_pc_pred          ),
  .ifu_iu_reset_vld             (ifu_iu_reset_vld            ),
  .iu_hpcp_inst_bht_mispred     (iu_hpcp_inst_bht_mispred    ),
  .iu_hpcp_inst_condbr          (iu_hpcp_inst_condbr         ),
  .iu_hpcp_inst_condbr_gate     (iu_hpcp_inst_condbr_gate    ),
  .iu_idu_ex1_src1_update_value (iu_idu_ex1_src1_update_value),
  .iu_ifu_bht_cur_pc            (iu_ifu_bht_cur_pc           ),
  .iu_ifu_bht_mispred           (iu_ifu_bht_mispred          ),
  .iu_ifu_bht_pred              (iu_ifu_bht_pred             ),
  .iu_ifu_bht_taken             (iu_ifu_bht_taken            ),
  .iu_ifu_br_vld                (iu_ifu_br_vld               ),
  .iu_ifu_br_vld_gate           (iu_ifu_br_vld_gate          ),
  .iu_ifu_ex1_tar_pc            (iu_ifu_ex1_tar_pc           ),
  .iu_ifu_ex1_tar_pc_vld        (iu_ifu_ex1_tar_pc_vld       ),
  .iu_ifu_link_vld              (iu_ifu_link_vld             ),
  .iu_ifu_link_vld_gate         (iu_ifu_link_vld_gate        ),
  .iu_ifu_pc_mispred            (iu_ifu_pc_mispred           ),
  .iu_ifu_ret_vld               (iu_ifu_ret_vld              ),
  .iu_ifu_ret_vld_gate          (iu_ifu_ret_vld_gate         ),
  .iu_rtu_div_ex1_stall         (iu_rtu_div_ex1_stall        ),
  .iu_rtu_ex1_alu_cmplt         (iu_rtu_ex1_alu_cmplt        ),
  .iu_rtu_ex1_alu_data          (iu_rtu_ex1_alu_data         ),
  .iu_rtu_ex1_bju_chgflw_vld    (iu_rtu_ex1_bju_chgflw_vld   ),
  .iu_rtu_ex1_bju_cmplt         (iu_rtu_ex1_bju_cmplt        ),
  .iu_rtu_ex1_bju_cmplt_dp      (iu_rtu_ex1_bju_cmplt_dp     ),
  .iu_rtu_ex1_bju_data          (iu_rtu_ex1_bju_data         ),
  .iu_rtu_ex1_bju_stall         (iu_rtu_ex1_bju_stall        ),
  .iu_rtu_ex1_bju_wb_vld        (iu_rtu_ex1_bju_wb_vld       ),
  .iu_rtu_ex1_branch_inst       (iu_rtu_ex1_branch_inst      ),
  .iu_rtu_ex1_cur_pc            (iu_rtu_ex1_cur_pc           ),
  .iu_rtu_ex1_div_cmplt         (iu_rtu_ex1_div_cmplt        ),
  .iu_rtu_ex1_div_data          (iu_rtu_ex1_div_data         ),
  .iu_rtu_ex1_div_wb_vld        (iu_rtu_ex1_div_wb_vld       ),
  .iu_rtu_ex1_lsu_wb_data       (iu_rtu_ex1_lsu_wb_data      ),
  .iu_rtu_ex1_lsu_wb_preg       (iu_rtu_ex1_lsu_wb_preg      ),
  .iu_rtu_ex1_lsu_wb_vld        (iu_rtu_ex1_lsu_wb_vld       ),
  .iu_rtu_ex1_mul_cmplt         (iu_rtu_ex1_mul_cmplt        ),
  .iu_rtu_ex1_next_pc           (iu_rtu_ex1_next_pc          ),
  .iu_rtu_ex1_split_inst        (iu_rtu_ex1_split_inst       ),
  .iu_rtu_ex1_wb_preg           (iu_rtu_ex1_wb_preg          ),
  .iu_rtu_ex1_wb_vld            (iu_rtu_ex1_wb_vld           ),
  .iu_rtu_ex2_chgflw_pc         (iu_rtu_ex2_chgflw_pc        ),
  .iu_rtu_ex2_chgflw_vld        (iu_rtu_ex2_chgflw_vld       ),
  .iu_rtu_ex2_div_data          (iu_rtu_ex2_div_data         ),
  .iu_rtu_ex2_div_preg          (iu_rtu_ex2_div_preg         ),
  .iu_rtu_ex2_div_wb_vld        (iu_rtu_ex2_div_wb_vld       ),
  .iu_rtu_ex2_mul_wb_data       (iu_rtu_ex2_mul_wb_data      ),
  .iu_rtu_ex2_mul_wb_preg       (iu_rtu_ex2_mul_wb_preg      ),
  .iu_xx_no_op                  (iu_xx_no_op                 ),
  .lsu_iu_ex1_base_wb           (lsu_iu_ex1_base_wb          ),
  .lsu_iu_ex1_src1_sel          (lsu_iu_ex1_src1_sel         ),
  .lsu_iu_ex2_data              (lsu_iu_ex2_data             ),
  .lsu_iu_ex2_data_vld          (lsu_iu_ex2_data_vld         ),
  .lsu_iu_ex2_data_vld_gate     (lsu_iu_ex2_data_vld_gate    ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        ),
  .rtu_iu_ex1_stall             (rtu_iu_ex1_stall            ),
  .rtu_iu_ex2_cur_pc            (rtu_iu_ex2_cur_pc           ),
  .rtu_iu_ex2_div_wb_en         (rtu_iu_ex2_div_wb_en        ),
  .rtu_iu_ex2_stall             (rtu_iu_ex2_stall            ),
  .rtu_xx_ex1_cancel            (rtu_xx_ex1_cancel           ),
  .rtu_xx_ex2_cancel            (rtu_xx_ex2_cancel           ),
  .rtu_yy_xx_async_flush        (rtu_yy_xx_async_flush       ),
  .rtu_yy_xx_flush              (rtu_yy_xx_flush             ),
  .sysio_iu_rst_addr            (sysio_iu_rst_addr           )
);


// &Force("output", "iu_xx_no_op"); @45




// &Instance("pa_lsu_top"); @50
pa_lsu_top  x_pa_lsu_top (
  .bmu_lsu_acc_err                  (bmu_lsu_acc_err                 ),
  .bmu_lsu_grant                    (bmu_lsu_grant                   ),
  .bmu_lsu_rdata                    (bmu_lsu_rdata                   ),
  .bmu_lsu_trans_cmplt              (bmu_lsu_trans_cmplt             ),
  .cp0_lsu_dcache_en                (cp0_lsu_dcache_en               ),
  .cp0_lsu_dcache_wa                (cp0_lsu_dcache_wa               ),
  .cp0_lsu_dcache_wb                (cp0_lsu_dcache_wb               ),
  .cp0_lsu_fence_req                (cp0_lsu_fence_req               ),
  .cp0_lsu_icc_addr                 (cp0_lsu_icc_addr                ),
  .cp0_lsu_icc_op                   (cp0_lsu_icc_op                  ),
  .cp0_lsu_icc_req                  (cp0_lsu_icc_req                 ),
  .cp0_lsu_icc_type                 (cp0_lsu_icc_type                ),
  .cp0_lsu_mm                       (cp0_lsu_mm                      ),
  .cp0_xx_async_expt_en             (cp0_xx_async_expt_en            ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_yy_xx_bkpta_base             (had_yy_xx_bkpta_base            ),
  .had_yy_xx_bkpta_mask             (had_yy_xx_bkpta_mask            ),
  .had_yy_xx_bkpta_rc               (had_yy_xx_bkpta_rc              ),
  .had_yy_xx_bkptb_base             (had_yy_xx_bkptb_base            ),
  .had_yy_xx_bkptb_mask             (had_yy_xx_bkptb_mask            ),
  .had_yy_xx_bkptb_rc               (had_yy_xx_bkptb_rc              ),
  .had_yy_xx_bkptc_base             (had_yy_xx_bkptc_base            ),
  .had_yy_xx_bkptc_mask             (had_yy_xx_bkptc_mask            ),
  .had_yy_xx_bkptd_base             (had_yy_xx_bkptd_base            ),
  .had_yy_xx_bkptd_mask             (had_yy_xx_bkptd_mask            ),
  .had_yy_xx_bkpte_base             (had_yy_xx_bkpte_base            ),
  .had_yy_xx_bkpte_mask             (had_yy_xx_bkpte_mask            ),
  .idu_lsu_ex1_ag_imm               (idu_lsu_ex1_ag_imm              ),
  .idu_lsu_ex1_base                 (idu_lsu_ex1_base                ),
  .idu_lsu_ex1_base_sel             (idu_lsu_ex1_base_sel            ),
  .idu_lsu_ex1_base_wb              (idu_lsu_ex1_base_wb             ),
  .idu_lsu_ex1_data                 (idu_lsu_ex1_data                ),
  .idu_lsu_ex1_dest_reg             (idu_lsu_ex1_dest_reg            ),
  .idu_lsu_ex1_dest_vld             (idu_lsu_ex1_dest_vld            ),
  .idu_lsu_ex1_fls                  (idu_lsu_ex1_fls                 ),
  .idu_lsu_ex1_func                 (idu_lsu_ex1_func                ),
  .idu_lsu_ex1_mls                  (idu_lsu_ex1_mls                 ),
  .idu_lsu_ex1_offset_sel           (idu_lsu_ex1_offset_sel          ),
  .idu_lsu_ex1_sel                  (idu_lsu_ex1_sel                 ),
  .idu_lsu_ex1_sign_extend          (idu_lsu_ex1_sign_extend         ),
  .idu_lsu_ex1_size                 (idu_lsu_ex1_size                ),
  .idu_lsu_ex1_src1_depd            (idu_lsu_ex1_src1_depd           ),
  .idu_lsu_ex1_src1_reg             (idu_lsu_ex1_src1_reg            ),
  .idu_xx_ex1_warm_up               (idu_xx_ex1_warm_up              ),
  .ifu_xx_warm_up_clk               (ifu_xx_warm_up_clk              ),
  .lsu_biu_amo_pmp_deny             (lsu_biu_amo_pmp_deny            ),
  .lsu_biu_async_expt_ack           (lsu_biu_async_expt_ack          ),
  .lsu_bmu_acc_deny                 (lsu_bmu_acc_deny                ),
  .lsu_bmu_addr                     (lsu_bmu_addr                    ),
  .lsu_bmu_burst                    (lsu_bmu_burst                   ),
  .lsu_bmu_lock                     (lsu_bmu_lock                    ),
  .lsu_bmu_lrsc                     (lsu_bmu_lrsc                    ),
  .lsu_bmu_prot                     (lsu_bmu_prot                    ),
  .lsu_bmu_req                      (lsu_bmu_req                     ),
  .lsu_bmu_req_dp                   (lsu_bmu_req_dp                  ),
  .lsu_bmu_seq                      (lsu_bmu_seq                     ),
  .lsu_bmu_size                     (lsu_bmu_size                    ),
  .lsu_bmu_wdata                    (lsu_bmu_wdata                   ),
  .lsu_bmu_write                    (lsu_bmu_write                   ),
  .lsu_cp0_icc_done                 (lsu_cp0_icc_done                ),
  .lsu_hpcp_cache_read_access       (lsu_hpcp_cache_read_access      ),
  .lsu_hpcp_cache_read_access_gate  (lsu_hpcp_cache_read_access_gate ),
  .lsu_hpcp_cache_read_miss         (lsu_hpcp_cache_read_miss        ),
  .lsu_hpcp_cache_read_miss_gate    (lsu_hpcp_cache_read_miss_gate   ),
  .lsu_hpcp_cache_write_access      (lsu_hpcp_cache_write_access     ),
  .lsu_hpcp_cache_write_access_gate (lsu_hpcp_cache_write_access_gate),
  .lsu_hpcp_cache_write_miss        (lsu_hpcp_cache_write_miss       ),
  .lsu_hpcp_cache_write_miss_gate   (lsu_hpcp_cache_write_miss_gate  ),
  .lsu_hpcp_inst_store              (lsu_hpcp_inst_store             ),
  .lsu_hpcp_inst_store_gate         (lsu_hpcp_inst_store_gate        ),
  .lsu_idu_ex1_src1_update_en       (lsu_idu_ex1_src1_update_en      ),
  .lsu_idu_ex1_src1_update_en_gate  (lsu_idu_ex1_src1_update_en_gate ),
  .lsu_idu_update_addr              (lsu_idu_update_addr             ),
  .lsu_idu_update_en                (lsu_idu_update_en               ),
  .lsu_idu_update_en_gate           (lsu_idu_update_en_gate          ),
  .lsu_idu_update_offset            (lsu_idu_update_offset           ),
  .lsu_iu_ex1_base_wb               (lsu_iu_ex1_base_wb              ),
  .lsu_iu_ex1_src1_sel              (lsu_iu_ex1_src1_sel             ),
  .lsu_iu_ex2_data                  (lsu_iu_ex2_data                 ),
  .lsu_iu_ex2_data_vld              (lsu_iu_ex2_data_vld             ),
  .lsu_iu_ex2_data_vld_gate         (lsu_iu_ex2_data_vld_gate        ),
  .lsu_pad_sc_pass                  (lsu_pad_sc_pass                 ),
  .lsu_pmp_addr                     (lsu_pmp_addr                    ),
  .lsu_pmp_write                    (lsu_pmp_write                   ),
  .lsu_rtu_async_expt_vld           (lsu_rtu_async_expt_vld          ),
  .lsu_rtu_async_ld_inst            (lsu_rtu_async_ld_inst           ),
  .lsu_rtu_async_mtval              (lsu_rtu_async_mtval             ),
  .lsu_rtu_ex1_bkpta_trap           (lsu_rtu_ex1_bkpta_trap          ),
  .lsu_rtu_ex1_bkptb_trap           (lsu_rtu_ex1_bkptb_trap          ),
  .lsu_rtu_ex1_bkptc_trap           (lsu_rtu_ex1_bkptc_trap          ),
  .lsu_rtu_ex1_bkptd_trap           (lsu_rtu_ex1_bkptd_trap          ),
  .lsu_rtu_ex1_bkpte_trap           (lsu_rtu_ex1_bkpte_trap          ),
  .lsu_rtu_ex1_cmplt                (lsu_rtu_ex1_cmplt               ),
  .lsu_rtu_ex1_cmplt_dp             (lsu_rtu_ex1_cmplt_dp            ),
  .lsu_rtu_ex1_expt_vec             (lsu_rtu_ex1_expt_vec            ),
  .lsu_rtu_ex1_expt_vld             (lsu_rtu_ex1_expt_vld            ),
  .lsu_rtu_ex1_inst_ld              (lsu_rtu_ex1_inst_ld             ),
  .lsu_rtu_ex1_mtval                (lsu_rtu_ex1_mtval               ),
  .lsu_rtu_ex1_stall                (lsu_rtu_ex1_stall               ),
  .lsu_rtu_ex2_data                 (lsu_rtu_ex2_data                ),
  .lsu_rtu_ex2_data_vld             (lsu_rtu_ex2_data_vld            ),
  .lsu_rtu_ex2_data_vld_gate        (lsu_rtu_ex2_data_vld_gate       ),
  .lsu_rtu_ex2_dest_reg             (lsu_rtu_ex2_dest_reg            ),
  .lsu_rtu_ex2_stall                (lsu_rtu_ex2_stall               ),
  .lsu_rtu_ex2_stall_gate           (lsu_rtu_ex2_stall_gate          ),
  .lsu_rtu_pmp_deny                 (lsu_rtu_pmp_deny                ),
  .lsu_sysmap_pa                    (lsu_sysmap_pa                   ),
  .lsu_xx_flush                     (lsu_xx_flush                    ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .lsu_xx_warm_up                   (lsu_xx_warm_up                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .pmp_lsu_acc_deny                 (pmp_lsu_acc_deny                ),
  .rtu_lsu_async_expt_ack           (rtu_lsu_async_expt_ack          ),
  .rtu_lsu_ex1_cancel               (rtu_lsu_ex1_cancel              ),
  .rtu_lsu_ex2_stall                (rtu_lsu_ex2_stall               ),
  .rtu_lsu_expt_ack                 (rtu_lsu_expt_ack                ),
  .rtu_lsu_expt_exit                (rtu_lsu_expt_exit               ),
  .rtu_lsu_wb_fwd_data              (rtu_lsu_wb_fwd_data             ),
  .rtu_lsu_wb_fwd_fls               (rtu_lsu_wb_fwd_fls              ),
  .rtu_lsu_wb_fwd_reg               (rtu_lsu_wb_fwd_reg              ),
  .rtu_lsu_wb_fwd_vld               (rtu_lsu_wb_fwd_vld              ),
  .rtu_yy_xx_async_flush            (rtu_yy_xx_async_flush           ),
  .sysmap_lsu_flg                   (sysmap_lsu_flg                  )
);


// &Force("output", "lsu_xx_no_op"); @52




// &Instance("pa_cp0_top"); @57
pa_cp0_top  x_pa_cp0_top (
  .cp0_had_cpuid_idx0        (cp0_had_cpuid_idx0       ),
  .cp0_had_lpmd_b            (cp0_had_lpmd_b           ),
  .cp0_had_mcause_data       (cp0_had_mcause_data      ),
  .cp0_had_pcfifo_wen        (cp0_had_pcfifo_wen       ),
  .cp0_hpcp_index            (cp0_hpcp_index           ),
  .cp0_hpcp_pmdm             (cp0_hpcp_pmdm            ),
  .cp0_hpcp_pmdu             (cp0_hpcp_pmdu            ),
  .cp0_hpcp_wdata            (cp0_hpcp_wdata           ),
  .cp0_hpcp_wreg             (cp0_hpcp_wreg            ),
  .cp0_idu_mcause            (cp0_idu_mcause           ),
  .cp0_idu_mepc              (cp0_idu_mepc             ),
  .cp0_idu_sp_use_scratch    (cp0_idu_sp_use_scratch   ),
  .cp0_idu_sp_wdata          (cp0_idu_sp_wdata         ),
  .cp0_idu_sp_wen            (cp0_idu_sp_wen           ),
  .cp0_idu_sp_wen_gate       (cp0_idu_sp_wen_gate      ),
  .cp0_idu_spec_push_en      (cp0_idu_spec_push_en     ),
  .cp0_idu_swap_sp_en        (cp0_idu_swap_sp_en       ),
  .cp0_ifu_bht_en            (cp0_ifu_bht_en           ),
  .cp0_ifu_bht_inv           (cp0_ifu_bht_inv          ),
  .cp0_ifu_icache_en         (cp0_ifu_icache_en        ),
  .cp0_ifu_icache_inv_addr   (cp0_ifu_icache_inv_addr  ),
  .cp0_ifu_icache_inv_req    (cp0_ifu_icache_inv_req   ),
  .cp0_ifu_icache_inv_type   (cp0_ifu_icache_inv_type  ),
  .cp0_ifu_in_lpmd           (cp0_ifu_in_lpmd          ),
  .cp0_ifu_lpmd_req          (cp0_ifu_lpmd_req         ),
  .cp0_ifu_mtvec             (cp0_ifu_mtvec            ),
  .cp0_ifu_ras_en            (cp0_ifu_ras_en           ),
  .cp0_ifu_rst_inv_done      (cp0_ifu_rst_inv_done     ),
  .cp0_ifu_srst_mask         (cp0_ifu_srst_mask        ),
  .cp0_ifu_srst_req          (cp0_ifu_srst_req         ),
  .cp0_lsu_dcache_en         (cp0_lsu_dcache_en        ),
  .cp0_lsu_dcache_wa         (cp0_lsu_dcache_wa        ),
  .cp0_lsu_dcache_wb         (cp0_lsu_dcache_wb        ),
  .cp0_lsu_fence_req         (cp0_lsu_fence_req        ),
  .cp0_lsu_icc_addr          (cp0_lsu_icc_addr         ),
  .cp0_lsu_icc_op            (cp0_lsu_icc_op           ),
  .cp0_lsu_icc_req           (cp0_lsu_icc_req          ),
  .cp0_lsu_icc_type          (cp0_lsu_icc_type         ),
  .cp0_lsu_mm                (cp0_lsu_mm               ),
  .cp0_pad_mcause            (cp0_pad_mcause           ),
  .cp0_pad_mintstatus        (cp0_pad_mintstatus       ),
  .cp0_pad_mstatus           (cp0_pad_mstatus          ),
  .cp0_rtu_chgflw_pc         (cp0_rtu_chgflw_pc        ),
  .cp0_rtu_chgflw_vld        (cp0_rtu_chgflw_vld       ),
  .cp0_rtu_ex1_cmplt         (cp0_rtu_ex1_cmplt        ),
  .cp0_rtu_ex1_data          (cp0_rtu_ex1_data         ),
  .cp0_rtu_ex1_expt_vec      (cp0_rtu_ex1_expt_vec     ),
  .cp0_rtu_ex1_expt_vld      (cp0_rtu_ex1_expt_vld     ),
  .cp0_rtu_ex1_flush         (cp0_rtu_ex1_flush        ),
  .cp0_rtu_ex1_inst_bkpt     (cp0_rtu_ex1_inst_bkpt    ),
  .cp0_rtu_ex1_inst_ebreak   (cp0_rtu_ex1_inst_ebreak  ),
  .cp0_rtu_ex1_inst_mret     (cp0_rtu_ex1_inst_mret    ),
  .cp0_rtu_ex1_stall         (cp0_rtu_ex1_stall        ),
  .cp0_rtu_ex1_wb_preg       (cp0_rtu_ex1_wb_preg      ),
  .cp0_rtu_ex1_wb_vld        (cp0_rtu_ex1_wb_vld       ),
  .cp0_rtu_in_expt           (cp0_rtu_in_expt          ),
  .cp0_rtu_in_nmi            (cp0_rtu_in_nmi           ),
  .cp0_rtu_int_id            (cp0_rtu_int_id           ),
  .cp0_rtu_int_level         (cp0_rtu_int_level        ),
  .cp0_rtu_int_mode          (cp0_rtu_int_mode         ),
  .cp0_rtu_mie               (cp0_rtu_mie              ),
  .cp0_rtu_mnxti_vld         (cp0_rtu_mnxti_vld        ),
  .cp0_rtu_mpil              (cp0_rtu_mpil             ),
  .cp0_rtu_pm_bypass         (cp0_rtu_pm_bypass        ),
  .cp0_rtu_wfe_en            (cp0_rtu_wfe_en           ),
  .cp0_sysio_ipend_b         (cp0_sysio_ipend_b        ),
  .cp0_sysio_lpmd_b          (cp0_sysio_lpmd_b         ),
  .cp0_sysio_srst            (cp0_sysio_srst           ),
  .cp0_xx_async_expt_en      (cp0_xx_async_expt_en     ),
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cp0_yy_cskyisaee          (cp0_yy_cskyisaee         ),
  .cp0_yy_mach_mode          (cp0_yy_mach_mode         ),
  .cp0_yy_priv_mode          (cp0_yy_priv_mode         ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_cp0_mcause_data       (had_cp0_mcause_data      ),
  .had_cp0_xx_dbg            (had_cp0_xx_dbg           ),
  .had_yy_xx_dbg             (had_yy_xx_dbg            ),
  .hpcp_cp0_data             (hpcp_cp0_data            ),
  .idu_cp0_ex1_dst_idx       (idu_cp0_ex1_dst_idx      ),
  .idu_cp0_ex1_dst_vld       (idu_cp0_ex1_dst_vld      ),
  .idu_cp0_ex1_expt_type     (idu_cp0_ex1_expt_type    ),
  .idu_cp0_ex1_expt_vld      (idu_cp0_ex1_expt_vld     ),
  .idu_cp0_ex1_func          (idu_cp0_ex1_func         ),
  .idu_cp0_ex1_inst_bkpt     (idu_cp0_ex1_inst_bkpt    ),
  .idu_cp0_ex1_opcode        (idu_cp0_ex1_opcode       ),
  .idu_cp0_ex1_rs1           (idu_cp0_ex1_rs1          ),
  .idu_cp0_ex1_rs2           (idu_cp0_ex1_rs2          ),
  .idu_cp0_ex1_sel           (idu_cp0_ex1_sel          ),
  .idu_cp0_ex1_sub_func      (idu_cp0_ex1_sub_func     ),
  .idu_cp0_ipop_data         (idu_cp0_ipop_data        ),
  .idu_cp0_mcause_wen        (idu_cp0_mcause_wen       ),
  .idu_cp0_mepc_wen          (idu_cp0_mepc_wen         ),
  .idu_cp0_sp_reg            (idu_cp0_sp_reg           ),
  .idu_cp0_sp_swap_pending   (idu_cp0_sp_swap_pending  ),
  .idu_cp0_sp_swap_req       (idu_cp0_sp_swap_req      ),
  .idu_cp0_sp_swap_req_gate  (idu_cp0_sp_swap_req_gate ),
  .idu_yy_xx_tail_ack        (idu_yy_xx_tail_ack       ),
  .ifu_cp0_bht_inv_done      (ifu_cp0_bht_inv_done     ),
  .ifu_cp0_icache_inv_done   (ifu_cp0_icache_inv_done  ),
  .ifu_cp0_lpmd_ack          (ifu_cp0_lpmd_ack         ),
  .ifu_cp0_rst_inv_req       (ifu_cp0_rst_inv_req      ),
  .ifu_cp0_srst_ack          (ifu_cp0_srst_ack         ),
  .ifu_cp0_vec_err           (ifu_cp0_vec_err          ),
  .ifu_cp0_vec_succeed       (ifu_cp0_vec_succeed      ),
  .lsu_cp0_icc_done          (lsu_cp0_icc_done         ),
  .lsu_xx_no_op              (lsu_xx_no_op             ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .rtu_cp0_bus_error         (rtu_cp0_bus_error        ),
  .rtu_cp0_epc               (rtu_cp0_epc              ),
  .rtu_cp0_ex1_dbg_cancel    (rtu_cp0_ex1_dbg_cancel   ),
  .rtu_cp0_expt_mtval        (rtu_cp0_expt_mtval       ),
  .rtu_cp0_int_level         (rtu_cp0_int_level        ),
  .rtu_cp0_int_vld_raw       (rtu_cp0_int_vld_raw      ),
  .rtu_cp0_lockup_clr        (rtu_cp0_lockup_clr       ),
  .rtu_cp0_lockup_vld        (rtu_cp0_lockup_vld       ),
  .rtu_cp0_mie_en            (rtu_cp0_mie_en           ),
  .rtu_cp0_mie_en_gate       (rtu_cp0_mie_en_gate      ),
  .rtu_cp0_mnxti_pending_vld (rtu_cp0_mnxti_pending_vld),
  .rtu_cp0_nmi_vld           (rtu_cp0_nmi_vld          ),
  .rtu_cp0_pending_int_hv    (rtu_cp0_pending_int_hv   ),
  .rtu_cp0_pending_int_id    (rtu_cp0_pending_int_id   ),
  .rtu_cp0_pending_int_level (rtu_cp0_pending_int_level),
  .rtu_cp0_wk_int            (rtu_cp0_wk_int           ),
  .rtu_yy_xx_dbgon           (rtu_yy_xx_dbgon          ),
  .rtu_yy_xx_expt_int        (rtu_yy_xx_expt_int       ),
  .rtu_yy_xx_expt_vec        (rtu_yy_xx_expt_vec       ),
  .rtu_yy_xx_expt_vld        (rtu_yy_xx_expt_vld       ),
  .rtu_yy_xx_expt_vld_gate   (rtu_yy_xx_expt_vld_gate  ),
  .rtu_yy_xx_flush           (rtu_yy_xx_flush          ),
  .rtu_yy_xx_int_hv          (rtu_yy_xx_int_hv         ),
  .rtu_yy_xx_tail_int_vld    (rtu_yy_xx_tail_int_vld   ),
  .sysio_cp0_clk_en          (sysio_cp0_clk_en         ),
  .sysio_cp0_clkratio        (sysio_cp0_clkratio       ),
  .sysio_cp0_rst_addr        (sysio_cp0_rst_addr       ),
  .sysio_cp0_sys_view_lpmd_b (sysio_cp0_sys_view_lpmd_b),
  .tcip_cp0_clic_base        (tcip_cp0_clic_base       )
);

// &Force("output", "cp0_yy_priv_mode"); @58
// &Force("output", "cp0_yy_mach_mode"); @59
// &Force("output", "cp0_yy_clk_en"); @61
// &Force("output", "cp0_yy_clk_en"); @64




// &Instance("pa_rtu_top"); @71
pa_rtu_top  x_pa_rtu_top (
  .clic_cpu_int_hv                  (clic_cpu_int_hv                 ),
  .clic_cpu_int_id                  (clic_cpu_int_id                 ),
  .clic_cpu_int_il                  (clic_cpu_int_il                 ),
  .clic_cpu_int_priv                (clic_cpu_int_priv               ),
  .cp0_rtu_chgflw_pc                (cp0_rtu_chgflw_pc               ),
  .cp0_rtu_chgflw_vld               (cp0_rtu_chgflw_vld              ),
  .cp0_rtu_ex1_cmplt                (cp0_rtu_ex1_cmplt               ),
  .cp0_rtu_ex1_data                 (cp0_rtu_ex1_data                ),
  .cp0_rtu_ex1_expt_vec             (cp0_rtu_ex1_expt_vec            ),
  .cp0_rtu_ex1_expt_vld             (cp0_rtu_ex1_expt_vld            ),
  .cp0_rtu_ex1_flush                (cp0_rtu_ex1_flush               ),
  .cp0_rtu_ex1_inst_bkpt            (cp0_rtu_ex1_inst_bkpt           ),
  .cp0_rtu_ex1_inst_ebreak          (cp0_rtu_ex1_inst_ebreak         ),
  .cp0_rtu_ex1_inst_mret            (cp0_rtu_ex1_inst_mret           ),
  .cp0_rtu_ex1_stall                (cp0_rtu_ex1_stall               ),
  .cp0_rtu_ex1_wb_preg              (cp0_rtu_ex1_wb_preg             ),
  .cp0_rtu_ex1_wb_vld               (cp0_rtu_ex1_wb_vld              ),
  .cp0_rtu_in_expt                  (cp0_rtu_in_expt                 ),
  .cp0_rtu_in_nmi                   (cp0_rtu_in_nmi                  ),
  .cp0_rtu_int_id                   (cp0_rtu_int_id                  ),
  .cp0_rtu_int_level                (cp0_rtu_int_level               ),
  .cp0_rtu_int_mode                 (cp0_rtu_int_mode                ),
  .cp0_rtu_mie                      (cp0_rtu_mie                     ),
  .cp0_rtu_mnxti_vld                (cp0_rtu_mnxti_vld               ),
  .cp0_rtu_mpil                     (cp0_rtu_mpil                    ),
  .cp0_rtu_pm_bypass                (cp0_rtu_pm_bypass               ),
  .cp0_rtu_wfe_en                   (cp0_rtu_wfe_en                  ),
  .cp0_xx_async_expt_en             (cp0_xx_async_expt_en            ),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpu_clic_curid                   (cpu_clic_curid                  ),
  .cpu_clic_int_exit                (cpu_clic_int_exit               ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_rtu_async_dbgreq             (had_rtu_async_dbgreq            ),
  .had_rtu_data_bkpt_dbgreq         (had_rtu_data_bkpt_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq_raw     (had_rtu_data_bkpt_dbgreq_raw    ),
  .had_rtu_ex1_bkpt_potential       (had_rtu_ex1_bkpt_potential      ),
  .had_rtu_ex1_inst_bkpt_dbgreq     (had_rtu_ex1_inst_bkpt_dbgreq    ),
  .had_rtu_ex1_trace_potential      (had_rtu_ex1_trace_potential     ),
  .had_rtu_fdb                      (had_rtu_fdb                     ),
  .had_rtu_hw_dbgreq                (had_rtu_hw_dbgreq               ),
  .had_rtu_inst_bkpt_dbgreq         (had_rtu_inst_bkpt_dbgreq        ),
  .had_rtu_rst_dbgreq               (had_rtu_rst_dbgreq              ),
  .had_rtu_trace_dbgreq             (had_rtu_trace_dbgreq            ),
  .had_rtu_trace_dbgreq_raw         (had_rtu_trace_dbgreq_raw        ),
  .had_rtu_xx_tme                   (had_rtu_xx_tme                  ),
  .had_yy_xx_exit_dbg               (had_yy_xx_exit_dbg              ),
  .idu_rtu_ex1_dst_vld              (idu_rtu_ex1_dst_vld             ),
  .idu_rtu_ex1_inst_vld             (idu_rtu_ex1_inst_vld            ),
  .idu_rtu_ex1_ipop_int_mask        (idu_rtu_ex1_ipop_int_mask       ),
  .idu_rtu_ex1_ipush_mie_en         (idu_rtu_ex1_ipush_mie_en        ),
  .idu_rtu_ex1_ipush_spec_fail      (idu_rtu_ex1_ipush_spec_fail     ),
  .idu_rtu_ex1_lsu_sel              (idu_rtu_ex1_lsu_sel             ),
  .idu_rtu_ex1_tail_int_vld         (idu_rtu_ex1_tail_int_vld        ),
  .idu_rtu_ipush_spec               (idu_rtu_ipush_spec              ),
  .idu_rtu_tail_fail                (idu_rtu_tail_fail               ),
  .idu_xx_ex1_warm_up               (idu_xx_ex1_warm_up              ),
  .idu_yy_xx_tail_ack               (idu_yy_xx_tail_ack              ),
  .ifu_rtu_cpu_in_init              (ifu_rtu_cpu_in_init             ),
  .ifu_rtu_lockup_ack               (ifu_rtu_lockup_ack              ),
  .ifu_xx_warm_up_clk               (ifu_xx_warm_up_clk              ),
  .iu_rtu_div_ex1_stall             (iu_rtu_div_ex1_stall            ),
  .iu_rtu_ex1_alu_cmplt             (iu_rtu_ex1_alu_cmplt            ),
  .iu_rtu_ex1_alu_data              (iu_rtu_ex1_alu_data             ),
  .iu_rtu_ex1_bju_chgflw_vld        (iu_rtu_ex1_bju_chgflw_vld       ),
  .iu_rtu_ex1_bju_cmplt             (iu_rtu_ex1_bju_cmplt            ),
  .iu_rtu_ex1_bju_cmplt_dp          (iu_rtu_ex1_bju_cmplt_dp         ),
  .iu_rtu_ex1_bju_data              (iu_rtu_ex1_bju_data             ),
  .iu_rtu_ex1_bju_stall             (iu_rtu_ex1_bju_stall            ),
  .iu_rtu_ex1_bju_wb_vld            (iu_rtu_ex1_bju_wb_vld           ),
  .iu_rtu_ex1_branch_inst           (iu_rtu_ex1_branch_inst          ),
  .iu_rtu_ex1_cur_pc                (iu_rtu_ex1_cur_pc               ),
  .iu_rtu_ex1_div_cmplt             (iu_rtu_ex1_div_cmplt            ),
  .iu_rtu_ex1_div_data              (iu_rtu_ex1_div_data             ),
  .iu_rtu_ex1_div_wb_vld            (iu_rtu_ex1_div_wb_vld           ),
  .iu_rtu_ex1_lsu_wb_data           (iu_rtu_ex1_lsu_wb_data          ),
  .iu_rtu_ex1_lsu_wb_preg           (iu_rtu_ex1_lsu_wb_preg          ),
  .iu_rtu_ex1_lsu_wb_vld            (iu_rtu_ex1_lsu_wb_vld           ),
  .iu_rtu_ex1_mul_cmplt             (iu_rtu_ex1_mul_cmplt            ),
  .iu_rtu_ex1_next_pc               (iu_rtu_ex1_next_pc              ),
  .iu_rtu_ex1_split_inst            (iu_rtu_ex1_split_inst           ),
  .iu_rtu_ex1_wb_preg               (iu_rtu_ex1_wb_preg              ),
  .iu_rtu_ex1_wb_vld                (iu_rtu_ex1_wb_vld               ),
  .iu_rtu_ex2_chgflw_pc             (iu_rtu_ex2_chgflw_pc            ),
  .iu_rtu_ex2_chgflw_vld            (iu_rtu_ex2_chgflw_vld           ),
  .iu_rtu_ex2_div_data              (iu_rtu_ex2_div_data             ),
  .iu_rtu_ex2_div_preg              (iu_rtu_ex2_div_preg             ),
  .iu_rtu_ex2_div_wb_vld            (iu_rtu_ex2_div_wb_vld           ),
  .iu_rtu_ex2_mul_wb_data           (iu_rtu_ex2_mul_wb_data          ),
  .iu_rtu_ex2_mul_wb_preg           (iu_rtu_ex2_mul_wb_preg          ),
  .iu_xx_no_op                      (iu_xx_no_op                     ),
  .lsu_rtu_async_expt_vld           (lsu_rtu_async_expt_vld          ),
  .lsu_rtu_async_ld_inst            (lsu_rtu_async_ld_inst           ),
  .lsu_rtu_async_mtval              (lsu_rtu_async_mtval             ),
  .lsu_rtu_ex1_bkpta_trap           (lsu_rtu_ex1_bkpta_trap          ),
  .lsu_rtu_ex1_bkptb_trap           (lsu_rtu_ex1_bkptb_trap          ),
  .lsu_rtu_ex1_bkptc_trap           (lsu_rtu_ex1_bkptc_trap          ),
  .lsu_rtu_ex1_bkptd_trap           (lsu_rtu_ex1_bkptd_trap          ),
  .lsu_rtu_ex1_bkpte_trap           (lsu_rtu_ex1_bkpte_trap          ),
  .lsu_rtu_ex1_cmplt                (lsu_rtu_ex1_cmplt               ),
  .lsu_rtu_ex1_cmplt_dp             (lsu_rtu_ex1_cmplt_dp            ),
  .lsu_rtu_ex1_expt_vec             (lsu_rtu_ex1_expt_vec            ),
  .lsu_rtu_ex1_expt_vld             (lsu_rtu_ex1_expt_vld            ),
  .lsu_rtu_ex1_inst_ld              (lsu_rtu_ex1_inst_ld             ),
  .lsu_rtu_ex1_mtval                (lsu_rtu_ex1_mtval               ),
  .lsu_rtu_ex1_stall                (lsu_rtu_ex1_stall               ),
  .lsu_rtu_ex2_data                 (lsu_rtu_ex2_data                ),
  .lsu_rtu_ex2_data_vld             (lsu_rtu_ex2_data_vld            ),
  .lsu_rtu_ex2_data_vld_gate        (lsu_rtu_ex2_data_vld_gate       ),
  .lsu_rtu_ex2_dest_reg             (lsu_rtu_ex2_dest_reg            ),
  .lsu_rtu_ex2_stall                (lsu_rtu_ex2_stall               ),
  .lsu_rtu_ex2_stall_gate           (lsu_rtu_ex2_stall_gate          ),
  .lsu_rtu_pmp_deny                 (lsu_rtu_pmp_deny                ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .rtu_clic_warm_up                 (rtu_clic_warm_up                ),
  .rtu_cp0_bus_error                (rtu_cp0_bus_error               ),
  .rtu_cp0_epc                      (rtu_cp0_epc                     ),
  .rtu_cp0_ex1_dbg_cancel           (rtu_cp0_ex1_dbg_cancel          ),
  .rtu_cp0_expt_mtval               (rtu_cp0_expt_mtval              ),
  .rtu_cp0_int_level                (rtu_cp0_int_level               ),
  .rtu_cp0_int_vld_raw              (rtu_cp0_int_vld_raw             ),
  .rtu_cp0_lockup_clr               (rtu_cp0_lockup_clr              ),
  .rtu_cp0_lockup_vld               (rtu_cp0_lockup_vld              ),
  .rtu_cp0_mie_en                   (rtu_cp0_mie_en                  ),
  .rtu_cp0_mie_en_gate              (rtu_cp0_mie_en_gate             ),
  .rtu_cp0_mnxti_pending_vld        (rtu_cp0_mnxti_pending_vld       ),
  .rtu_cp0_nmi_vld                  (rtu_cp0_nmi_vld                 ),
  .rtu_cp0_pending_int_hv           (rtu_cp0_pending_int_hv          ),
  .rtu_cp0_pending_int_id           (rtu_cp0_pending_int_id          ),
  .rtu_cp0_pending_int_level        (rtu_cp0_pending_int_level       ),
  .rtu_cp0_wk_int                   (rtu_cp0_wk_int                  ),
  .rtu_had_data_bkpta_vld           (rtu_had_data_bkpta_vld          ),
  .rtu_had_data_bkptb_vld           (rtu_had_data_bkptb_vld          ),
  .rtu_had_data_bkptc_vld           (rtu_had_data_bkptc_vld          ),
  .rtu_had_data_bkptd_vld           (rtu_had_data_bkptd_vld          ),
  .rtu_had_data_bkpte_vld           (rtu_had_data_bkpte_vld          ),
  .rtu_had_dbg_disable_for_tee      (rtu_had_dbg_disable_for_tee     ),
  .rtu_had_ex1_data_bkpta_vld       (rtu_had_ex1_data_bkpta_vld      ),
  .rtu_had_ex1_data_bkptb_vld       (rtu_had_ex1_data_bkptb_vld      ),
  .rtu_had_ex1_data_bkptc_vld       (rtu_had_ex1_data_bkptc_vld      ),
  .rtu_had_ex1_data_bkptd_vld       (rtu_had_ex1_data_bkptd_vld      ),
  .rtu_had_ex1_data_bkpte_vld       (rtu_had_ex1_data_bkpte_vld      ),
  .rtu_had_ex1_inst_bkpta_vld       (rtu_had_ex1_inst_bkpta_vld      ),
  .rtu_had_ex1_inst_bkptb_vld       (rtu_had_ex1_inst_bkptb_vld      ),
  .rtu_had_ex1_inst_bkptc_vld       (rtu_had_ex1_inst_bkptc_vld      ),
  .rtu_had_ex1_inst_bkptd_vld       (rtu_had_ex1_inst_bkptd_vld      ),
  .rtu_had_ex1_inst_bkpte_vld       (rtu_had_ex1_inst_bkpte_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpta_vld           (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_bkptb_vld           (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_bkptc_vld           (rtu_had_inst_bkptc_vld          ),
  .rtu_had_inst_bkptd_vld           (rtu_had_inst_bkptd_vld          ),
  .rtu_had_inst_bkpte_vld           (rtu_had_inst_bkpte_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_int_ack                  (rtu_had_int_ack                 ),
  .rtu_had_rst_dbgreq_ack           (rtu_had_rst_dbgreq_ack          ),
  .rtu_had_xx_bkpt_inst             (rtu_had_xx_bkpt_inst            ),
  .rtu_had_xx_chgflow               (rtu_had_xx_chgflow              ),
  .rtu_had_xx_data                  (rtu_had_xx_data                 ),
  .rtu_had_xx_data_vld              (rtu_had_xx_data_vld             ),
  .rtu_had_xx_dbg_ack_pc            (rtu_had_xx_dbg_ack_pc           ),
  .rtu_had_xx_next_pc               (rtu_had_xx_next_pc              ),
  .rtu_had_xx_retire                (rtu_had_xx_retire               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_retire_pc             (rtu_had_xx_retire_pc            ),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_hpcp_retire_inst_vld         (rtu_hpcp_retire_inst_vld        ),
  .rtu_idu_ex1_fwd_data             (rtu_idu_ex1_fwd_data            ),
  .rtu_idu_ex1_fwd_vld              (rtu_idu_ex1_fwd_vld             ),
  .rtu_idu_ex1_stall                (rtu_idu_ex1_stall               ),
  .rtu_idu_ex2_lsu_fwd_data         (rtu_idu_ex2_lsu_fwd_data        ),
  .rtu_idu_ex2_lsu_fwd_preg         (rtu_idu_ex2_lsu_fwd_preg        ),
  .rtu_idu_ex2_lsu_fwd_vld          (rtu_idu_ex2_lsu_fwd_vld         ),
  .rtu_idu_ex2_rbus_fwd_data        (rtu_idu_ex2_rbus_fwd_data       ),
  .rtu_idu_ex2_rbus_fwd_preg        (rtu_idu_ex2_rbus_fwd_preg       ),
  .rtu_idu_ex2_rbus_fwd_vld         (rtu_idu_ex2_rbus_fwd_vld        ),
  .rtu_idu_id_cancel                (rtu_idu_id_cancel               ),
  .rtu_idu_id_stall                 (rtu_idu_id_stall                ),
  .rtu_idu_id_tail_int_vld          (rtu_idu_id_tail_int_vld         ),
  .rtu_idu_int_vld_raw              (rtu_idu_int_vld_raw             ),
  .rtu_idu_late_flush               (rtu_idu_late_flush              ),
  .rtu_idu_wb_lsu_data              (rtu_idu_wb_lsu_data             ),
  .rtu_idu_wb_lsu_preg              (rtu_idu_wb_lsu_preg             ),
  .rtu_idu_wb_lsu_vld               (rtu_idu_wb_lsu_vld              ),
  .rtu_idu_wb_rbus_data             (rtu_idu_wb_rbus_data            ),
  .rtu_idu_wb_rbus_preg             (rtu_idu_wb_rbus_preg            ),
  .rtu_idu_wb_rbus_vld              (rtu_idu_wb_rbus_vld             ),
  .rtu_idu_wb_warm_up               (rtu_idu_wb_warm_up              ),
  .rtu_ifu_chgflow_pc               (rtu_ifu_chgflow_pc              ),
  .rtu_ifu_chgflow_vld              (rtu_ifu_chgflow_vld             ),
  .rtu_ifu_lockup_expt_vld          (rtu_ifu_lockup_expt_vld         ),
  .rtu_ifu_lockup_mask              (rtu_ifu_lockup_mask             ),
  .rtu_ifu_lockup_req               (rtu_ifu_lockup_req              ),
  .rtu_ifu_xx_fe_flush              (rtu_ifu_xx_fe_flush             ),
  .rtu_ifu_xx_fe_flush_gate         (rtu_ifu_xx_fe_flush_gate        ),
  .rtu_iu_ex1_stall                 (rtu_iu_ex1_stall                ),
  .rtu_iu_ex2_cur_pc                (rtu_iu_ex2_cur_pc               ),
  .rtu_iu_ex2_div_wb_en             (rtu_iu_ex2_div_wb_en            ),
  .rtu_iu_ex2_stall                 (rtu_iu_ex2_stall                ),
  .rtu_lsu_async_expt_ack           (rtu_lsu_async_expt_ack          ),
  .rtu_lsu_ex1_cancel               (rtu_lsu_ex1_cancel              ),
  .rtu_lsu_ex2_stall                (rtu_lsu_ex2_stall               ),
  .rtu_lsu_expt_ack                 (rtu_lsu_expt_ack                ),
  .rtu_lsu_expt_exit                (rtu_lsu_expt_exit               ),
  .rtu_lsu_wb_fwd_data              (rtu_lsu_wb_fwd_data             ),
  .rtu_lsu_wb_fwd_fls               (rtu_lsu_wb_fwd_fls              ),
  .rtu_lsu_wb_fwd_reg               (rtu_lsu_wb_fwd_reg              ),
  .rtu_lsu_wb_fwd_vld               (rtu_lsu_wb_fwd_vld              ),
  .rtu_pad_inst_retire              (rtu_pad_inst_retire             ),
  .rtu_pad_inst_split               (rtu_pad_inst_split              ),
  .rtu_pad_retire_pc                (rtu_pad_retire_pc               ),
  .rtu_pad_wb0_data                 (rtu_pad_wb0_data                ),
  .rtu_pad_wb0_preg                 (rtu_pad_wb0_preg                ),
  .rtu_pad_wb0_vld                  (rtu_pad_wb0_vld                 ),
  .rtu_pad_wb1_data                 (rtu_pad_wb1_data                ),
  .rtu_pad_wb1_preg                 (rtu_pad_wb1_preg                ),
  .rtu_pad_wb1_vld                  (rtu_pad_wb1_vld                 ),
  .rtu_sysio_lockup_on              (rtu_sysio_lockup_on             ),
  .rtu_xx_ex1_cancel                (rtu_xx_ex1_cancel               ),
  .rtu_xx_ex2_cancel                (rtu_xx_ex2_cancel               ),
  .rtu_xx_no_op                     (rtu_xx_no_op                    ),
  .rtu_yy_xx_async_flush            (rtu_yy_xx_async_flush           ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_expt_int               (rtu_yy_xx_expt_int              ),
  .rtu_yy_xx_expt_vec               (rtu_yy_xx_expt_vec              ),
  .rtu_yy_xx_expt_vld               (rtu_yy_xx_expt_vld              ),
  .rtu_yy_xx_expt_vld_gate          (rtu_yy_xx_expt_vld_gate         ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .rtu_yy_xx_int_hv                 (rtu_yy_xx_int_hv                ),
  .rtu_yy_xx_retire                 (rtu_yy_xx_retire                ),
  .rtu_yy_xx_tail_int_vld           (rtu_yy_xx_tail_int_vld          ),
  .sysio_rtu_nmi_int                (sysio_rtu_nmi_int               ),
  .sysio_rtu_wk_event               (sysio_rtu_wk_event              )
);


// &Force("output", "rtu_yy_xx_dbgon"); @73
// &Force("output", "rtu_yy_xx_flush"); @74
// &Force("output", "rtu_yy_xx_async_flush"); @75
// &Force("output", "rtu_yy_xx_retire"); @76
// &Force("output", "rtu_xx_no_op"); @77

// &Instance("pa_fpu_top"); @80
// &Connect(.forever_cpuclk      (fpu_gated_cpuclk)); @81
// &Instance("gated_clk_cell", "x_cp0_fpu_cpuclk"); @86
// &Connect(.clk_in      (forever_cpuclk), @87
//          .external_en (1'b0), @88
//          .global_en   (cp0_yy_clk_en), @89
//          .module_en   (1'b0), @90
//          .local_en    (fpu_gated_cpuclk_en), @91
//          .clk_out     (fpu_gated_cpuclk)); @92

// &ModuleEnd; @95
endmodule

























// &Depend("cpu_cfig.h"); @24
// &ModuleBeg; @25
module pa_core_top(
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hlock,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  bmu_had_acc_err,
  bmu_had_grant,
  bmu_had_rdata,
  bmu_had_trans_cmplt,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_req_dp,
  bmu_tcipif_dbus_size,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_had_acc_deny,
  bmu_tcipif_had_addr,
  bmu_tcipif_had_req,
  bmu_tcipif_had_req_dp,
  bmu_tcipif_had_size,
  bmu_tcipif_had_supv_mode,
  bmu_tcipif_had_wdata,
  bmu_tcipif_had_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_req_dp,
  bmu_tcipif_ibus_size,
  bmu_tcipif_ibus_supv_mode,
  bmu_tcipif_ibus_wdata,
  bmu_tcipif_ibus_write,
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  clk_en,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_mcause_data,
  cp0_had_pcfifo_wen,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cp0_yy_mach_mode,
  cp0_yy_priv_mode,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpu_pad_dfs_ack,
  cpu_pad_lockup,
  cpu_pad_soft_rst,
  cpurst_b,
  dahbl_pad_haddr,
  dahbl_pad_hburst,
  dahbl_pad_hlock,
  dahbl_pad_hprot,
  dahbl_pad_hsize,
  dahbl_pad_htrans,
  dahbl_pad_hwdata,
  dahbl_pad_hwrite,
  forever_cpuclk,
  had_bmu_addr,
  had_bmu_burst,
  had_bmu_prot,
  had_bmu_req,
  had_bmu_seq,
  had_bmu_size,
  had_bmu_wdata,
  had_bmu_write,
  had_core_exit_dbg,
  had_cp0_mcause_data,
  had_cp0_xx_dbg,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_ifu_pc,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_ex1_trace_potential,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_rtu_xx_tme,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  had_yy_xx_dbg,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hlock,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  idu_had_id_chgflw_inst,
  idu_had_id_inst_bkpt,
  idu_had_no_op,
  iu_xx_no_op,
  lsu_pad_sc_pass,
  lsu_xx_no_op,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_cpu_dfs_req,
  pad_cpu_ext_int_b,
  pad_cpu_nmi,
  pad_cpu_rst_addr,
  pad_cpu_sys_cnt,
  pad_cpu_wakeup_event,
  pad_dahbl_hrdata,
  pad_dahbl_hready,
  pad_dahbl_hresp,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_sysio_dbgrq_b,
  pad_yy_gate_clk_en_b,
  rtu_clic_warm_up,
  rtu_had_data_bkpta_vld,
  rtu_had_data_bkptb_vld,
  rtu_had_data_bkptc_vld,
  rtu_had_data_bkptd_vld,
  rtu_had_data_bkpte_vld,
  rtu_had_dbg_disable_for_tee,
  rtu_had_ex1_data_bkpta_vld,
  rtu_had_ex1_data_bkptb_vld,
  rtu_had_ex1_data_bkptc_vld,
  rtu_had_ex1_data_bkptd_vld,
  rtu_had_ex1_data_bkpte_vld,
  rtu_had_ex1_inst_bkpta_vld,
  rtu_had_ex1_inst_bkptb_vld,
  rtu_had_ex1_inst_bkptc_vld,
  rtu_had_ex1_inst_bkptd_vld,
  rtu_had_ex1_inst_bkpte_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_had_inst_bkpta_vld,
  rtu_had_inst_bkptb_vld,
  rtu_had_inst_bkptc_vld,
  rtu_had_inst_bkptd_vld,
  rtu_had_inst_bkpte_vld,
  rtu_had_inst_ld,
  rtu_had_int_ack,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_next_pc,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_retire_pc,
  rtu_had_xx_split,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  rtu_xx_no_op,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  rtu_yy_xx_retire,
  sysio_clint_me_int,
  sysio_clint_mtime,
  sysio_had_sdb_req_b,
  sysio_pad_lpmd_b,
  tcip_cp0_clic_base,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_had_acc_err,
  tcipif_bmu_had_data,
  tcipif_bmu_had_grnt,
  tcipif_bmu_had_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);

// &Ports; @26
input           clic_cpu_int_hv;
input   [11:0]  clic_cpu_int_id;
input   [7 :0]  clic_cpu_int_il;
input   [1 :0]  clic_cpu_int_priv;
input           clk_en;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_bmu_addr;
input   [2 :0]  had_bmu_burst;
input   [3 :0]  had_bmu_prot;
input           had_bmu_req;
input           had_bmu_seq;
input   [1 :0]  had_bmu_size;
input   [31:0]  had_bmu_wdata;
input           had_bmu_write;
input           had_core_exit_dbg;
input   [31:0]  had_cp0_mcause_data;
input           had_cp0_xx_dbg;
input   [8 :0]  had_idu_id_inst_bkpt;
input           had_idu_id_inst_bkpt_brir;
input           had_idu_id_inst_bkpt_hit;
input   [31:0]  had_idu_wbbr_data;
input           had_idu_wbbr_vld;
input   [31:0]  had_ifu_ir;
input           had_ifu_ir_vld;
input   [31:0]  had_ifu_pc;
input           had_rtu_async_dbgreq;
input           had_rtu_data_bkpt_dbgreq;
input           had_rtu_data_bkpt_dbgreq_raw;
input           had_rtu_ex1_bkpt_potential;
input           had_rtu_ex1_inst_bkpt_dbgreq;
input           had_rtu_ex1_trace_potential;
input           had_rtu_fdb;
input           had_rtu_hw_dbgreq;
input           had_rtu_inst_bkpt_dbgreq;
input           had_rtu_rst_dbgreq;
input           had_rtu_trace_dbgreq;
input           had_rtu_trace_dbgreq_raw;
input           had_rtu_xx_tme;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input           had_yy_xx_dbg;
input   [31:0]  pad_biu_hrdata;
input           pad_biu_hready;
input           pad_biu_hresp;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input           pad_cpu_dfs_req;
input           pad_cpu_ext_int_b;
input           pad_cpu_nmi;
input   [31:0]  pad_cpu_rst_addr;
input   [63:0]  pad_cpu_sys_cnt;
input           pad_cpu_wakeup_event;
input   [31:0]  pad_dahbl_hrdata;
input           pad_dahbl_hready;
input           pad_dahbl_hresp;
input   [31:0]  pad_iahbl_hrdata;
input           pad_iahbl_hready;
input           pad_iahbl_hresp;
input           pad_sysio_dbgrq_b;
input           pad_yy_gate_clk_en_b;
input   [31:0]  tcip_cp0_clic_base;
input           tcipif_bmu_dbus_acc_err;
input   [31:0]  tcipif_bmu_dbus_data;
input           tcipif_bmu_dbus_grnt;
input           tcipif_bmu_dbus_trans_cmplt;
input           tcipif_bmu_had_acc_err;
input   [31:0]  tcipif_bmu_had_data;
input           tcipif_bmu_had_grnt;
input           tcipif_bmu_had_trans_cmplt;
input           tcipif_bmu_ibus_acc_err;
input   [31:0]  tcipif_bmu_ibus_data;
input           tcipif_bmu_ibus_grnt;
input           tcipif_bmu_ibus_trans_cmplt;
output  [31:0]  biu_pad_haddr;
output  [2 :0]  biu_pad_hburst;
output          biu_pad_hlock;
output  [3 :0]  biu_pad_hprot;
output  [2 :0]  biu_pad_hsize;
output  [1 :0]  biu_pad_htrans;
output  [31:0]  biu_pad_hwdata;
output          biu_pad_hwrite;
output          bmu_had_acc_err;
output          bmu_had_grant;
output  [31:0]  bmu_had_rdata;
output          bmu_had_trans_cmplt;
output          bmu_tcipif_dbus_acc_deny;
output  [31:0]  bmu_tcipif_dbus_addr;
output          bmu_tcipif_dbus_req;
output          bmu_tcipif_dbus_req_dp;
output  [1 :0]  bmu_tcipif_dbus_size;
output          bmu_tcipif_dbus_supv_mode;
output  [31:0]  bmu_tcipif_dbus_wdata;
output          bmu_tcipif_dbus_write;
output          bmu_tcipif_had_acc_deny;
output  [31:0]  bmu_tcipif_had_addr;
output          bmu_tcipif_had_req;
output          bmu_tcipif_had_req_dp;
output  [1 :0]  bmu_tcipif_had_size;
output          bmu_tcipif_had_supv_mode;
output  [31:0]  bmu_tcipif_had_wdata;
output          bmu_tcipif_had_write;
output          bmu_tcipif_ibus_acc_deny;
output  [31:0]  bmu_tcipif_ibus_addr;
output          bmu_tcipif_ibus_req;
output          bmu_tcipif_ibus_req_dp;
output  [1 :0]  bmu_tcipif_ibus_size;
output          bmu_tcipif_ibus_supv_mode;
output  [31:0]  bmu_tcipif_ibus_wdata;
output          bmu_tcipif_ibus_write;
output  [31:0]  cp0_had_cpuid_idx0;
output  [1 :0]  cp0_had_lpmd_b;
output  [31:0]  cp0_had_mcause_data;
output          cp0_had_pcfifo_wen;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output          cp0_yy_mach_mode;
output  [1 :0]  cp0_yy_priv_mode;
output  [11:0]  cpu_clic_curid;
output          cpu_clic_int_exit;
output          cpu_pad_dfs_ack;
output          cpu_pad_lockup;
output  [1 :0]  cpu_pad_soft_rst;
output  [31:0]  dahbl_pad_haddr;
output  [2 :0]  dahbl_pad_hburst;
output          dahbl_pad_hlock;
output  [3 :0]  dahbl_pad_hprot;
output  [2 :0]  dahbl_pad_hsize;
output  [1 :0]  dahbl_pad_htrans;
output  [31:0]  dahbl_pad_hwdata;
output          dahbl_pad_hwrite;
output  [31:0]  iahbl_pad_haddr;
output  [2 :0]  iahbl_pad_hburst;
output          iahbl_pad_hlock;
output  [3 :0]  iahbl_pad_hprot;
output  [2 :0]  iahbl_pad_hsize;
output  [1 :0]  iahbl_pad_htrans;
output  [31:0]  iahbl_pad_hwdata;
output          iahbl_pad_hwrite;
output          idu_had_id_chgflw_inst;
output  [8 :0]  idu_had_id_inst_bkpt;
output          idu_had_no_op;
output          iu_xx_no_op;
output          lsu_pad_sc_pass;
output          lsu_xx_no_op;
output          rtu_clic_warm_up;
output          rtu_had_data_bkpta_vld;
output          rtu_had_data_bkptb_vld;
output          rtu_had_data_bkptc_vld;
output          rtu_had_data_bkptd_vld;
output          rtu_had_data_bkpte_vld;
output          rtu_had_dbg_disable_for_tee;
output          rtu_had_ex1_data_bkpta_vld;
output          rtu_had_ex1_data_bkptb_vld;
output          rtu_had_ex1_data_bkptc_vld;
output          rtu_had_ex1_data_bkptd_vld;
output          rtu_had_ex1_data_bkpte_vld;
output          rtu_had_ex1_inst_bkpta_vld;
output          rtu_had_ex1_inst_bkptb_vld;
output          rtu_had_ex1_inst_bkptc_vld;
output          rtu_had_ex1_inst_bkptd_vld;
output          rtu_had_ex1_inst_bkpte_vld;
output          rtu_had_ex1_inst_ld;
output          rtu_had_ex1_spec_fail;
output          rtu_had_ex1_split;
output          rtu_had_inst_bkpta_vld;
output          rtu_had_inst_bkptb_vld;
output          rtu_had_inst_bkptc_vld;
output          rtu_had_inst_bkptd_vld;
output          rtu_had_inst_bkpte_vld;
output          rtu_had_inst_ld;
output          rtu_had_int_ack;
output          rtu_had_rst_dbgreq_ack;
output          rtu_had_xx_bkpt_inst;
output          rtu_had_xx_chgflow;
output  [31:0]  rtu_had_xx_data;
output          rtu_had_xx_data_vld;
output          rtu_had_xx_dbg_ack_pc;
output  [31:0]  rtu_had_xx_next_pc;
output          rtu_had_xx_retire;
output          rtu_had_xx_retire_normal;
output          rtu_had_xx_retire_normal_for_dbg;
output  [31:0]  rtu_had_xx_retire_pc;
output          rtu_had_xx_split;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output          rtu_xx_no_op;
output          rtu_yy_xx_dbgon;
output          rtu_yy_xx_flush;
output          rtu_yy_xx_retire;
output          sysio_clint_me_int;
output  [63:0]  sysio_clint_mtime;
output          sysio_had_sdb_req_b;
output  [1 :0]  sysio_pad_lpmd_b;

// &Regs; @27

// &Wires; @28
wire    [31:0]  biu_pad_haddr;
wire    [2 :0]  biu_pad_hburst;
wire            biu_pad_hlock;
wire    [3 :0]  biu_pad_hprot;
wire    [2 :0]  biu_pad_hsize;
wire    [1 :0]  biu_pad_htrans;
wire    [31:0]  biu_pad_hwdata;
wire            biu_pad_hwrite;
wire            biu_sysio_idle;
wire            bmu_dahbl_dbus_acc_deny;
wire    [31:0]  bmu_dahbl_dbus_addr;
wire    [2 :0]  bmu_dahbl_dbus_burst;
wire            bmu_dahbl_dbus_lock;
wire            bmu_dahbl_dbus_lrsc;
wire    [3 :0]  bmu_dahbl_dbus_prot;
wire            bmu_dahbl_dbus_req;
wire            bmu_dahbl_dbus_req_dp;
wire            bmu_dahbl_dbus_seq;
wire    [1 :0]  bmu_dahbl_dbus_size;
wire    [31:0]  bmu_dahbl_dbus_wdata;
wire            bmu_dahbl_dbus_write;
wire            bmu_dahbl_had_acc_deny;
wire    [31:0]  bmu_dahbl_had_addr;
wire    [2 :0]  bmu_dahbl_had_burst;
wire    [3 :0]  bmu_dahbl_had_prot;
wire            bmu_dahbl_had_req;
wire            bmu_dahbl_had_req_dp;
wire            bmu_dahbl_had_seq;
wire    [1 :0]  bmu_dahbl_had_size;
wire    [31:0]  bmu_dahbl_had_wdata;
wire            bmu_dahbl_had_write;
wire            bmu_dahbl_ibus_acc_deny;
wire    [31:0]  bmu_dahbl_ibus_addr;
wire    [2 :0]  bmu_dahbl_ibus_burst;
wire    [3 :0]  bmu_dahbl_ibus_prot;
wire            bmu_dahbl_ibus_req;
wire            bmu_dahbl_ibus_req_dp;
wire            bmu_dahbl_ibus_seq;
wire    [1 :0]  bmu_dahbl_ibus_size;
wire            bmu_had_acc_err;
wire            bmu_had_grant;
wire    [31:0]  bmu_had_rdata;
wire            bmu_had_trans_cmplt;
wire            bmu_iahbl_dbus_acc_deny;
wire    [31:0]  bmu_iahbl_dbus_addr;
wire    [2 :0]  bmu_iahbl_dbus_burst;
wire            bmu_iahbl_dbus_lock;
wire            bmu_iahbl_dbus_lrsc;
wire    [3 :0]  bmu_iahbl_dbus_prot;
wire            bmu_iahbl_dbus_req;
wire            bmu_iahbl_dbus_req_dp;
wire            bmu_iahbl_dbus_seq;
wire    [1 :0]  bmu_iahbl_dbus_size;
wire    [31:0]  bmu_iahbl_dbus_wdata;
wire            bmu_iahbl_dbus_write;
wire            bmu_iahbl_had_acc_deny;
wire    [31:0]  bmu_iahbl_had_addr;
wire    [2 :0]  bmu_iahbl_had_burst;
wire    [3 :0]  bmu_iahbl_had_prot;
wire            bmu_iahbl_had_req;
wire            bmu_iahbl_had_req_dp;
wire            bmu_iahbl_had_seq;
wire    [1 :0]  bmu_iahbl_had_size;
wire    [31:0]  bmu_iahbl_had_wdata;
wire            bmu_iahbl_had_write;
wire            bmu_iahbl_ibus_acc_deny;
wire    [31:0]  bmu_iahbl_ibus_addr;
wire    [2 :0]  bmu_iahbl_ibus_burst;
wire    [3 :0]  bmu_iahbl_ibus_prot;
wire            bmu_iahbl_ibus_req;
wire            bmu_iahbl_ibus_req_dp;
wire            bmu_iahbl_ibus_seq;
wire    [1 :0]  bmu_iahbl_ibus_size;
wire            bmu_ifu_acc_err;
wire            bmu_ifu_grant;
wire    [31:0]  bmu_ifu_rdata;
wire            bmu_ifu_trans_cmplt;
wire            bmu_lsu_acc_err;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire            bmu_sahbl_dbus_acc_deny;
wire    [31:0]  bmu_sahbl_dbus_addr;
wire    [2 :0]  bmu_sahbl_dbus_burst;
wire            bmu_sahbl_dbus_lock;
wire            bmu_sahbl_dbus_lrsc;
wire    [3 :0]  bmu_sahbl_dbus_prot;
wire            bmu_sahbl_dbus_req;
wire            bmu_sahbl_dbus_req_dp;
wire            bmu_sahbl_dbus_seq;
wire    [1 :0]  bmu_sahbl_dbus_size;
wire    [31:0]  bmu_sahbl_dbus_wdata;
wire            bmu_sahbl_dbus_write;
wire            bmu_sahbl_had_acc_deny;
wire    [31:0]  bmu_sahbl_had_addr;
wire    [2 :0]  bmu_sahbl_had_burst;
wire    [3 :0]  bmu_sahbl_had_prot;
wire            bmu_sahbl_had_req;
wire            bmu_sahbl_had_req_dp;
wire            bmu_sahbl_had_seq;
wire    [1 :0]  bmu_sahbl_had_size;
wire    [31:0]  bmu_sahbl_had_wdata;
wire            bmu_sahbl_had_write;
wire            bmu_sahbl_ibus_acc_deny;
wire    [31:0]  bmu_sahbl_ibus_addr;
wire    [2 :0]  bmu_sahbl_ibus_burst;
wire    [3 :0]  bmu_sahbl_ibus_prot;
wire            bmu_sahbl_ibus_req;
wire            bmu_sahbl_ibus_req_dp;
wire            bmu_sahbl_ibus_seq;
wire    [1 :0]  bmu_sahbl_ibus_size;
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire            bmu_tcipif_had_acc_deny;
wire    [31:0]  bmu_tcipif_had_addr;
wire            bmu_tcipif_had_req;
wire            bmu_tcipif_had_req_dp;
wire    [1 :0]  bmu_tcipif_had_size;
wire            bmu_tcipif_had_supv_mode;
wire    [31:0]  bmu_tcipif_had_wdata;
wire            bmu_tcipif_had_write;
wire            bmu_tcipif_ibus_acc_deny;
wire    [31:0]  bmu_tcipif_ibus_addr;
wire            bmu_tcipif_ibus_req;
wire            bmu_tcipif_ibus_req_dp;
wire    [1 :0]  bmu_tcipif_ibus_size;
wire            bmu_tcipif_ibus_supv_mode;
wire    [31:0]  bmu_tcipif_ibus_wdata;
wire            bmu_tcipif_ibus_write;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire            clk_en;
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cp0_had_pcfifo_wen;
wire    [11:0]  cp0_hpcp_index;
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_hpcp_wdata;
wire            cp0_hpcp_wreg;
wire    [31:0]  cp0_pad_mcause;
wire    [31:0]  cp0_pad_mintstatus;
wire    [31:0]  cp0_pad_mstatus;
wire            cp0_sysio_ipend_b;
wire    [1 :0]  cp0_sysio_lpmd_b;
wire    [1 :0]  cp0_sysio_srst;
wire            cp0_yy_mach_mode;
wire    [1 :0]  cp0_yy_priv_mode;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpu_pad_dfs_ack;
wire            cpu_pad_lockup;
wire    [1 :0]  cpu_pad_soft_rst;
wire            cpurst_b;
wire            dahbl_bmu_dbus_acc_err;
wire    [31:0]  dahbl_bmu_dbus_data;
wire            dahbl_bmu_dbus_grnt;
wire            dahbl_bmu_dbus_trans_cmplt;
wire            dahbl_bmu_had_acc_err;
wire    [31:0]  dahbl_bmu_had_data;
wire            dahbl_bmu_had_grnt;
wire            dahbl_bmu_had_trans_cmplt;
wire            dahbl_bmu_ibus_acc_err;
wire    [31:0]  dahbl_bmu_ibus_data;
wire            dahbl_bmu_ibus_grnt;
wire            dahbl_bmu_ibus_trans_cmplt;
wire    [31:0]  dahbl_pad_haddr;
wire    [2 :0]  dahbl_pad_hburst;
wire            dahbl_pad_hlock;
wire    [3 :0]  dahbl_pad_hprot;
wire    [2 :0]  dahbl_pad_hsize;
wire    [1 :0]  dahbl_pad_htrans;
wire    [31:0]  dahbl_pad_hwdata;
wire            dahbl_pad_hwrite;
wire            dahbl_sysio_idle;
wire            forever_cpuclk;
wire    [31:0]  had_bmu_addr;
wire    [2 :0]  had_bmu_burst;
wire    [3 :0]  had_bmu_prot;
wire            had_bmu_req;
wire            had_bmu_seq;
wire    [1 :0]  had_bmu_size;
wire    [31:0]  had_bmu_wdata;
wire            had_bmu_write;
wire            had_core_exit_dbg;
wire    [31:0]  had_cp0_mcause_data;
wire            had_cp0_xx_dbg;
wire    [8 :0]  had_idu_id_inst_bkpt;
wire            had_idu_id_inst_bkpt_brir;
wire            had_idu_id_inst_bkpt_hit;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire    [31:0]  had_ifu_pc;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_ex1_trace_potential;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_rtu_xx_tme;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire            had_yy_xx_dbg;
wire    [31:0]  hpcp_cp0_data;
wire            iahbl_bmu_dbus_acc_err;
wire    [31:0]  iahbl_bmu_dbus_data;
wire            iahbl_bmu_dbus_grnt;
wire            iahbl_bmu_dbus_trans_cmplt;
wire            iahbl_bmu_had_acc_err;
wire    [31:0]  iahbl_bmu_had_data;
wire            iahbl_bmu_had_grnt;
wire            iahbl_bmu_had_trans_cmplt;
wire            iahbl_bmu_ibus_acc_err;
wire    [31:0]  iahbl_bmu_ibus_data;
wire            iahbl_bmu_ibus_grnt;
wire            iahbl_bmu_ibus_trans_cmplt;
wire    [31:0]  iahbl_pad_haddr;
wire    [2 :0]  iahbl_pad_hburst;
wire            iahbl_pad_hlock;
wire    [3 :0]  iahbl_pad_hprot;
wire    [2 :0]  iahbl_pad_hsize;
wire    [1 :0]  iahbl_pad_htrans;
wire    [31:0]  iahbl_pad_hwdata;
wire            iahbl_pad_hwrite;
wire            iahbl_sysio_idle;
wire            idu_had_id_chgflw_inst;
wire    [8 :0]  idu_had_id_inst_bkpt;
wire            idu_had_no_op;
wire            ifu_bmu_acc_deny;
wire    [31:0]  ifu_bmu_addr;
wire    [2 :0]  ifu_bmu_burst;
wire            ifu_bmu_data_req;
wire    [3 :0]  ifu_bmu_prot;
wire            ifu_bmu_req;
wire            ifu_bmu_seq;
wire    [1 :0]  ifu_bmu_size;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire    [31:0]  ifu_pmp_addr;
wire            ifu_pmp_machine_mode;
wire    [31:0]  ifu_sysmap_pa;
wire            iu_hpcp_inst_bht_mispred;
wire            iu_hpcp_inst_condbr;
wire            iu_hpcp_inst_condbr_gate;
wire            iu_xx_no_op;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire            lsu_hpcp_cache_read_access;
wire            lsu_hpcp_cache_read_access_gate;
wire            lsu_hpcp_cache_read_miss;
wire            lsu_hpcp_cache_read_miss_gate;
wire            lsu_hpcp_cache_write_access;
wire            lsu_hpcp_cache_write_access_gate;
wire            lsu_hpcp_cache_write_miss;
wire            lsu_hpcp_cache_write_miss_gate;
wire            lsu_hpcp_inst_store;
wire            lsu_hpcp_inst_store_gate;
wire            lsu_pad_sc_pass;
wire    [31:0]  lsu_pmp_addr;
wire            lsu_pmp_write;
wire    [31:0]  lsu_sysmap_pa;
wire            lsu_xx_flush;
wire            lsu_xx_no_op;
wire            lsu_xx_warm_up;
wire    [31:0]  pad_biu_hrdata;
wire            pad_biu_hready;
wire            pad_biu_hresp;
wire    [11:0]  pad_bmu_dahbl_base;
wire    [11:0]  pad_bmu_dahbl_mask;
wire    [11:0]  pad_bmu_iahbl_base;
wire    [11:0]  pad_bmu_iahbl_mask;
wire            pad_cpu_dfs_req;
wire            pad_cpu_ext_int_b;
wire            pad_cpu_nmi;
wire    [31:0]  pad_cpu_rst_addr;
wire    [63:0]  pad_cpu_sys_cnt;
wire            pad_cpu_wakeup_event;
wire    [31:0]  pad_dahbl_hrdata;
wire            pad_dahbl_hready;
wire            pad_dahbl_hresp;
wire    [31:0]  pad_iahbl_hrdata;
wire            pad_iahbl_hready;
wire            pad_iahbl_hresp;
wire            pad_sysio_dbgrq_b;
wire            pad_yy_gate_clk_en_b;
wire            pmp_ifu_acc_deny;
wire            pmp_lsu_acc_deny;
wire            rtu_clic_warm_up;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_had_xx_split;
wire            rtu_hpcp_retire_inst_vld;
wire            rtu_pad_inst_retire;
wire            rtu_pad_inst_split;
wire    [31:0]  rtu_pad_retire_pc;
wire    [31:0]  rtu_pad_wb0_data;
wire    [5 :0]  rtu_pad_wb0_preg;
wire            rtu_pad_wb0_vld;
wire    [31:0]  rtu_pad_wb1_data;
wire    [5 :0]  rtu_pad_wb1_preg;
wire            rtu_pad_wb1_vld;
wire            rtu_sysio_lockup_on;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_async_flush;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_retire;
wire            sahbl_bmu_dbus_acc_err;
wire    [31:0]  sahbl_bmu_dbus_data;
wire            sahbl_bmu_dbus_grnt;
wire            sahbl_bmu_dbus_trans_cmplt;
wire            sahbl_bmu_had_acc_err;
wire    [31:0]  sahbl_bmu_had_data;
wire            sahbl_bmu_had_grnt;
wire            sahbl_bmu_had_trans_cmplt;
wire            sahbl_bmu_ibus_acc_err;
wire    [31:0]  sahbl_bmu_ibus_data;
wire            sahbl_bmu_ibus_grnt;
wire            sahbl_bmu_ibus_trans_cmplt;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;
wire            sysio_cp0_clk_en;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;
wire            sysio_had_sdb_req_b;
wire    [63:0]  sysio_hpcp_time;
wire    [31:0]  sysio_ifu_rst_addr;
wire            sysio_ifu_rst_addr_done;
wire    [31:0]  sysio_iu_rst_addr;
wire    [1 :0]  sysio_pad_lpmd_b;
wire            sysio_rtu_nmi_int;
wire            sysio_rtu_wk_event;
wire            sysio_xx_halt_req;
wire    [4 :0]  sysmap_ifu_flg;
wire    [4 :0]  sysmap_lsu_flg;
wire    [31:0]  tcip_cp0_clic_base;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_bmu_had_acc_err;
wire    [31:0]  tcipif_bmu_had_data;
wire            tcipif_bmu_had_grnt;
wire            tcipif_bmu_had_trans_cmplt;
wire            tcipif_bmu_ibus_acc_err;
wire    [31:0]  tcipif_bmu_ibus_data;
wire            tcipif_bmu_ibus_grnt;
wire            tcipif_bmu_ibus_trans_cmplt;






// &Instance("pa_core"); @34
pa_core  x_pa_core (
  .bmu_ifu_acc_err                  (bmu_ifu_acc_err                 ),
  .bmu_ifu_grant                    (bmu_ifu_grant                   ),
  .bmu_ifu_rdata                    (bmu_ifu_rdata                   ),
  .bmu_ifu_trans_cmplt              (bmu_ifu_trans_cmplt             ),
  .bmu_lsu_acc_err                  (bmu_lsu_acc_err                 ),
  .bmu_lsu_grant                    (bmu_lsu_grant                   ),
  .bmu_lsu_rdata                    (bmu_lsu_rdata                   ),
  .bmu_lsu_trans_cmplt              (bmu_lsu_trans_cmplt             ),
  .clic_cpu_int_hv                  (clic_cpu_int_hv                 ),
  .clic_cpu_int_id                  (clic_cpu_int_id                 ),
  .clic_cpu_int_il                  (clic_cpu_int_il                 ),
  .clic_cpu_int_priv                (clic_cpu_int_priv               ),
  .cp0_had_cpuid_idx0               (cp0_had_cpuid_idx0              ),
  .cp0_had_lpmd_b                   (cp0_had_lpmd_b                  ),
  .cp0_had_mcause_data              (cp0_had_mcause_data             ),
  .cp0_had_pcfifo_wen               (cp0_had_pcfifo_wen              ),
  .cp0_hpcp_index                   (cp0_hpcp_index                  ),
  .cp0_hpcp_pmdm                    (cp0_hpcp_pmdm                   ),
  .cp0_hpcp_pmdu                    (cp0_hpcp_pmdu                   ),
  .cp0_hpcp_wdata                   (cp0_hpcp_wdata                  ),
  .cp0_hpcp_wreg                    (cp0_hpcp_wreg                   ),
  .cp0_pad_mcause                   (cp0_pad_mcause                  ),
  .cp0_pad_mintstatus               (cp0_pad_mintstatus              ),
  .cp0_pad_mstatus                  (cp0_pad_mstatus                 ),
  .cp0_sysio_ipend_b                (cp0_sysio_ipend_b               ),
  .cp0_sysio_lpmd_b                 (cp0_sysio_lpmd_b                ),
  .cp0_sysio_srst                   (cp0_sysio_srst                  ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .cp0_yy_priv_mode                 (cp0_yy_priv_mode                ),
  .cpu_clic_curid                   (cpu_clic_curid                  ),
  .cpu_clic_int_exit                (cpu_clic_int_exit               ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_cp0_mcause_data              (had_cp0_mcause_data             ),
  .had_cp0_xx_dbg                   (had_cp0_xx_dbg                  ),
  .had_idu_id_inst_bkpt             (had_idu_id_inst_bkpt            ),
  .had_idu_id_inst_bkpt_brir        (had_idu_id_inst_bkpt_brir       ),
  .had_idu_id_inst_bkpt_hit         (had_idu_id_inst_bkpt_hit        ),
  .had_idu_wbbr_data                (had_idu_wbbr_data               ),
  .had_idu_wbbr_vld                 (had_idu_wbbr_vld                ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .had_ifu_ir_vld                   (had_ifu_ir_vld                  ),
  .had_ifu_pc                       (had_ifu_pc                      ),
  .had_rtu_async_dbgreq             (had_rtu_async_dbgreq            ),
  .had_rtu_data_bkpt_dbgreq         (had_rtu_data_bkpt_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq_raw     (had_rtu_data_bkpt_dbgreq_raw    ),
  .had_rtu_ex1_bkpt_potential       (had_rtu_ex1_bkpt_potential      ),
  .had_rtu_ex1_inst_bkpt_dbgreq     (had_rtu_ex1_inst_bkpt_dbgreq    ),
  .had_rtu_ex1_trace_potential      (had_rtu_ex1_trace_potential     ),
  .had_rtu_fdb                      (had_rtu_fdb                     ),
  .had_rtu_hw_dbgreq                (had_rtu_hw_dbgreq               ),
  .had_rtu_inst_bkpt_dbgreq         (had_rtu_inst_bkpt_dbgreq        ),
  .had_rtu_rst_dbgreq               (had_rtu_rst_dbgreq              ),
  .had_rtu_trace_dbgreq             (had_rtu_trace_dbgreq            ),
  .had_rtu_trace_dbgreq_raw         (had_rtu_trace_dbgreq_raw        ),
  .had_rtu_xx_tme                   (had_rtu_xx_tme                  ),
  .had_yy_xx_bkpta_base             (had_yy_xx_bkpta_base            ),
  .had_yy_xx_bkpta_mask             (had_yy_xx_bkpta_mask            ),
  .had_yy_xx_bkpta_rc               (had_yy_xx_bkpta_rc              ),
  .had_yy_xx_bkptb_base             (had_yy_xx_bkptb_base            ),
  .had_yy_xx_bkptb_mask             (had_yy_xx_bkptb_mask            ),
  .had_yy_xx_bkptb_rc               (had_yy_xx_bkptb_rc              ),
  .had_yy_xx_bkptc_base             (had_yy_xx_bkptc_base            ),
  .had_yy_xx_bkptc_mask             (had_yy_xx_bkptc_mask            ),
  .had_yy_xx_bkptd_base             (had_yy_xx_bkptd_base            ),
  .had_yy_xx_bkptd_mask             (had_yy_xx_bkptd_mask            ),
  .had_yy_xx_bkpte_base             (had_yy_xx_bkpte_base            ),
  .had_yy_xx_bkpte_mask             (had_yy_xx_bkpte_mask            ),
  .had_yy_xx_dbg                    (had_yy_xx_dbg                   ),
  .had_yy_xx_exit_dbg               (had_core_exit_dbg               ),
  .hpcp_cp0_data                    (hpcp_cp0_data                   ),
  .idu_had_id_chgflw_inst           (idu_had_id_chgflw_inst          ),
  .idu_had_id_inst_bkpt             (idu_had_id_inst_bkpt            ),
  .idu_had_no_op                    (idu_had_no_op                   ),
  .ifu_bmu_acc_deny                 (ifu_bmu_acc_deny                ),
  .ifu_bmu_addr                     (ifu_bmu_addr                    ),
  .ifu_bmu_burst                    (ifu_bmu_burst                   ),
  .ifu_bmu_data_req                 (ifu_bmu_data_req                ),
  .ifu_bmu_prot                     (ifu_bmu_prot                    ),
  .ifu_bmu_req                      (ifu_bmu_req                     ),
  .ifu_bmu_seq                      (ifu_bmu_seq                     ),
  .ifu_bmu_size                     (ifu_bmu_size                    ),
  .ifu_hpcp_icache_access           (ifu_hpcp_icache_access          ),
  .ifu_hpcp_icache_miss             (ifu_hpcp_icache_miss            ),
  .ifu_pmp_addr                     (ifu_pmp_addr                    ),
  .ifu_pmp_machine_mode             (ifu_pmp_machine_mode            ),
  .ifu_sysmap_pa                    (ifu_sysmap_pa                   ),
  .iu_hpcp_inst_bht_mispred         (iu_hpcp_inst_bht_mispred        ),
  .iu_hpcp_inst_condbr              (iu_hpcp_inst_condbr             ),
  .iu_hpcp_inst_condbr_gate         (iu_hpcp_inst_condbr_gate        ),
  .iu_xx_no_op                      (iu_xx_no_op                     ),
  .lsu_biu_amo_pmp_deny             (lsu_biu_amo_pmp_deny            ),
  .lsu_biu_async_expt_ack           (lsu_biu_async_expt_ack          ),
  .lsu_bmu_acc_deny                 (lsu_bmu_acc_deny                ),
  .lsu_bmu_addr                     (lsu_bmu_addr                    ),
  .lsu_bmu_burst                    (lsu_bmu_burst                   ),
  .lsu_bmu_lock                     (lsu_bmu_lock                    ),
  .lsu_bmu_lrsc                     (lsu_bmu_lrsc                    ),
  .lsu_bmu_prot                     (lsu_bmu_prot                    ),
  .lsu_bmu_req                      (lsu_bmu_req                     ),
  .lsu_bmu_req_dp                   (lsu_bmu_req_dp                  ),
  .lsu_bmu_seq                      (lsu_bmu_seq                     ),
  .lsu_bmu_size                     (lsu_bmu_size                    ),
  .lsu_bmu_wdata                    (lsu_bmu_wdata                   ),
  .lsu_bmu_write                    (lsu_bmu_write                   ),
  .lsu_hpcp_cache_read_access       (lsu_hpcp_cache_read_access      ),
  .lsu_hpcp_cache_read_access_gate  (lsu_hpcp_cache_read_access_gate ),
  .lsu_hpcp_cache_read_miss         (lsu_hpcp_cache_read_miss        ),
  .lsu_hpcp_cache_read_miss_gate    (lsu_hpcp_cache_read_miss_gate   ),
  .lsu_hpcp_cache_write_access      (lsu_hpcp_cache_write_access     ),
  .lsu_hpcp_cache_write_access_gate (lsu_hpcp_cache_write_access_gate),
  .lsu_hpcp_cache_write_miss        (lsu_hpcp_cache_write_miss       ),
  .lsu_hpcp_cache_write_miss_gate   (lsu_hpcp_cache_write_miss_gate  ),
  .lsu_hpcp_inst_store              (lsu_hpcp_inst_store             ),
  .lsu_hpcp_inst_store_gate         (lsu_hpcp_inst_store_gate        ),
  .lsu_pad_sc_pass                  (lsu_pad_sc_pass                 ),
  .lsu_pmp_addr                     (lsu_pmp_addr                    ),
  .lsu_pmp_write                    (lsu_pmp_write                   ),
  .lsu_sysmap_pa                    (lsu_sysmap_pa                   ),
  .lsu_xx_flush                     (lsu_xx_flush                    ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .lsu_xx_warm_up                   (lsu_xx_warm_up                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .pmp_ifu_acc_deny                 (pmp_ifu_acc_deny                ),
  .pmp_lsu_acc_deny                 (pmp_lsu_acc_deny                ),
  .rtu_clic_warm_up                 (rtu_clic_warm_up                ),
  .rtu_had_data_bkpta_vld           (rtu_had_data_bkpta_vld          ),
  .rtu_had_data_bkptb_vld           (rtu_had_data_bkptb_vld          ),
  .rtu_had_data_bkptc_vld           (rtu_had_data_bkptc_vld          ),
  .rtu_had_data_bkptd_vld           (rtu_had_data_bkptd_vld          ),
  .rtu_had_data_bkpte_vld           (rtu_had_data_bkpte_vld          ),
  .rtu_had_dbg_disable_for_tee      (rtu_had_dbg_disable_for_tee     ),
  .rtu_had_ex1_data_bkpta_vld       (rtu_had_ex1_data_bkpta_vld      ),
  .rtu_had_ex1_data_bkptb_vld       (rtu_had_ex1_data_bkptb_vld      ),
  .rtu_had_ex1_data_bkptc_vld       (rtu_had_ex1_data_bkptc_vld      ),
  .rtu_had_ex1_data_bkptd_vld       (rtu_had_ex1_data_bkptd_vld      ),
  .rtu_had_ex1_data_bkpte_vld       (rtu_had_ex1_data_bkpte_vld      ),
  .rtu_had_ex1_inst_bkpta_vld       (rtu_had_ex1_inst_bkpta_vld      ),
  .rtu_had_ex1_inst_bkptb_vld       (rtu_had_ex1_inst_bkptb_vld      ),
  .rtu_had_ex1_inst_bkptc_vld       (rtu_had_ex1_inst_bkptc_vld      ),
  .rtu_had_ex1_inst_bkptd_vld       (rtu_had_ex1_inst_bkptd_vld      ),
  .rtu_had_ex1_inst_bkpte_vld       (rtu_had_ex1_inst_bkpte_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpta_vld           (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_bkptb_vld           (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_bkptc_vld           (rtu_had_inst_bkptc_vld          ),
  .rtu_had_inst_bkptd_vld           (rtu_had_inst_bkptd_vld          ),
  .rtu_had_inst_bkpte_vld           (rtu_had_inst_bkpte_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_int_ack                  (rtu_had_int_ack                 ),
  .rtu_had_rst_dbgreq_ack           (rtu_had_rst_dbgreq_ack          ),
  .rtu_had_xx_bkpt_inst             (rtu_had_xx_bkpt_inst            ),
  .rtu_had_xx_chgflow               (rtu_had_xx_chgflow              ),
  .rtu_had_xx_data                  (rtu_had_xx_data                 ),
  .rtu_had_xx_data_vld              (rtu_had_xx_data_vld             ),
  .rtu_had_xx_dbg_ack_pc            (rtu_had_xx_dbg_ack_pc           ),
  .rtu_had_xx_next_pc               (rtu_had_xx_next_pc              ),
  .rtu_had_xx_retire                (rtu_had_xx_retire               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_retire_pc             (rtu_had_xx_retire_pc            ),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_hpcp_retire_inst_vld         (rtu_hpcp_retire_inst_vld        ),
  .rtu_pad_inst_retire              (rtu_pad_inst_retire             ),
  .rtu_pad_inst_split               (rtu_pad_inst_split              ),
  .rtu_pad_retire_pc                (rtu_pad_retire_pc               ),
  .rtu_pad_wb0_data                 (rtu_pad_wb0_data                ),
  .rtu_pad_wb0_preg                 (rtu_pad_wb0_preg                ),
  .rtu_pad_wb0_vld                  (rtu_pad_wb0_vld                 ),
  .rtu_pad_wb1_data                 (rtu_pad_wb1_data                ),
  .rtu_pad_wb1_preg                 (rtu_pad_wb1_preg                ),
  .rtu_pad_wb1_vld                  (rtu_pad_wb1_vld                 ),
  .rtu_sysio_lockup_on              (rtu_sysio_lockup_on             ),
  .rtu_xx_no_op                     (rtu_xx_no_op                    ),
  .rtu_yy_xx_async_flush            (rtu_yy_xx_async_flush           ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .rtu_yy_xx_retire                 (rtu_yy_xx_retire                ),
  .sysio_cp0_clk_en                 (sysio_cp0_clk_en                ),
  .sysio_cp0_clkratio               (sysio_cp0_clkratio              ),
  .sysio_cp0_rst_addr               (sysio_cp0_rst_addr              ),
  .sysio_cp0_sys_view_lpmd_b        (sysio_cp0_sys_view_lpmd_b       ),
  .sysio_ifu_rst_addr               (sysio_ifu_rst_addr              ),
  .sysio_ifu_rst_addr_done          (sysio_ifu_rst_addr_done         ),
  .sysio_iu_rst_addr                (sysio_iu_rst_addr               ),
  .sysio_rtu_nmi_int                (sysio_rtu_nmi_int               ),
  .sysio_rtu_wk_event               (sysio_rtu_wk_event              ),
  .sysio_xx_halt_req                (sysio_xx_halt_req               ),
  .sysmap_ifu_flg                   (sysmap_ifu_flg                  ),
  .sysmap_lsu_flg                   (sysmap_lsu_flg                  ),
  .tcip_cp0_clic_base               (tcip_cp0_clic_base              )
);

// &Connect( @35
//          .had_yy_xx_exit_dbg    (had_core_exit_dbg       ), @36
//         ); @37
// &Force("output", "cp0_yy_mach_mode"); @38
// &Force("output", "rtu_yy_xx_dbgon"); @39


// &Instance("pa_pmp_top"); @46
// &Force("nonport", "ifu_pmp_addr"); &Force("bus", "ifu_pmp_addr", 31, 0); @48
// &Force("nonport", "ifu_pmp_machine_mode"); @49
// &Force("nonport", "lsu_pmp_addr"); &Force("bus", "lsu_pmp_addr", 31, 0); @50
// &Force("nonport", "lsu_pmp_write"); @51
assign pmp_ifu_acc_deny = 1'b0;
assign pmp_lsu_acc_deny = 1'b0;




// &Instance("pa_sysmap_top"); @59
pa_sysmap_top  x_pa_sysmap_top (
  .ifu_sysmap_pa  (ifu_sysmap_pa ),
  .lsu_sysmap_pa  (lsu_sysmap_pa ),
  .sysmap_ifu_flg (sysmap_ifu_flg),
  .sysmap_lsu_flg (sysmap_lsu_flg)
);





// &Instance("pa_bmu_top"); @64
pa_bmu_top  x_pa_bmu_top (
  .bmu_dahbl_dbus_acc_deny     (bmu_dahbl_dbus_acc_deny    ),
  .bmu_dahbl_dbus_addr         (bmu_dahbl_dbus_addr        ),
  .bmu_dahbl_dbus_burst        (bmu_dahbl_dbus_burst       ),
  .bmu_dahbl_dbus_lock         (bmu_dahbl_dbus_lock        ),
  .bmu_dahbl_dbus_lrsc         (bmu_dahbl_dbus_lrsc        ),
  .bmu_dahbl_dbus_prot         (bmu_dahbl_dbus_prot        ),
  .bmu_dahbl_dbus_req          (bmu_dahbl_dbus_req         ),
  .bmu_dahbl_dbus_req_dp       (bmu_dahbl_dbus_req_dp      ),
  .bmu_dahbl_dbus_seq          (bmu_dahbl_dbus_seq         ),
  .bmu_dahbl_dbus_size         (bmu_dahbl_dbus_size        ),
  .bmu_dahbl_dbus_wdata        (bmu_dahbl_dbus_wdata       ),
  .bmu_dahbl_dbus_write        (bmu_dahbl_dbus_write       ),
  .bmu_dahbl_had_acc_deny      (bmu_dahbl_had_acc_deny     ),
  .bmu_dahbl_had_addr          (bmu_dahbl_had_addr         ),
  .bmu_dahbl_had_burst         (bmu_dahbl_had_burst        ),
  .bmu_dahbl_had_prot          (bmu_dahbl_had_prot         ),
  .bmu_dahbl_had_req           (bmu_dahbl_had_req          ),
  .bmu_dahbl_had_req_dp        (bmu_dahbl_had_req_dp       ),
  .bmu_dahbl_had_seq           (bmu_dahbl_had_seq          ),
  .bmu_dahbl_had_size          (bmu_dahbl_had_size         ),
  .bmu_dahbl_had_wdata         (bmu_dahbl_had_wdata        ),
  .bmu_dahbl_had_write         (bmu_dahbl_had_write        ),
  .bmu_dahbl_ibus_acc_deny     (bmu_dahbl_ibus_acc_deny    ),
  .bmu_dahbl_ibus_addr         (bmu_dahbl_ibus_addr        ),
  .bmu_dahbl_ibus_burst        (bmu_dahbl_ibus_burst       ),
  .bmu_dahbl_ibus_prot         (bmu_dahbl_ibus_prot        ),
  .bmu_dahbl_ibus_req          (bmu_dahbl_ibus_req         ),
  .bmu_dahbl_ibus_req_dp       (bmu_dahbl_ibus_req_dp      ),
  .bmu_dahbl_ibus_seq          (bmu_dahbl_ibus_seq         ),
  .bmu_dahbl_ibus_size         (bmu_dahbl_ibus_size        ),
  .bmu_had_acc_err             (bmu_had_acc_err            ),
  .bmu_had_grant               (bmu_had_grant              ),
  .bmu_had_rdata               (bmu_had_rdata              ),
  .bmu_had_trans_cmplt         (bmu_had_trans_cmplt        ),
  .bmu_iahbl_dbus_acc_deny     (bmu_iahbl_dbus_acc_deny    ),
  .bmu_iahbl_dbus_addr         (bmu_iahbl_dbus_addr        ),
  .bmu_iahbl_dbus_burst        (bmu_iahbl_dbus_burst       ),
  .bmu_iahbl_dbus_lock         (bmu_iahbl_dbus_lock        ),
  .bmu_iahbl_dbus_lrsc         (bmu_iahbl_dbus_lrsc        ),
  .bmu_iahbl_dbus_prot         (bmu_iahbl_dbus_prot        ),
  .bmu_iahbl_dbus_req          (bmu_iahbl_dbus_req         ),
  .bmu_iahbl_dbus_req_dp       (bmu_iahbl_dbus_req_dp      ),
  .bmu_iahbl_dbus_seq          (bmu_iahbl_dbus_seq         ),
  .bmu_iahbl_dbus_size         (bmu_iahbl_dbus_size        ),
  .bmu_iahbl_dbus_wdata        (bmu_iahbl_dbus_wdata       ),
  .bmu_iahbl_dbus_write        (bmu_iahbl_dbus_write       ),
  .bmu_iahbl_had_acc_deny      (bmu_iahbl_had_acc_deny     ),
  .bmu_iahbl_had_addr          (bmu_iahbl_had_addr         ),
  .bmu_iahbl_had_burst         (bmu_iahbl_had_burst        ),
  .bmu_iahbl_had_prot          (bmu_iahbl_had_prot         ),
  .bmu_iahbl_had_req           (bmu_iahbl_had_req          ),
  .bmu_iahbl_had_req_dp        (bmu_iahbl_had_req_dp       ),
  .bmu_iahbl_had_seq           (bmu_iahbl_had_seq          ),
  .bmu_iahbl_had_size          (bmu_iahbl_had_size         ),
  .bmu_iahbl_had_wdata         (bmu_iahbl_had_wdata        ),
  .bmu_iahbl_had_write         (bmu_iahbl_had_write        ),
  .bmu_iahbl_ibus_acc_deny     (bmu_iahbl_ibus_acc_deny    ),
  .bmu_iahbl_ibus_addr         (bmu_iahbl_ibus_addr        ),
  .bmu_iahbl_ibus_burst        (bmu_iahbl_ibus_burst       ),
  .bmu_iahbl_ibus_prot         (bmu_iahbl_ibus_prot        ),
  .bmu_iahbl_ibus_req          (bmu_iahbl_ibus_req         ),
  .bmu_iahbl_ibus_req_dp       (bmu_iahbl_ibus_req_dp      ),
  .bmu_iahbl_ibus_seq          (bmu_iahbl_ibus_seq         ),
  .bmu_iahbl_ibus_size         (bmu_iahbl_ibus_size        ),
  .bmu_ifu_acc_err             (bmu_ifu_acc_err            ),
  .bmu_ifu_grant               (bmu_ifu_grant              ),
  .bmu_ifu_rdata               (bmu_ifu_rdata              ),
  .bmu_ifu_trans_cmplt         (bmu_ifu_trans_cmplt        ),
  .bmu_lsu_acc_err             (bmu_lsu_acc_err            ),
  .bmu_lsu_grant               (bmu_lsu_grant              ),
  .bmu_lsu_rdata               (bmu_lsu_rdata              ),
  .bmu_lsu_trans_cmplt         (bmu_lsu_trans_cmplt        ),
  .bmu_sahbl_dbus_acc_deny     (bmu_sahbl_dbus_acc_deny    ),
  .bmu_sahbl_dbus_addr         (bmu_sahbl_dbus_addr        ),
  .bmu_sahbl_dbus_burst        (bmu_sahbl_dbus_burst       ),
  .bmu_sahbl_dbus_lock         (bmu_sahbl_dbus_lock        ),
  .bmu_sahbl_dbus_lrsc         (bmu_sahbl_dbus_lrsc        ),
  .bmu_sahbl_dbus_prot         (bmu_sahbl_dbus_prot        ),
  .bmu_sahbl_dbus_req          (bmu_sahbl_dbus_req         ),
  .bmu_sahbl_dbus_req_dp       (bmu_sahbl_dbus_req_dp      ),
  .bmu_sahbl_dbus_seq          (bmu_sahbl_dbus_seq         ),
  .bmu_sahbl_dbus_size         (bmu_sahbl_dbus_size        ),
  .bmu_sahbl_dbus_wdata        (bmu_sahbl_dbus_wdata       ),
  .bmu_sahbl_dbus_write        (bmu_sahbl_dbus_write       ),
  .bmu_sahbl_had_acc_deny      (bmu_sahbl_had_acc_deny     ),
  .bmu_sahbl_had_addr          (bmu_sahbl_had_addr         ),
  .bmu_sahbl_had_burst         (bmu_sahbl_had_burst        ),
  .bmu_sahbl_had_prot          (bmu_sahbl_had_prot         ),
  .bmu_sahbl_had_req           (bmu_sahbl_had_req          ),
  .bmu_sahbl_had_req_dp        (bmu_sahbl_had_req_dp       ),
  .bmu_sahbl_had_seq           (bmu_sahbl_had_seq          ),
  .bmu_sahbl_had_size          (bmu_sahbl_had_size         ),
  .bmu_sahbl_had_wdata         (bmu_sahbl_had_wdata        ),
  .bmu_sahbl_had_write         (bmu_sahbl_had_write        ),
  .bmu_sahbl_ibus_acc_deny     (bmu_sahbl_ibus_acc_deny    ),
  .bmu_sahbl_ibus_addr         (bmu_sahbl_ibus_addr        ),
  .bmu_sahbl_ibus_burst        (bmu_sahbl_ibus_burst       ),
  .bmu_sahbl_ibus_prot         (bmu_sahbl_ibus_prot        ),
  .bmu_sahbl_ibus_req          (bmu_sahbl_ibus_req         ),
  .bmu_sahbl_ibus_req_dp       (bmu_sahbl_ibus_req_dp      ),
  .bmu_sahbl_ibus_seq          (bmu_sahbl_ibus_seq         ),
  .bmu_sahbl_ibus_size         (bmu_sahbl_ibus_size        ),
  .bmu_tcipif_dbus_acc_deny    (bmu_tcipif_dbus_acc_deny   ),
  .bmu_tcipif_dbus_addr        (bmu_tcipif_dbus_addr       ),
  .bmu_tcipif_dbus_req         (bmu_tcipif_dbus_req        ),
  .bmu_tcipif_dbus_req_dp      (bmu_tcipif_dbus_req_dp     ),
  .bmu_tcipif_dbus_size        (bmu_tcipif_dbus_size       ),
  .bmu_tcipif_dbus_supv_mode   (bmu_tcipif_dbus_supv_mode  ),
  .bmu_tcipif_dbus_wdata       (bmu_tcipif_dbus_wdata      ),
  .bmu_tcipif_dbus_write       (bmu_tcipif_dbus_write      ),
  .bmu_tcipif_had_acc_deny     (bmu_tcipif_had_acc_deny    ),
  .bmu_tcipif_had_addr         (bmu_tcipif_had_addr        ),
  .bmu_tcipif_had_req          (bmu_tcipif_had_req         ),
  .bmu_tcipif_had_req_dp       (bmu_tcipif_had_req_dp      ),
  .bmu_tcipif_had_size         (bmu_tcipif_had_size        ),
  .bmu_tcipif_had_supv_mode    (bmu_tcipif_had_supv_mode   ),
  .bmu_tcipif_had_wdata        (bmu_tcipif_had_wdata       ),
  .bmu_tcipif_had_write        (bmu_tcipif_had_write       ),
  .bmu_tcipif_ibus_acc_deny    (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_ibus_addr        (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_ibus_req         (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_ibus_req_dp      (bmu_tcipif_ibus_req_dp     ),
  .bmu_tcipif_ibus_size        (bmu_tcipif_ibus_size       ),
  .bmu_tcipif_ibus_supv_mode   (bmu_tcipif_ibus_supv_mode  ),
  .bmu_tcipif_ibus_wdata       (bmu_tcipif_ibus_wdata      ),
  .bmu_tcipif_ibus_write       (bmu_tcipif_ibus_write      ),
  .cp0_yy_mach_mode            (cp0_yy_mach_mode           ),
  .cpurst_b                    (cpurst_b                   ),
  .dahbl_bmu_dbus_acc_err      (dahbl_bmu_dbus_acc_err     ),
  .dahbl_bmu_dbus_data         (dahbl_bmu_dbus_data        ),
  .dahbl_bmu_dbus_grnt         (dahbl_bmu_dbus_grnt        ),
  .dahbl_bmu_dbus_trans_cmplt  (dahbl_bmu_dbus_trans_cmplt ),
  .dahbl_bmu_had_acc_err       (dahbl_bmu_had_acc_err      ),
  .dahbl_bmu_had_data          (dahbl_bmu_had_data         ),
  .dahbl_bmu_had_grnt          (dahbl_bmu_had_grnt         ),
  .dahbl_bmu_had_trans_cmplt   (dahbl_bmu_had_trans_cmplt  ),
  .dahbl_bmu_ibus_acc_err      (dahbl_bmu_ibus_acc_err     ),
  .dahbl_bmu_ibus_data         (dahbl_bmu_ibus_data        ),
  .dahbl_bmu_ibus_grnt         (dahbl_bmu_ibus_grnt        ),
  .dahbl_bmu_ibus_trans_cmplt  (dahbl_bmu_ibus_trans_cmplt ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_bmu_addr                (had_bmu_addr               ),
  .had_bmu_burst               (had_bmu_burst              ),
  .had_bmu_prot                (had_bmu_prot               ),
  .had_bmu_req                 (had_bmu_req                ),
  .had_bmu_seq                 (had_bmu_seq                ),
  .had_bmu_size                (had_bmu_size               ),
  .had_bmu_wdata               (had_bmu_wdata              ),
  .had_bmu_write               (had_bmu_write              ),
  .iahbl_bmu_dbus_acc_err      (iahbl_bmu_dbus_acc_err     ),
  .iahbl_bmu_dbus_data         (iahbl_bmu_dbus_data        ),
  .iahbl_bmu_dbus_grnt         (iahbl_bmu_dbus_grnt        ),
  .iahbl_bmu_dbus_trans_cmplt  (iahbl_bmu_dbus_trans_cmplt ),
  .iahbl_bmu_had_acc_err       (iahbl_bmu_had_acc_err      ),
  .iahbl_bmu_had_data          (iahbl_bmu_had_data         ),
  .iahbl_bmu_had_grnt          (iahbl_bmu_had_grnt         ),
  .iahbl_bmu_had_trans_cmplt   (iahbl_bmu_had_trans_cmplt  ),
  .iahbl_bmu_ibus_acc_err      (iahbl_bmu_ibus_acc_err     ),
  .iahbl_bmu_ibus_data         (iahbl_bmu_ibus_data        ),
  .iahbl_bmu_ibus_grnt         (iahbl_bmu_ibus_grnt        ),
  .iahbl_bmu_ibus_trans_cmplt  (iahbl_bmu_ibus_trans_cmplt ),
  .ifu_bmu_acc_deny            (ifu_bmu_acc_deny           ),
  .ifu_bmu_addr                (ifu_bmu_addr               ),
  .ifu_bmu_burst               (ifu_bmu_burst              ),
  .ifu_bmu_data_req            (ifu_bmu_data_req           ),
  .ifu_bmu_prot                (ifu_bmu_prot               ),
  .ifu_bmu_req                 (ifu_bmu_req                ),
  .ifu_bmu_seq                 (ifu_bmu_seq                ),
  .ifu_bmu_size                (ifu_bmu_size               ),
  .lsu_bmu_acc_deny            (lsu_bmu_acc_deny           ),
  .lsu_bmu_addr                (lsu_bmu_addr               ),
  .lsu_bmu_burst               (lsu_bmu_burst              ),
  .lsu_bmu_lock                (lsu_bmu_lock               ),
  .lsu_bmu_lrsc                (lsu_bmu_lrsc               ),
  .lsu_bmu_prot                (lsu_bmu_prot               ),
  .lsu_bmu_req                 (lsu_bmu_req                ),
  .lsu_bmu_req_dp              (lsu_bmu_req_dp             ),
  .lsu_bmu_seq                 (lsu_bmu_seq                ),
  .lsu_bmu_size                (lsu_bmu_size               ),
  .lsu_bmu_wdata               (lsu_bmu_wdata              ),
  .lsu_bmu_write               (lsu_bmu_write              ),
  .pad_bmu_dahbl_base          (pad_bmu_dahbl_base         ),
  .pad_bmu_dahbl_mask          (pad_bmu_dahbl_mask         ),
  .pad_bmu_iahbl_base          (pad_bmu_iahbl_base         ),
  .pad_bmu_iahbl_mask          (pad_bmu_iahbl_mask         ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .rtu_yy_xx_async_flush       (rtu_yy_xx_async_flush      ),
  .sahbl_bmu_dbus_acc_err      (sahbl_bmu_dbus_acc_err     ),
  .sahbl_bmu_dbus_data         (sahbl_bmu_dbus_data        ),
  .sahbl_bmu_dbus_grnt         (sahbl_bmu_dbus_grnt        ),
  .sahbl_bmu_dbus_trans_cmplt  (sahbl_bmu_dbus_trans_cmplt ),
  .sahbl_bmu_had_acc_err       (sahbl_bmu_had_acc_err      ),
  .sahbl_bmu_had_data          (sahbl_bmu_had_data         ),
  .sahbl_bmu_had_grnt          (sahbl_bmu_had_grnt         ),
  .sahbl_bmu_had_trans_cmplt   (sahbl_bmu_had_trans_cmplt  ),
  .sahbl_bmu_ibus_acc_err      (sahbl_bmu_ibus_acc_err     ),
  .sahbl_bmu_ibus_data         (sahbl_bmu_ibus_data        ),
  .sahbl_bmu_ibus_grnt         (sahbl_bmu_ibus_grnt        ),
  .sahbl_bmu_ibus_trans_cmplt  (sahbl_bmu_ibus_trans_cmplt ),
  .tcipif_bmu_dbus_acc_err     (tcipif_bmu_dbus_acc_err    ),
  .tcipif_bmu_dbus_data        (tcipif_bmu_dbus_data       ),
  .tcipif_bmu_dbus_grnt        (tcipif_bmu_dbus_grnt       ),
  .tcipif_bmu_dbus_trans_cmplt (tcipif_bmu_dbus_trans_cmplt),
  .tcipif_bmu_had_acc_err      (tcipif_bmu_had_acc_err     ),
  .tcipif_bmu_had_data         (tcipif_bmu_had_data        ),
  .tcipif_bmu_had_grnt         (tcipif_bmu_had_grnt        ),
  .tcipif_bmu_had_trans_cmplt  (tcipif_bmu_had_trans_cmplt ),
  .tcipif_bmu_ibus_acc_err     (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_ibus_data        (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_ibus_grnt        (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_ibus_trans_cmplt (tcipif_bmu_ibus_trans_cmplt)
);





// &ConnRule(s/sahbl_pad/biu_pad/); @69
// &ConnRule(s/pad_sahbl/pad_biu/); @70
// &Instance("pa_sahbl_top"); @71
pa_sahbl_top  x_pa_sahbl_top (
  .bmu_sahbl_dbus_acc_deny    (bmu_sahbl_dbus_acc_deny   ),
  .bmu_sahbl_dbus_addr        (bmu_sahbl_dbus_addr       ),
  .bmu_sahbl_dbus_burst       (bmu_sahbl_dbus_burst      ),
  .bmu_sahbl_dbus_lock        (bmu_sahbl_dbus_lock       ),
  .bmu_sahbl_dbus_lrsc        (bmu_sahbl_dbus_lrsc       ),
  .bmu_sahbl_dbus_prot        (bmu_sahbl_dbus_prot       ),
  .bmu_sahbl_dbus_req         (bmu_sahbl_dbus_req        ),
  .bmu_sahbl_dbus_req_dp      (bmu_sahbl_dbus_req_dp     ),
  .bmu_sahbl_dbus_seq         (bmu_sahbl_dbus_seq        ),
  .bmu_sahbl_dbus_size        (bmu_sahbl_dbus_size       ),
  .bmu_sahbl_dbus_wdata       (bmu_sahbl_dbus_wdata      ),
  .bmu_sahbl_dbus_write       (bmu_sahbl_dbus_write      ),
  .bmu_sahbl_had_acc_deny     (bmu_sahbl_had_acc_deny    ),
  .bmu_sahbl_had_addr         (bmu_sahbl_had_addr        ),
  .bmu_sahbl_had_burst        (bmu_sahbl_had_burst       ),
  .bmu_sahbl_had_prot         (bmu_sahbl_had_prot        ),
  .bmu_sahbl_had_req          (bmu_sahbl_had_req         ),
  .bmu_sahbl_had_req_dp       (bmu_sahbl_had_req_dp      ),
  .bmu_sahbl_had_seq          (bmu_sahbl_had_seq         ),
  .bmu_sahbl_had_size         (bmu_sahbl_had_size        ),
  .bmu_sahbl_had_wdata        (bmu_sahbl_had_wdata       ),
  .bmu_sahbl_had_write        (bmu_sahbl_had_write       ),
  .bmu_sahbl_ibus_acc_deny    (bmu_sahbl_ibus_acc_deny   ),
  .bmu_sahbl_ibus_addr        (bmu_sahbl_ibus_addr       ),
  .bmu_sahbl_ibus_burst       (bmu_sahbl_ibus_burst      ),
  .bmu_sahbl_ibus_prot        (bmu_sahbl_ibus_prot       ),
  .bmu_sahbl_ibus_req         (bmu_sahbl_ibus_req        ),
  .bmu_sahbl_ibus_req_dp      (bmu_sahbl_ibus_req_dp     ),
  .bmu_sahbl_ibus_seq         (bmu_sahbl_ibus_seq        ),
  .bmu_sahbl_ibus_size        (bmu_sahbl_ibus_size       ),
  .clk_en                     (clk_en                    ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .lsu_xx_warm_up             (lsu_xx_warm_up            ),
  .pad_sahbl_hrdata           (pad_biu_hrdata            ),
  .pad_sahbl_hready           (pad_biu_hready            ),
  .pad_sahbl_hresp            (pad_biu_hresp             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .sahbl_bmu_dbus_acc_err     (sahbl_bmu_dbus_acc_err    ),
  .sahbl_bmu_dbus_data        (sahbl_bmu_dbus_data       ),
  .sahbl_bmu_dbus_grnt        (sahbl_bmu_dbus_grnt       ),
  .sahbl_bmu_dbus_trans_cmplt (sahbl_bmu_dbus_trans_cmplt),
  .sahbl_bmu_had_acc_err      (sahbl_bmu_had_acc_err     ),
  .sahbl_bmu_had_data         (sahbl_bmu_had_data        ),
  .sahbl_bmu_had_grnt         (sahbl_bmu_had_grnt        ),
  .sahbl_bmu_had_trans_cmplt  (sahbl_bmu_had_trans_cmplt ),
  .sahbl_bmu_ibus_acc_err     (sahbl_bmu_ibus_acc_err    ),
  .sahbl_bmu_ibus_data        (sahbl_bmu_ibus_data       ),
  .sahbl_bmu_ibus_grnt        (sahbl_bmu_ibus_grnt       ),
  .sahbl_bmu_ibus_trans_cmplt (sahbl_bmu_ibus_trans_cmplt),
  .sahbl_pad_haddr            (biu_pad_haddr             ),
  .sahbl_pad_hburst           (biu_pad_hburst            ),
  .sahbl_pad_hlock            (biu_pad_hlock             ),
  .sahbl_pad_hprot            (biu_pad_hprot             ),
  .sahbl_pad_hsize            (biu_pad_hsize             ),
  .sahbl_pad_htrans           (biu_pad_htrans            ),
  .sahbl_pad_hwdata           (biu_pad_hwdata            ),
  .sahbl_pad_hwrite           (biu_pad_hwrite            ),
  .sahbl_sysio_idle           (biu_sysio_idle            ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);

// &Connect(.sahbl_sysio_idle (biu_sysio_idle)); @72




// &Instance("pa_iahbl_top"); @78
pa_iahbl_top  x_pa_iahbl_top (
  .bmu_iahbl_dbus_acc_deny    (bmu_iahbl_dbus_acc_deny   ),
  .bmu_iahbl_dbus_addr        (bmu_iahbl_dbus_addr       ),
  .bmu_iahbl_dbus_burst       (bmu_iahbl_dbus_burst      ),
  .bmu_iahbl_dbus_lock        (bmu_iahbl_dbus_lock       ),
  .bmu_iahbl_dbus_lrsc        (bmu_iahbl_dbus_lrsc       ),
  .bmu_iahbl_dbus_prot        (bmu_iahbl_dbus_prot       ),
  .bmu_iahbl_dbus_req         (bmu_iahbl_dbus_req        ),
  .bmu_iahbl_dbus_req_dp      (bmu_iahbl_dbus_req_dp     ),
  .bmu_iahbl_dbus_seq         (bmu_iahbl_dbus_seq        ),
  .bmu_iahbl_dbus_size        (bmu_iahbl_dbus_size       ),
  .bmu_iahbl_dbus_wdata       (bmu_iahbl_dbus_wdata      ),
  .bmu_iahbl_dbus_write       (bmu_iahbl_dbus_write      ),
  .bmu_iahbl_had_acc_deny     (bmu_iahbl_had_acc_deny    ),
  .bmu_iahbl_had_addr         (bmu_iahbl_had_addr        ),
  .bmu_iahbl_had_burst        (bmu_iahbl_had_burst       ),
  .bmu_iahbl_had_prot         (bmu_iahbl_had_prot        ),
  .bmu_iahbl_had_req          (bmu_iahbl_had_req         ),
  .bmu_iahbl_had_req_dp       (bmu_iahbl_had_req_dp      ),
  .bmu_iahbl_had_seq          (bmu_iahbl_had_seq         ),
  .bmu_iahbl_had_size         (bmu_iahbl_had_size        ),
  .bmu_iahbl_had_wdata        (bmu_iahbl_had_wdata       ),
  .bmu_iahbl_had_write        (bmu_iahbl_had_write       ),
  .bmu_iahbl_ibus_acc_deny    (bmu_iahbl_ibus_acc_deny   ),
  .bmu_iahbl_ibus_addr        (bmu_iahbl_ibus_addr       ),
  .bmu_iahbl_ibus_burst       (bmu_iahbl_ibus_burst      ),
  .bmu_iahbl_ibus_prot        (bmu_iahbl_ibus_prot       ),
  .bmu_iahbl_ibus_req         (bmu_iahbl_ibus_req        ),
  .bmu_iahbl_ibus_req_dp      (bmu_iahbl_ibus_req_dp     ),
  .bmu_iahbl_ibus_seq         (bmu_iahbl_ibus_seq        ),
  .bmu_iahbl_ibus_size        (bmu_iahbl_ibus_size       ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .iahbl_bmu_dbus_acc_err     (iahbl_bmu_dbus_acc_err    ),
  .iahbl_bmu_dbus_data        (iahbl_bmu_dbus_data       ),
  .iahbl_bmu_dbus_grnt        (iahbl_bmu_dbus_grnt       ),
  .iahbl_bmu_dbus_trans_cmplt (iahbl_bmu_dbus_trans_cmplt),
  .iahbl_bmu_had_acc_err      (iahbl_bmu_had_acc_err     ),
  .iahbl_bmu_had_data         (iahbl_bmu_had_data        ),
  .iahbl_bmu_had_grnt         (iahbl_bmu_had_grnt        ),
  .iahbl_bmu_had_trans_cmplt  (iahbl_bmu_had_trans_cmplt ),
  .iahbl_bmu_ibus_acc_err     (iahbl_bmu_ibus_acc_err    ),
  .iahbl_bmu_ibus_data        (iahbl_bmu_ibus_data       ),
  .iahbl_bmu_ibus_grnt        (iahbl_bmu_ibus_grnt       ),
  .iahbl_bmu_ibus_trans_cmplt (iahbl_bmu_ibus_trans_cmplt),
  .iahbl_pad_haddr            (iahbl_pad_haddr           ),
  .iahbl_pad_hburst           (iahbl_pad_hburst          ),
  .iahbl_pad_hlock            (iahbl_pad_hlock           ),
  .iahbl_pad_hprot            (iahbl_pad_hprot           ),
  .iahbl_pad_hsize            (iahbl_pad_hsize           ),
  .iahbl_pad_htrans           (iahbl_pad_htrans          ),
  .iahbl_pad_hwdata           (iahbl_pad_hwdata          ),
  .iahbl_pad_hwrite           (iahbl_pad_hwrite          ),
  .iahbl_sysio_idle           (iahbl_sysio_idle          ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .lsu_xx_warm_up             (lsu_xx_warm_up            ),
  .pad_iahbl_hrdata           (pad_iahbl_hrdata          ),
  .pad_iahbl_hready           (pad_iahbl_hready          ),
  .pad_iahbl_hresp            (pad_iahbl_hresp           ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .rtu_yy_xx_async_flush      (rtu_yy_xx_async_flush     ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);





// &Instance("pa_dahbl_top"); @87
pa_dahbl_top  x_pa_dahbl_top (
  .bmu_dahbl_dbus_acc_deny    (bmu_dahbl_dbus_acc_deny   ),
  .bmu_dahbl_dbus_addr        (bmu_dahbl_dbus_addr       ),
  .bmu_dahbl_dbus_burst       (bmu_dahbl_dbus_burst      ),
  .bmu_dahbl_dbus_lock        (bmu_dahbl_dbus_lock       ),
  .bmu_dahbl_dbus_lrsc        (bmu_dahbl_dbus_lrsc       ),
  .bmu_dahbl_dbus_prot        (bmu_dahbl_dbus_prot       ),
  .bmu_dahbl_dbus_req         (bmu_dahbl_dbus_req        ),
  .bmu_dahbl_dbus_req_dp      (bmu_dahbl_dbus_req_dp     ),
  .bmu_dahbl_dbus_seq         (bmu_dahbl_dbus_seq        ),
  .bmu_dahbl_dbus_size        (bmu_dahbl_dbus_size       ),
  .bmu_dahbl_dbus_wdata       (bmu_dahbl_dbus_wdata      ),
  .bmu_dahbl_dbus_write       (bmu_dahbl_dbus_write      ),
  .bmu_dahbl_had_acc_deny     (bmu_dahbl_had_acc_deny    ),
  .bmu_dahbl_had_addr         (bmu_dahbl_had_addr        ),
  .bmu_dahbl_had_burst        (bmu_dahbl_had_burst       ),
  .bmu_dahbl_had_prot         (bmu_dahbl_had_prot        ),
  .bmu_dahbl_had_req          (bmu_dahbl_had_req         ),
  .bmu_dahbl_had_req_dp       (bmu_dahbl_had_req_dp      ),
  .bmu_dahbl_had_seq          (bmu_dahbl_had_seq         ),
  .bmu_dahbl_had_size         (bmu_dahbl_had_size        ),
  .bmu_dahbl_had_wdata        (bmu_dahbl_had_wdata       ),
  .bmu_dahbl_had_write        (bmu_dahbl_had_write       ),
  .bmu_dahbl_ibus_acc_deny    (bmu_dahbl_ibus_acc_deny   ),
  .bmu_dahbl_ibus_addr        (bmu_dahbl_ibus_addr       ),
  .bmu_dahbl_ibus_burst       (bmu_dahbl_ibus_burst      ),
  .bmu_dahbl_ibus_prot        (bmu_dahbl_ibus_prot       ),
  .bmu_dahbl_ibus_req         (bmu_dahbl_ibus_req        ),
  .bmu_dahbl_ibus_req_dp      (bmu_dahbl_ibus_req_dp     ),
  .bmu_dahbl_ibus_seq         (bmu_dahbl_ibus_seq        ),
  .bmu_dahbl_ibus_size        (bmu_dahbl_ibus_size       ),
  .cpurst_b                   (cpurst_b                  ),
  .dahbl_bmu_dbus_acc_err     (dahbl_bmu_dbus_acc_err    ),
  .dahbl_bmu_dbus_data        (dahbl_bmu_dbus_data       ),
  .dahbl_bmu_dbus_grnt        (dahbl_bmu_dbus_grnt       ),
  .dahbl_bmu_dbus_trans_cmplt (dahbl_bmu_dbus_trans_cmplt),
  .dahbl_bmu_had_acc_err      (dahbl_bmu_had_acc_err     ),
  .dahbl_bmu_had_data         (dahbl_bmu_had_data        ),
  .dahbl_bmu_had_grnt         (dahbl_bmu_had_grnt        ),
  .dahbl_bmu_had_trans_cmplt  (dahbl_bmu_had_trans_cmplt ),
  .dahbl_bmu_ibus_acc_err     (dahbl_bmu_ibus_acc_err    ),
  .dahbl_bmu_ibus_data        (dahbl_bmu_ibus_data       ),
  .dahbl_bmu_ibus_grnt        (dahbl_bmu_ibus_grnt       ),
  .dahbl_bmu_ibus_trans_cmplt (dahbl_bmu_ibus_trans_cmplt),
  .dahbl_pad_haddr            (dahbl_pad_haddr           ),
  .dahbl_pad_hburst           (dahbl_pad_hburst          ),
  .dahbl_pad_hlock            (dahbl_pad_hlock           ),
  .dahbl_pad_hprot            (dahbl_pad_hprot           ),
  .dahbl_pad_hsize            (dahbl_pad_hsize           ),
  .dahbl_pad_htrans           (dahbl_pad_htrans          ),
  .dahbl_pad_hwdata           (dahbl_pad_hwdata          ),
  .dahbl_pad_hwrite           (dahbl_pad_hwrite          ),
  .dahbl_sysio_idle           (dahbl_sysio_idle          ),
  .forever_cpuclk             (forever_cpuclk            ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .lsu_xx_warm_up             (lsu_xx_warm_up            ),
  .pad_dahbl_hrdata           (pad_dahbl_hrdata          ),
  .pad_dahbl_hready           (pad_dahbl_hready          ),
  .pad_dahbl_hresp            (pad_dahbl_hresp           ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .rtu_yy_xx_async_flush      (rtu_yy_xx_async_flush     ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);





// &Force("output", "cp0_yy_priv_mode"); @95
// &Instance("pa_hpcp_top"); @96
pa_hpcp_top  x_pa_hpcp_top (
  .cp0_hpcp_index                   (cp0_hpcp_index                  ),
  .cp0_hpcp_pmdm                    (cp0_hpcp_pmdm                   ),
  .cp0_hpcp_pmdu                    (cp0_hpcp_pmdu                   ),
  .cp0_hpcp_wdata                   (cp0_hpcp_wdata                  ),
  .cp0_hpcp_wreg                    (cp0_hpcp_wreg                   ),
  .cp0_yy_priv_mode                 (cp0_yy_priv_mode                ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .hpcp_cp0_data                    (hpcp_cp0_data                   ),
  .ifu_hpcp_icache_access           (ifu_hpcp_icache_access          ),
  .ifu_hpcp_icache_miss             (ifu_hpcp_icache_miss            ),
  .iu_hpcp_inst_bht_mispred         (iu_hpcp_inst_bht_mispred        ),
  .iu_hpcp_inst_condbr              (iu_hpcp_inst_condbr             ),
  .iu_hpcp_inst_condbr_gate         (iu_hpcp_inst_condbr_gate        ),
  .lsu_hpcp_cache_read_access       (lsu_hpcp_cache_read_access      ),
  .lsu_hpcp_cache_read_access_gate  (lsu_hpcp_cache_read_access_gate ),
  .lsu_hpcp_cache_read_miss         (lsu_hpcp_cache_read_miss        ),
  .lsu_hpcp_cache_read_miss_gate    (lsu_hpcp_cache_read_miss_gate   ),
  .lsu_hpcp_cache_write_access      (lsu_hpcp_cache_write_access     ),
  .lsu_hpcp_cache_write_access_gate (lsu_hpcp_cache_write_access_gate),
  .lsu_hpcp_cache_write_miss        (lsu_hpcp_cache_write_miss       ),
  .lsu_hpcp_cache_write_miss_gate   (lsu_hpcp_cache_write_miss_gate  ),
  .lsu_hpcp_inst_store              (lsu_hpcp_inst_store             ),
  .lsu_hpcp_inst_store_gate         (lsu_hpcp_inst_store_gate        ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .rtu_hpcp_retire_inst_vld         (rtu_hpcp_retire_inst_vld        ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .sysio_hpcp_time                  (sysio_hpcp_time                 )
);





// &Instance("pa_sys_io","x_pa_sys_io"); @101
pa_sys_io  x_pa_sys_io (
  .biu_sysio_idle            (biu_sysio_idle           ),
  .clk_en                    (clk_en                   ),
  .cp0_sysio_ipend_b         (cp0_sysio_ipend_b        ),
  .cp0_sysio_lpmd_b          (cp0_sysio_lpmd_b         ),
  .cp0_sysio_srst            (cp0_sysio_srst           ),
  .cpu_pad_dfs_ack           (cpu_pad_dfs_ack          ),
  .cpu_pad_lockup            (cpu_pad_lockup           ),
  .cpu_pad_soft_rst          (cpu_pad_soft_rst         ),
  .cpurst_b                  (cpurst_b                 ),
  .dahbl_sysio_idle          (dahbl_sysio_idle         ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_yy_xx_dbg             (had_yy_xx_dbg            ),
  .iahbl_sysio_idle          (iahbl_sysio_idle         ),
  .pad_cpu_dfs_req           (pad_cpu_dfs_req          ),
  .pad_cpu_ext_int_b         (pad_cpu_ext_int_b        ),
  .pad_cpu_nmi               (pad_cpu_nmi              ),
  .pad_cpu_rst_addr          (pad_cpu_rst_addr         ),
  .pad_cpu_sys_cnt           (pad_cpu_sys_cnt          ),
  .pad_cpu_wakeup_event      (pad_cpu_wakeup_event     ),
  .pad_sysio_dbgrq_b         (pad_sysio_dbgrq_b        ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .rtu_sysio_lockup_on       (rtu_sysio_lockup_on      ),
  .rtu_yy_xx_dbgon           (rtu_yy_xx_dbgon          ),
  .sysio_clint_me_int        (sysio_clint_me_int       ),
  .sysio_clint_mtime         (sysio_clint_mtime        ),
  .sysio_cp0_clk_en          (sysio_cp0_clk_en         ),
  .sysio_cp0_clkratio        (sysio_cp0_clkratio       ),
  .sysio_cp0_rst_addr        (sysio_cp0_rst_addr       ),
  .sysio_cp0_sys_view_lpmd_b (sysio_cp0_sys_view_lpmd_b),
  .sysio_had_sdb_req_b       (sysio_had_sdb_req_b      ),
  .sysio_hpcp_time           (sysio_hpcp_time          ),
  .sysio_ifu_rst_addr        (sysio_ifu_rst_addr       ),
  .sysio_ifu_rst_addr_done   (sysio_ifu_rst_addr_done  ),
  .sysio_iu_rst_addr         (sysio_iu_rst_addr        ),
  .sysio_pad_lpmd_b          (sysio_pad_lpmd_b         ),
  .sysio_rtu_nmi_int         (sysio_rtu_nmi_int        ),
  .sysio_rtu_wk_event        (sysio_rtu_wk_event       ),
  .sysio_xx_halt_req         (sysio_xx_halt_req        )
);


// &ModuleEnd; @103
endmodule
























// &ModuleBeg; @23
module pa_cp0_ext_csr(
  cp0_idu_spec_push_en,
  cp0_idu_swap_sp_en,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_ifu_ras_en,
  cp0_ifu_rst_inv_done,
  cp0_lsu_dcache_en,
  cp0_lsu_dcache_wa,
  cp0_lsu_dcache_wb,
  cp0_lsu_icc_addr,
  cp0_lsu_icc_op,
  cp0_lsu_icc_req,
  cp0_lsu_icc_type,
  cp0_rtu_in_expt,
  cp0_rtu_wfe_en,
  cp0_xx_async_expt_en,
  cpurst_b,
  ext_inst_ifu_icc_addr,
  ext_inst_ifu_icc_req,
  ext_inst_ifu_icc_type,
  ext_inst_ifu_inv_done,
  ext_inst_lsu_icc_addr,
  ext_inst_lsu_icc_done,
  ext_inst_lsu_icc_op,
  ext_inst_lsu_icc_req,
  ext_inst_lsu_icc_type,
  forever_cpuclk,
  ifu_cp0_bht_inv_done,
  ifu_cp0_icache_inv_done,
  ifu_cp0_rst_inv_req,
  inv_sm_clk,
  iui_regs_inst_mret,
  iui_regs_wdata,
  iui_regs_wdata_srst,
  lsu_cp0_icc_done,
  mexstatus_local_en,
  mexstatus_value,
  mhcr_local_en,
  mhcr_value,
  mhint_local_en,
  mhint_value,
  mraddr_value,
  pad_yy_gate_clk_en_b,
  regs_clk,
  regs_cpu_in_int,
  regs_cpu_in_nmi,
  regs_flush_clk,
  regs_special_lpmd,
  regs_spswap_en,
  regs_srst_srst_vld,
  regs_srst_srstmd,
  rtu_cp0_bus_error,
  rtu_cp0_lockup_clr,
  rtu_cp0_lockup_vld,
  rtu_cp0_nmi_vld,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vld,
  special_dcache_clean,
  special_icache_inv,
  special_icache_inv_done,
  special_regs_clk_en,
  special_regs_inv_sm_clk_en,
  sysio_cp0_clkratio,
  sysio_cp0_rst_addr
);

// &Ports; @24
input           cpurst_b;
input   [31:0]  ext_inst_ifu_icc_addr;
input           ext_inst_ifu_icc_req;
input           ext_inst_ifu_icc_type;
input   [31:0]  ext_inst_lsu_icc_addr;
input   [1 :0]  ext_inst_lsu_icc_op;
input           ext_inst_lsu_icc_req;
input   [1 :0]  ext_inst_lsu_icc_type;
input           forever_cpuclk;
input           ifu_cp0_bht_inv_done;
input           ifu_cp0_icache_inv_done;
input           ifu_cp0_rst_inv_req;
input           iui_regs_inst_mret;
input   [31:0]  iui_regs_wdata;
input   [1 :0]  iui_regs_wdata_srst;
input           lsu_cp0_icc_done;
input           mexstatus_local_en;
input           mhcr_local_en;
input           mhint_local_en;
input           pad_yy_gate_clk_en_b;
input           regs_clk;
input           regs_cpu_in_int;
input           regs_flush_clk;
input           rtu_cp0_bus_error;
input           rtu_cp0_lockup_clr;
input           rtu_cp0_lockup_vld;
input           rtu_cp0_nmi_vld;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input           rtu_yy_xx_expt_vld;
input           special_dcache_clean;
input           special_icache_inv;
input           special_regs_clk_en;
input           special_regs_inv_sm_clk_en;
input   [2 :0]  sysio_cp0_clkratio;
input   [31:0]  sysio_cp0_rst_addr;
output          cp0_idu_spec_push_en;
output          cp0_idu_swap_sp_en;
output          cp0_ifu_bht_en;
output          cp0_ifu_bht_inv;
output          cp0_ifu_icache_en;
output  [31:0]  cp0_ifu_icache_inv_addr;
output          cp0_ifu_icache_inv_req;
output          cp0_ifu_icache_inv_type;
output          cp0_ifu_ras_en;
output          cp0_ifu_rst_inv_done;
output          cp0_lsu_dcache_en;
output          cp0_lsu_dcache_wa;
output          cp0_lsu_dcache_wb;
output  [31:0]  cp0_lsu_icc_addr;
output  [1 :0]  cp0_lsu_icc_op;
output          cp0_lsu_icc_req;
output  [1 :0]  cp0_lsu_icc_type;
output          cp0_rtu_in_expt;
output          cp0_rtu_wfe_en;
output          cp0_xx_async_expt_en;
output          ext_inst_ifu_inv_done;
output          ext_inst_lsu_icc_done;
output          inv_sm_clk;
output  [31:0]  mexstatus_value;
output  [31:0]  mhcr_value;
output  [31:0]  mhint_value;
output  [31:0]  mraddr_value;
output          regs_cpu_in_nmi;
output  [1 :0]  regs_special_lpmd;
output          regs_spswap_en;
output          regs_srst_srst_vld;
output  [1 :0]  regs_srst_srstmd;
output          special_icache_inv_done;

// &Regs; @25
reg             bpe;
reg             de;
reg             ie;
reg             l0btb;
reg             mexstatus_bus_err;
reg             mexstatus_expt;
reg             mexstatus_lockup;
reg     [1 :0]  mexstatus_lpmd;
reg             mexstatus_nmi;
reg     [1 :0]  mexstatus_rstmd;
reg             mexstatus_spswapen;
reg             mexstatus_spushen;
reg             mexstatus_wfeen;
reg             mhint_aee;
reg             rs;
reg     [1 :0]  rst_bht_inv;
reg     [1 :0]  rst_bht_inv_nxt;
reg     [1 :0]  rst_cache_inv;
reg     [1 :0]  rst_cache_inv_nxt;
reg     [1 :0]  rst_dcache_inv;
reg     [1 :0]  rst_dcache_inv_nxt;
reg     [1 :0]  rst_icache_inv;
reg     [1 :0]  rst_icache_inv_nxt;
reg             wa;
reg             wb;

// &Wires; @26
wire            bht_inv_req;
wire            bht_rst_inv_req;
wire    [2 :0]  clk_ratio;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_btb_clr;
wire            cp0_ifu_btb_en;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_ifu_ras_en;
wire            cp0_ifu_rst_inv_done;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cp0_lsu_dcache_wb;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire            cp0_rtu_in_expt;
wire            cp0_rtu_wfe_en;
wire            cp0_xx_async_expt_en;
wire            cpurst_b;
wire            dcache_rst_inv_req;
wire            ext_ifu_inv_done;
wire    [31:0]  ext_inst_ifu_icc_addr;
wire            ext_inst_ifu_icc_req;
wire            ext_inst_ifu_icc_type;
wire            ext_inst_ifu_inv_done;
wire    [31:0]  ext_inst_lsu_icc_addr;
wire            ext_inst_lsu_icc_done;
wire    [1 :0]  ext_inst_lsu_icc_op;
wire            ext_inst_lsu_icc_req;
wire    [1 :0]  ext_inst_lsu_icc_type;
wire            forever_cpuclk;
wire            icache_inv_req;
wire            icache_rst_inv_req;
wire            ifu_cp0_bht_inv_done;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_rst_inv_req;
wire            inst_dcache_op;
wire            inst_icache_op;
wire            inv_sm_clk;
wire            inv_sm_clk_en;
wire            iui_regs_inst_mret;
wire    [31:0]  iui_regs_wdata;
wire    [1 :0]  iui_regs_wdata_srst;
wire            lsu_cp0_icc_done;
wire            mexstatus_local_en;
wire    [31:0]  mexstatus_value;
wire            mhcr_local_en;
wire    [31:0]  mhcr_value;
wire            mhint_local_en;
wire    [31:0]  mhint_value;
wire    [31:0]  mraddr_value;
wire            pad_yy_gate_clk_en_b;
wire            regs_clk;
wire            regs_cpu_in_int;
wire            regs_cpu_in_nmi;
wire            regs_doing_inv;
wire            regs_flush_clk;
wire    [1 :0]  regs_special_lpmd;
wire            regs_spswap_en;
wire            regs_srst_srst_vld;
wire    [1 :0]  regs_srst_srstmd;
wire            rst_inv_done;
wire    [1 :0]  rstmd_in;
wire            rtu_cp0_bus_error;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire            rtu_yy_xx_expt_vld;
wire            special_dcache_clean;
wire            special_icache_inv;
wire            special_icache_inv_done;
wire            special_regs_clk_en;
wire            special_regs_inv_sm_clk_en;
wire            srst_vld;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;


// &Force("bus", "iui_regs_wdata", 31, 0); @28






assign clk_ratio[2:0] = sysio_cp0_clkratio[2:0];

always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    l0btb <= 1'b0;
    bpe   <= 1'b0;
    rs    <= 1'b0;
  end
  else if (mhcr_local_en) begin
    l0btb <= iui_regs_wdata[12];
    bpe   <= iui_regs_wdata[5];
    rs    <= iui_regs_wdata[4];
  end
  else begin
    l0btb <= l0btb;
    bpe   <= bpe;
    rs    <= rs;
  end
end

always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    wa    <= 1'b0;
    wb    <= 1'b0;
    de    <= 1'b0;
  end
  else if (mhcr_local_en) begin
    wa    <= iui_regs_wdata[3];
    wb    <= iui_regs_wdata[2];
    de    <= iui_regs_wdata[1];
  end
  else begin
    wa    <= wa;
    wb    <= wb;
    de    <= de;
  end
end

always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    ie    <= 1'b0;
  else if (mhcr_local_en)
    ie    <= iui_regs_wdata[0];
  else
    ie    <= ie;
end

assign mhcr_value[31:0] = {13'b0, clk_ratio[2:0], 3'b0, l0btb, // [31:12]
                           6'b0, bpe, rs, wa, wb, de, ie};     // [11:0]









always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    mhint_aee  <= 1'b0;
  end
  else if (mhint_local_en) begin
    mhint_aee  <= iui_regs_wdata[20];
  end
  else begin
    mhint_aee  <= mhint_aee;
  end
end

assign mhint_value[31:0] = {11'b0, mhint_aee, 20'b0};







assign mraddr_value[31:0] = sysio_cp0_rst_addr[31:0];







assign rstmd_in[1:0] = &iui_regs_wdata_srst[1:0] ? 2'b0 : iui_regs_wdata_srst[1:0];


always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    mexstatus_rstmd[1:0] <= 2'b0;
    mexstatus_lpmd[1:0]  <= 2'b0;
    mexstatus_wfeen      <= 1'b0;
  end
  else if (mexstatus_local_en) begin
    mexstatus_rstmd[1:0] <= rstmd_in[1:0];
    mexstatus_lpmd[1:0]  <= {1'b0, iui_regs_wdata[2]};
    mexstatus_wfeen      <= iui_regs_wdata[4];
  end
end
assign srst_vld = mexstatus_local_en && |rstmd_in[1:0];

always @ (posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    mexstatus_spushen    <= 1'b0;
    mexstatus_spswapen   <= 1'b0;
  end
  else if (mexstatus_local_en) begin
    mexstatus_spushen    <= iui_regs_wdata[16];
    mexstatus_spswapen   <= iui_regs_wdata[17];
  end
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mexstatus_expt <= 1'b0;
  else if (mexstatus_local_en && rtu_yy_xx_dbgon)
    mexstatus_expt <= iui_regs_wdata[5];
  else if (rtu_cp0_lockup_clr)
    mexstatus_expt <= 1'b0;
  else if (rtu_yy_xx_expt_vld && !rtu_yy_xx_expt_int && !rtu_cp0_nmi_vld)
    mexstatus_expt <= 1'b1;
  else if (iui_regs_inst_mret && !mexstatus_nmi && !regs_cpu_in_int)
    mexstatus_expt <= 1'b0;
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mexstatus_nmi <= 1'b0;
  else if (mexstatus_local_en && rtu_yy_xx_dbgon)
    mexstatus_nmi <= iui_regs_wdata[7];
  else if (rtu_cp0_lockup_clr)
    mexstatus_nmi <= 1'b0;
  else if (rtu_cp0_nmi_vld)
    mexstatus_nmi <= 1'b1;
  else if (iui_regs_inst_mret)
    mexstatus_nmi <= 1'b0;
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mexstatus_bus_err <= 1'b0;
  else if (rtu_yy_xx_expt_vld && !rtu_yy_xx_expt_int)
    mexstatus_bus_err <= rtu_cp0_bus_error;
  else if (mexstatus_local_en)
    mexstatus_bus_err <= iui_regs_wdata[8];
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mexstatus_lockup <= 1'b0;
  else if (rtu_cp0_lockup_clr)
    mexstatus_lockup <= 1'b0;
  else if (rtu_cp0_lockup_vld)
    mexstatus_lockup <= 1'b1;
end

assign mexstatus_value[31:0] = {14'b0, mexstatus_spswapen, mexstatus_spushen,
                                7'b0, mexstatus_bus_err, mexstatus_nmi, mexstatus_lockup, mexstatus_expt,
                                mexstatus_wfeen, mexstatus_lpmd[1:0], mexstatus_rstmd[1:0]};






assign inv_sm_clk_en = regs_doing_inv
                    || special_regs_inv_sm_clk_en
                    || inst_dcache_op
                    || icache_inv_req;

// &Instance("gated_clk_cell", "x_inv_sm_gated_clk"); @232
gated_clk_cell  x_inv_sm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (inv_sm_clk          ),
  .external_en          (1'b0                ),
  .global_en            (special_regs_clk_en ),
  .local_en             (1'b0                ),
  .module_en            (inv_sm_clk_en       ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @233
//          .external_en (1'b0), @234
//          .global_en   (special_regs_clk_en), @235
//          .module_en   (inv_sm_clk_en), @236
//          .local_en    (1'b0), @237
//          .clk_out     (inv_sm_clk)); @238
// &Force("output", "inv_sm_clk"); @239

parameter RST_IDLE = 2'b00;
parameter RST_WFC  = 2'b01;
parameter RST_DONE = 2'b10;



always @(posedge inv_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    rst_cache_inv[1:0] <= RST_IDLE;
  else
    rst_cache_inv[1:0] <= rst_cache_inv_nxt[1:0];
end

// &CombBeg; @255
always @( rst_cache_inv
       or rst_inv_done
       or ifu_cp0_rst_inv_req)
begin
case(rst_cache_inv)
  RST_IDLE:
  begin
    if(ifu_cp0_rst_inv_req)
      rst_cache_inv_nxt = RST_WFC;
    else
      rst_cache_inv_nxt = RST_IDLE;
  end
  RST_WFC:
  begin
    if(rst_inv_done)
      rst_cache_inv_nxt = RST_IDLE;
    else
      rst_cache_inv_nxt = RST_WFC;
  end
  default:
  begin
    rst_cache_inv_nxt = RST_IDLE;
  end
endcase
// &CombEnd; @276
end

assign rst_inv_done         = rst_icache_inv == RST_IDLE &&
                              rst_dcache_inv == RST_IDLE &&
                              rst_bht_inv == RST_IDLE;
assign cp0_ifu_rst_inv_done = rst_cache_inv == RST_IDLE && !ifu_cp0_rst_inv_req;




assign inst_icache_op = ext_inst_ifu_icc_req
                     || special_icache_inv;

assign icache_inv_req = (ifu_cp0_rst_inv_req | inst_icache_op) & (rst_bht_inv == RST_IDLE);

always @(posedge inv_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    rst_icache_inv[1:0] <= RST_IDLE;
  else
    rst_icache_inv[1:0] <= rst_icache_inv_nxt[1:0];
end

// &CombBeg; @299
always @( rst_icache_inv
       or ext_ifu_inv_done
       or ifu_cp0_icache_inv_done
       or icache_inv_req)
begin
case(rst_icache_inv)
  RST_IDLE:
  begin
    if(icache_inv_req)
      rst_icache_inv_nxt = RST_WFC;
    else
      rst_icache_inv_nxt = RST_IDLE;
  end
  RST_WFC:
  begin
    if(ifu_cp0_icache_inv_done)
      rst_icache_inv_nxt = RST_DONE;
    else
      rst_icache_inv_nxt = RST_WFC;
  end
  RST_DONE:
    if (ext_ifu_inv_done)
      rst_icache_inv_nxt = RST_IDLE;
    else
      rst_icache_inv_nxt = RST_DONE;
  default:
  begin
    rst_icache_inv_nxt = RST_IDLE;
  end
endcase
// &CombEnd; @325
end

assign bht_inv_req = (ifu_cp0_rst_inv_req | inst_icache_op) & (rst_icache_inv == RST_IDLE);

always @(posedge inv_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    rst_bht_inv[1:0] <= RST_IDLE;
  else
    rst_bht_inv[1:0] <= rst_bht_inv_nxt[1:0];
end

// &CombBeg; @337
always @( bht_inv_req
       or ext_ifu_inv_done
       or ifu_cp0_bht_inv_done
       or rst_bht_inv)
begin
case(rst_bht_inv)
  RST_IDLE:
  begin
    if(bht_inv_req)
      rst_bht_inv_nxt = RST_WFC;
    else
      rst_bht_inv_nxt = RST_IDLE;
  end
  RST_WFC:
  begin
    if(ifu_cp0_bht_inv_done)
      rst_bht_inv_nxt = RST_DONE;
    else
      rst_bht_inv_nxt = RST_WFC;
  end
  RST_DONE:
    if (ext_ifu_inv_done)
      rst_bht_inv_nxt = RST_IDLE;
    else
      rst_bht_inv_nxt = RST_DONE;
  default:
  begin
    rst_bht_inv_nxt = RST_IDLE;
  end
endcase
// &CombEnd; @363
end




assign inst_dcache_op = ext_inst_lsu_icc_req
                     || special_dcache_clean;

always @(posedge inv_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    rst_dcache_inv[1:0] <= RST_IDLE;
  else
    rst_dcache_inv[1:0] <= rst_dcache_inv_nxt[1:0];
end

// &CombBeg; @379
always @( inst_dcache_op
       or rst_dcache_inv
       or ifu_cp0_rst_inv_req
       or lsu_cp0_icc_done)
begin
case(rst_dcache_inv)
  RST_IDLE:
  begin
    if(ifu_cp0_rst_inv_req)
      rst_dcache_inv_nxt = RST_WFC;
    else if (inst_dcache_op)
      rst_dcache_inv_nxt = RST_WFC;
    else
      rst_dcache_inv_nxt = RST_IDLE;
  end
  RST_WFC:
  begin
    if(lsu_cp0_icc_done)
      rst_dcache_inv_nxt = RST_DONE;
    else
      rst_dcache_inv_nxt = RST_WFC;
  end
  RST_DONE:
    rst_dcache_inv_nxt = RST_IDLE;
  default:
  begin
    rst_dcache_inv_nxt = RST_IDLE;
  end
endcase
// &CombEnd; @404
end

assign regs_doing_inv = ifu_cp0_rst_inv_req
                     || !rst_inv_done
                     || rst_dcache_inv != RST_IDLE
                     || rst_icache_inv != RST_IDLE
                     || rst_bht_inv != RST_IDLE
                     || rst_cache_inv != RST_IDLE;

assign ext_ifu_inv_done = rst_bht_inv == RST_DONE
                       && rst_icache_inv == RST_DONE;

assign ext_inst_ifu_inv_done = ext_ifu_inv_done;
assign special_icache_inv_done = ext_ifu_inv_done;
assign ext_inst_lsu_icc_done = rst_dcache_inv == RST_WFC && lsu_cp0_icc_done
                            || rst_dcache_inv == RST_IDLE && !inst_dcache_op;

assign icache_rst_inv_req  = rst_icache_inv == RST_WFC;
assign bht_rst_inv_req     = rst_bht_inv    == RST_WFC;
assign dcache_rst_inv_req  = rst_dcache_inv == RST_WFC;

assign cp0_lsu_icc_req        = dcache_rst_inv_req;
assign cp0_lsu_icc_type[1:0]  = ext_inst_lsu_icc_req ? ext_inst_lsu_icc_type[1:0]
                                                     : 2'b0;
assign cp0_lsu_icc_addr[31:0] = ext_inst_lsu_icc_req ? ext_inst_lsu_icc_addr[31:0]
                                                     : 32'b0;
assign cp0_lsu_icc_op[1:0]    = ext_inst_lsu_icc_req ? ext_inst_lsu_icc_op[1:0]
                              : special_dcache_clean ? 2'b10               // Clean Dcache
                                                     : 2'b01;              // Inv Dcache

assign cp0_ifu_btb_clr = 1'b0;
assign cp0_ifu_btb_en  = l0btb;
assign cp0_ifu_bht_inv = bht_rst_inv_req;
assign cp0_ifu_bht_en  = bpe;
assign cp0_ifu_ras_en  = rs;


// &Force("nonport", "cp0_ifu_btb_clr"); @443
// &Force("nonport", "cp0_ifu_btb_en"); @444

// &Force("nonport", "cp0_ifu_bht_inv"); @449
// &Force("nonport", "cp0_ifu_bht_en"); @450

// &Force("nonport", "cp0_ifu_ras_en"); @455




assign cp0_lsu_dcache_en = de;
assign cp0_lsu_dcache_wb = wb;
assign cp0_lsu_dcache_wa = wa;

assign cp0_ifu_icache_en = ie;
assign cp0_ifu_icache_inv_req = icache_rst_inv_req;
assign cp0_ifu_icache_inv_type = ext_inst_ifu_icc_req ? ext_inst_ifu_icc_type
                                                      : 1'b0;
assign cp0_ifu_icache_inv_addr[31:0] = ext_inst_ifu_icc_addr[31:0];
// &Force("nonport", "icache_rst_inv_req"); @475


assign cp0_xx_async_expt_en = !mhint_aee;




assign regs_special_lpmd[1:0] = mexstatus_lpmd[1:0];
assign regs_srst_srstmd[1:0] = mexstatus_rstmd[1:0];
assign regs_srst_srst_vld = srst_vld;
assign regs_spswap_en = mexstatus_spswapen;
assign regs_cpu_in_nmi = mexstatus_nmi;




assign cp0_rtu_wfe_en = mexstatus_wfeen;
assign cp0_rtu_in_expt = mexstatus_expt;




assign cp0_idu_spec_push_en  = mexstatus_spushen;
assign cp0_idu_swap_sp_en    = mexstatus_spswapen;

// &ModuleEnd; @502
endmodule

























// &ModuleBeg; @23
module pa_cp0_ext_inst(
  ext_inst_ifu_icc_addr,
  ext_inst_ifu_icc_req,
  ext_inst_ifu_icc_type,
  ext_inst_ifu_inv_done,
  ext_inst_lsu_icc_addr,
  ext_inst_lsu_icc_done,
  ext_inst_lsu_icc_op,
  ext_inst_lsu_icc_req,
  ext_inst_lsu_icc_type,
  ext_iui_cache_stall,
  ext_iui_expt_vld,
  iui_ext_inst_cache,
  iui_ext_inst_imm,
  iui_ext_inst_rs1
);

// &Ports; @24
input           ext_inst_ifu_inv_done;
input           ext_inst_lsu_icc_done;
input           iui_ext_inst_cache;
input   [11:0]  iui_ext_inst_imm;
input   [31:0]  iui_ext_inst_rs1;
output  [31:0]  ext_inst_ifu_icc_addr;
output          ext_inst_ifu_icc_req;
output          ext_inst_ifu_icc_type;
output  [31:0]  ext_inst_lsu_icc_addr;
output  [1 :0]  ext_inst_lsu_icc_op;
output          ext_inst_lsu_icc_req;
output  [1 :0]  ext_inst_lsu_icc_type;
output          ext_iui_cache_stall;
output          ext_iui_expt_vld;

// &Regs; @25
reg     [1 :0]  inst_dst;
reg     [1 :0]  inst_type;

// &Wires; @26
wire            cache_inst_illegal;
wire    [1 :0]  cache_inst_op;
wire            cache_inst_rs1;
wire    [2 :0]  cache_inst_type;
wire    [31:0]  ext_inst_ifu_icc_addr;
wire            ext_inst_ifu_icc_req;
wire            ext_inst_ifu_icc_type;
wire            ext_inst_ifu_inv_done;
wire    [31:0]  ext_inst_lsu_icc_addr;
wire            ext_inst_lsu_icc_done;
wire    [1 :0]  ext_inst_lsu_icc_op;
wire            ext_inst_lsu_icc_req;
wire    [1 :0]  ext_inst_lsu_icc_type;
wire            ext_iui_cache_stall;
wire            ext_iui_expt_vld;
wire            iui_ext_inst_cache;
wire    [11:0]  iui_ext_inst_imm;
wire    [31:0]  iui_ext_inst_rs1;


parameter CPU_MODE_U = 2'b00;

parameter NOP    = 2'b00,
          DCHE   = 2'b01,
          ICHE   = 2'b10;

parameter ALL    = 2'b0,
          SETWAY = 2'b01,
          PA     = 2'b10;




assign cache_inst_op[1:0]   = iui_ext_inst_imm[1:0];
assign cache_inst_type[2:0] = iui_ext_inst_imm[4:2];
assign cache_inst_rs1       = iui_ext_inst_imm[5];
// &Force("bus", "iui_ext_inst_imm", 11, 0); @44

// &CombBeg; @46
always @( cache_inst_rs1
       or cache_inst_type[2:0])
begin
  case({cache_inst_rs1, cache_inst_type[2:0]})
    4'b0_000: begin
      inst_dst[1:0]  = DCHE;
      inst_type[1:0] = ALL;
    end
    4'b1_000: begin
      inst_dst[1:0]  = DCHE;
      inst_type[1:0] = SETWAY;
    end
    4'b1_001: begin
      inst_dst[1:0]  = NOP;
      inst_type[1:0] = ALL;
    end
    4'b1_010: begin
      inst_dst[1:0]  = DCHE;
      inst_type[1:0] = PA;
    end
    4'b0_100: begin
      inst_dst[1:0]  = ICHE;
      inst_type[1:0] = ALL;
    end
    4'b1_110: begin
      inst_dst[1:0]  = ICHE;
      inst_type[1:0] = PA;
    end
    4'b1_100: begin
      inst_dst[1:0]  = NOP;
      inst_type[1:0] = ALL;
    end
    4'b0_101: begin
      inst_dst[1:0]  = NOP;
      inst_type[1:0] = ALL;
    end
    default: begin
      inst_dst[1:0]  = NOP;
      inst_type[1:0] = ALL;
    end
  endcase
// &CombEnd; @85
end


assign cache_inst_illegal     = 1'b0; // Now illegal judge is in ID.

assign ext_iui_expt_vld       = cache_inst_illegal;
assign ext_iui_cache_stall    = inst_dst[1] && !ext_inst_ifu_inv_done
                             || inst_dst[0] && !ext_inst_lsu_icc_done;




assign ext_inst_lsu_icc_req        = iui_ext_inst_cache && inst_dst[0] && !cache_inst_illegal;
assign ext_inst_lsu_icc_type[1:0]  = inst_type[1:0];
assign ext_inst_lsu_icc_op[1:0]    = {cache_inst_op[0], cache_inst_op[1]};
assign ext_inst_lsu_icc_addr[31:0] = iui_ext_inst_rs1[31:0];




assign ext_inst_ifu_icc_req        = iui_ext_inst_cache && inst_dst[1] && !cache_inst_illegal;
assign ext_inst_ifu_icc_type       = inst_type[1];
assign ext_inst_ifu_icc_addr[31:0] = iui_ext_inst_rs1[31:0];

// &ModuleEnd; @111
endmodule
























// &ModuleBeg; @23
module pa_cp0_info_csr(
  cpurst_b,
  info_csr_cpuid0_value,
  iui_regs_inst_csr,
  marchid_value,
  mcpuid_local_en,
  mcpuid_value,
  mhartid_value,
  mimpid_value,
  mvendorid_value,
  regs_clk
);

// &Ports; @24
input           cpurst_b;
input           iui_regs_inst_csr;
input           mcpuid_local_en;
input           regs_clk;
output  [31:0]  info_csr_cpuid0_value;
output  [31:0]  marchid_value;
output  [31:0]  mcpuid_value;
output  [31:0]  mhartid_value;
output  [31:0]  mimpid_value;
output  [31:0]  mvendorid_value;

// &Regs; @25
reg     [31:0]  cpuid_value;
reg     [1 :0]  index;

// &Wires; @26
wire    [31:0]  cpuid_index0_value;
wire    [31:0]  cpuid_index1_value;
wire    [31:0]  cpuid_index2_value;
wire            cpurst_b;
wire            index_max;
wire    [1 :0]  index_next_val;
wire    [31:0]  info_csr_cpuid0_value;
wire            iui_regs_inst_csr;
wire    [31:0]  marchid_value;
wire            mcpuid_local_en;
wire    [31:0]  mcpuid_value;
wire    [31:0]  mhartid_value;
wire    [31:0]  mimpid_value;
wire    [31:0]  mvendorid_value;
wire            regs_clk;



















assign mvendorid_value[31:0] = 32'h5B7;








assign marchid_value[31:0] = 32'b0;









assign mimpid_value[31:0] = 32'b0;









assign mhartid_value[31:0] = 32'b0;

















assign index_max = (index[1:0] == 2'd2);
assign index_next_val[1:0] = (index_max) ? 2'd0
                                         : index[1:0] + 2'd1;

always @(posedge regs_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    begin
      index[1:0] <= 2'b0;
    end
  else if (iui_regs_inst_csr && mcpuid_local_en)
    begin
      index[1:0] <= index_next_val[1:0];
    end
  else
    begin
      index[1:0] <= index[1:0];
    end
end




// &CombBeg; @115
always @( cpuid_index1_value[31:0]
       or cpuid_index0_value[31:0]
       or index[1:0]
       or cpuid_index2_value[31:0])
begin
  case(index[1:0])
  2'b00   : cpuid_value[31:0] = cpuid_index0_value[31:0];
  2'b01   : cpuid_value[31:0] = cpuid_index1_value[31:0];
  2'b10   : cpuid_value[31:0] = cpuid_index2_value[31:0];
  default : cpuid_value[31:0] = 32'bx;
  endcase
// &CombEnd; @122
end




    assign cpuid_index0_value[31:28] = 4'b0000;




    assign cpuid_index0_value[27:26] = 2'b10; // CSKY V3 instruction set




    assign cpuid_index0_value[25:22] = 4'b0000; // E Series




    assign cpuid_index0_value[21:18] = 4'b0100; // E906




    assign cpuid_index0_value[17:10] = 8'b0;

    assign cpuid_index0_value[9] = 1'b0;

    assign cpuid_index0_value[8] = 1'b0;




    assign cpuid_index0_value[7:3] = 5'b00001;




    assign cpuid_index0_value[2:0] = 3'b101; //CPID Rev.5




    assign cpuid_index1_value[31:28] = 4'b0001;




    assign cpuid_index1_value[27:24] = `REVISION;




    assign cpuid_index1_value[23:18] = `SUB_VERSION;




    assign cpuid_index1_value[17:12] = `PATCH;




    assign cpuid_index1_value[11:0] = `PRODUCT_ID;




    assign cpuid_index2_value[31:28] = 4'b0010;




    assign cpuid_index2_value[27:26] = 2'b01;




    assign cpuid_index2_value[25:24] = 2'b01;




    assign cpuid_index2_value[23:21] = 3'b001;




    assign cpuid_index2_value[20:16] = 5'b0;




    assign cpuid_index2_value[15:12] = 4'b1111;




    assign cpuid_index2_value[11:9] = 3'b100;




    assign cpuid_index2_value[8:6] = 3'b100;




    assign cpuid_index2_value[5:3] = 3'b111; // 4B




    assign cpuid_index2_value[2:0] = 3'b0;
assign mcpuid_value[31:0] = cpuid_value[31:0];






assign info_csr_cpuid0_value[31:0] = cpuid_index0_value[31:0];

// &ModuleEnd; @331
endmodule
























// &ModuleBeg; @23
module pa_cp0_iui(
  cp0_rtu_chgflw_pc,
  cp0_rtu_chgflw_vld,
  cp0_rtu_ex1_cmplt,
  cp0_rtu_ex1_data,
  cp0_rtu_ex1_expt_vec,
  cp0_rtu_ex1_expt_vld,
  cp0_rtu_ex1_flush,
  cp0_rtu_ex1_inst_bkpt,
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_ex1_stall,
  cp0_rtu_ex1_wb_preg,
  cp0_rtu_ex1_wb_vld,
  ext_iui_cache_stall,
  ext_iui_expt_vld,
  idu_cp0_ex1_dst_idx,
  idu_cp0_ex1_dst_vld,
  idu_cp0_ex1_expt_type,
  idu_cp0_ex1_expt_vld,
  idu_cp0_ex1_func,
  idu_cp0_ex1_inst_bkpt,
  idu_cp0_ex1_opcode,
  idu_cp0_ex1_rs1,
  idu_cp0_ex1_rs2,
  idu_cp0_ex1_sel,
  idu_cp0_ex1_sub_func,
  iui_ext_inst_cache,
  iui_ext_inst_imm,
  iui_ext_inst_rs1,
  iui_regs_csr_mnxti_vld,
  iui_regs_csr_wen,
  iui_regs_imm,
  iui_regs_inst_csr,
  iui_regs_inst_mret,
  iui_regs_wdata,
  iui_regs_wdata_mie,
  iui_regs_wdata_rs1,
  iui_regs_wdata_srst,
  iui_special_ebrek,
  iui_special_ecall,
  iui_special_fence,
  iui_special_fencei,
  iui_special_int_vld,
  iui_special_sync,
  iui_special_synci,
  iui_special_wfi,
  regs_iui_expt_vld,
  regs_iui_mepc,
  regs_iui_mie,
  regs_iui_mnxti_sel,
  regs_iui_mstatus,
  regs_iui_pm,
  regs_iui_rdata,
  rtu_cp0_ex1_dbg_cancel,
  rtu_cp0_wk_int,
  rtu_yy_xx_dbgon,
  special_iui_expt_vld,
  special_iui_stall,
  srst_iui_stall
);

// &Ports; @24
input           ext_iui_cache_stall;
input           ext_iui_expt_vld;
input   [5 :0]  idu_cp0_ex1_dst_idx;
input           idu_cp0_ex1_dst_vld;
input           idu_cp0_ex1_expt_type;
input           idu_cp0_ex1_expt_vld;
input   [4 :0]  idu_cp0_ex1_func;
input   [8 :0]  idu_cp0_ex1_inst_bkpt;
input   [31:0]  idu_cp0_ex1_opcode;
input   [31:0]  idu_cp0_ex1_rs1;
input   [11:0]  idu_cp0_ex1_rs2;
input           idu_cp0_ex1_sel;
input   [4 :0]  idu_cp0_ex1_sub_func;
input           regs_iui_expt_vld;
input   [31:0]  regs_iui_mepc;
input           regs_iui_mie;
input           regs_iui_mnxti_sel;
input   [31:0]  regs_iui_mstatus;
input   [1 :0]  regs_iui_pm;
input   [31:0]  regs_iui_rdata;
input           rtu_cp0_ex1_dbg_cancel;
input           rtu_cp0_wk_int;
input           rtu_yy_xx_dbgon;
input           special_iui_expt_vld;
input           special_iui_stall;
input           srst_iui_stall;
output  [31:0]  cp0_rtu_chgflw_pc;
output          cp0_rtu_chgflw_vld;
output          cp0_rtu_ex1_cmplt;
output  [31:0]  cp0_rtu_ex1_data;
output  [3 :0]  cp0_rtu_ex1_expt_vec;
output          cp0_rtu_ex1_expt_vld;
output          cp0_rtu_ex1_flush;
output  [8 :0]  cp0_rtu_ex1_inst_bkpt;
output          cp0_rtu_ex1_inst_mret;
output          cp0_rtu_ex1_stall;
output  [5 :0]  cp0_rtu_ex1_wb_preg;
output          cp0_rtu_ex1_wb_vld;
output          iui_ext_inst_cache;
output  [11:0]  iui_ext_inst_imm;
output  [31:0]  iui_ext_inst_rs1;
output          iui_regs_csr_mnxti_vld;
output          iui_regs_csr_wen;
output  [11:0]  iui_regs_imm;
output          iui_regs_inst_csr;
output          iui_regs_inst_mret;
output  [31:0]  iui_regs_wdata;
output          iui_regs_wdata_mie;
output  [31:0]  iui_regs_wdata_rs1;
output  [1 :0]  iui_regs_wdata_srst;
output          iui_special_ebrek;
output          iui_special_ecall;
output          iui_special_fence;
output          iui_special_fencei;
output          iui_special_int_vld;
output          iui_special_sync;
output          iui_special_synci;
output          iui_special_wfi;

// &Regs; @25
reg     [3 :0]  iui_expt_vec;

// &Wires; @26
wire    [31:0]  cp0_rtu_chgflw_pc;
wire            cp0_rtu_chgflw_vld;
wire            cp0_rtu_ex1_cmplt;
wire    [31:0]  cp0_rtu_ex1_data;
wire    [3 :0]  cp0_rtu_ex1_expt_vec;
wire            cp0_rtu_ex1_expt_vld;
wire            cp0_rtu_ex1_flush;
wire    [8 :0]  cp0_rtu_ex1_inst_bkpt;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_ex1_stall;
wire    [5 :0]  cp0_rtu_ex1_wb_preg;
wire            cp0_rtu_ex1_wb_vld;
wire            ext_iui_cache_stall;
wire            ext_iui_expt_vld;
wire    [5 :0]  idu_cp0_ex1_dst_idx;
wire            idu_cp0_ex1_dst_vld;
wire            idu_cp0_ex1_expt_type;
wire            idu_cp0_ex1_expt_vld;
wire    [4 :0]  idu_cp0_ex1_func;
wire    [8 :0]  idu_cp0_ex1_inst_bkpt;
wire    [31:0]  idu_cp0_ex1_opcode;
wire    [31:0]  idu_cp0_ex1_rs1;
wire    [11:0]  idu_cp0_ex1_rs2;
wire            idu_cp0_ex1_sel;
wire    [4 :0]  idu_cp0_ex1_sub_func;
wire            iui_accflt_expt_vld;
wire    [31:0]  iui_chgflw_pc;
wire            iui_chgflw_vld;
wire            iui_csr_expt_vld;
wire    [31:0]  iui_csr_mstatus;
wire    [31:0]  iui_csr_rdata;
wire            iui_csr_umode_inv;
wire    [31:0]  iui_csr_wdata;
wire    [31:0]  iui_csr_wdata_mstatus;
wire            iui_csr_wen;
wire            iui_csr_write_inv;
wire    [31:0]  iui_csrrc_rs1;
wire    [31:0]  iui_csrrc_rs1_mstatus;
wire    [31:0]  iui_csrrs_rs1;
wire    [31:0]  iui_csrrs_rs1_mstatus;
wire    [31:0]  iui_csrrw_rs1;
wire            iui_ebreak_expt_vld;
wire            iui_expt_vld;
wire            iui_ext_inst_cache;
wire    [11:0]  iui_ext_inst_imm;
wire    [31:0]  iui_ext_inst_rs1;
wire            iui_illegal_expt_vld;
wire            iui_inst_cache;
wire            iui_inst_cmplt;
wire            iui_inst_csr;
wire    [2 :0]  iui_inst_csr_func;
wire    [4 :0]  iui_inst_dst_idx;
wire            iui_inst_dst_vld;
wire            iui_inst_ebrek;
wire            iui_inst_ecall;
wire            iui_inst_fence;
wire            iui_inst_fenci;
wire            iui_inst_flush;
wire    [4 :0]  iui_inst_func;
wire    [11:0]  iui_inst_imm;
wire            iui_inst_mret;
wire            iui_inst_mret_vld;
wire    [31:0]  iui_inst_rs1;
wire            iui_inst_stall;
wire    [4 :0]  iui_inst_sub_func;
wire            iui_inst_sync;
wire            iui_inst_synci;
wire            iui_inst_vld;
wire            iui_inst_wfi;
wire            iui_mecall_expt_vld;
wire            iui_mret_umode_inv;
wire            iui_regs_csr_mnxti_vld;
wire            iui_regs_csr_wen;
wire    [11:0]  iui_regs_imm;
wire            iui_regs_inst_csr;
wire            iui_regs_inst_mret;
wire    [31:0]  iui_regs_wdata;
wire            iui_regs_wdata_mie;
wire    [31:0]  iui_regs_wdata_rs1;
wire    [1 :0]  iui_regs_wdata_srst;
wire            iui_special_ebrek;
wire            iui_special_ecall;
wire            iui_special_fence;
wire            iui_special_fencei;
wire            iui_special_int_vld;
wire            iui_special_sync;
wire            iui_special_synci;
wire            iui_special_wfi;
wire            iui_uecall_expt_vld;
wire            iui_wfi_umode_inv;
wire            regs_iui_expt_vld;
wire    [31:0]  regs_iui_mepc;
wire            regs_iui_mie;
wire            regs_iui_mnxti_sel;
wire    [31:0]  regs_iui_mstatus;
wire    [1 :0]  regs_iui_pm;
wire    [31:0]  regs_iui_rdata;
wire            rtu_cp0_ex1_dbg_cancel;
wire            rtu_cp0_wk_int;
wire            rtu_yy_xx_dbgon;
wire            special_iui_expt_vld;
wire            special_iui_stall;
wire            srst_iui_stall;
















assign iui_inst_vld           = idu_cp0_ex1_sel && !idu_cp0_ex1_expt_vld && !rtu_cp0_ex1_dbg_cancel;
assign iui_inst_func[4:0]     = idu_cp0_ex1_func[4:0];
assign iui_inst_sub_func[4:0] = idu_cp0_ex1_sub_func[4:0];
assign iui_inst_dst_vld       = idu_cp0_ex1_sel && idu_cp0_ex1_dst_vld;
assign iui_inst_dst_idx[4:0]  = idu_cp0_ex1_dst_idx[4:0];
// &Force("bus", "idu_cp0_ex1_dst_idx", 5, 0); @47
assign iui_inst_rs1[31:0]     = idu_cp0_ex1_rs1[31:0];
assign iui_inst_imm[11:0]     = {12{idu_cp0_ex1_sel}} & idu_cp0_ex1_rs2[11:0];



assign iui_inst_csr = iui_inst_vld && iui_inst_func[0];
assign iui_csr_wen  = iui_inst_vld && iui_inst_func[0]
                   && !iui_inst_sub_func[3];


assign iui_inst_csr_func[2:0] = {3{idu_cp0_ex1_func[0]}}
                              & idu_cp0_ex1_sub_func[2:0];


assign iui_csr_rdata[31:0] = regs_iui_rdata[31:0];
assign iui_csrrw_rs1[31:0] = iui_inst_rs1[31:0];
assign iui_csrrs_rs1[31:0] = iui_csr_rdata[31:0] |   iui_inst_rs1[31:0];
assign iui_csrrc_rs1[31:0] = iui_csr_rdata[31:0] & (~iui_inst_rs1[31:0]);

assign iui_csr_wdata[31:0] = {32{iui_inst_csr_func[0]}} & iui_csrrw_rs1[31:0]
                           | {32{iui_inst_csr_func[1]}} & iui_csrrs_rs1[31:0]
                           | {32{iui_inst_csr_func[2]}} & iui_csrrc_rs1[31:0];
assign iui_regs_csr_mnxti_vld = !(iui_inst_rs1 == 32'b0 && (iui_inst_csr_func[1]
                                                         || iui_inst_csr_func[2]));

assign iui_csr_mstatus[31:0] = regs_iui_mstatus[31:0];
assign iui_csrrs_rs1_mstatus[31:0] = iui_csr_mstatus[31:0] |   iui_inst_rs1[31:0];
assign iui_csrrc_rs1_mstatus[31:0] = iui_csr_mstatus[31:0] & (~iui_inst_rs1[31:0]);

assign iui_csr_wdata_mstatus[31:0] = {32{iui_inst_csr_func[0]}} & iui_csrrw_rs1[31:0]
                           | {32{iui_inst_csr_func[1]}} & iui_csrrs_rs1_mstatus[31:0]
                           | {32{iui_inst_csr_func[2]}} & iui_csrrc_rs1_mstatus[31:0];

assign iui_regs_wdata_srst[1:0] = {2{|iui_inst_csr_func[1:0]}} & iui_inst_rs1[1:0]; // srst[1:0] is always 2'b0.
assign iui_regs_wdata_mie  = iui_inst_csr_func[0] && iui_inst_rs1[3]
                          || iui_inst_csr_func[1] && (regs_iui_mie ||  iui_inst_rs1[3])
                          || iui_inst_csr_func[2] && (regs_iui_mie && !iui_inst_rs1[3]);



assign iui_inst_fence = iui_inst_vld && iui_inst_func[1]
                     && iui_inst_sub_func[0];
assign iui_inst_fenci = iui_inst_vld && iui_inst_func[1]
                     && iui_inst_sub_func[1];
assign iui_inst_sync  = iui_inst_vld && iui_inst_func[1]
                     && iui_inst_sub_func[2];
assign iui_inst_synci = iui_inst_vld && iui_inst_func[1]
                      && iui_inst_sub_func[3];
assign iui_inst_ecall = iui_inst_vld && iui_inst_func[2]
                     && iui_inst_sub_func[0] && !rtu_yy_xx_dbgon;
assign iui_inst_ebrek = iui_inst_vld && iui_inst_func[2]
                     && iui_inst_sub_func[1] && !rtu_yy_xx_dbgon;
assign iui_inst_mret  = iui_inst_vld && iui_inst_func[2]
                     && iui_inst_sub_func[2];
assign iui_inst_wfi   = iui_inst_vld && iui_inst_func[2]
                     && iui_inst_sub_func[3] && !rtu_yy_xx_dbgon;
assign iui_inst_cache = iui_inst_vld && iui_inst_func[2]
                     && iui_inst_sub_func[4];












assign iui_inst_cmplt = idu_cp0_ex1_sel && !iui_inst_stall;
assign iui_inst_stall = iui_inst_cache && ext_iui_cache_stall
                     || srst_iui_stall
                     || special_iui_stall;

assign iui_inst_flush = iui_inst_cmplt && !(iui_inst_func[0] && iui_inst_sub_func[3]
                                         || iui_inst_fence || iui_inst_sync)
                        && !idu_cp0_ex1_expt_vld;




assign iui_csr_write_inv = iui_csr_wen && iui_inst_imm[11:10] == 2'b11;
assign iui_csr_umode_inv = regs_iui_pm[1:0] == 2'b00 && !rtu_yy_xx_dbgon
                         && iui_inst_csr && iui_inst_imm[9:8] != 2'b00;
assign iui_mret_umode_inv = regs_iui_pm[1:0] == 2'b00 && iui_inst_mret && !rtu_yy_xx_dbgon;
assign iui_wfi_umode_inv  = regs_iui_pm[1:0] == 2'b00 && iui_inst_wfi && !rtu_yy_xx_dbgon;
assign iui_csr_expt_vld  = iui_csr_write_inv || iui_csr_umode_inv
                        || iui_inst_csr && regs_iui_expt_vld
                        || iui_inst_cache && ext_iui_expt_vld;
assign iui_expt_vld      = (idu_cp0_ex1_expt_vld
                          || iui_csr_expt_vld
                          || iui_mret_umode_inv
                          || iui_wfi_umode_inv
                          || special_iui_expt_vld)
                          && idu_cp0_ex1_sel;













assign iui_accflt_expt_vld  = idu_cp0_ex1_expt_vld && idu_cp0_ex1_expt_type;
assign iui_illegal_expt_vld = idu_cp0_ex1_expt_vld && !idu_cp0_ex1_expt_type
                           || iui_csr_expt_vld
                           || iui_mret_umode_inv
                           || iui_wfi_umode_inv;
assign iui_mecall_expt_vld  = iui_inst_ecall && regs_iui_pm[1:0] == 2'b11;
assign iui_uecall_expt_vld  = iui_inst_ecall && regs_iui_pm[1:0] == 2'b00;
assign iui_ebreak_expt_vld  = iui_inst_ebrek;

// &CombBeg; @166
always @( iui_illegal_expt_vld
       or iui_uecall_expt_vld
       or iui_mecall_expt_vld
       or iui_ebreak_expt_vld
       or iui_accflt_expt_vld)
begin
  if(iui_accflt_expt_vld)
    iui_expt_vec[3:0] = 4'd1;
  else if(iui_illegal_expt_vld)
    iui_expt_vec[3:0] = 4'd2;
  else if(iui_mecall_expt_vld)
    iui_expt_vec[3:0] = 4'd11;
  else if(iui_uecall_expt_vld)
    iui_expt_vec[3:0] = 4'd8;
  else if(iui_ebreak_expt_vld)
    iui_expt_vec[3:0] = 4'd3;
  else
    iui_expt_vec[3:0] = 4'd0;
// &CombEnd; @179
end


assign iui_inst_mret_vld   = iui_inst_mret && !iui_mret_umode_inv;
assign iui_chgflw_vld      = iui_inst_mret_vld;
assign iui_chgflw_pc[31:0] = regs_iui_mepc[31:0];






assign iui_regs_imm[11:0]       = iui_inst_imm[11:0];
assign iui_regs_csr_wen         = iui_csr_wen && !iui_csr_expt_vld;
assign iui_regs_wdata[31:0]     = regs_iui_mnxti_sel ? iui_csr_wdata_mstatus[31:0]
                                                     : iui_csr_wdata[31:0];
assign iui_regs_wdata_rs1[31:0] = iui_csrrw_rs1[31:0];
assign iui_regs_inst_csr        = iui_inst_csr && !iui_csr_expt_vld;
assign iui_regs_inst_mret       = iui_inst_mret_vld;


assign iui_special_fence   = iui_inst_fence;
assign iui_special_fencei  = iui_inst_fenci;
assign iui_special_sync    = iui_inst_sync;
assign iui_special_synci   = iui_inst_synci;
assign iui_special_ecall   = iui_inst_ecall;
assign iui_special_ebrek   = iui_inst_ebrek;
assign iui_special_wfi     = iui_inst_wfi  && !iui_wfi_umode_inv;
assign iui_special_int_vld = rtu_cp0_wk_int;


assign iui_ext_inst_imm[11:0] = iui_inst_imm[11:0];
assign iui_ext_inst_cache     = iui_inst_cache;
assign iui_ext_inst_rs1[31:0] = iui_inst_rs1[31:0];


assign cp0_rtu_ex1_cmplt = iui_inst_cmplt;
assign cp0_rtu_ex1_flush = iui_inst_flush;
assign cp0_rtu_ex1_stall = iui_inst_stall;

assign cp0_rtu_ex1_expt_vld      = iui_expt_vld;
assign cp0_rtu_ex1_expt_vec[3:0] = iui_expt_vec[3:0];

assign cp0_rtu_chgflw_vld       = iui_chgflw_vld;
assign cp0_rtu_chgflw_pc[31:0]  = iui_chgflw_pc[31:0];

assign cp0_rtu_ex1_wb_vld       = iui_inst_dst_vld && !iui_expt_vld;
assign cp0_rtu_ex1_wb_preg[5:0] = {1'b0, iui_inst_dst_idx[4:0]};
assign cp0_rtu_ex1_data[31:0]   = iui_expt_vld ? idu_cp0_ex1_opcode[31:0]
                                               : regs_iui_rdata[31:0];

assign cp0_rtu_ex1_inst_bkpt[8:0] = idu_cp0_ex1_inst_bkpt[8:0];

assign cp0_rtu_ex1_inst_mret    = iui_inst_mret_vld;



// &ModuleEnd; @238
endmodule
























// &ModuleBeg; @23
module pa_cp0_regs(
  cp0_had_cpuid_idx0,
  cp0_had_mcause_data,
  cp0_hpcp_index,
  cp0_hpcp_pmdm,
  cp0_hpcp_pmdu,
  cp0_hpcp_wdata,
  cp0_hpcp_wreg,
  cp0_idu_mcause,
  cp0_idu_mepc,
  cp0_idu_sp_use_scratch,
  cp0_idu_sp_wdata,
  cp0_idu_sp_wen,
  cp0_idu_sp_wen_gate,
  cp0_idu_spec_push_en,
  cp0_idu_swap_sp_en,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_ifu_mtvec,
  cp0_ifu_ras_en,
  cp0_ifu_rst_inv_done,
  cp0_lsu_dcache_en,
  cp0_lsu_dcache_wa,
  cp0_lsu_dcache_wb,
  cp0_lsu_icc_addr,
  cp0_lsu_icc_op,
  cp0_lsu_icc_req,
  cp0_lsu_icc_type,
  cp0_lsu_mm,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cp0_rtu_in_expt,
  cp0_rtu_in_nmi,
  cp0_rtu_int_id,
  cp0_rtu_int_level,
  cp0_rtu_int_mode,
  cp0_rtu_mie,
  cp0_rtu_mnxti_vld,
  cp0_rtu_mpil,
  cp0_rtu_pm_bypass,
  cp0_rtu_wfe_en,
  cp0_xx_async_expt_en,
  cp0_yy_cskyisaee,
  cp0_yy_mach_mode,
  cp0_yy_priv_mode,
  cpurst_b,
  ext_inst_ifu_icc_addr,
  ext_inst_ifu_icc_req,
  ext_inst_ifu_icc_type,
  ext_inst_ifu_inv_done,
  ext_inst_lsu_icc_addr,
  ext_inst_lsu_icc_done,
  ext_inst_lsu_icc_op,
  ext_inst_lsu_icc_req,
  ext_inst_lsu_icc_type,
  forever_cpuclk,
  had_cp0_mcause_data,
  hpcp_cp0_data,
  idu_cp0_ipop_data,
  idu_cp0_mcause_wen,
  idu_cp0_mepc_wen,
  idu_cp0_sp_reg,
  idu_cp0_sp_swap_pending,
  idu_cp0_sp_swap_req,
  idu_cp0_sp_swap_req_gate,
  idu_yy_xx_tail_ack,
  ifu_cp0_bht_inv_done,
  ifu_cp0_icache_inv_done,
  ifu_cp0_rst_inv_req,
  ifu_cp0_vec_err,
  ifu_cp0_vec_succeed,
  inv_sm_clk,
  iui_regs_csr_mnxti_vld,
  iui_regs_csr_wen,
  iui_regs_imm,
  iui_regs_inst_csr,
  iui_regs_inst_mret,
  iui_regs_wdata,
  iui_regs_wdata_mie,
  iui_regs_wdata_rs1,
  iui_regs_wdata_srst,
  lsu_cp0_icc_done,
  pad_yy_gate_clk_en_b,
  regs_iui_expt_vld,
  regs_iui_mepc,
  regs_iui_mie,
  regs_iui_mnxti_sel,
  regs_iui_mstatus,
  regs_iui_pm,
  regs_iui_rdata,
  regs_special_lpmd,
  regs_srst_srst_vld,
  regs_srst_srstmd,
  rtu_cp0_bus_error,
  rtu_cp0_epc,
  rtu_cp0_expt_mtval,
  rtu_cp0_int_level,
  rtu_cp0_int_vld_raw,
  rtu_cp0_lockup_clr,
  rtu_cp0_lockup_vld,
  rtu_cp0_mie_en,
  rtu_cp0_mie_en_gate,
  rtu_cp0_mnxti_pending_vld,
  rtu_cp0_nmi_vld,
  rtu_cp0_pending_int_hv,
  rtu_cp0_pending_int_id,
  rtu_cp0_pending_int_level,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vec,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_tail_int_vld,
  special_dcache_clean,
  special_icache_inv,
  special_icache_inv_done,
  special_regs_clk_en,
  special_regs_inv_sm_clk_en,
  sysio_cp0_clkratio,
  sysio_cp0_rst_addr,
  tcip_cp0_clic_base
);

// &Ports; @24
input           cpurst_b;
input   [31:0]  ext_inst_ifu_icc_addr;
input           ext_inst_ifu_icc_req;
input           ext_inst_ifu_icc_type;
input   [31:0]  ext_inst_lsu_icc_addr;
input   [1 :0]  ext_inst_lsu_icc_op;
input           ext_inst_lsu_icc_req;
input   [1 :0]  ext_inst_lsu_icc_type;
input           forever_cpuclk;
input   [31:0]  had_cp0_mcause_data;
input   [31:0]  hpcp_cp0_data;
input   [31:0]  idu_cp0_ipop_data;
input           idu_cp0_mcause_wen;
input           idu_cp0_mepc_wen;
input   [31:0]  idu_cp0_sp_reg;
input           idu_cp0_sp_swap_pending;
input           idu_cp0_sp_swap_req;
input           idu_cp0_sp_swap_req_gate;
input           idu_yy_xx_tail_ack;
input           ifu_cp0_bht_inv_done;
input           ifu_cp0_icache_inv_done;
input           ifu_cp0_rst_inv_req;
input           ifu_cp0_vec_err;
input           ifu_cp0_vec_succeed;
input           iui_regs_csr_mnxti_vld;
input           iui_regs_csr_wen;
input   [11:0]  iui_regs_imm;
input           iui_regs_inst_csr;
input           iui_regs_inst_mret;
input   [31:0]  iui_regs_wdata;
input           iui_regs_wdata_mie;
input   [31:0]  iui_regs_wdata_rs1;
input   [1 :0]  iui_regs_wdata_srst;
input           lsu_cp0_icc_done;
input           pad_yy_gate_clk_en_b;
input           rtu_cp0_bus_error;
input   [31:0]  rtu_cp0_epc;
input   [31:0]  rtu_cp0_expt_mtval;
input   [7 :0]  rtu_cp0_int_level;
input           rtu_cp0_int_vld_raw;
input           rtu_cp0_lockup_clr;
input           rtu_cp0_lockup_vld;
input           rtu_cp0_mie_en;
input           rtu_cp0_mie_en_gate;
input           rtu_cp0_mnxti_pending_vld;
input           rtu_cp0_nmi_vld;
input           rtu_cp0_pending_int_hv;
input   [11:0]  rtu_cp0_pending_int_id;
input   [7 :0]  rtu_cp0_pending_int_level;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input   [11:0]  rtu_yy_xx_expt_vec;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_expt_vld_gate;
input           rtu_yy_xx_int_hv;
input           rtu_yy_xx_tail_int_vld;
input           special_dcache_clean;
input           special_icache_inv;
input           special_regs_clk_en;
input           special_regs_inv_sm_clk_en;
input   [2 :0]  sysio_cp0_clkratio;
input   [31:0]  sysio_cp0_rst_addr;
input   [31:0]  tcip_cp0_clic_base;
output  [31:0]  cp0_had_cpuid_idx0;
output  [31:0]  cp0_had_mcause_data;
output  [11:0]  cp0_hpcp_index;
output          cp0_hpcp_pmdm;
output          cp0_hpcp_pmdu;
output  [31:0]  cp0_hpcp_wdata;
output          cp0_hpcp_wreg;
output  [31:0]  cp0_idu_mcause;
output  [31:0]  cp0_idu_mepc;
output          cp0_idu_sp_use_scratch;
output  [31:0]  cp0_idu_sp_wdata;
output          cp0_idu_sp_wen;
output          cp0_idu_sp_wen_gate;
output          cp0_idu_spec_push_en;
output          cp0_idu_swap_sp_en;
output          cp0_ifu_bht_en;
output          cp0_ifu_bht_inv;
output          cp0_ifu_icache_en;
output  [31:0]  cp0_ifu_icache_inv_addr;
output          cp0_ifu_icache_inv_req;
output          cp0_ifu_icache_inv_type;
output  [31:0]  cp0_ifu_mtvec;
output          cp0_ifu_ras_en;
output          cp0_ifu_rst_inv_done;
output          cp0_lsu_dcache_en;
output          cp0_lsu_dcache_wa;
output          cp0_lsu_dcache_wb;
output  [31:0]  cp0_lsu_icc_addr;
output  [1 :0]  cp0_lsu_icc_op;
output          cp0_lsu_icc_req;
output  [1 :0]  cp0_lsu_icc_type;
output          cp0_lsu_mm;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output          cp0_rtu_in_expt;
output          cp0_rtu_in_nmi;
output  [11:0]  cp0_rtu_int_id;
output  [7 :0]  cp0_rtu_int_level;
output  [1 :0]  cp0_rtu_int_mode;
output          cp0_rtu_mie;
output          cp0_rtu_mnxti_vld;
output  [7 :0]  cp0_rtu_mpil;
output  [1 :0]  cp0_rtu_pm_bypass;
output          cp0_rtu_wfe_en;
output          cp0_xx_async_expt_en;
output          cp0_yy_cskyisaee;
output          cp0_yy_mach_mode;
output  [1 :0]  cp0_yy_priv_mode;
output          ext_inst_ifu_inv_done;
output          ext_inst_lsu_icc_done;
output          inv_sm_clk;
output          regs_iui_expt_vld;
output  [31:0]  regs_iui_mepc;
output          regs_iui_mie;
output          regs_iui_mnxti_sel;
output  [31:0]  regs_iui_mstatus;
output  [1 :0]  regs_iui_pm;
output  [31:0]  regs_iui_rdata;
output  [1 :0]  regs_special_lpmd;
output          regs_srst_srst_vld;
output  [1 :0]  regs_srst_srstmd;
output          special_icache_inv_done;

// &Regs; @25
reg     [31:0]  regs_csr_rdata;
reg             regs_imm_inv;

// &Wires; @26
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [31:0]  cp0_had_mcause_data;
wire    [11:0]  cp0_hpcp_index;
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_hpcp_wdata;
wire            cp0_hpcp_wreg;
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire    [31:0]  cp0_ifu_mtvec;
wire            cp0_ifu_ras_en;
wire            cp0_ifu_rst_inv_done;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cp0_lsu_dcache_wb;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire            cp0_lsu_mm;
wire    [31:0]  cp0_pad_mcause;
wire    [31:0]  cp0_pad_mintstatus;
wire    [31:0]  cp0_pad_mstatus;
wire            cp0_rtu_in_expt;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire    [1 :0]  cp0_rtu_int_mode;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_rtu_wfe_en;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_cskyisaee;
wire            cp0_yy_mach_mode;
wire    [1 :0]  cp0_yy_priv_mode;
wire            cpurst_b;
wire    [31:0]  ext_inst_ifu_icc_addr;
wire            ext_inst_ifu_icc_req;
wire            ext_inst_ifu_icc_type;
wire            ext_inst_ifu_inv_done;
wire    [31:0]  ext_inst_lsu_icc_addr;
wire            ext_inst_lsu_icc_done;
wire    [1 :0]  ext_inst_lsu_icc_op;
wire            ext_inst_lsu_icc_req;
wire    [1 :0]  ext_inst_lsu_icc_type;
wire            forever_cpuclk;
wire    [31:0]  hpcp_cp0_data;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_yy_xx_tail_ack;
wire            ifu_cp0_bht_inv_done;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_rst_inv_req;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire    [31:0]  info_csr_cpuid0_value;
wire            inv_sm_clk;
wire            iui_regs_csr_mnxti_vld;
wire            iui_regs_csr_wen;
wire    [11:0]  iui_regs_imm;
wire            iui_regs_inst_csr;
wire            iui_regs_inst_mret;
wire    [31:0]  iui_regs_wdata;
wire            iui_regs_wdata_mie;
wire    [31:0]  iui_regs_wdata_rs1;
wire    [1 :0]  iui_regs_wdata_srst;
wire            lsu_cp0_icc_done;
wire    [31:0]  marchid_value;
wire            mcause_local_en;
wire    [31:0]  mcause_value;
wire    [31:0]  mclicbase_value;
wire            mcnten_local_en;
wire    [31:0]  mcnten_value;
wire            mcpuid_local_en;
wire    [31:0]  mcpuid_value;
wire    [31:0]  medeleg_value;
wire            mepc_local_en;
wire    [31:0]  mepc_value;
wire            mexstatus_local_en;
wire    [31:0]  mexstatus_value;
wire    [31:0]  mhartid_value;
wire            mhcr_local_en;
wire    [31:0]  mhcr_value;
wire            mhint_local_en;
wire    [31:0]  mhint_value;
wire    [31:0]  mideleg_value;
wire    [31:0]  mie_value;
wire    [31:0]  mimpid_value;
wire    [31:0]  mintstatus_value;
wire    [31:0]  mip_value;
wire    [31:0]  misa_value;
wire            mnmicause_local_en;
wire    [31:0]  mnmicause_value;
wire            mnmipc_local_en;
wire    [31:0]  mnmipc_value;
wire            mnxti_local_en;
wire    [31:0]  mnxti_value;
wire    [31:0]  mraddr_value;
wire            mscratch_local_en;
wire    [31:0]  mscratch_value;
wire            mscratchcsw_local_en;
wire    [31:0]  mscratchcsw_value;
wire            mscratchcswl_local_en;
wire    [31:0]  mscratchcswl_value;
wire            mstatus_local_en;
wire    [31:0]  mstatus_value;
wire            mtval_local_en;
wire    [31:0]  mtval_value;
wire            mtvec_local_en;
wire    [29:0]  mtvec_rslt;
wire    [31:0]  mtvec_value;
wire            mtvt_local_en;
wire    [31:0]  mtvt_value;
wire    [31:0]  mvendorid_value;
wire            mxstatus_local_en;
wire    [31:0]  mxstatus_value;
wire            pad_yy_gate_clk_en_b;
wire            regs_clk;
wire            regs_cpu_in_int;
wire            regs_cpu_in_nmi;
wire    [11:0]  regs_csr_imm;
wire            regs_csr_wen;
wire            regs_flush_clk;
wire            regs_flush_icg_en;
wire            regs_icg_en;
wire            regs_iui_expt_vld;
wire    [31:0]  regs_iui_mepc;
wire            regs_iui_mie;
wire            regs_iui_mnxti_sel;
wire    [31:0]  regs_iui_mstatus;
wire    [1 :0]  regs_iui_pm;
wire    [31:0]  regs_iui_rdata;
wire            regs_mach_mode;
wire    [1 :0]  regs_special_lpmd;
wire            regs_spswap_en;
wire            regs_srst_srst_vld;
wire    [1 :0]  regs_srst_srstmd;
wire            regs_swap_int_sp_en_gate;
wire            rtu_cp0_bus_error;
wire    [31:0]  rtu_cp0_epc;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mie_en_gate;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_tail_int_vld;
wire            special_dcache_clean;
wire            special_icache_inv;
wire            special_icache_inv_done;
wire            special_regs_clk_en;
wire            special_regs_inv_sm_clk_en;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;
wire    [31:0]  tcip_cp0_clic_base;
wire    [1 :0]  trap_csr_pm;
















assign regs_icg_en = iui_regs_csr_wen
                  || iui_regs_inst_csr && mcpuid_local_en;  // cpuid index

// &Instance("gated_clk_cell", "x_cp0_regs_icg_cell"); @45
gated_clk_cell  x_cp0_regs_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (regs_clk            ),
  .external_en          (1'b0                ),
  .global_en            (special_regs_clk_en ),
  .local_en             (regs_icg_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @46
//          .external_en (1'b0), @47
//          .global_en   (special_regs_clk_en), @48
//          .module_en   (1'b0), @49
//          .local_en    (regs_icg_en), @50
//          .clk_out     (regs_clk)); @51

assign regs_flush_icg_en = iui_regs_inst_csr
                        || iui_regs_inst_mret
                        || rtu_yy_xx_expt_vld_gate
                        || ifu_cp0_vec_succeed
                        || rtu_cp0_lockup_vld
                        || rtu_cp0_lockup_clr
                        || rtu_cp0_mie_en_gate
                        || idu_cp0_mepc_wen
                        || idu_cp0_mcause_wen
                        || idu_yy_xx_tail_ack
                        || regs_swap_int_sp_en_gate;
// &Instance("gated_clk_cell", "x_cp0_regs_flush_icg_cell"); @64
gated_clk_cell  x_cp0_regs_flush_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (regs_flush_clk      ),
  .external_en          (1'b0                ),
  .global_en            (special_regs_clk_en ),
  .local_en             (regs_flush_icg_en   ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @65
//          .external_en (1'b0), @66
//          .global_en   (special_regs_clk_en), @67
//          .module_en   (1'b0), @68
//          .local_en    (regs_flush_icg_en), @69
//          .clk_out     (regs_flush_clk)); @70










parameter MVENDORID = 12'hF11;
parameter MARCHID   = 12'hF12;
parameter MIMPID    = 12'hF13;
parameter MHARTID   = 12'hF14;


parameter MSTATUS   = 12'h300;
parameter MISA      = 12'h301;
parameter MEDELEG   = 12'h302;
parameter MIDELEG   = 12'h303;
parameter MIE       = 12'h304;
parameter MTVEC     = 12'h305;
parameter MCNTEN    = 12'h306;
parameter MTVT      = 12'h307;


parameter MSCRATCH  = 12'h340;
parameter MEPC      = 12'h341;
parameter MCAUSE    = 12'h342;
parameter MTVAL     = 12'h343;
parameter MIP       = 12'h344;
parameter MNXTI        = 12'h345;
parameter MINTSTATUS   = 12'h346;
parameter MSCRATCHCSW  = 12'h348;
parameter MSCRATCHCSWL = 12'h349;
parameter MCLICBASE    = 12'h350;



parameter PMPCFG0   = 12'h3A0;
parameter PMPCFG1   = 12'h3A1;
parameter PMPCFG2   = 12'h3A2;
parameter PMPCFG3   = 12'h3A3;
parameter PMPADDR0  = 12'h3B0;
parameter PMPADDR1  = 12'h3B1;
parameter PMPADDR2  = 12'h3B2;
parameter PMPADDR3  = 12'h3B3;
parameter PMPADDR4  = 12'h3B4;
parameter PMPADDR5  = 12'h3B5;
parameter PMPADDR6  = 12'h3B6;
parameter PMPADDR7  = 12'h3B7;
parameter PMPADDR8  = 12'h3B8;
parameter PMPADDR9  = 12'h3B9;
parameter PMPADDR10 = 12'h3BA;
parameter PMPADDR11 = 12'h3BB;
parameter PMPADDR12 = 12'h3BC;
parameter PMPADDR13 = 12'h3BD;
parameter PMPADDR14 = 12'h3BE;
parameter PMPADDR15 = 12'h3BF;



parameter MCNTINHBT = 12'h320;
parameter MHPMEVT3  = 12'h323;
parameter MHPMEVT4  = 12'h324;
parameter MHPMEVT5  = 12'h325;
parameter MHPMEVT6  = 12'h326;
parameter MHPMEVT7  = 12'h327;
parameter MHPMEVT8  = 12'h328;
parameter MHPMEVT9  = 12'h329;
parameter MHPMEVT10 = 12'h32A;
parameter MHPMEVT11 = 12'h32B;
parameter MHPMEVT12 = 12'h32C;
parameter MHPMEVT13 = 12'h32D;
parameter MHPMEVT14 = 12'h32E;
parameter MHPMEVT15 = 12'h32F;
parameter MHPMEVT16 = 12'h330;
parameter MHPMEVT17 = 12'h331;
parameter MHPMEVT18 = 12'h332;
parameter MHPMEVT19 = 12'h333;
parameter MHPMEVT20 = 12'h334;
parameter MHPMEVT21 = 12'h335;
parameter MHPMEVT22 = 12'h336;
parameter MHPMEVT23 = 12'h337;
parameter MHPMEVT24 = 12'h338;
parameter MHPMEVT25 = 12'h339;
parameter MHPMEVT26 = 12'h33A;
parameter MHPMEVT27 = 12'h33B;
parameter MHPMEVT28 = 12'h33C;
parameter MHPMEVT29 = 12'h33D;
parameter MHPMEVT30 = 12'h33E;
parameter MHPMEVT31 = 12'h33F;



parameter MCYCLE    = 12'hB00;
parameter MINSTRET  = 12'hB02;
parameter MHPMCNT3  = 12'hB03;
parameter MHPMCNT4  = 12'hB04;
parameter MHPMCNT5  = 12'hB05;
parameter MHPMCNT6  = 12'hB06;
parameter MHPMCNT7  = 12'hB07;
parameter MHPMCNT8  = 12'hB08;
parameter MHPMCNT9  = 12'hB09;
parameter MHPMCNT10 = 12'hB0A;
parameter MHPMCNT11 = 12'hB0B;
parameter MHPMCNT12 = 12'hB0C;
parameter MHPMCNT13 = 12'hB0D;
parameter MHPMCNT14 = 12'hB0E;
parameter MHPMCNT15 = 12'hB0F;
parameter MHPMCNT16 = 12'hB10;
parameter MHPMCNT17 = 12'hB11;
parameter MHPMCNT18 = 12'hB12;
parameter MHPMCNT19 = 12'hB13;
parameter MHPMCNT20 = 12'hB14;
parameter MHPMCNT21 = 12'hB15;
parameter MHPMCNT22 = 12'hB16;
parameter MHPMCNT23 = 12'hB17;
parameter MHPMCNT24 = 12'hB18;
parameter MHPMCNT25 = 12'hB19;
parameter MHPMCNT26 = 12'hB1A;
parameter MHPMCNT27 = 12'hB1B;
parameter MHPMCNT28 = 12'hB1C;
parameter MHPMCNT29 = 12'hB1D;
parameter MHPMCNT30 = 12'hB1E;
parameter MHPMCNT31 = 12'hB1F;

parameter MCYCLEH    = 12'hB80;
parameter MINSTRETH  = 12'hB82;
parameter MHPMCNT3H  = 12'hB83;
parameter MHPMCNT4H  = 12'hB84;
parameter MHPMCNT5H  = 12'hB85;
parameter MHPMCNT6H  = 12'hB86;
parameter MHPMCNT7H  = 12'hB87;
parameter MHPMCNT8H  = 12'hB88;
parameter MHPMCNT9H  = 12'hB89;
parameter MHPMCNT10H = 12'hB8A;
parameter MHPMCNT11H = 12'hB8B;
parameter MHPMCNT12H = 12'hB8C;
parameter MHPMCNT13H = 12'hB8D;
parameter MHPMCNT14H = 12'hB8E;
parameter MHPMCNT15H = 12'hB8F;
parameter MHPMCNT16H = 12'hB90;
parameter MHPMCNT17H = 12'hB91;
parameter MHPMCNT18H = 12'hB92;
parameter MHPMCNT19H = 12'hB93;
parameter MHPMCNT20H = 12'hB94;
parameter MHPMCNT21H = 12'hB95;
parameter MHPMCNT22H = 12'hB96;
parameter MHPMCNT23H = 12'hB97;
parameter MHPMCNT24H = 12'hB98;
parameter MHPMCNT25H = 12'hB99;
parameter MHPMCNT26H = 12'hB9A;
parameter MHPMCNT27H = 12'hB9B;
parameter MHPMCNT28H = 12'hB9C;
parameter MHPMCNT29H = 12'hB9D;
parameter MHPMCNT30H = 12'hB9E;
parameter MHPMCNT31H = 12'hB9F;



parameter CYCLE    = 12'hC00;
parameter TIME     = 12'hC01;
parameter INSTRET  = 12'hC02;
parameter HPMCNT3  = 12'hC03;
parameter HPMCNT4  = 12'hC04;
parameter HPMCNT5  = 12'hC05;
parameter HPMCNT6  = 12'hC06;
parameter HPMCNT7  = 12'hC07;
parameter HPMCNT8  = 12'hC08;
parameter HPMCNT9  = 12'hC09;
parameter HPMCNT10 = 12'hC0A;
parameter HPMCNT11 = 12'hC0B;
parameter HPMCNT12 = 12'hC0C;
parameter HPMCNT13 = 12'hC0D;
parameter HPMCNT14 = 12'hC0E;
parameter HPMCNT15 = 12'hC0F;
parameter HPMCNT16 = 12'hC10;
parameter HPMCNT17 = 12'hC11;
parameter HPMCNT18 = 12'hC12;
parameter HPMCNT19 = 12'hC13;
parameter HPMCNT20 = 12'hC14;
parameter HPMCNT21 = 12'hC15;
parameter HPMCNT22 = 12'hC16;
parameter HPMCNT23 = 12'hC17;
parameter HPMCNT24 = 12'hC18;
parameter HPMCNT25 = 12'hC19;
parameter HPMCNT26 = 12'hC1A;
parameter HPMCNT27 = 12'hC1B;
parameter HPMCNT28 = 12'hC1C;
parameter HPMCNT29 = 12'hC1D;
parameter HPMCNT30 = 12'hC1E;
parameter HPMCNT31 = 12'hC1F;

parameter CYCLEH    = 12'hC80;
parameter TIMEH     = 12'hC81;
parameter INSTRETH  = 12'hC82;
parameter HPMCNT3H  = 12'hC83;
parameter HPMCNT4H  = 12'hC84;
parameter HPMCNT5H  = 12'hC85;
parameter HPMCNT6H  = 12'hC86;
parameter HPMCNT7H  = 12'hC87;
parameter HPMCNT8H  = 12'hC88;
parameter HPMCNT9H  = 12'hC89;
parameter HPMCNT10H = 12'hC8A;
parameter HPMCNT11H = 12'hC8B;
parameter HPMCNT12H = 12'hC8C;
parameter HPMCNT13H = 12'hC8D;
parameter HPMCNT14H = 12'hC8E;
parameter HPMCNT15H = 12'hC8F;
parameter HPMCNT16H = 12'hC90;
parameter HPMCNT17H = 12'hC91;
parameter HPMCNT18H = 12'hC92;
parameter HPMCNT19H = 12'hC93;
parameter HPMCNT20H = 12'hC94;
parameter HPMCNT21H = 12'hC95;
parameter HPMCNT22H = 12'hC96;
parameter HPMCNT23H = 12'hC97;
parameter HPMCNT24H = 12'hC98;
parameter HPMCNT25H = 12'hC99;
parameter HPMCNT26H = 12'hC9A;
parameter HPMCNT27H = 12'hC9B;
parameter HPMCNT28H = 12'hC9C;
parameter HPMCNT29H = 12'hC9D;
parameter HPMCNT30H = 12'hC9E;
parameter HPMCNT31H = 12'hC9F;


parameter FFLAGS    = 12'h001;
parameter FRM       = 12'h002;
parameter FCSR      = 12'h003;
parameter FXCR      = 12'h800; // T-Head Extension



parameter MXSTATUS  = 12'h7C0;
parameter MHCR      = 12'h7C1;
parameter MHINT     = 12'h7C5;

parameter MCPUID    = 12'hFC0;

parameter MRADDR    = 12'h7E0;
parameter MEXSTATUS = 12'h7E1;
parameter MNMICAUSE = 12'h7E2;
parameter MNMIPC    = 12'h7E3;







// &Instance("pa_cp0_info_csr", "x_pa_cp0_info_csr"); @323
pa_cp0_info_csr  x_pa_cp0_info_csr (
  .cpurst_b              (cpurst_b             ),
  .info_csr_cpuid0_value (info_csr_cpuid0_value),
  .iui_regs_inst_csr     (iui_regs_inst_csr    ),
  .marchid_value         (marchid_value        ),
  .mcpuid_local_en       (mcpuid_local_en      ),
  .mcpuid_value          (mcpuid_value         ),
  .mhartid_value         (mhartid_value        ),
  .mimpid_value          (mimpid_value         ),
  .mvendorid_value       (mvendorid_value      ),
  .regs_clk              (regs_clk             )
);



// &Instance("pa_cp0_trap_csr", "x_pa_cp0_trap_csr"); @326
pa_cp0_trap_csr  x_pa_cp0_trap_csr (
  .cp0_hpcp_pmdm             (cp0_hpcp_pmdm            ),
  .cp0_hpcp_pmdu             (cp0_hpcp_pmdu            ),
  .cp0_idu_mcause            (cp0_idu_mcause           ),
  .cp0_idu_mepc              (cp0_idu_mepc             ),
  .cp0_idu_sp_use_scratch    (cp0_idu_sp_use_scratch   ),
  .cp0_idu_sp_wdata          (cp0_idu_sp_wdata         ),
  .cp0_idu_sp_wen            (cp0_idu_sp_wen           ),
  .cp0_idu_sp_wen_gate       (cp0_idu_sp_wen_gate      ),
  .cp0_lsu_mm                (cp0_lsu_mm               ),
  .cp0_rtu_in_nmi            (cp0_rtu_in_nmi           ),
  .cp0_rtu_int_id            (cp0_rtu_int_id           ),
  .cp0_rtu_int_level         (cp0_rtu_int_level        ),
  .cp0_rtu_int_mode          (cp0_rtu_int_mode         ),
  .cp0_rtu_mie               (cp0_rtu_mie              ),
  .cp0_rtu_mnxti_vld         (cp0_rtu_mnxti_vld        ),
  .cp0_rtu_mpil              (cp0_rtu_mpil             ),
  .cp0_rtu_pm_bypass         (cp0_rtu_pm_bypass        ),
  .cp0_yy_cskyisaee          (cp0_yy_cskyisaee         ),
  .cpurst_b                  (cpurst_b                 ),
  .idu_cp0_ipop_data         (idu_cp0_ipop_data        ),
  .idu_cp0_mcause_wen        (idu_cp0_mcause_wen       ),
  .idu_cp0_mepc_wen          (idu_cp0_mepc_wen         ),
  .idu_cp0_sp_reg            (idu_cp0_sp_reg           ),
  .idu_cp0_sp_swap_pending   (idu_cp0_sp_swap_pending  ),
  .idu_cp0_sp_swap_req       (idu_cp0_sp_swap_req      ),
  .idu_cp0_sp_swap_req_gate  (idu_cp0_sp_swap_req_gate ),
  .idu_yy_xx_tail_ack        (idu_yy_xx_tail_ack       ),
  .ifu_cp0_vec_err           (ifu_cp0_vec_err          ),
  .ifu_cp0_vec_succeed       (ifu_cp0_vec_succeed      ),
  .iui_regs_inst_mret        (iui_regs_inst_mret       ),
  .iui_regs_wdata            (iui_regs_wdata           ),
  .iui_regs_wdata_mie        (iui_regs_wdata_mie       ),
  .iui_regs_wdata_rs1        (iui_regs_wdata_rs1       ),
  .mcause_local_en           (mcause_local_en          ),
  .mcause_value              (mcause_value             ),
  .mclicbase_value           (mclicbase_value          ),
  .mcnten_local_en           (mcnten_local_en          ),
  .mcnten_value              (mcnten_value             ),
  .medeleg_value             (medeleg_value            ),
  .mepc_local_en             (mepc_local_en            ),
  .mepc_value                (mepc_value               ),
  .mideleg_value             (mideleg_value            ),
  .mie_value                 (mie_value                ),
  .mintstatus_value          (mintstatus_value         ),
  .mip_value                 (mip_value                ),
  .misa_value                (misa_value               ),
  .mnmicause_local_en        (mnmicause_local_en       ),
  .mnmicause_value           (mnmicause_value          ),
  .mnmipc_local_en           (mnmipc_local_en          ),
  .mnmipc_value              (mnmipc_value             ),
  .mnxti_local_en            (mnxti_local_en           ),
  .mnxti_value               (mnxti_value              ),
  .mscratch_local_en         (mscratch_local_en        ),
  .mscratch_value            (mscratch_value           ),
  .mscratchcsw_local_en      (mscratchcsw_local_en     ),
  .mscratchcsw_value         (mscratchcsw_value        ),
  .mscratchcswl_local_en     (mscratchcswl_local_en    ),
  .mscratchcswl_value        (mscratchcswl_value       ),
  .mstatus_local_en          (mstatus_local_en         ),
  .mstatus_value             (mstatus_value            ),
  .mtval_local_en            (mtval_local_en           ),
  .mtval_value               (mtval_value              ),
  .mtvec_local_en            (mtvec_local_en           ),
  .mtvec_rslt                (mtvec_rslt               ),
  .mtvec_value               (mtvec_value              ),
  .mtvt_local_en             (mtvt_local_en            ),
  .mtvt_value                (mtvt_value               ),
  .mxstatus_local_en         (mxstatus_local_en        ),
  .mxstatus_value            (mxstatus_value           ),
  .regs_clk                  (regs_clk                 ),
  .regs_cpu_in_int           (regs_cpu_in_int          ),
  .regs_cpu_in_nmi           (regs_cpu_in_nmi          ),
  .regs_flush_clk            (regs_flush_clk           ),
  .regs_iui_mie              (regs_iui_mie             ),
  .regs_spswap_en            (regs_spswap_en           ),
  .regs_swap_int_sp_en_gate  (regs_swap_int_sp_en_gate ),
  .rtu_cp0_epc               (rtu_cp0_epc              ),
  .rtu_cp0_expt_mtval        (rtu_cp0_expt_mtval       ),
  .rtu_cp0_int_level         (rtu_cp0_int_level        ),
  .rtu_cp0_int_vld_raw       (rtu_cp0_int_vld_raw      ),
  .rtu_cp0_mie_en            (rtu_cp0_mie_en           ),
  .rtu_cp0_mnxti_pending_vld (rtu_cp0_mnxti_pending_vld),
  .rtu_cp0_nmi_vld           (rtu_cp0_nmi_vld          ),
  .rtu_cp0_pending_int_hv    (rtu_cp0_pending_int_hv   ),
  .rtu_cp0_pending_int_id    (rtu_cp0_pending_int_id   ),
  .rtu_cp0_pending_int_level (rtu_cp0_pending_int_level),
  .rtu_yy_xx_expt_int        (rtu_yy_xx_expt_int       ),
  .rtu_yy_xx_expt_vec        (rtu_yy_xx_expt_vec       ),
  .rtu_yy_xx_expt_vld        (rtu_yy_xx_expt_vld       ),
  .rtu_yy_xx_int_hv          (rtu_yy_xx_int_hv         ),
  .rtu_yy_xx_tail_int_vld    (rtu_yy_xx_tail_int_vld   ),
  .tcip_cp0_clic_base        (tcip_cp0_clic_base       ),
  .trap_csr_pm               (trap_csr_pm              )
);



// &Instance("pa_cp0_ext_csr", "x_pa_cp0_ext_csr"); @329
pa_cp0_ext_csr  x_pa_cp0_ext_csr (
  .cp0_idu_spec_push_en       (cp0_idu_spec_push_en      ),
  .cp0_idu_swap_sp_en         (cp0_idu_swap_sp_en        ),
  .cp0_ifu_bht_en             (cp0_ifu_bht_en            ),
  .cp0_ifu_bht_inv            (cp0_ifu_bht_inv           ),
  .cp0_ifu_icache_en          (cp0_ifu_icache_en         ),
  .cp0_ifu_icache_inv_addr    (cp0_ifu_icache_inv_addr   ),
  .cp0_ifu_icache_inv_req     (cp0_ifu_icache_inv_req    ),
  .cp0_ifu_icache_inv_type    (cp0_ifu_icache_inv_type   ),
  .cp0_ifu_ras_en             (cp0_ifu_ras_en            ),
  .cp0_ifu_rst_inv_done       (cp0_ifu_rst_inv_done      ),
  .cp0_lsu_dcache_en          (cp0_lsu_dcache_en         ),
  .cp0_lsu_dcache_wa          (cp0_lsu_dcache_wa         ),
  .cp0_lsu_dcache_wb          (cp0_lsu_dcache_wb         ),
  .cp0_lsu_icc_addr           (cp0_lsu_icc_addr          ),
  .cp0_lsu_icc_op             (cp0_lsu_icc_op            ),
  .cp0_lsu_icc_req            (cp0_lsu_icc_req           ),
  .cp0_lsu_icc_type           (cp0_lsu_icc_type          ),
  .cp0_rtu_in_expt            (cp0_rtu_in_expt           ),
  .cp0_rtu_wfe_en             (cp0_rtu_wfe_en            ),
  .cp0_xx_async_expt_en       (cp0_xx_async_expt_en      ),
  .cpurst_b                   (cpurst_b                  ),
  .ext_inst_ifu_icc_addr      (ext_inst_ifu_icc_addr     ),
  .ext_inst_ifu_icc_req       (ext_inst_ifu_icc_req      ),
  .ext_inst_ifu_icc_type      (ext_inst_ifu_icc_type     ),
  .ext_inst_ifu_inv_done      (ext_inst_ifu_inv_done     ),
  .ext_inst_lsu_icc_addr      (ext_inst_lsu_icc_addr     ),
  .ext_inst_lsu_icc_done      (ext_inst_lsu_icc_done     ),
  .ext_inst_lsu_icc_op        (ext_inst_lsu_icc_op       ),
  .ext_inst_lsu_icc_req       (ext_inst_lsu_icc_req      ),
  .ext_inst_lsu_icc_type      (ext_inst_lsu_icc_type     ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ifu_cp0_bht_inv_done       (ifu_cp0_bht_inv_done      ),
  .ifu_cp0_icache_inv_done    (ifu_cp0_icache_inv_done   ),
  .ifu_cp0_rst_inv_req        (ifu_cp0_rst_inv_req       ),
  .inv_sm_clk                 (inv_sm_clk                ),
  .iui_regs_inst_mret         (iui_regs_inst_mret        ),
  .iui_regs_wdata             (iui_regs_wdata            ),
  .iui_regs_wdata_srst        (iui_regs_wdata_srst       ),
  .lsu_cp0_icc_done           (lsu_cp0_icc_done          ),
  .mexstatus_local_en         (mexstatus_local_en        ),
  .mexstatus_value            (mexstatus_value           ),
  .mhcr_local_en              (mhcr_local_en             ),
  .mhcr_value                 (mhcr_value                ),
  .mhint_local_en             (mhint_local_en            ),
  .mhint_value                (mhint_value               ),
  .mraddr_value               (mraddr_value              ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .regs_clk                   (regs_clk                  ),
  .regs_cpu_in_int            (regs_cpu_in_int           ),
  .regs_cpu_in_nmi            (regs_cpu_in_nmi           ),
  .regs_flush_clk             (regs_flush_clk            ),
  .regs_special_lpmd          (regs_special_lpmd         ),
  .regs_spswap_en             (regs_spswap_en            ),
  .regs_srst_srst_vld         (regs_srst_srst_vld        ),
  .regs_srst_srstmd           (regs_srst_srstmd          ),
  .rtu_cp0_bus_error          (rtu_cp0_bus_error         ),
  .rtu_cp0_lockup_clr         (rtu_cp0_lockup_clr        ),
  .rtu_cp0_lockup_vld         (rtu_cp0_lockup_vld        ),
  .rtu_cp0_nmi_vld            (rtu_cp0_nmi_vld           ),
  .rtu_yy_xx_dbgon            (rtu_yy_xx_dbgon           ),
  .rtu_yy_xx_expt_int         (rtu_yy_xx_expt_int        ),
  .rtu_yy_xx_expt_vld         (rtu_yy_xx_expt_vld        ),
  .special_dcache_clean       (special_dcache_clean      ),
  .special_icache_inv         (special_icache_inv        ),
  .special_icache_inv_done    (special_icache_inv_done   ),
  .special_regs_clk_en        (special_regs_clk_en       ),
  .special_regs_inv_sm_clk_en (special_regs_inv_sm_clk_en),
  .sysio_cp0_clkratio         (sysio_cp0_clkratio        ),
  .sysio_cp0_rst_addr         (sysio_cp0_rst_addr        )
);



// &Instance("pa_cp0_float_csr", "x_pa_cp0_float_csr"); @333






assign regs_mach_mode = trap_csr_pm[1:0] == 2'b11;


assign regs_csr_imm[11:0]   = iui_regs_imm[11:0];


// &CombBeg; @347
always @( mcnten_value[9:0]
       or mcnten_value[31:24]
       or mcnten_value[25:7]
       or regs_csr_imm[11:0]
       or trap_csr_pm[1:0])
begin
  case(regs_csr_imm[11:0])
    MVENDORID : regs_imm_inv = 1'b0;
    MARCHID   : regs_imm_inv = 1'b0;
    MIMPID    : regs_imm_inv = 1'b0;
    MHARTID   : regs_imm_inv = 1'b0;

    MCPUID    : regs_imm_inv = 1'b0;

    MSTATUS   : regs_imm_inv = 1'b0;
    MISA      : regs_imm_inv = 1'b0;
    MIE       : regs_imm_inv = 1'b0;
    MEDELEG   : regs_imm_inv = 1'b0;
    MIDELEG   : regs_imm_inv = 1'b0;
    MTVEC     : regs_imm_inv = 1'b0;
    MCNTEN    : regs_imm_inv = 1'b0;
    MTVT      : regs_imm_inv = 1'b0;

    MSCRATCH  : regs_imm_inv = 1'b0;
    MEPC      : regs_imm_inv = 1'b0;
    MCAUSE    : regs_imm_inv = 1'b0;
    MTVAL     : regs_imm_inv = 1'b0;
    MIP       : regs_imm_inv = 1'b0;
    MNXTI        : regs_imm_inv = 1'b0;
    MINTSTATUS   : regs_imm_inv = 1'b0;
    MSCRATCHCSW  : regs_imm_inv = 1'b0;
    MSCRATCHCSWL : regs_imm_inv = 1'b0;
    MCLICBASE    : regs_imm_inv = 1'b0;


    MCNTINHBT  : regs_imm_inv = 1'b0;
    MHPMEVT3   : regs_imm_inv = 1'b0;
    MHPMEVT4   : regs_imm_inv = 1'b0;
    MHPMEVT5   : regs_imm_inv = 1'b0;
    MHPMEVT6   : regs_imm_inv = 1'b0;
    MHPMEVT7   : regs_imm_inv = 1'b0;
    MHPMEVT8   : regs_imm_inv = 1'b0;
    MHPMEVT9   : regs_imm_inv = 1'b0;
    MHPMEVT10  : regs_imm_inv = 1'b0;
    MHPMEVT11  : regs_imm_inv = 1'b0;
    MHPMEVT12  : regs_imm_inv = 1'b0;
    MHPMEVT13  : regs_imm_inv = 1'b0;
    MHPMEVT14  : regs_imm_inv = 1'b0;
    MHPMEVT15  : regs_imm_inv = 1'b0;
    MHPMEVT16  : regs_imm_inv = 1'b0;
    MHPMEVT17  : regs_imm_inv = 1'b0;
    MHPMEVT18  : regs_imm_inv = 1'b0;
    MHPMEVT19  : regs_imm_inv = 1'b0;
    MHPMEVT20  : regs_imm_inv = 1'b0;
    MHPMEVT21  : regs_imm_inv = 1'b0;
    MHPMEVT22  : regs_imm_inv = 1'b0;
    MHPMEVT23  : regs_imm_inv = 1'b0;
    MHPMEVT24  : regs_imm_inv = 1'b0;
    MHPMEVT25  : regs_imm_inv = 1'b0;
    MHPMEVT26  : regs_imm_inv = 1'b0;
    MHPMEVT27  : regs_imm_inv = 1'b0;
    MHPMEVT28  : regs_imm_inv = 1'b0;
    MHPMEVT29  : regs_imm_inv = 1'b0;
    MHPMEVT30  : regs_imm_inv = 1'b0;
    MHPMEVT31  : regs_imm_inv = 1'b0;

    MCYCLE     : regs_imm_inv = 1'b0;
    MINSTRET   : regs_imm_inv = 1'b0;
    MHPMCNT3   : regs_imm_inv = 1'b0;
    MHPMCNT4   : regs_imm_inv = 1'b0;
    MHPMCNT5   : regs_imm_inv = 1'b0;
    MHPMCNT6   : regs_imm_inv = 1'b0;
    MHPMCNT7   : regs_imm_inv = 1'b0;
    MHPMCNT8   : regs_imm_inv = 1'b0;
    MHPMCNT9   : regs_imm_inv = 1'b0;
    MHPMCNT10  : regs_imm_inv = 1'b0;
    MHPMCNT11  : regs_imm_inv = 1'b0;
    MHPMCNT12  : regs_imm_inv = 1'b0;
    MHPMCNT13  : regs_imm_inv = 1'b0;
    MHPMCNT14  : regs_imm_inv = 1'b0;
    MHPMCNT15  : regs_imm_inv = 1'b0;
    MHPMCNT16  : regs_imm_inv = 1'b0;
    MHPMCNT17  : regs_imm_inv = 1'b0;
    MHPMCNT18  : regs_imm_inv = 1'b0;
    MHPMCNT19  : regs_imm_inv = 1'b0;
    MHPMCNT20  : regs_imm_inv = 1'b0;
    MHPMCNT21  : regs_imm_inv = 1'b0;
    MHPMCNT22  : regs_imm_inv = 1'b0;
    MHPMCNT23  : regs_imm_inv = 1'b0;
    MHPMCNT24  : regs_imm_inv = 1'b0;
    MHPMCNT25  : regs_imm_inv = 1'b0;
    MHPMCNT26  : regs_imm_inv = 1'b0;
    MHPMCNT27  : regs_imm_inv = 1'b0;
    MHPMCNT28  : regs_imm_inv = 1'b0;
    MHPMCNT29  : regs_imm_inv = 1'b0;
    MHPMCNT30  : regs_imm_inv = 1'b0;
    MHPMCNT31  : regs_imm_inv = 1'b0;

    MCYCLEH     : regs_imm_inv = 1'b0;
    MINSTRETH   : regs_imm_inv = 1'b0;
    MHPMCNT3H   : regs_imm_inv = 1'b0;
    MHPMCNT4H   : regs_imm_inv = 1'b0;
    MHPMCNT5H   : regs_imm_inv = 1'b0;
    MHPMCNT6H   : regs_imm_inv = 1'b0;
    MHPMCNT7H   : regs_imm_inv = 1'b0;
    MHPMCNT8H   : regs_imm_inv = 1'b0;
    MHPMCNT9H   : regs_imm_inv = 1'b0;
    MHPMCNT10H  : regs_imm_inv = 1'b0;
    MHPMCNT11H  : regs_imm_inv = 1'b0;
    MHPMCNT12H  : regs_imm_inv = 1'b0;
    MHPMCNT13H  : regs_imm_inv = 1'b0;
    MHPMCNT14H  : regs_imm_inv = 1'b0;
    MHPMCNT15H  : regs_imm_inv = 1'b0;
    MHPMCNT16H  : regs_imm_inv = 1'b0;
    MHPMCNT17H  : regs_imm_inv = 1'b0;
    MHPMCNT18H  : regs_imm_inv = 1'b0;
    MHPMCNT19H  : regs_imm_inv = 1'b0;
    MHPMCNT20H  : regs_imm_inv = 1'b0;
    MHPMCNT21H  : regs_imm_inv = 1'b0;
    MHPMCNT22H  : regs_imm_inv = 1'b0;
    MHPMCNT23H  : regs_imm_inv = 1'b0;
    MHPMCNT24H  : regs_imm_inv = 1'b0;
    MHPMCNT25H  : regs_imm_inv = 1'b0;
    MHPMCNT26H  : regs_imm_inv = 1'b0;
    MHPMCNT27H  : regs_imm_inv = 1'b0;
    MHPMCNT28H  : regs_imm_inv = 1'b0;
    MHPMCNT29H  : regs_imm_inv = 1'b0;
    MHPMCNT30H  : regs_imm_inv = 1'b0;
    MHPMCNT31H  : regs_imm_inv = 1'b0;

    CYCLE     : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[0]);
    TIME      : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[1]);
    INSTRET   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[2]);
    HPMCNT3   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[3]);
    HPMCNT4   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[4]);
    HPMCNT5   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[5]);
    HPMCNT6   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[6]);
    HPMCNT7   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[7]);
    HPMCNT8   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[8]);
    HPMCNT9   : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[9]);
    HPMCNT10  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[10]);
    HPMCNT11  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[11]);
    HPMCNT12  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[12]);
    HPMCNT13  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[13]);
    HPMCNT14  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[14]);
    HPMCNT15  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[15]);
    HPMCNT16  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[16]);
    HPMCNT17  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[17]);
    HPMCNT18  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[18]);
    HPMCNT19  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[19]);
    HPMCNT20  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[20]);
    HPMCNT21  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[21]);
    HPMCNT22  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[22]);
    HPMCNT23  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[23]);
    HPMCNT24  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[24]);
    HPMCNT25  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[25]);
    HPMCNT26  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[26]);
    HPMCNT27  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[27]);
    HPMCNT28  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[28]);
    HPMCNT29  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[29]);
    HPMCNT30  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[30]);
    HPMCNT31  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[31]);

    CYCLEH    : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[0]);
    TIMEH     : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[1]);
    INSTRETH  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[2]);
    HPMCNT3H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[3]);
    HPMCNT4H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[4]);
    HPMCNT5H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[5]);
    HPMCNT6H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[6]);
    HPMCNT7H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[7]);
    HPMCNT8H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[8]);
    HPMCNT9H  : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[9]);
    HPMCNT10H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[10]);
    HPMCNT11H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[11]);
    HPMCNT12H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[12]);
    HPMCNT13H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[13]);
    HPMCNT14H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[14]);
    HPMCNT15H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[15]);
    HPMCNT16H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[16]);
    HPMCNT17H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[17]);
    HPMCNT18H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[18]);
    HPMCNT19H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[19]);
    HPMCNT20H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[20]);
    HPMCNT21H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[21]);
    HPMCNT22H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[22]);
    HPMCNT23H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[23]);
    HPMCNT24H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[24]);
    HPMCNT25H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[25]);
    HPMCNT26H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[26]);
    HPMCNT27H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[27]);
    HPMCNT28H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[28]);
    HPMCNT29H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[29]);
    HPMCNT30H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[30]);
    HPMCNT31H : regs_imm_inv = !(trap_csr_pm[1:0] == 2'b11 || mcnten_value[31]);



    MXSTATUS  : regs_imm_inv = 1'b0;
    MHCR      : regs_imm_inv = 1'b0;
    MHINT     : regs_imm_inv = 1'b0;

    MRADDR    : regs_imm_inv = 1'b0;
    MEXSTATUS : regs_imm_inv = 1'b0;
    MNMICAUSE : regs_imm_inv = 1'b0;
    MNMIPC    : regs_imm_inv = 1'b0;

    default   : regs_imm_inv = 1'b1;
  endcase
// &CombEnd; @583
end


assign regs_csr_wen      = iui_regs_csr_wen;

assign mcpuid_local_en   = regs_csr_imm[11:0] == MCPUID;

assign mstatus_local_en  = regs_csr_wen && regs_csr_imm[11:0] == MSTATUS;
assign mtvec_local_en    = regs_csr_wen && regs_csr_imm[11:0] == MTVEC;
assign mcnten_local_en   = regs_csr_wen && regs_csr_imm[11:0] == MCNTEN;
assign mtvt_local_en     = regs_csr_wen && regs_csr_imm[11:0] == MTVT;

assign mscratch_local_en = regs_csr_wen && regs_csr_imm[11:0] == MSCRATCH;
assign mepc_local_en     = regs_csr_wen && regs_csr_imm[11:0] == MEPC;
assign mcause_local_en   = regs_csr_wen && regs_csr_imm[11:0] == MCAUSE;
assign mtval_local_en    = regs_csr_wen && regs_csr_imm[11:0] == MTVAL;
assign mnxti_local_en    = regs_csr_wen && regs_csr_imm[11:0] == MNXTI
                        && iui_regs_csr_mnxti_vld;
assign regs_iui_mnxti_sel = regs_csr_wen && regs_csr_imm[11:0] == MNXTI;
assign mscratchcsw_local_en  = regs_csr_wen && regs_csr_imm[11:0] == MSCRATCHCSW;
assign mscratchcswl_local_en = regs_csr_wen && regs_csr_imm[11:0] == MSCRATCHCSWL;


assign mxstatus_local_en = regs_csr_wen && regs_csr_imm[11:0] == MXSTATUS;
assign mhcr_local_en     = regs_csr_wen && regs_csr_imm[11:0] == MHCR;
assign mhint_local_en    = regs_csr_wen && regs_csr_imm[11:0] == MHINT;

assign mexstatus_local_en = regs_csr_wen && regs_csr_imm[11:0] == MEXSTATUS;
assign mnmicause_local_en = regs_csr_wen && regs_csr_imm[11:0] == MNMICAUSE;
assign mnmipc_local_en    = regs_csr_wen && regs_csr_imm[11:0] == MNMIPC;





// &CombBeg; @632
always @( mnmicause_value[31:0]
       or mtval_value[31:0]
       or mstatus_value[31:0]
       or mhcr_value[31:0]
       or mideleg_value[31:0]
       or mraddr_value[31:0]
       or mscratch_value[31:0]
       or mip_value[31:0]
       or mcause_value[31:0]
       or mcnten_value[31:0]
       or mscratchcswl_value[31:0]
       or marchid_value[31:0]
       or mepc_value[31:0]
       or mexstatus_value[31:0]
       or medeleg_value[31:0]
       or mscratchcsw_value[31:0]
       or mtvec_value[31:0]
       or mnmipc_value[31:0]
       or hpcp_cp0_data[31:0]
       or misa_value[31:0]
       or mhartid_value[31:0]
       or mie_value[31:0]
       or mhint_value[31:0]
       or regs_csr_imm[11:0]
       or mcpuid_value[31:0]
       or mimpid_value[31:0]
       or mintstatus_value[31:0]
       or mtvt_value[31:0]
       or mvendorid_value[31:0]
       or mnxti_value[31:0]
       or mxstatus_value[31:0]
       or mclicbase_value[31:0])
begin
  case(regs_csr_imm[11:0])
    MVENDORID : regs_csr_rdata[31:0] = mvendorid_value[31:0];
    MARCHID   : regs_csr_rdata[31:0] = marchid_value[31:0];
    MIMPID    : regs_csr_rdata[31:0] = mimpid_value[31:0];
    MHARTID   : regs_csr_rdata[31:0] = mhartid_value[31:0];

    MCPUID    : regs_csr_rdata[31:0] = mcpuid_value[31:0];

    MSTATUS   : regs_csr_rdata[31:0] = mstatus_value[31:0];
    MISA      : regs_csr_rdata[31:0] = misa_value[31:0];
    MEDELEG   : regs_csr_rdata[31:0] = medeleg_value[31:0];
    MIDELEG   : regs_csr_rdata[31:0] = mideleg_value[31:0];
    MIE       : regs_csr_rdata[31:0] = mie_value[31:0];
    MTVEC     : regs_csr_rdata[31:0] = mtvec_value[31:0];
    MCNTEN    : regs_csr_rdata[31:0] = mcnten_value[31:0];
    MTVT      : regs_csr_rdata[31:0] = mtvt_value[31:0];

    MSCRATCH  : regs_csr_rdata[31:0] = mscratch_value[31:0];
    MEPC      : regs_csr_rdata[31:0] = mepc_value[31:0];
    MCAUSE    : regs_csr_rdata[31:0] = mcause_value[31:0];
    MTVAL     : regs_csr_rdata[31:0] = mtval_value[31:0];
    MIP       : regs_csr_rdata[31:0] = mip_value[31:0];
    MNXTI        : regs_csr_rdata[31:0] = mnxti_value[31:0];
    MINTSTATUS   : regs_csr_rdata[31:0] = mintstatus_value[31:0];
    MSCRATCHCSW  : regs_csr_rdata[31:0] = mscratchcsw_value[31:0];
    MSCRATCHCSWL : regs_csr_rdata[31:0] = mscratchcswl_value[31:0];
    MCLICBASE    : regs_csr_rdata[31:0] = mclicbase_value[31:0];


    MCNTINHBT,
    MHPMEVT3,
    MHPMEVT4,
    MHPMEVT5,
    MHPMEVT6,
    MHPMEVT7,
    MHPMEVT8,
    MHPMEVT9,
    MHPMEVT10,
    MHPMEVT11,
    MHPMEVT12,
    MHPMEVT13,
    MHPMEVT14,
    MHPMEVT15,
    MHPMEVT16,
    MHPMEVT17,
    MHPMEVT18,
    MHPMEVT19,
    MHPMEVT20,
    MHPMEVT21,
    MHPMEVT22,
    MHPMEVT23,
    MHPMEVT24,
    MHPMEVT25,
    MHPMEVT26,
    MHPMEVT27,
    MHPMEVT28,
    MHPMEVT29,
    MHPMEVT30,
    MHPMEVT31,
    MCYCLE,
    MINSTRET,
    MHPMCNT3,
    MHPMCNT4,
    MHPMCNT5,
    MHPMCNT6,
    MHPMCNT7,
    MHPMCNT8,
    MHPMCNT9,
    MHPMCNT10,
    MHPMCNT11,
    MHPMCNT12,
    MHPMCNT13,
    MHPMCNT14,
    MHPMCNT15,
    MHPMCNT16,
    MHPMCNT17,
    MHPMCNT18,
    MHPMCNT19,
    MHPMCNT20,
    MHPMCNT21,
    MHPMCNT22,
    MHPMCNT23,
    MHPMCNT24,
    MHPMCNT25,
    MHPMCNT26,
    MHPMCNT27,
    MHPMCNT28,
    MHPMCNT29,
    MHPMCNT30,
    MHPMCNT31,
    MCYCLEH,
    MINSTRETH,
    MHPMCNT3H,
    MHPMCNT4H,
    MHPMCNT5H,
    MHPMCNT6H,
    MHPMCNT7H,
    MHPMCNT8H,
    MHPMCNT9H,
    MHPMCNT10H,
    MHPMCNT11H,
    MHPMCNT12H,
    MHPMCNT13H,
    MHPMCNT14H,
    MHPMCNT15H,
    MHPMCNT16H,
    MHPMCNT17H,
    MHPMCNT18H,
    MHPMCNT19H,
    MHPMCNT20H,
    MHPMCNT21H,
    MHPMCNT22H,
    MHPMCNT23H,
    MHPMCNT24H,
    MHPMCNT25H,
    MHPMCNT26H,
    MHPMCNT27H,
    MHPMCNT28H,
    MHPMCNT29H,
    MHPMCNT30H,
    MHPMCNT31H,
    CYCLE,
    TIME,
    INSTRET,
    HPMCNT3,
    HPMCNT4,
    HPMCNT5,
    HPMCNT6,
    HPMCNT7,
    HPMCNT8,
    HPMCNT9,
    HPMCNT10,
    HPMCNT11,
    HPMCNT12,
    HPMCNT13,
    HPMCNT14,
    HPMCNT15,
    HPMCNT16,
    HPMCNT17,
    HPMCNT18,
    HPMCNT19,
    HPMCNT20,
    HPMCNT21,
    HPMCNT22,
    HPMCNT23,
    HPMCNT24,
    HPMCNT25,
    HPMCNT26,
    HPMCNT27,
    HPMCNT28,
    HPMCNT29,
    HPMCNT30,
    HPMCNT31,
    CYCLEH,
    TIMEH,
    INSTRETH,
    HPMCNT3H,
    HPMCNT4H,
    HPMCNT5H,
    HPMCNT6H,
    HPMCNT7H,
    HPMCNT8H,
    HPMCNT9H,
    HPMCNT10H,
    HPMCNT11H,
    HPMCNT12H,
    HPMCNT13H,
    HPMCNT14H,
    HPMCNT15H,
    HPMCNT16H,
    HPMCNT17H,
    HPMCNT18H,
    HPMCNT19H,
    HPMCNT20H,
    HPMCNT21H,
    HPMCNT22H,
    HPMCNT23H,
    HPMCNT24H,
    HPMCNT25H,
    HPMCNT26H,
    HPMCNT27H,
    HPMCNT28H,
    HPMCNT29H,
    HPMCNT30H,
    HPMCNT31H:  regs_csr_rdata[31:0] = hpcp_cp0_data[31:0];

    MXSTATUS  : regs_csr_rdata[31:0] = mxstatus_value[31:0];
    MHCR      : regs_csr_rdata[31:0] = mhcr_value[31:0];
    MHINT     : regs_csr_rdata[31:0] = mhint_value[31:0];

    MRADDR    : regs_csr_rdata[31:0] = mraddr_value[31:0];
    MEXSTATUS : regs_csr_rdata[31:0] = mexstatus_value[31:0];
    MNMICAUSE : regs_csr_rdata[31:0] = mnmicause_value[31:0];
    MNMIPC    : regs_csr_rdata[31:0] = mnmipc_value[31:0];








    default   : regs_csr_rdata[31:0] = 32'b0;
  endcase
// &CombEnd; @865
end






assign regs_iui_expt_vld     = regs_imm_inv;
assign regs_iui_rdata[31:0]  = regs_csr_rdata[31:0];
assign regs_iui_mepc[31:0]   = mepc_value[31:0];
assign regs_iui_pm[1:0]      = trap_csr_pm[1:0];
assign regs_iui_mstatus[31:0] = mstatus_value[31:0];


assign cp0_ifu_mtvec[31:0]   = {mtvec_rslt[29:0], 2'b0};






assign cp0_hpcp_index[11:0] = regs_csr_imm[11:0];
assign cp0_hpcp_wdata[31:0] = iui_regs_wdata[31:0];
assign cp0_hpcp_wreg        = regs_csr_wen;


// &Force("input", "had_cp0_mcause_data"); @916
// &Force("bus", "had_cp0_mcause_data", 31, 0); @917
assign cp0_had_mcause_data[31:0] = mcause_value[31:0];
assign cp0_had_cpuid_idx0[31:0]  = info_csr_cpuid0_value[31:0];


assign cp0_yy_priv_mode[1:0] = trap_csr_pm[1:0];
assign cp0_yy_mach_mode      = regs_mach_mode;
assign cp0_pad_mintstatus[31:0] = mintstatus_value[31:0];
assign cp0_pad_mstatus[31:0]    = mstatus_value[31:0];
assign cp0_pad_mcause[31:0]     = mcause_value[31:0];

// &ModuleEnd; @930
endmodule
























// &ModuleBeg; @23
module pa_cp0_special(
  cp0_had_lpmd_b,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_lsu_fence_req,
  cp0_rtu_ex1_inst_ebreak,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_cp0_xx_dbg,
  had_yy_xx_dbg,
  ifu_cp0_lpmd_ack,
  inv_sm_clk,
  iui_special_ebrek,
  iui_special_ecall,
  iui_special_fence,
  iui_special_fencei,
  iui_special_int_vld,
  iui_special_sync,
  iui_special_synci,
  iui_special_wfi,
  lsu_cp0_icc_done,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  regs_special_lpmd,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  special_dcache_clean,
  special_icache_inv,
  special_icache_inv_done,
  special_iui_expt_vld,
  special_iui_stall,
  special_regs_clk_en,
  special_regs_inv_sm_clk_en,
  srst_sm_clk,
  srst_special_srst_sm_clk_en,
  sysio_cp0_sys_view_lpmd_b
);

// &Ports; @24
input          cpurst_b;
input          forever_cpuclk;
input          had_cp0_xx_dbg;
input          had_yy_xx_dbg;
input          ifu_cp0_lpmd_ack;
input          inv_sm_clk;
input          iui_special_ebrek;
input          iui_special_ecall;
input          iui_special_fence;
input          iui_special_fencei;
input          iui_special_int_vld;
input          iui_special_sync;
input          iui_special_synci;
input          iui_special_wfi;
input          lsu_cp0_icc_done;
input          lsu_xx_no_op;
input          pad_yy_gate_clk_en_b;
input   [1:0]  regs_special_lpmd;
input          rtu_yy_xx_dbgon;
input          rtu_yy_xx_flush;
input          special_icache_inv_done;
input          srst_special_srst_sm_clk_en;
input   [1:0]  sysio_cp0_sys_view_lpmd_b;
output  [1:0]  cp0_had_lpmd_b;
output         cp0_ifu_in_lpmd;
output         cp0_ifu_lpmd_req;
output         cp0_lsu_fence_req;
output         cp0_rtu_ex1_inst_ebreak;
output         cp0_sysio_ipend_b;
output  [1:0]  cp0_sysio_lpmd_b;
output         cp0_yy_clk_en;
output         special_dcache_clean;
output         special_icache_inv;
output         special_iui_expt_vld;
output         special_iui_stall;
output         special_regs_clk_en;
output         special_regs_inv_sm_clk_en;
output         srst_sm_clk;

// &Regs; @25
reg     [1:0]  cur_state;
reg     [1:0]  lpmd_b;
reg     [1:0]  next_state;
reg     [1:0]  spec_cur_state;
reg     [1:0]  spec_nxt_state;

// &Wires; @26
wire    [1:0]  cp0_had_lpmd_b;
wire           cp0_ifu_in_lpmd;
wire           cp0_ifu_lpmd_req;
wire           cp0_lsu_fence_req;
wire           cp0_rtu_ex1_inst_ebreak;
wire           cp0_sysio_ipend_b;
wire    [1:0]  cp0_sysio_lpmd_b;
wire           cp0_yy_clk_en;
wire           cpu_in_lpmd;
wire           cpu_in_lpmd_core_view;
wire           cpu_in_lpmd_sys_view;
wire           cpurst_b;
wire           forever_cpuclk;
wire           had_cp0_xx_dbg;
wire           had_yy_xx_dbg;
wire           ifu_cp0_lpmd_ack;
wire           inv_sm_clk;
wire           iui_special_ebrek;
wire           iui_special_ecall;
wire           iui_special_fence;
wire           iui_special_fencei;
wire           iui_special_int_vld;
wire           iui_special_sync;
wire           iui_special_synci;
wire           iui_special_wfi;
wire           lpmd_ack;
wire           lpmd_clk;
wire           lpmd_clk_en;
wire           lpmd_in_wait_state;
wire           lpmd_sm_clk;
wire           lpmd_sm_icg_en;
wire           lpmd_stall;
wire           lpmd_start;
wire           lsu_cp0_icc_done;
wire           lsu_xx_no_op;
wire           pad_yy_gate_clk_en_b;
wire    [1:0]  regs_special_lpmd;
wire           rtu_yy_xx_dbgon;
wire           rtu_yy_xx_flush;
wire           spec_inst_vld;
wire           special_dcache_clean;
wire           special_fence_done;
wire           special_fence_req;
wire           special_fencei_done;
wire           special_icache_inv;
wire           special_icache_inv_done;
wire           special_iui_expt_vld;
wire           special_iui_stall;
wire           special_regs_clk_en;
wire           special_regs_inv_sm_clk_en;
wire           special_sm_stall;
wire           special_sync_done;
wire           special_synci_done;
wire           srst_sm_clk;
wire           srst_special_srst_sm_clk_en;
wire    [1:0]  sys_lpmd_b;
wire    [1:0]  sysio_cp0_sys_view_lpmd_b;









parameter IDLE   = 2'b00;
parameter WFACK  = 2'b01;
parameter WFCPLT = 2'b11;
parameter CPLT   = 2'b10;



assign lpmd_sm_icg_en = iui_special_wfi || (cur_state != IDLE)
                     || srst_special_srst_sm_clk_en;
// &Instance("gated_clk_cell", "x_lpmd_sm_gated_clk"); @44
gated_clk_cell  x_lpmd_sm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lpmd_sm_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (lpmd_sm_icg_en      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @45
//          .external_en (1'b0), @46
//          .global_en   (1'b1), @47
//          .module_en   (lpmd_sm_icg_en), @48
//          .local_en    (1'b0), @49
//          .clk_out     (lpmd_sm_clk)); @50

assign srst_sm_clk = lpmd_sm_clk;

assign lpmd_clk_en = had_cp0_xx_dbg || iui_special_int_vld
                  || rtu_yy_xx_dbgon || lpmd_start;

// &Instance("gated_clk_cell", "x_lpmd_gated_clk"); @57
gated_clk_cell  x_lpmd_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lpmd_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (lpmd_clk_en         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @58
//          .external_en (1'b0), @59
//          .global_en   (1'b1), @60
//          .module_en   (lpmd_clk_en), @61
//          .local_en    (1'b0), @62
//          .clk_out     (lpmd_clk)); @63















always @(posedge lpmd_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else if(rtu_yy_xx_flush)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end
// &CombBeg; @88
always @( cur_state
       or lpmd_start
       or iui_special_wfi
       or cpu_in_lpmd)
begin
  case(cur_state)
  IDLE       : if(iui_special_wfi)
                next_state = WFACK;
              else
                next_state = IDLE;
  WFACK      : if(lpmd_start)
                next_state = WFCPLT;
              else
                next_state = WFACK;
  WFCPLT    : if(!cpu_in_lpmd)
                next_state = CPLT;
              else
                next_state = WFCPLT;
  CPLT      :   next_state = IDLE;
  default   :   next_state = IDLE;
  endcase
// &CombEnd; @105
end

assign lpmd_in_wait_state = (cur_state == WFACK);


assign lpmd_stall = (cur_state == IDLE) && iui_special_wfi
                 || (cur_state == WFACK)
                 || (cur_state == WFCPLT);



assign lpmd_ack = ifu_cp0_lpmd_ack;
assign lpmd_start = lpmd_ack;





always @(posedge lpmd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    lpmd_b[1:0] <= 2'b11;
  else if(had_yy_xx_dbg || iui_special_int_vld || rtu_yy_xx_dbgon)
    lpmd_b[1:0] <= 2'b11;
  else if(lpmd_start && !cpu_in_lpmd)
  begin
    lpmd_b[1:0] <= regs_special_lpmd[1:0];
  end
  else
    lpmd_b[1:0] <= lpmd_b[1:0];
end


assign sys_lpmd_b[1:0] = sysio_cp0_sys_view_lpmd_b[1:0];
assign cpu_in_lpmd_sys_view = !(sys_lpmd_b[1] & sys_lpmd_b[0]);
assign cpu_in_lpmd_core_view = !(lpmd_b[1] & lpmd_b[0]);
assign cpu_in_lpmd = cpu_in_lpmd_sys_view || cpu_in_lpmd_core_view;





assign spec_inst_vld = iui_special_fence
                    || iui_special_fencei
                    || iui_special_sync
                    || iui_special_synci;

parameter SPEC_IDLE = 2'b00,
          SPEC_FENC = 2'b01,
          SPEC_CDCA = 2'b10,
          SPEC_IICA = 2'b11;

always @ (posedge inv_sm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    spec_cur_state[1:0] <= SPEC_IDLE;
  else
    spec_cur_state[1:0] <= spec_nxt_state[1:0];
end

// &CombBeg; @165
always @( iui_special_fencei
       or lsu_xx_no_op
       or spec_cur_state
       or spec_inst_vld
       or lsu_cp0_icc_done
       or special_icache_inv_done)
begin
  case(spec_cur_state)
    SPEC_IDLE:
      if (spec_inst_vld)
        spec_nxt_state = SPEC_FENC;
      else
        spec_nxt_state = SPEC_IDLE;
    SPEC_FENC:
      if (lsu_xx_no_op)
        if (iui_special_fencei)
          spec_nxt_state = SPEC_CDCA;
        else
          spec_nxt_state = SPEC_IDLE;
      else
        spec_nxt_state = SPEC_FENC;
    SPEC_CDCA:
      if (iui_special_fencei)
        if (lsu_cp0_icc_done)
          spec_nxt_state = SPEC_IICA;
        else
          spec_nxt_state = SPEC_CDCA;
      else
        spec_nxt_state = SPEC_IDLE;
    SPEC_IICA:
      if (iui_special_fencei)
        if (special_icache_inv_done)
          spec_nxt_state = SPEC_IDLE;
        else
          spec_nxt_state = SPEC_IICA;
      else
        spec_nxt_state = SPEC_IDLE;
    default:
      spec_nxt_state = SPEC_IDLE;
  endcase
// &CombEnd; @199
end

assign special_fence_req    = spec_cur_state == SPEC_FENC;
assign special_dcache_clean = spec_cur_state == SPEC_CDCA;
assign special_icache_inv   = spec_cur_state == SPEC_IICA;

assign special_fence_done   = spec_cur_state == SPEC_FENC && lsu_xx_no_op;
assign special_fencei_done  = spec_cur_state == SPEC_IICA && special_icache_inv_done;
assign special_sync_done    = spec_cur_state == SPEC_FENC && lsu_xx_no_op;
assign special_synci_done   = spec_cur_state == SPEC_FENC && lsu_xx_no_op;

assign special_sm_stall     = iui_special_fence  && !special_fence_done
                           || iui_special_fencei && !special_fencei_done
                           || iui_special_sync   && !special_sync_done
                           || iui_special_synci  && !special_synci_done;






assign special_iui_expt_vld   = iui_special_ecall || iui_special_ebrek;
assign special_iui_stall      = lpmd_stall
                             || special_sm_stall;
assign special_regs_clk_en    = !cpu_in_lpmd;
assign special_regs_inv_sm_clk_en = spec_cur_state != SPEC_IDLE
                                 || spec_inst_vld;


assign cp0_ifu_lpmd_req = lpmd_in_wait_state;
assign cp0_ifu_in_lpmd  = cpu_in_lpmd;


assign cp0_lsu_fence_req = special_fence_req;


assign cp0_rtu_ex1_inst_ebreak = iui_special_ebrek;


assign cp0_had_lpmd_b[1:0] = lpmd_b[1:0];


assign cp0_sysio_lpmd_b[1:0] = lpmd_b[1:0];
assign cp0_sysio_ipend_b = !iui_special_int_vld;


assign cp0_yy_clk_en = !cpu_in_lpmd;

// &ModuleEnd; @247
endmodule
























// &ModuleBeg; @23
module pa_cp0_srst(
  cp0_ifu_srst_mask,
  cp0_ifu_srst_req,
  cp0_sysio_srst,
  cpurst_b,
  ifu_cp0_srst_ack,
  regs_srst_srst_vld,
  regs_srst_srstmd,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  srst_iui_stall,
  srst_sm_clk,
  srst_special_srst_sm_clk_en,
  sysio_cp0_clk_en
);

// &Ports; @24
input          cpurst_b;
input          ifu_cp0_srst_ack;
input          regs_srst_srst_vld;
input   [1:0]  regs_srst_srstmd;
input          rtu_yy_xx_dbgon;
input          rtu_yy_xx_flush;
input          srst_sm_clk;
input          sysio_cp0_clk_en;
output         cp0_ifu_srst_mask;
output         cp0_ifu_srst_req;
output  [1:0]  cp0_sysio_srst;
output         srst_iui_stall;
output         srst_special_srst_sm_clk_en;

// &Regs; @25
reg     [1:0]  cur_state;
reg     [1:0]  next_state;

// &Wires; @26
wire           cp0_ifu_srst_mask;
wire           cp0_ifu_srst_req;
wire    [1:0]  cp0_sysio_srst;
wire           cpurst_b;
wire           ifu_cp0_srst_ack;
wire           regs_srst_srst_vld;
wire    [1:0]  regs_srst_srstmd;
wire           rtu_yy_xx_dbgon;
wire           rtu_yy_xx_flush;
wire           srst_ack;
wire           srst_cmplt;
wire           srst_in_wait_state;
wire           srst_iui_stall;
wire           srst_sm_clk;
wire           srst_sm_clk_en;
wire           srst_special_srst_sm_clk_en;
wire           sysio_cp0_clk_en;


parameter IDLE   = 2'b00;
parameter WFACK  = 2'b01;
parameter WFCPLT = 2'b10;
parameter WFRST  = 2'b11;




assign srst_sm_clk_en = regs_srst_srst_vld || (cur_state != IDLE);













always @(posedge srst_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else if(rtu_yy_xx_flush)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end

// &CombBeg; @60
always @( cur_state
       or regs_srst_srst_vld
       or sysio_cp0_clk_en
       or srst_ack)
begin
  case(cur_state)
  IDLE   : if(regs_srst_srst_vld)
             next_state = WFACK;
           else
             next_state = IDLE;
  WFACK  : if(srst_ack)
             next_state = WFCPLT;
           else
             next_state = WFACK;
  WFCPLT : if(sysio_cp0_clk_en)
             next_state = WFRST;
           else
             next_state = WFCPLT;
  WFRST  :   next_state = WFRST;
  default:   next_state = IDLE;
  endcase
// &CombEnd; @77
end

assign srst_in_wait_state = (cur_state == WFACK);
assign srst_cmplt         = (cur_state == WFCPLT);


assign srst_iui_stall = (cur_state == IDLE) && regs_srst_srst_vld
                     || (cur_state != IDLE);

assign cp0_ifu_srst_req = srst_in_wait_state;





assign srst_ack = ifu_cp0_srst_ack
               || rtu_yy_xx_dbgon;

assign cp0_sysio_srst[1:0] = {2{srst_cmplt && sysio_cp0_clk_en}} & regs_srst_srstmd[1:0];

assign cp0_ifu_srst_mask = (cur_state == WFCPLT) || (cur_state == WFRST);

assign srst_special_srst_sm_clk_en = srst_sm_clk_en;

// &ModuleEnd; @101
endmodule
























// &ModuleBeg; @23
module pa_cp0_top(
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_mcause_data,
  cp0_had_pcfifo_wen,
  cp0_hpcp_index,
  cp0_hpcp_pmdm,
  cp0_hpcp_pmdu,
  cp0_hpcp_wdata,
  cp0_hpcp_wreg,
  cp0_idu_mcause,
  cp0_idu_mepc,
  cp0_idu_sp_use_scratch,
  cp0_idu_sp_wdata,
  cp0_idu_sp_wen,
  cp0_idu_sp_wen_gate,
  cp0_idu_spec_push_en,
  cp0_idu_swap_sp_en,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_ifu_mtvec,
  cp0_ifu_ras_en,
  cp0_ifu_rst_inv_done,
  cp0_ifu_srst_mask,
  cp0_ifu_srst_req,
  cp0_lsu_dcache_en,
  cp0_lsu_dcache_wa,
  cp0_lsu_dcache_wb,
  cp0_lsu_fence_req,
  cp0_lsu_icc_addr,
  cp0_lsu_icc_op,
  cp0_lsu_icc_req,
  cp0_lsu_icc_type,
  cp0_lsu_mm,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cp0_rtu_chgflw_pc,
  cp0_rtu_chgflw_vld,
  cp0_rtu_ex1_cmplt,
  cp0_rtu_ex1_data,
  cp0_rtu_ex1_expt_vec,
  cp0_rtu_ex1_expt_vld,
  cp0_rtu_ex1_flush,
  cp0_rtu_ex1_inst_bkpt,
  cp0_rtu_ex1_inst_ebreak,
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_ex1_stall,
  cp0_rtu_ex1_wb_preg,
  cp0_rtu_ex1_wb_vld,
  cp0_rtu_in_expt,
  cp0_rtu_in_nmi,
  cp0_rtu_int_id,
  cp0_rtu_int_level,
  cp0_rtu_int_mode,
  cp0_rtu_mie,
  cp0_rtu_mnxti_vld,
  cp0_rtu_mpil,
  cp0_rtu_pm_bypass,
  cp0_rtu_wfe_en,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_sysio_srst,
  cp0_xx_async_expt_en,
  cp0_yy_clk_en,
  cp0_yy_cskyisaee,
  cp0_yy_mach_mode,
  cp0_yy_priv_mode,
  cpurst_b,
  forever_cpuclk,
  had_cp0_mcause_data,
  had_cp0_xx_dbg,
  had_yy_xx_dbg,
  hpcp_cp0_data,
  idu_cp0_ex1_dst_idx,
  idu_cp0_ex1_dst_vld,
  idu_cp0_ex1_expt_type,
  idu_cp0_ex1_expt_vld,
  idu_cp0_ex1_func,
  idu_cp0_ex1_inst_bkpt,
  idu_cp0_ex1_opcode,
  idu_cp0_ex1_rs1,
  idu_cp0_ex1_rs2,
  idu_cp0_ex1_sel,
  idu_cp0_ex1_sub_func,
  idu_cp0_ipop_data,
  idu_cp0_mcause_wen,
  idu_cp0_mepc_wen,
  idu_cp0_sp_reg,
  idu_cp0_sp_swap_pending,
  idu_cp0_sp_swap_req,
  idu_cp0_sp_swap_req_gate,
  idu_yy_xx_tail_ack,
  ifu_cp0_bht_inv_done,
  ifu_cp0_icache_inv_done,
  ifu_cp0_lpmd_ack,
  ifu_cp0_rst_inv_req,
  ifu_cp0_srst_ack,
  ifu_cp0_vec_err,
  ifu_cp0_vec_succeed,
  lsu_cp0_icc_done,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  rtu_cp0_bus_error,
  rtu_cp0_epc,
  rtu_cp0_ex1_dbg_cancel,
  rtu_cp0_expt_mtval,
  rtu_cp0_int_level,
  rtu_cp0_int_vld_raw,
  rtu_cp0_lockup_clr,
  rtu_cp0_lockup_vld,
  rtu_cp0_mie_en,
  rtu_cp0_mie_en_gate,
  rtu_cp0_mnxti_pending_vld,
  rtu_cp0_nmi_vld,
  rtu_cp0_pending_int_hv,
  rtu_cp0_pending_int_id,
  rtu_cp0_pending_int_level,
  rtu_cp0_wk_int,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vec,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_flush,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_tail_int_vld,
  sysio_cp0_clk_en,
  sysio_cp0_clkratio,
  sysio_cp0_rst_addr,
  sysio_cp0_sys_view_lpmd_b,
  tcip_cp0_clic_base
);

// &Ports; @24
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_cp0_mcause_data;
input           had_cp0_xx_dbg;
input           had_yy_xx_dbg;
input   [31:0]  hpcp_cp0_data;
input   [5 :0]  idu_cp0_ex1_dst_idx;
input           idu_cp0_ex1_dst_vld;
input           idu_cp0_ex1_expt_type;
input           idu_cp0_ex1_expt_vld;
input   [4 :0]  idu_cp0_ex1_func;
input   [8 :0]  idu_cp0_ex1_inst_bkpt;
input   [31:0]  idu_cp0_ex1_opcode;
input   [31:0]  idu_cp0_ex1_rs1;
input   [11:0]  idu_cp0_ex1_rs2;
input           idu_cp0_ex1_sel;
input   [4 :0]  idu_cp0_ex1_sub_func;
input   [31:0]  idu_cp0_ipop_data;
input           idu_cp0_mcause_wen;
input           idu_cp0_mepc_wen;
input   [31:0]  idu_cp0_sp_reg;
input           idu_cp0_sp_swap_pending;
input           idu_cp0_sp_swap_req;
input           idu_cp0_sp_swap_req_gate;
input           idu_yy_xx_tail_ack;
input           ifu_cp0_bht_inv_done;
input           ifu_cp0_icache_inv_done;
input           ifu_cp0_lpmd_ack;
input           ifu_cp0_rst_inv_req;
input           ifu_cp0_srst_ack;
input           ifu_cp0_vec_err;
input           ifu_cp0_vec_succeed;
input           lsu_cp0_icc_done;
input           lsu_xx_no_op;
input           pad_yy_gate_clk_en_b;
input           rtu_cp0_bus_error;
input   [31:0]  rtu_cp0_epc;
input           rtu_cp0_ex1_dbg_cancel;
input   [31:0]  rtu_cp0_expt_mtval;
input   [7 :0]  rtu_cp0_int_level;
input           rtu_cp0_int_vld_raw;
input           rtu_cp0_lockup_clr;
input           rtu_cp0_lockup_vld;
input           rtu_cp0_mie_en;
input           rtu_cp0_mie_en_gate;
input           rtu_cp0_mnxti_pending_vld;
input           rtu_cp0_nmi_vld;
input           rtu_cp0_pending_int_hv;
input   [11:0]  rtu_cp0_pending_int_id;
input   [7 :0]  rtu_cp0_pending_int_level;
input           rtu_cp0_wk_int;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input   [11:0]  rtu_yy_xx_expt_vec;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_expt_vld_gate;
input           rtu_yy_xx_flush;
input           rtu_yy_xx_int_hv;
input           rtu_yy_xx_tail_int_vld;
input           sysio_cp0_clk_en;
input   [2 :0]  sysio_cp0_clkratio;
input   [31:0]  sysio_cp0_rst_addr;
input   [1 :0]  sysio_cp0_sys_view_lpmd_b;
input   [31:0]  tcip_cp0_clic_base;
output  [31:0]  cp0_had_cpuid_idx0;
output  [1 :0]  cp0_had_lpmd_b;
output  [31:0]  cp0_had_mcause_data;
output          cp0_had_pcfifo_wen;
output  [11:0]  cp0_hpcp_index;
output          cp0_hpcp_pmdm;
output          cp0_hpcp_pmdu;
output  [31:0]  cp0_hpcp_wdata;
output          cp0_hpcp_wreg;
output  [31:0]  cp0_idu_mcause;
output  [31:0]  cp0_idu_mepc;
output          cp0_idu_sp_use_scratch;
output  [31:0]  cp0_idu_sp_wdata;
output          cp0_idu_sp_wen;
output          cp0_idu_sp_wen_gate;
output          cp0_idu_spec_push_en;
output          cp0_idu_swap_sp_en;
output          cp0_ifu_bht_en;
output          cp0_ifu_bht_inv;
output          cp0_ifu_icache_en;
output  [31:0]  cp0_ifu_icache_inv_addr;
output          cp0_ifu_icache_inv_req;
output          cp0_ifu_icache_inv_type;
output          cp0_ifu_in_lpmd;
output          cp0_ifu_lpmd_req;
output  [31:0]  cp0_ifu_mtvec;
output          cp0_ifu_ras_en;
output          cp0_ifu_rst_inv_done;
output          cp0_ifu_srst_mask;
output          cp0_ifu_srst_req;
output          cp0_lsu_dcache_en;
output          cp0_lsu_dcache_wa;
output          cp0_lsu_dcache_wb;
output          cp0_lsu_fence_req;
output  [31:0]  cp0_lsu_icc_addr;
output  [1 :0]  cp0_lsu_icc_op;
output          cp0_lsu_icc_req;
output  [1 :0]  cp0_lsu_icc_type;
output          cp0_lsu_mm;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output  [31:0]  cp0_rtu_chgflw_pc;
output          cp0_rtu_chgflw_vld;
output          cp0_rtu_ex1_cmplt;
output  [31:0]  cp0_rtu_ex1_data;
output  [3 :0]  cp0_rtu_ex1_expt_vec;
output          cp0_rtu_ex1_expt_vld;
output          cp0_rtu_ex1_flush;
output  [8 :0]  cp0_rtu_ex1_inst_bkpt;
output          cp0_rtu_ex1_inst_ebreak;
output          cp0_rtu_ex1_inst_mret;
output          cp0_rtu_ex1_stall;
output  [5 :0]  cp0_rtu_ex1_wb_preg;
output          cp0_rtu_ex1_wb_vld;
output          cp0_rtu_in_expt;
output          cp0_rtu_in_nmi;
output  [11:0]  cp0_rtu_int_id;
output  [7 :0]  cp0_rtu_int_level;
output  [1 :0]  cp0_rtu_int_mode;
output          cp0_rtu_mie;
output          cp0_rtu_mnxti_vld;
output  [7 :0]  cp0_rtu_mpil;
output  [1 :0]  cp0_rtu_pm_bypass;
output          cp0_rtu_wfe_en;
output          cp0_sysio_ipend_b;
output  [1 :0]  cp0_sysio_lpmd_b;
output  [1 :0]  cp0_sysio_srst;
output          cp0_xx_async_expt_en;
output          cp0_yy_clk_en;
output          cp0_yy_cskyisaee;
output          cp0_yy_mach_mode;
output  [1 :0]  cp0_yy_priv_mode;

// &Regs; @25

// &Wires; @26
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cp0_had_pcfifo_wen;
wire    [11:0]  cp0_hpcp_index;
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_hpcp_wdata;
wire            cp0_hpcp_wreg;
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_ifu_in_lpmd;
wire            cp0_ifu_lpmd_req;
wire    [31:0]  cp0_ifu_mtvec;
wire            cp0_ifu_ras_en;
wire            cp0_ifu_rst_inv_done;
wire            cp0_ifu_srst_mask;
wire            cp0_ifu_srst_req;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cp0_lsu_dcache_wb;
wire            cp0_lsu_fence_req;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire            cp0_lsu_mm;
wire    [31:0]  cp0_pad_mcause;
wire    [31:0]  cp0_pad_mintstatus;
wire    [31:0]  cp0_pad_mstatus;
wire    [31:0]  cp0_rtu_chgflw_pc;
wire            cp0_rtu_chgflw_vld;
wire            cp0_rtu_ex1_cmplt;
wire    [31:0]  cp0_rtu_ex1_data;
wire    [3 :0]  cp0_rtu_ex1_expt_vec;
wire            cp0_rtu_ex1_expt_vld;
wire            cp0_rtu_ex1_flush;
wire    [8 :0]  cp0_rtu_ex1_inst_bkpt;
wire            cp0_rtu_ex1_inst_ebreak;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_ex1_stall;
wire    [5 :0]  cp0_rtu_ex1_wb_preg;
wire            cp0_rtu_ex1_wb_vld;
wire            cp0_rtu_in_expt;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire    [1 :0]  cp0_rtu_int_mode;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_rtu_wfe_en;
wire            cp0_sysio_ipend_b;
wire    [1 :0]  cp0_sysio_lpmd_b;
wire    [1 :0]  cp0_sysio_srst;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_clk_en;
wire            cp0_yy_cskyisaee;
wire            cp0_yy_mach_mode;
wire    [1 :0]  cp0_yy_priv_mode;
wire            cpurst_b;
wire    [31:0]  ext_inst_ifu_icc_addr;
wire            ext_inst_ifu_icc_req;
wire            ext_inst_ifu_icc_type;
wire            ext_inst_ifu_inv_done;
wire    [31:0]  ext_inst_lsu_icc_addr;
wire            ext_inst_lsu_icc_done;
wire    [1 :0]  ext_inst_lsu_icc_op;
wire            ext_inst_lsu_icc_req;
wire    [1 :0]  ext_inst_lsu_icc_type;
wire            ext_iui_cache_stall;
wire            ext_iui_expt_vld;
wire            forever_cpuclk;
wire    [31:0]  had_cp0_mcause_data;
wire            had_cp0_xx_dbg;
wire            had_yy_xx_dbg;
wire    [31:0]  hpcp_cp0_data;
wire    [5 :0]  idu_cp0_ex1_dst_idx;
wire            idu_cp0_ex1_dst_vld;
wire            idu_cp0_ex1_expt_type;
wire            idu_cp0_ex1_expt_vld;
wire    [4 :0]  idu_cp0_ex1_func;
wire    [8 :0]  idu_cp0_ex1_inst_bkpt;
wire    [31:0]  idu_cp0_ex1_opcode;
wire    [31:0]  idu_cp0_ex1_rs1;
wire    [11:0]  idu_cp0_ex1_rs2;
wire            idu_cp0_ex1_sel;
wire    [4 :0]  idu_cp0_ex1_sub_func;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_yy_xx_tail_ack;
wire            ifu_cp0_bht_inv_done;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_lpmd_ack;
wire            ifu_cp0_rst_inv_req;
wire            ifu_cp0_srst_ack;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire            inv_sm_clk;
wire            iui_ext_inst_cache;
wire    [11:0]  iui_ext_inst_imm;
wire    [31:0]  iui_ext_inst_rs1;
wire            iui_regs_csr_mnxti_vld;
wire            iui_regs_csr_wen;
wire    [11:0]  iui_regs_imm;
wire            iui_regs_inst_csr;
wire            iui_regs_inst_mret;
wire    [31:0]  iui_regs_wdata;
wire            iui_regs_wdata_mie;
wire    [31:0]  iui_regs_wdata_rs1;
wire    [1 :0]  iui_regs_wdata_srst;
wire            iui_special_ebrek;
wire            iui_special_ecall;
wire            iui_special_fence;
wire            iui_special_fencei;
wire            iui_special_int_vld;
wire            iui_special_sync;
wire            iui_special_synci;
wire            iui_special_wfi;
wire            lsu_cp0_icc_done;
wire            lsu_xx_no_op;
wire            pad_yy_gate_clk_en_b;
wire            regs_iui_expt_vld;
wire    [31:0]  regs_iui_mepc;
wire            regs_iui_mie;
wire            regs_iui_mnxti_sel;
wire    [31:0]  regs_iui_mstatus;
wire    [1 :0]  regs_iui_pm;
wire    [31:0]  regs_iui_rdata;
wire    [1 :0]  regs_special_lpmd;
wire            regs_srst_srst_vld;
wire    [1 :0]  regs_srst_srstmd;
wire            rtu_cp0_bus_error;
wire    [31:0]  rtu_cp0_epc;
wire            rtu_cp0_ex1_dbg_cancel;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mie_en_gate;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_cp0_wk_int;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_tail_int_vld;
wire            special_dcache_clean;
wire            special_icache_inv;
wire            special_icache_inv_done;
wire            special_iui_expt_vld;
wire            special_iui_stall;
wire            special_regs_clk_en;
wire            special_regs_inv_sm_clk_en;
wire            srst_iui_stall;
wire            srst_sm_clk;
wire            srst_special_srst_sm_clk_en;
wire            sysio_cp0_clk_en;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;
wire    [31:0]  tcip_cp0_clic_base;











// &Instance("pa_cp0_iui", "x_pa_cp0_iui"); @37
pa_cp0_iui  x_pa_cp0_iui (
  .cp0_rtu_chgflw_pc      (cp0_rtu_chgflw_pc     ),
  .cp0_rtu_chgflw_vld     (cp0_rtu_chgflw_vld    ),
  .cp0_rtu_ex1_cmplt      (cp0_rtu_ex1_cmplt     ),
  .cp0_rtu_ex1_data       (cp0_rtu_ex1_data      ),
  .cp0_rtu_ex1_expt_vec   (cp0_rtu_ex1_expt_vec  ),
  .cp0_rtu_ex1_expt_vld   (cp0_rtu_ex1_expt_vld  ),
  .cp0_rtu_ex1_flush      (cp0_rtu_ex1_flush     ),
  .cp0_rtu_ex1_inst_bkpt  (cp0_rtu_ex1_inst_bkpt ),
  .cp0_rtu_ex1_inst_mret  (cp0_rtu_ex1_inst_mret ),
  .cp0_rtu_ex1_stall      (cp0_rtu_ex1_stall     ),
  .cp0_rtu_ex1_wb_preg    (cp0_rtu_ex1_wb_preg   ),
  .cp0_rtu_ex1_wb_vld     (cp0_rtu_ex1_wb_vld    ),
  .ext_iui_cache_stall    (ext_iui_cache_stall   ),
  .ext_iui_expt_vld       (ext_iui_expt_vld      ),
  .idu_cp0_ex1_dst_idx    (idu_cp0_ex1_dst_idx   ),
  .idu_cp0_ex1_dst_vld    (idu_cp0_ex1_dst_vld   ),
  .idu_cp0_ex1_expt_type  (idu_cp0_ex1_expt_type ),
  .idu_cp0_ex1_expt_vld   (idu_cp0_ex1_expt_vld  ),
  .idu_cp0_ex1_func       (idu_cp0_ex1_func      ),
  .idu_cp0_ex1_inst_bkpt  (idu_cp0_ex1_inst_bkpt ),
  .idu_cp0_ex1_opcode     (idu_cp0_ex1_opcode    ),
  .idu_cp0_ex1_rs1        (idu_cp0_ex1_rs1       ),
  .idu_cp0_ex1_rs2        (idu_cp0_ex1_rs2       ),
  .idu_cp0_ex1_sel        (idu_cp0_ex1_sel       ),
  .idu_cp0_ex1_sub_func   (idu_cp0_ex1_sub_func  ),
  .iui_ext_inst_cache     (iui_ext_inst_cache    ),
  .iui_ext_inst_imm       (iui_ext_inst_imm      ),
  .iui_ext_inst_rs1       (iui_ext_inst_rs1      ),
  .iui_regs_csr_mnxti_vld (iui_regs_csr_mnxti_vld),
  .iui_regs_csr_wen       (iui_regs_csr_wen      ),
  .iui_regs_imm           (iui_regs_imm          ),
  .iui_regs_inst_csr      (iui_regs_inst_csr     ),
  .iui_regs_inst_mret     (iui_regs_inst_mret    ),
  .iui_regs_wdata         (iui_regs_wdata        ),
  .iui_regs_wdata_mie     (iui_regs_wdata_mie    ),
  .iui_regs_wdata_rs1     (iui_regs_wdata_rs1    ),
  .iui_regs_wdata_srst    (iui_regs_wdata_srst   ),
  .iui_special_ebrek      (iui_special_ebrek     ),
  .iui_special_ecall      (iui_special_ecall     ),
  .iui_special_fence      (iui_special_fence     ),
  .iui_special_fencei     (iui_special_fencei    ),
  .iui_special_int_vld    (iui_special_int_vld   ),
  .iui_special_sync       (iui_special_sync      ),
  .iui_special_synci      (iui_special_synci     ),
  .iui_special_wfi        (iui_special_wfi       ),
  .regs_iui_expt_vld      (regs_iui_expt_vld     ),
  .regs_iui_mepc          (regs_iui_mepc         ),
  .regs_iui_mie           (regs_iui_mie          ),
  .regs_iui_mnxti_sel     (regs_iui_mnxti_sel    ),
  .regs_iui_mstatus       (regs_iui_mstatus      ),
  .regs_iui_pm            (regs_iui_pm           ),
  .regs_iui_rdata         (regs_iui_rdata        ),
  .rtu_cp0_ex1_dbg_cancel (rtu_cp0_ex1_dbg_cancel),
  .rtu_cp0_wk_int         (rtu_cp0_wk_int        ),
  .rtu_yy_xx_dbgon        (rtu_yy_xx_dbgon       ),
  .special_iui_expt_vld   (special_iui_expt_vld  ),
  .special_iui_stall      (special_iui_stall     ),
  .srst_iui_stall         (srst_iui_stall        )
);



// &Instance("pa_cp0_regs", "x_pa_cp0_regs"); @40
pa_cp0_regs  x_pa_cp0_regs (
  .cp0_had_cpuid_idx0         (cp0_had_cpuid_idx0        ),
  .cp0_had_mcause_data        (cp0_had_mcause_data       ),
  .cp0_hpcp_index             (cp0_hpcp_index            ),
  .cp0_hpcp_pmdm              (cp0_hpcp_pmdm             ),
  .cp0_hpcp_pmdu              (cp0_hpcp_pmdu             ),
  .cp0_hpcp_wdata             (cp0_hpcp_wdata            ),
  .cp0_hpcp_wreg              (cp0_hpcp_wreg             ),
  .cp0_idu_mcause             (cp0_idu_mcause            ),
  .cp0_idu_mepc               (cp0_idu_mepc              ),
  .cp0_idu_sp_use_scratch     (cp0_idu_sp_use_scratch    ),
  .cp0_idu_sp_wdata           (cp0_idu_sp_wdata          ),
  .cp0_idu_sp_wen             (cp0_idu_sp_wen            ),
  .cp0_idu_sp_wen_gate        (cp0_idu_sp_wen_gate       ),
  .cp0_idu_spec_push_en       (cp0_idu_spec_push_en      ),
  .cp0_idu_swap_sp_en         (cp0_idu_swap_sp_en        ),
  .cp0_ifu_bht_en             (cp0_ifu_bht_en            ),
  .cp0_ifu_bht_inv            (cp0_ifu_bht_inv           ),
  .cp0_ifu_icache_en          (cp0_ifu_icache_en         ),
  .cp0_ifu_icache_inv_addr    (cp0_ifu_icache_inv_addr   ),
  .cp0_ifu_icache_inv_req     (cp0_ifu_icache_inv_req    ),
  .cp0_ifu_icache_inv_type    (cp0_ifu_icache_inv_type   ),
  .cp0_ifu_mtvec              (cp0_ifu_mtvec             ),
  .cp0_ifu_ras_en             (cp0_ifu_ras_en            ),
  .cp0_ifu_rst_inv_done       (cp0_ifu_rst_inv_done      ),
  .cp0_lsu_dcache_en          (cp0_lsu_dcache_en         ),
  .cp0_lsu_dcache_wa          (cp0_lsu_dcache_wa         ),
  .cp0_lsu_dcache_wb          (cp0_lsu_dcache_wb         ),
  .cp0_lsu_icc_addr           (cp0_lsu_icc_addr          ),
  .cp0_lsu_icc_op             (cp0_lsu_icc_op            ),
  .cp0_lsu_icc_req            (cp0_lsu_icc_req           ),
  .cp0_lsu_icc_type           (cp0_lsu_icc_type          ),
  .cp0_lsu_mm                 (cp0_lsu_mm                ),
  .cp0_pad_mcause             (cp0_pad_mcause            ),
  .cp0_pad_mintstatus         (cp0_pad_mintstatus        ),
  .cp0_pad_mstatus            (cp0_pad_mstatus           ),
  .cp0_rtu_in_expt            (cp0_rtu_in_expt           ),
  .cp0_rtu_in_nmi             (cp0_rtu_in_nmi            ),
  .cp0_rtu_int_id             (cp0_rtu_int_id            ),
  .cp0_rtu_int_level          (cp0_rtu_int_level         ),
  .cp0_rtu_int_mode           (cp0_rtu_int_mode          ),
  .cp0_rtu_mie                (cp0_rtu_mie               ),
  .cp0_rtu_mnxti_vld          (cp0_rtu_mnxti_vld         ),
  .cp0_rtu_mpil               (cp0_rtu_mpil              ),
  .cp0_rtu_pm_bypass          (cp0_rtu_pm_bypass         ),
  .cp0_rtu_wfe_en             (cp0_rtu_wfe_en            ),
  .cp0_xx_async_expt_en       (cp0_xx_async_expt_en      ),
  .cp0_yy_cskyisaee           (cp0_yy_cskyisaee          ),
  .cp0_yy_mach_mode           (cp0_yy_mach_mode          ),
  .cp0_yy_priv_mode           (cp0_yy_priv_mode          ),
  .cpurst_b                   (cpurst_b                  ),
  .ext_inst_ifu_icc_addr      (ext_inst_ifu_icc_addr     ),
  .ext_inst_ifu_icc_req       (ext_inst_ifu_icc_req      ),
  .ext_inst_ifu_icc_type      (ext_inst_ifu_icc_type     ),
  .ext_inst_ifu_inv_done      (ext_inst_ifu_inv_done     ),
  .ext_inst_lsu_icc_addr      (ext_inst_lsu_icc_addr     ),
  .ext_inst_lsu_icc_done      (ext_inst_lsu_icc_done     ),
  .ext_inst_lsu_icc_op        (ext_inst_lsu_icc_op       ),
  .ext_inst_lsu_icc_req       (ext_inst_lsu_icc_req      ),
  .ext_inst_lsu_icc_type      (ext_inst_lsu_icc_type     ),
  .forever_cpuclk             (forever_cpuclk            ),
  .had_cp0_mcause_data        (had_cp0_mcause_data       ),
  .hpcp_cp0_data              (hpcp_cp0_data             ),
  .idu_cp0_ipop_data          (idu_cp0_ipop_data         ),
  .idu_cp0_mcause_wen         (idu_cp0_mcause_wen        ),
  .idu_cp0_mepc_wen           (idu_cp0_mepc_wen          ),
  .idu_cp0_sp_reg             (idu_cp0_sp_reg            ),
  .idu_cp0_sp_swap_pending    (idu_cp0_sp_swap_pending   ),
  .idu_cp0_sp_swap_req        (idu_cp0_sp_swap_req       ),
  .idu_cp0_sp_swap_req_gate   (idu_cp0_sp_swap_req_gate  ),
  .idu_yy_xx_tail_ack         (idu_yy_xx_tail_ack        ),
  .ifu_cp0_bht_inv_done       (ifu_cp0_bht_inv_done      ),
  .ifu_cp0_icache_inv_done    (ifu_cp0_icache_inv_done   ),
  .ifu_cp0_rst_inv_req        (ifu_cp0_rst_inv_req       ),
  .ifu_cp0_vec_err            (ifu_cp0_vec_err           ),
  .ifu_cp0_vec_succeed        (ifu_cp0_vec_succeed       ),
  .inv_sm_clk                 (inv_sm_clk                ),
  .iui_regs_csr_mnxti_vld     (iui_regs_csr_mnxti_vld    ),
  .iui_regs_csr_wen           (iui_regs_csr_wen          ),
  .iui_regs_imm               (iui_regs_imm              ),
  .iui_regs_inst_csr          (iui_regs_inst_csr         ),
  .iui_regs_inst_mret         (iui_regs_inst_mret        ),
  .iui_regs_wdata             (iui_regs_wdata            ),
  .iui_regs_wdata_mie         (iui_regs_wdata_mie        ),
  .iui_regs_wdata_rs1         (iui_regs_wdata_rs1        ),
  .iui_regs_wdata_srst        (iui_regs_wdata_srst       ),
  .lsu_cp0_icc_done           (lsu_cp0_icc_done          ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .regs_iui_expt_vld          (regs_iui_expt_vld         ),
  .regs_iui_mepc              (regs_iui_mepc             ),
  .regs_iui_mie               (regs_iui_mie              ),
  .regs_iui_mnxti_sel         (regs_iui_mnxti_sel        ),
  .regs_iui_mstatus           (regs_iui_mstatus          ),
  .regs_iui_pm                (regs_iui_pm               ),
  .regs_iui_rdata             (regs_iui_rdata            ),
  .regs_special_lpmd          (regs_special_lpmd         ),
  .regs_srst_srst_vld         (regs_srst_srst_vld        ),
  .regs_srst_srstmd           (regs_srst_srstmd          ),
  .rtu_cp0_bus_error          (rtu_cp0_bus_error         ),
  .rtu_cp0_epc                (rtu_cp0_epc               ),
  .rtu_cp0_expt_mtval         (rtu_cp0_expt_mtval        ),
  .rtu_cp0_int_level          (rtu_cp0_int_level         ),
  .rtu_cp0_int_vld_raw        (rtu_cp0_int_vld_raw       ),
  .rtu_cp0_lockup_clr         (rtu_cp0_lockup_clr        ),
  .rtu_cp0_lockup_vld         (rtu_cp0_lockup_vld        ),
  .rtu_cp0_mie_en             (rtu_cp0_mie_en            ),
  .rtu_cp0_mie_en_gate        (rtu_cp0_mie_en_gate       ),
  .rtu_cp0_mnxti_pending_vld  (rtu_cp0_mnxti_pending_vld ),
  .rtu_cp0_nmi_vld            (rtu_cp0_nmi_vld           ),
  .rtu_cp0_pending_int_hv     (rtu_cp0_pending_int_hv    ),
  .rtu_cp0_pending_int_id     (rtu_cp0_pending_int_id    ),
  .rtu_cp0_pending_int_level  (rtu_cp0_pending_int_level ),
  .rtu_yy_xx_dbgon            (rtu_yy_xx_dbgon           ),
  .rtu_yy_xx_expt_int         (rtu_yy_xx_expt_int        ),
  .rtu_yy_xx_expt_vec         (rtu_yy_xx_expt_vec        ),
  .rtu_yy_xx_expt_vld         (rtu_yy_xx_expt_vld        ),
  .rtu_yy_xx_expt_vld_gate    (rtu_yy_xx_expt_vld_gate   ),
  .rtu_yy_xx_int_hv           (rtu_yy_xx_int_hv          ),
  .rtu_yy_xx_tail_int_vld     (rtu_yy_xx_tail_int_vld    ),
  .special_dcache_clean       (special_dcache_clean      ),
  .special_icache_inv         (special_icache_inv        ),
  .special_icache_inv_done    (special_icache_inv_done   ),
  .special_regs_clk_en        (special_regs_clk_en       ),
  .special_regs_inv_sm_clk_en (special_regs_inv_sm_clk_en),
  .sysio_cp0_clkratio         (sysio_cp0_clkratio        ),
  .sysio_cp0_rst_addr         (sysio_cp0_rst_addr        ),
  .tcip_cp0_clic_base         (tcip_cp0_clic_base        )
);



// &Instance("pa_cp0_special", "x_pa_cp0_special"); @43
pa_cp0_special  x_pa_cp0_special (
  .cp0_had_lpmd_b              (cp0_had_lpmd_b             ),
  .cp0_ifu_in_lpmd             (cp0_ifu_in_lpmd            ),
  .cp0_ifu_lpmd_req            (cp0_ifu_lpmd_req           ),
  .cp0_lsu_fence_req           (cp0_lsu_fence_req          ),
  .cp0_rtu_ex1_inst_ebreak     (cp0_rtu_ex1_inst_ebreak    ),
  .cp0_sysio_ipend_b           (cp0_sysio_ipend_b          ),
  .cp0_sysio_lpmd_b            (cp0_sysio_lpmd_b           ),
  .cp0_yy_clk_en               (cp0_yy_clk_en              ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_cp0_xx_dbg              (had_cp0_xx_dbg             ),
  .had_yy_xx_dbg               (had_yy_xx_dbg              ),
  .ifu_cp0_lpmd_ack            (ifu_cp0_lpmd_ack           ),
  .inv_sm_clk                  (inv_sm_clk                 ),
  .iui_special_ebrek           (iui_special_ebrek          ),
  .iui_special_ecall           (iui_special_ecall          ),
  .iui_special_fence           (iui_special_fence          ),
  .iui_special_fencei          (iui_special_fencei         ),
  .iui_special_int_vld         (iui_special_int_vld        ),
  .iui_special_sync            (iui_special_sync           ),
  .iui_special_synci           (iui_special_synci          ),
  .iui_special_wfi             (iui_special_wfi            ),
  .lsu_cp0_icc_done            (lsu_cp0_icc_done           ),
  .lsu_xx_no_op                (lsu_xx_no_op               ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .regs_special_lpmd           (regs_special_lpmd          ),
  .rtu_yy_xx_dbgon             (rtu_yy_xx_dbgon            ),
  .rtu_yy_xx_flush             (rtu_yy_xx_flush            ),
  .special_dcache_clean        (special_dcache_clean       ),
  .special_icache_inv          (special_icache_inv         ),
  .special_icache_inv_done     (special_icache_inv_done    ),
  .special_iui_expt_vld        (special_iui_expt_vld       ),
  .special_iui_stall           (special_iui_stall          ),
  .special_regs_clk_en         (special_regs_clk_en        ),
  .special_regs_inv_sm_clk_en  (special_regs_inv_sm_clk_en ),
  .srst_sm_clk                 (srst_sm_clk                ),
  .srst_special_srst_sm_clk_en (srst_special_srst_sm_clk_en),
  .sysio_cp0_sys_view_lpmd_b   (sysio_cp0_sys_view_lpmd_b  )
);



// &Instance("pa_cp0_ext_inst"); @46
pa_cp0_ext_inst  x_pa_cp0_ext_inst (
  .ext_inst_ifu_icc_addr (ext_inst_ifu_icc_addr),
  .ext_inst_ifu_icc_req  (ext_inst_ifu_icc_req ),
  .ext_inst_ifu_icc_type (ext_inst_ifu_icc_type),
  .ext_inst_ifu_inv_done (ext_inst_ifu_inv_done),
  .ext_inst_lsu_icc_addr (ext_inst_lsu_icc_addr),
  .ext_inst_lsu_icc_done (ext_inst_lsu_icc_done),
  .ext_inst_lsu_icc_op   (ext_inst_lsu_icc_op  ),
  .ext_inst_lsu_icc_req  (ext_inst_lsu_icc_req ),
  .ext_inst_lsu_icc_type (ext_inst_lsu_icc_type),
  .ext_iui_cache_stall   (ext_iui_cache_stall  ),
  .ext_iui_expt_vld      (ext_iui_expt_vld     ),
  .iui_ext_inst_cache    (iui_ext_inst_cache   ),
  .iui_ext_inst_imm      (iui_ext_inst_imm     ),
  .iui_ext_inst_rs1      (iui_ext_inst_rs1     )
);

// &Force("output", "cp0_yy_priv_mode"); @47

// &Instance("pa_cp0_srst"); @49
pa_cp0_srst  x_pa_cp0_srst (
  .cp0_ifu_srst_mask           (cp0_ifu_srst_mask          ),
  .cp0_ifu_srst_req            (cp0_ifu_srst_req           ),
  .cp0_sysio_srst              (cp0_sysio_srst             ),
  .cpurst_b                    (cpurst_b                   ),
  .ifu_cp0_srst_ack            (ifu_cp0_srst_ack           ),
  .regs_srst_srst_vld          (regs_srst_srst_vld         ),
  .regs_srst_srstmd            (regs_srst_srstmd           ),
  .rtu_yy_xx_dbgon             (rtu_yy_xx_dbgon            ),
  .rtu_yy_xx_flush             (rtu_yy_xx_flush            ),
  .srst_iui_stall              (srst_iui_stall             ),
  .srst_sm_clk                 (srst_sm_clk                ),
  .srst_special_srst_sm_clk_en (srst_special_srst_sm_clk_en),
  .sysio_cp0_clk_en            (sysio_cp0_clk_en           )
);


assign cp0_had_pcfifo_wen        = 1'b1;


// &ModuleEnd; @90
endmodule
























// &ModuleBeg; @23
module pa_cp0_trap_csr(
  cp0_hpcp_pmdm,
  cp0_hpcp_pmdu,
  cp0_idu_mcause,
  cp0_idu_mepc,
  cp0_idu_sp_use_scratch,
  cp0_idu_sp_wdata,
  cp0_idu_sp_wen,
  cp0_idu_sp_wen_gate,
  cp0_lsu_mm,
  cp0_rtu_in_nmi,
  cp0_rtu_int_id,
  cp0_rtu_int_level,
  cp0_rtu_int_mode,
  cp0_rtu_mie,
  cp0_rtu_mnxti_vld,
  cp0_rtu_mpil,
  cp0_rtu_pm_bypass,
  cp0_yy_cskyisaee,
  cpurst_b,
  idu_cp0_ipop_data,
  idu_cp0_mcause_wen,
  idu_cp0_mepc_wen,
  idu_cp0_sp_reg,
  idu_cp0_sp_swap_pending,
  idu_cp0_sp_swap_req,
  idu_cp0_sp_swap_req_gate,
  idu_yy_xx_tail_ack,
  ifu_cp0_vec_err,
  ifu_cp0_vec_succeed,
  iui_regs_inst_mret,
  iui_regs_wdata,
  iui_regs_wdata_mie,
  iui_regs_wdata_rs1,
  mcause_local_en,
  mcause_value,
  mclicbase_value,
  mcnten_local_en,
  mcnten_value,
  medeleg_value,
  mepc_local_en,
  mepc_value,
  mideleg_value,
  mie_value,
  mintstatus_value,
  mip_value,
  misa_value,
  mnmicause_local_en,
  mnmicause_value,
  mnmipc_local_en,
  mnmipc_value,
  mnxti_local_en,
  mnxti_value,
  mscratch_local_en,
  mscratch_value,
  mscratchcsw_local_en,
  mscratchcsw_value,
  mscratchcswl_local_en,
  mscratchcswl_value,
  mstatus_local_en,
  mstatus_value,
  mtval_local_en,
  mtval_value,
  mtvec_local_en,
  mtvec_rslt,
  mtvec_value,
  mtvt_local_en,
  mtvt_value,
  mxstatus_local_en,
  mxstatus_value,
  regs_clk,
  regs_cpu_in_int,
  regs_cpu_in_nmi,
  regs_flush_clk,
  regs_iui_mie,
  regs_spswap_en,
  regs_swap_int_sp_en_gate,
  rtu_cp0_epc,
  rtu_cp0_expt_mtval,
  rtu_cp0_int_level,
  rtu_cp0_int_vld_raw,
  rtu_cp0_mie_en,
  rtu_cp0_mnxti_pending_vld,
  rtu_cp0_nmi_vld,
  rtu_cp0_pending_int_hv,
  rtu_cp0_pending_int_id,
  rtu_cp0_pending_int_level,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vec,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_tail_int_vld,
  tcip_cp0_clic_base,
  trap_csr_pm
);

// &Ports; @24
input           cpurst_b;
input   [31:0]  idu_cp0_ipop_data;
input           idu_cp0_mcause_wen;
input           idu_cp0_mepc_wen;
input   [31:0]  idu_cp0_sp_reg;
input           idu_cp0_sp_swap_pending;
input           idu_cp0_sp_swap_req;
input           idu_cp0_sp_swap_req_gate;
input           idu_yy_xx_tail_ack;
input           ifu_cp0_vec_err;
input           ifu_cp0_vec_succeed;
input           iui_regs_inst_mret;
input   [31:0]  iui_regs_wdata;
input           iui_regs_wdata_mie;
input   [31:0]  iui_regs_wdata_rs1;
input           mcause_local_en;
input           mcnten_local_en;
input           mepc_local_en;
input           mnmicause_local_en;
input           mnmipc_local_en;
input           mnxti_local_en;
input           mscratch_local_en;
input           mscratchcsw_local_en;
input           mscratchcswl_local_en;
input           mstatus_local_en;
input           mtval_local_en;
input           mtvec_local_en;
input           mtvt_local_en;
input           mxstatus_local_en;
input           regs_clk;
input           regs_cpu_in_nmi;
input           regs_flush_clk;
input           regs_spswap_en;
input   [31:0]  rtu_cp0_epc;
input   [31:0]  rtu_cp0_expt_mtval;
input   [7 :0]  rtu_cp0_int_level;
input           rtu_cp0_int_vld_raw;
input           rtu_cp0_mie_en;
input           rtu_cp0_mnxti_pending_vld;
input           rtu_cp0_nmi_vld;
input           rtu_cp0_pending_int_hv;
input   [11:0]  rtu_cp0_pending_int_id;
input   [7 :0]  rtu_cp0_pending_int_level;
input           rtu_yy_xx_expt_int;
input   [11:0]  rtu_yy_xx_expt_vec;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_int_hv;
input           rtu_yy_xx_tail_int_vld;
input   [31:0]  tcip_cp0_clic_base;
output          cp0_hpcp_pmdm;
output          cp0_hpcp_pmdu;
output  [31:0]  cp0_idu_mcause;
output  [31:0]  cp0_idu_mepc;
output          cp0_idu_sp_use_scratch;
output  [31:0]  cp0_idu_sp_wdata;
output          cp0_idu_sp_wen;
output          cp0_idu_sp_wen_gate;
output          cp0_lsu_mm;
output          cp0_rtu_in_nmi;
output  [11:0]  cp0_rtu_int_id;
output  [7 :0]  cp0_rtu_int_level;
output  [1 :0]  cp0_rtu_int_mode;
output          cp0_rtu_mie;
output          cp0_rtu_mnxti_vld;
output  [7 :0]  cp0_rtu_mpil;
output  [1 :0]  cp0_rtu_pm_bypass;
output          cp0_yy_cskyisaee;
output  [31:0]  mcause_value;
output  [31:0]  mclicbase_value;
output  [31:0]  mcnten_value;
output  [31:0]  medeleg_value;
output  [31:0]  mepc_value;
output  [31:0]  mideleg_value;
output  [31:0]  mie_value;
output  [31:0]  mintstatus_value;
output  [31:0]  mip_value;
output  [31:0]  misa_value;
output  [31:0]  mnmicause_value;
output  [31:0]  mnmipc_value;
output  [31:0]  mnxti_value;
output  [31:0]  mscratch_value;
output  [31:0]  mscratchcsw_value;
output  [31:0]  mscratchcswl_value;
output  [31:0]  mstatus_value;
output  [31:0]  mtval_value;
output  [29:0]  mtvec_rslt;
output  [31:0]  mtvec_value;
output  [31:0]  mtvt_value;
output  [31:0]  mxstatus_value;
output          regs_cpu_in_int;
output          regs_iui_mie;
output          regs_swap_int_sp_en_gate;
output  [1 :0]  trap_csr_pm;

// &Regs; @25
reg             cskyisaee;
reg             m_intr;
reg     [11:0]  m_vector;
reg     [2 :0]  mcnten_reg;
reg     [31:0]  mepc_reg;
reg             mie_bit;
reg     [7 :0]  mil;
reg             minhv;
reg             mm;
reg             mpie;
reg     [7 :0]  mpil;
reg     [1 :0]  mpp;
reg             mprv;
reg     [31:0]  mscratch;
reg     [31:0]  mtval_data;
reg     [29:0]  mtvec_base;
reg     [25:0]  mtvt_base;
reg             nmi_intr;
reg             nmi_mpie;
reg     [1 :0]  nmi_mpp;
reg     [30:0]  nmi_pc_31_1;
reg     [11:0]  nmi_vector;
reg     [1 :0]  pm;
reg             pmdm;
reg             pmdu;

// &Wires; @26
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_lsu_mm;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire    [1 :0]  cp0_rtu_int_mode;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_yy_cskyisaee;
wire            cpurst_b;
wire    [25:0]  extensions;
wire    [1 :0]  fs;
wire            hw_vector_clic_on;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_yy_xx_tail_ack;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire            int_mret_vld;
wire            ipush_sp_use_mscratch;
wire            iui_regs_inst_mret;
wire    [31:0]  iui_regs_wdata;
wire            iui_regs_wdata_mie;
wire    [31:0]  iui_regs_wdata_rs1;
wire    [31:0]  mcause_bypass_value;
wire            mcause_local_en;
wire    [31:0]  mcause_spec_value;
wire    [31:0]  mcause_value;
wire    [31:0]  mclicbase_value;
wire    [28:0]  mcnten_hpm;
wire            mcnten_local_en;
wire    [31:0]  mcnten_value;
wire    [31:0]  medeleg_value;
wire            mepc_local_en;
wire    [31:0]  mepc_value;
wire    [31:0]  mideleg_value;
wire            mie_valid;
wire    [31:0]  mie_value;
wire    [7 :0]  mil_val;
wire    [31:0]  mintstatus_value;
wire    [31:0]  mip_value;
wire    [31:0]  misa_value;
wire            mnmicause_local_en;
wire    [31:0]  mnmicause_value;
wire            mnmipc_local_en;
wire    [31:0]  mnmipc_value;
wire            mnxti_local_en;
wire    [29:0]  mnxti_pending_addr;
wire    [31:0]  mnxti_value;
wire            mnxti_vld_int_pending;
wire            mscratch_local_en;
wire            mscratch_swap_int_sp_en;
wire            mscratch_swap_int_sp_en_gate;
wire    [31:0]  mscratch_value;
wire            mscratchcsw_local_en;
wire            mscratchcsw_swap_en;
wire    [31:0]  mscratchcsw_value;
wire            mscratchcswl_local_en;
wire            mscratchcswl_swap_en;
wire    [31:0]  mscratchcswl_value;
wire            mstatus_local_en;
wire    [31:0]  mstatus_value;
wire            mtval_local_en;
wire    [31:0]  mtval_value;
wire            mtvec_local_en;
wire    [1 :0]  mtvec_mode;
wire    [29:0]  mtvec_rslt;
wire            mtvec_rslt_use_base;
wire    [31:0]  mtvec_value;
wire            mtvt_local_en;
wire    [31:0]  mtvt_value;
wire    [1 :0]  mxl;
wire            mxstatus_local_en;
wire    [31:0]  mxstatus_value;
wire    [7 :0]  opt_value;
wire    [1 :0]  pm_bypass;
wire            regs_clk;
wire            regs_cpu_in_int;
wire            regs_cpu_in_nmi;
wire            regs_flush_clk;
wire            regs_inst_nmi_mret;
wire            regs_iui_mie;
wire            regs_spswap_en;
wire            regs_swap_int_sp_en_gate;
wire    [31:0]  rtu_cp0_epc;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_tail_int_vld;
wire            sd;
wire    [7 :0]  spec_mil;
wire    [7 :0]  spec_mpil;
wire            swap_int_sp;
wire    [31:0]  tcip_cp0_clic_base;
wire    [1 :0]  trap_csr_pm;
wire    [29:0]  vec_adder_vbr;
wire    [11:0]  vec_adder_vec;
wire    [1 :0]  xs;




























assign sd      = fs[1:0] == 2'b11 || xs[1:0] == 2'b11;

assign xs[1:0] = 2'b0;

// &Force("output", "fs_dirty_upd"); @61
assign fs[1:0] = 2'b0;
always @(posedge regs_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    mprv <= 1'b0;
  end
  else if(mstatus_local_en || mnxti_local_en)
  begin
    mprv <= iui_regs_wdata[17];
  end
  else
  begin
    mprv <= mprv;
  end
end

always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mpp[1:0] <= 2'b11;
  else if(rtu_yy_xx_expt_vld)
    mpp[1:0] <= pm_bypass[1:0];
  else if(regs_inst_nmi_mret)
    mpp[1:0] <= nmi_mpp[1:0];
  else if(iui_regs_inst_mret)
    mpp[1:0] <= 2'b00;
  else if(mstatus_local_en || mnxti_local_en)
    mpp[1:0] <= iui_regs_wdata[12:11];
  else if(mcause_local_en)
    mpp[1:0] <= iui_regs_wdata[29:28];
  else if(idu_cp0_mcause_wen)
    mpp[1:0] <= idu_cp0_ipop_data[29:28];
  else
    mpp[1:0] <= mpp[1:0];
end

always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mpie <= 1'b0;
  else if(rtu_yy_xx_expt_vld)
    mpie <= mie_valid;
  else if(regs_inst_nmi_mret)
    mpie <= nmi_mpie;
  else if(iui_regs_inst_mret)
    mpie <= 1'b1;
  else if(mstatus_local_en || mnxti_local_en)
    mpie <= iui_regs_wdata[7];
  else if(mcause_local_en)
    mpie <= iui_regs_wdata[27];
  else if(idu_cp0_mcause_wen)
    mpie <= idu_cp0_ipop_data[27];
  else
    mpie <= mpie;
end

always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mie_bit <= 1'b0;
  else if(rtu_yy_xx_expt_vld)
    mie_bit <= 1'b0;
  else if(iui_regs_inst_mret)
    mie_bit <= mpie;
  else if(mstatus_local_en || mnxti_local_en)
    mie_bit <= iui_regs_wdata_mie;
  else if(rtu_cp0_mie_en)
    mie_bit <= 1'b1;
  else
    mie_bit <= mie_bit;
end
assign regs_iui_mie = mie_bit;

assign mie_valid = (mstatus_local_en || mnxti_local_en) ? iui_regs_wdata_mie
                                                        : iui_regs_inst_mret ? mpie : mie_bit;
assign mstatus_value[31:0]  = {sd, 13'b0, mprv, xs[1:0], fs[1:0],
                               mpp[1:0], 3'b0, mpie, 3'b0, mie_bit, 3'b0};












assign mxl[1:0] = 2'b01;




assign opt_value[7:0] = {4'b0000, 4'b0101};
assign extensions[25:0] = {2'b0, 4'b1001, 4'b0000, 4'b0001,
                                 4'b0001, opt_value[7:0]};
assign misa_value[31:0] = {mxl[1:0], 4'b0, extensions[25:0]};










assign medeleg_value[31:0] = 32'b0;










assign mideleg_value[31:0] = 32'b0;










assign mie_value[31:0] = 32'b0;









assign mtvec_mode[1:0] = 2'b11;


assign vec_adder_vec[11:0] = m_vector[11:0];

always @(posedge regs_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mtvec_base[29:0] <= 30'b0;
  else if(mtvec_local_en)
    mtvec_base[29:0] <= {iui_regs_wdata[31:6], 4'b0};
  else
    mtvec_base[29:0] <= mtvec_base[29:0];
end

assign mtvec_value[31:0] = {mtvec_base[29:0], mtvec_mode[1:0]};

assign vec_adder_vbr[29:0] = mtvt_value[31:2]  + {18'b0, vec_adder_vec[11:0]};
assign mtvec_rslt_use_base = !minhv || !m_intr; // Non-Vec mode or expt

assign mtvec_rslt[29:0] = mtvec_rslt_use_base ? mtvec_base[29:0]
                                              : vec_adder_vbr[29:0];











always @(posedge regs_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mcnten_reg[2:0] <= 3'b0;
  else if(mcnten_local_en)
    mcnten_reg[2:0] <= iui_regs_wdata[2:0];
  else
    mcnten_reg[2:0] <= mcnten_reg[2:0];
end

assign mcnten_hpm[28:0] = 29'b0;

assign mcnten_value[31:0] = {mcnten_hpm[28:0], mcnten_reg[2:0]};









always @(posedge regs_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mtvt_base[25:0] <= 26'b0;
  else if(mtvt_local_en)
    mtvt_base[25:0] <= iui_regs_wdata[31:6];
  else
    mtvt_base[25:0] <= mtvt_base[25:0];
end

assign mtvt_value[31:0] = {mtvt_base[25:0], 6'b0};
// &Force("output", "mtvt_value"); @383








always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mscratch[31:0] <= 32'b0;
  else if(mscratch_local_en)
    mscratch[31:0] <= iui_regs_wdata[31:0];
  else if(mscratch_swap_int_sp_en)
    mscratch[31:0] <= idu_cp0_sp_reg[31:0];
  else if(mscratchcsw_swap_en || mscratchcswl_swap_en)
    mscratch[31:0] <= iui_regs_wdata[31:0];
  else
    mscratch[31:0] <= mscratch[31:0];
end
assign mscratch_value[31:0] = mscratch[31:0];









always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mepc_reg[31:0] <= 32'b0;
  else if(rtu_yy_xx_expt_vld)
    mepc_reg[31:0] <= rtu_cp0_epc[31:0];
  else if(regs_inst_nmi_mret)
    mepc_reg[31:0] <= {nmi_pc_31_1[30:0], 1'b0};
  else if(mepc_local_en)
    mepc_reg[31:0] <= {iui_regs_wdata[31:1], 1'b0};
  else if(idu_cp0_mepc_wen)
    mepc_reg[31:0] <= {idu_cp0_ipop_data[31:1], 1'b0};
  else
    mepc_reg[31:0] <= mepc_reg[31:0];
end
// &Force("bus", "idu_cp0_ipop_data", 31, 0); @432

assign mepc_value[31:0] = mepc_reg[31:0];









// &Force("output", "mcause_value"); @444
always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    m_intr <= 1'b0;
  else if(rtu_yy_xx_expt_vld)
    m_intr <= rtu_yy_xx_expt_int;
  else if(regs_inst_nmi_mret)
    m_intr <= nmi_intr;
  else if(mcause_local_en)
    m_intr <= iui_regs_wdata[31];
  else if(idu_cp0_mcause_wen)
    m_intr <= idu_cp0_ipop_data[31];
  else if(rtu_yy_xx_tail_int_vld)
    m_intr <= 1'b1;
  else
    m_intr <= m_intr;
end

assign int_mret_vld = iui_regs_inst_mret && m_intr;

assign hw_vector_clic_on = (mtvec_mode[1:0] == 2'b11 && rtu_yy_xx_int_hv)
                         && rtu_yy_xx_expt_int && rtu_yy_xx_expt_vld;
always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    minhv <= 1'b0;
  else if(mtvec_mode[1] == 1'b0) // Orignal vec mode
    minhv <= 1'b0;
  else if(mcause_local_en)
    minhv <= iui_regs_wdata[30];
  else if(idu_cp0_mcause_wen)
    minhv <= idu_cp0_ipop_data[30];
  else if(hw_vector_clic_on)    // CLIC mode
    minhv <= 1'b1;
  else if(rtu_yy_xx_tail_int_vld)
    minhv <= rtu_cp0_pending_int_hv;
  else if(ifu_cp0_vec_succeed)
    minhv <= 1'b0;
end

always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mpil[7:0] <= 8'b0;
  else if(mtvec_mode[1] == 1'b0)
    mpil[7:0] <= 8'b0;
  else if(rtu_yy_xx_expt_int)
    mpil[7:0] <= mil_val[7:0];
  else if(mcause_local_en)
    mpil[7:0] <= iui_regs_wdata[23:16];
  else if(idu_cp0_mcause_wen)
    mpil[7:0] <= idu_cp0_ipop_data[23:16];
  else
    mpil[7:0] <= mpil[7:0];
end

always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    m_vector[11:0] <= 12'b0;
  else if(rtu_yy_xx_expt_vld)
    m_vector[11:0] <= rtu_yy_xx_expt_vec[11:0];
  else if(ifu_cp0_vec_err)
    m_vector[11:0] <= 12'd1;
  else if(regs_inst_nmi_mret)
    m_vector[11:0] <= nmi_vector[11:0];
  else if(mcause_local_en)
    m_vector[11:0] <= iui_regs_wdata[11:0];
  else if(idu_cp0_mcause_wen)
    m_vector[11:0] <= idu_cp0_ipop_data[11:0];
  else if(mnxti_local_en && mnxti_vld_int_pending)
    m_vector[11:0] <= rtu_cp0_pending_int_id[11:0];
  else if(idu_yy_xx_tail_ack || rtu_yy_xx_tail_int_vld)
    m_vector[11:0] <= rtu_cp0_pending_int_id[11:0];
  else
    m_vector[11:0] <= m_vector[11:0];
end

assign mcause_value[31:0]    = mtvec_mode[1] ?
                              {m_intr, minhv, mpp[1:0], mpie, 3'b0,
                                     mpil[7:0], 4'b0, m_vector[11:0]}
                            : {m_intr, 27'b0, m_vector[3:0]};
assign mcause_spec_value[31:0]    = {m_intr, 1'b0, mpp[1:0], mpie, 3'b0,
                                     mpil[7:0], 4'b0, m_vector[11:0]};
assign mcause_bypass_value[31:0] = {1'b1, 1'b0, pm[1:0], mie_bit, 3'b0,
                                     mil[7:0], 4'b0, rtu_yy_xx_expt_vec[11:0]};

assign regs_inst_nmi_mret = iui_regs_inst_mret && regs_cpu_in_nmi;








always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mtval_data[31:0] <= 32'b0;
  else if(rtu_yy_xx_expt_vld && !rtu_cp0_nmi_vld)
    mtval_data[31:0] <= rtu_cp0_expt_mtval[31:0];
  else if(ifu_cp0_vec_err)
    mtval_data[31:0] <= {vec_adder_vbr[29:0], 2'b0};
  else if(mtval_local_en)
    mtval_data[31:0] <= iui_regs_wdata[31:0];
  else
    mtval_data[31:0] <= mtval_data[31:0];
end
assign mtval_value[31:0] = mtval_data[31:0];









assign mip_value[31:0] = 32'b0;










assign mnxti_vld_int_pending = rtu_cp0_mnxti_pending_vld;
assign mnxti_pending_addr[29:0] = mtvt_value[31:2] + {18'b0, rtu_cp0_pending_int_id[11:0]};
assign mnxti_value[31:0] = mnxti_vld_int_pending ? {mnxti_pending_addr[29:0], 2'b0}
                                                 : 32'b0;








always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mil[7:0] <= 8'b0;
  else if(!mtvec_mode[1])
    mil[7:0] <= 8'b0;
  else if(rtu_yy_xx_expt_int && rtu_yy_xx_expt_vld)
    mil[7:0] <= rtu_cp0_int_level[7:0];
  else if(int_mret_vld)
    mil[7:0] <= mpil[7:0];
  else if(mnxti_local_en && mnxti_vld_int_pending)
    mil[7:0] <= rtu_cp0_pending_int_level[7:0];
  else if(idu_yy_xx_tail_ack || rtu_yy_xx_tail_int_vld)
    mil[7:0] <= rtu_cp0_pending_int_level[7:0];
  else
    mil[7:0] <= mil[7:0];
end
assign mintstatus_value[31:0] = {mil[7:0], 24'b0};

assign mil_val[7:0] = int_mret_vld ? mpil[7:0] : mil[7:0];









assign mscratchcsw_swap_en = mscratchcsw_local_en && mpp[1:0] != pm[1:0];
assign mscratchcsw_value[31:0] = mscratchcsw_swap_en ? mscratch[31:0]
                                                     : iui_regs_wdata_rs1[31:0];









assign spec_mil[7:0] = rtu_cp0_int_vld_raw ? rtu_cp0_int_level[7:0] : mil[7:0];
assign spec_mpil[7:0] = rtu_cp0_int_vld_raw ? mil[7:0] : mpil[7:0];

assign swap_int_sp = (spec_mil[7:0] == 8'b0) ^ (spec_mpil[7:0] == 8'b0);
assign mscratchcswl_swap_en = mscratchcswl_local_en && swap_int_sp;
assign mscratchcswl_value[31:0] = mscratchcswl_swap_en ? mscratch[31:0]
                                                       : iui_regs_wdata_rs1[31:0];

assign ipush_sp_use_mscratch = (rtu_cp0_int_vld_raw || idu_cp0_sp_swap_pending)
                            && swap_int_sp && regs_spswap_en;

assign mscratch_swap_int_sp_en = (idu_cp0_sp_swap_req
                               || int_mret_vld)
                               && regs_spswap_en && swap_int_sp;
assign mscratch_swap_int_sp_en_gate = (idu_cp0_sp_swap_req_gate
                                    || int_mret_vld)
                                    && regs_spswap_en && swap_int_sp;
assign regs_swap_int_sp_en_gate = mscratch_swap_int_sp_en_gate;










assign mclicbase_value[31:0] = tcip_cp0_clic_base[31:0];









always @(posedge regs_flush_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pm[1:0] <= 2'b11;
  else if(rtu_yy_xx_expt_vld)
    pm[1:0] <= 2'b11;
  else if(iui_regs_inst_mret)
    pm[1:0] <= mpp[1:0];
  else
    pm[1:0] <= pm[1:0];
end

assign pm_bypass[1:0] = iui_regs_inst_mret ? mpp[1:0]
                                           : pm[1:0];

always @(posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mm    <= 1'b1;
  else if(mxstatus_local_en)
    mm    <= iui_regs_wdata[15];
  else
    mm    <= mm;
end

always @(posedge regs_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
  begin
    cskyisaee <= 1'b1;
    pmdm      <= 1'b0;
    pmdu      <= 1'b0;
  end
  else if(mxstatus_local_en)
  begin
    cskyisaee <= iui_regs_wdata[22];
    pmdm      <= iui_regs_wdata[13];
    pmdu      <= iui_regs_wdata[10];
  end
  else
  begin
    cskyisaee <= cskyisaee;
    pmdm      <= pmdm;
    pmdu      <= pmdu;
  end
end
assign mxstatus_value[31:0]  = {pm[1:0], 7'b0, cskyisaee, 4'b0,
                                1'b0, 1'b0, mm, 1'b0, pmdm,
                                2'b0, pmdu, 2'b0, 8'b0};








always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nmi_intr <= 1'b0;
  else if (rtu_cp0_nmi_vld)
    nmi_intr <= m_intr;
  else if (mnmicause_local_en)
    nmi_intr <= iui_regs_wdata[31];
  else
    nmi_intr <= nmi_intr;
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nmi_mpp[1:0] <= 2'b0;
  else if (rtu_cp0_nmi_vld)
    nmi_mpp[1:0] <= mpp[1:0];
  else if (regs_inst_nmi_mret)
    nmi_mpp[1:0] <= 2'b0;
  else if (mnmicause_local_en)
    nmi_mpp[1:0] <= iui_regs_wdata[29:28];
  else
    nmi_mpp[1:0] <= nmi_mpp[1:0];
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nmi_mpie <= 1'b0;
  else if (rtu_cp0_nmi_vld)
    nmi_mpie <= mpie;
  else if (regs_inst_nmi_mret)
    nmi_mpie <= 1'b1;
  else if (mnmicause_local_en)
    nmi_mpie <= iui_regs_wdata[27];
  else
    nmi_mpie <= nmi_mpie;
end

always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nmi_vector[11:0] <= 12'b0;
  else if (rtu_cp0_nmi_vld)
    nmi_vector[11:0] <= m_vector[11:0];
  else if (mnmicause_local_en)
    nmi_vector[11:0] <= iui_regs_wdata[11:0];
  else
    nmi_vector[11:0] <= nmi_vector[11:0];
end

assign mnmicause_value[31:0] = {nmi_intr, 1'b0, nmi_mpp[1:0], nmi_mpie,
                                3'b0, 8'b0, 4'b0, nmi_vector[11:0]};








always @ (posedge regs_flush_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nmi_pc_31_1[30:0] <= 31'b0;
  else if (mnmipc_local_en)
    nmi_pc_31_1[30:0] <= iui_regs_wdata[31:1];
  else if (rtu_cp0_nmi_vld)
    nmi_pc_31_1[30:0] <= mepc_reg[31:1];
  else
    nmi_pc_31_1[30:0] <= nmi_pc_31_1[30:0];
end

assign mnmipc_value[31:0] = {nmi_pc_31_1[30:0], 1'b0};






assign regs_cpu_in_int  = m_intr;
assign trap_csr_pm[1:0] = pm[1:0];


assign cp0_rtu_int_id[11:0]   = m_vector[11:0];
assign cp0_rtu_int_level[7:0] = mil_val[7:0];
assign cp0_rtu_int_mode[1:0]  = mtvec_mode[1:0];
assign cp0_rtu_mpil[7:0]      = mpil[7:0];
assign cp0_rtu_mnxti_vld      = mnxti_local_en && mnxti_vld_int_pending;
assign cp0_rtu_mie            = mie_valid;
assign cp0_rtu_pm_bypass[1:0] = pm_bypass[1:0];
assign cp0_rtu_in_nmi         = regs_cpu_in_nmi;

assign cp0_yy_cskyisaee       = cskyisaee;
assign cp0_lsu_mm             = mm;



assign cp0_idu_sp_wen = mscratch_swap_int_sp_en;
assign cp0_idu_sp_wen_gate = mscratch_swap_int_sp_en_gate;
assign cp0_idu_sp_use_scratch = ipush_sp_use_mscratch;
assign cp0_idu_sp_wdata[31:0] = mscratch[31:0];
assign cp0_idu_mepc[31:0]     = rtu_cp0_int_vld_raw ? rtu_cp0_epc[31:0] : mepc_reg[31:0];
assign cp0_idu_mcause[31:0]   = rtu_cp0_int_vld_raw ? mcause_bypass_value[31:0] : mcause_spec_value[31:0];

assign cp0_hpcp_pmdm = pmdm;
assign cp0_hpcp_pmdu = pmdu;


// &ModuleEnd; @911
endmodule
























// &Depend("cpu_cfig.h"); @23
// &Depend("pa_cpu_top_golden_port.vp"); @24
// &ModuleBeg; @25
module E906_TOP(
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hlock,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  clk_en,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cpu_pad_dfs_ack,
  cpu_pad_lockup,
  cpu_pad_soft_rst,
  dahbl_pad_haddr,
  dahbl_pad_hburst,
  dahbl_pad_hlock,
  dahbl_pad_hprot,
  dahbl_pad_hsize,
  dahbl_pad_htrans,
  dahbl_pad_hwdata,
  dahbl_pad_hwrite,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hlock,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  lsu_pad_sc_pass,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_clic_int_vld,
  pad_cpu_dfs_req,
  pad_cpu_ext_int_b,
  pad_cpu_nmi,
  pad_cpu_rst_addr,
  pad_cpu_rst_b,
  pad_cpu_sys_cnt,
  pad_cpu_wakeup_event,
  pad_dahbl_hrdata,
  pad_dahbl_hready,
  pad_dahbl_hresp,
  pad_had_jtg_tclk,
  pad_had_jtg_tms_i,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_sysio_dbgrq_b,
  pad_yy_icg_scan_en,
  pad_yy_scan_mode,
  pad_yy_scan_rst_b,
  pll_core_cpuclk,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  sysio_pad_lpmd_b
);


// &Ports("compare", "../../../gen_rtl/cpu/rtl/pa_cpu_top_golden_port.v"); @27
input           clk_en;
input   [31:0]  pad_biu_hrdata;
input           pad_biu_hready;
input           pad_biu_hresp;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input   [31:0]  pad_clic_int_vld;
input           pad_cpu_dfs_req;
input           pad_cpu_ext_int_b;
input           pad_cpu_nmi;
input   [31:0]  pad_cpu_rst_addr;
input           pad_cpu_rst_b;
input   [63:0]  pad_cpu_sys_cnt;
input           pad_cpu_wakeup_event;
input   [31:0]  pad_dahbl_hrdata;
input           pad_dahbl_hready;
input           pad_dahbl_hresp;
input           pad_had_jtg_tclk;
input           pad_had_jtg_tms_i;
input           pad_had_jtg_trst_b;
input           pad_had_rst_b;
input   [31:0]  pad_iahbl_hrdata;
input           pad_iahbl_hready;
input           pad_iahbl_hresp;
input           pad_sysio_dbgrq_b;
input           pad_yy_icg_scan_en;
input           pad_yy_scan_mode;
input           pad_yy_scan_rst_b;
input           pll_core_cpuclk;
output  [31:0]  biu_pad_haddr;
output  [2 :0]  biu_pad_hburst;
output          biu_pad_hlock;
output  [3 :0]  biu_pad_hprot;
output  [2 :0]  biu_pad_hsize;
output  [1 :0]  biu_pad_htrans;
output  [31:0]  biu_pad_hwdata;
output          biu_pad_hwrite;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output          cpu_pad_dfs_ack;
output          cpu_pad_lockup;
output  [1 :0]  cpu_pad_soft_rst;
output  [31:0]  dahbl_pad_haddr;
output  [2 :0]  dahbl_pad_hburst;
output          dahbl_pad_hlock;
output  [3 :0]  dahbl_pad_hprot;
output  [2 :0]  dahbl_pad_hsize;
output  [1 :0]  dahbl_pad_htrans;
output  [31:0]  dahbl_pad_hwdata;
output          dahbl_pad_hwrite;
output  [1 :0]  had_pad_jdb_pm;
output          had_pad_jtg_tms_o;
output          had_pad_jtg_tms_oe;
output  [31:0]  iahbl_pad_haddr;
output  [2 :0]  iahbl_pad_hburst;
output          iahbl_pad_hlock;
output  [3 :0]  iahbl_pad_hprot;
output  [2 :0]  iahbl_pad_hsize;
output  [1 :0]  iahbl_pad_htrans;
output  [31:0]  iahbl_pad_hwdata;
output          iahbl_pad_hwrite;
output          lsu_pad_sc_pass;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output  [1 :0]  sysio_pad_lpmd_b;

// &Regs; @28

// &Wires; @29
wire    [31:0]  biu_pad_haddr;
wire    [2 :0]  biu_pad_hburst;
wire            biu_pad_hlock;
wire    [3 :0]  biu_pad_hprot;
wire    [2 :0]  biu_pad_hsize;
wire    [1 :0]  biu_pad_htrans;
wire    [31:0]  biu_pad_hwdata;
wire            biu_pad_hwrite;
wire            bmu_had_acc_err;
wire            bmu_had_grant;
wire    [31:0]  bmu_had_rdata;
wire            bmu_had_trans_cmplt;
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire            bmu_tcipif_had_acc_deny;
wire    [31:0]  bmu_tcipif_had_addr;
wire            bmu_tcipif_had_req;
wire            bmu_tcipif_had_req_dp;
wire    [1 :0]  bmu_tcipif_had_size;
wire            bmu_tcipif_had_supv_mode;
wire    [31:0]  bmu_tcipif_had_wdata;
wire            bmu_tcipif_had_write;
wire            bmu_tcipif_ibus_acc_deny;
wire    [31:0]  bmu_tcipif_ibus_addr;
wire            bmu_tcipif_ibus_req;
wire            bmu_tcipif_ibus_req_dp;
wire    [1 :0]  bmu_tcipif_ibus_size;
wire            bmu_tcipif_ibus_supv_mode;
wire    [31:0]  bmu_tcipif_ibus_wdata;
wire            bmu_tcipif_ibus_write;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire            clk_en;
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cp0_had_pcfifo_wen;
wire    [31:0]  cp0_pad_mcause;
wire    [31:0]  cp0_pad_mintstatus;
wire    [31:0]  cp0_pad_mstatus;
wire            cp0_yy_mach_mode;
wire    [1 :0]  cp0_yy_priv_mode;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpu_pad_dfs_ack;
wire            cpu_pad_lockup;
wire    [1 :0]  cpu_pad_soft_rst;
wire            cpurst_b;
wire    [31:0]  dahbl_pad_haddr;
wire    [2 :0]  dahbl_pad_hburst;
wire            dahbl_pad_hlock;
wire    [3 :0]  dahbl_pad_hprot;
wire    [2 :0]  dahbl_pad_hsize;
wire    [1 :0]  dahbl_pad_htrans;
wire    [31:0]  dahbl_pad_hwdata;
wire            dahbl_pad_hwrite;
wire            forever_cpuclk;
wire            forever_jtgclk;
wire    [31:0]  had_bmu_addr;
wire    [2 :0]  had_bmu_burst;
wire    [3 :0]  had_bmu_prot;
wire            had_bmu_req;
wire            had_bmu_seq;
wire    [1 :0]  had_bmu_size;
wire    [31:0]  had_bmu_wdata;
wire            had_bmu_write;
wire            had_core_exit_dbg;
wire    [31:0]  had_cp0_mcause_data;
wire            had_cp0_xx_dbg;
wire    [8 :0]  had_idu_id_inst_bkpt;
wire            had_idu_id_inst_bkpt_brir;
wire            had_idu_id_inst_bkpt_hit;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire    [31:0]  had_ifu_pc;
wire    [1 :0]  had_pad_jdb_pm;
wire            had_pad_jtg_tms_o;
wire            had_pad_jtg_tms_oe;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_ex1_trace_potential;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_rtu_xx_tme;
wire            had_tcipif_cmplt;
wire    [31:0]  had_tcipif_rdata;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire            had_yy_xx_dbg;
wire            hadrst_b;
wire    [31:0]  iahbl_pad_haddr;
wire    [2 :0]  iahbl_pad_hburst;
wire            iahbl_pad_hlock;
wire    [3 :0]  iahbl_pad_hprot;
wire    [2 :0]  iahbl_pad_hsize;
wire    [1 :0]  iahbl_pad_htrans;
wire    [31:0]  iahbl_pad_hwdata;
wire            iahbl_pad_hwrite;
wire            idu_had_id_chgflw_inst;
wire    [8 :0]  idu_had_id_inst_bkpt;
wire            idu_had_no_op;
wire            iu_xx_no_op;
wire            lsu_pad_sc_pass;
wire            lsu_xx_no_op;
wire    [31:0]  pad_biu_hrdata;
wire            pad_biu_hready;
wire            pad_biu_hresp;
wire    [11:0]  pad_bmu_dahbl_base;
wire    [11:0]  pad_bmu_dahbl_mask;
wire    [11:0]  pad_bmu_iahbl_base;
wire    [11:0]  pad_bmu_iahbl_mask;
wire    [31:0]  pad_clic_int_vld;
wire            pad_cpu_dfs_req;
wire            pad_cpu_ext_int_b;
wire            pad_cpu_nmi;
wire    [31:0]  pad_cpu_rst_addr;
wire            pad_cpu_rst_b;
wire    [63:0]  pad_cpu_sys_cnt;
wire            pad_cpu_wakeup_event;
wire    [31:0]  pad_dahbl_hrdata;
wire            pad_dahbl_hready;
wire            pad_dahbl_hresp;
wire            pad_had_jtg_tclk;
wire            pad_had_jtg_tms_i;
wire            pad_had_jtg_trst_b;
wire            pad_had_rst_b;
wire    [31:0]  pad_iahbl_hrdata;
wire            pad_iahbl_hready;
wire            pad_iahbl_hresp;
wire            pad_sysio_dbgrq_b;
wire            pad_yy_icg_scan_en;
wire            pad_yy_scan_mode;
wire            pad_yy_scan_rst_b;
wire            pll_core_cpuclk;
wire            rtu_clic_warm_up;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_had_xx_split;
wire            rtu_pad_inst_retire;
wire            rtu_pad_inst_split;
wire    [31:0]  rtu_pad_retire_pc;
wire    [31:0]  rtu_pad_wb0_data;
wire    [5 :0]  rtu_pad_wb0_preg;
wire            rtu_pad_wb0_vld;
wire    [31:0]  rtu_pad_wb1_data;
wire    [5 :0]  rtu_pad_wb1_preg;
wire            rtu_pad_wb1_vld;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_retire;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;
wire            sysio_had_sdb_req_b;
wire    [1 :0]  sysio_pad_lpmd_b;
wire    [31:0]  tcip_cp0_clic_base;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_bmu_had_acc_err;
wire    [31:0]  tcipif_bmu_had_data;
wire            tcipif_bmu_had_grnt;
wire            tcipif_bmu_had_trans_cmplt;
wire            tcipif_bmu_ibus_acc_err;
wire    [31:0]  tcipif_bmu_ibus_data;
wire            tcipif_bmu_ibus_grnt;
wire            tcipif_bmu_ibus_trans_cmplt;
wire    [15:0]  tcipif_had_addr;
wire            tcipif_had_sel;
wire    [31:0]  tcipif_had_wdata;
wire            tcipif_had_write;
wire            trst_b;





// &Instance("pa_core_top"); @34
pa_core_top  x_pa_core_top (
  .biu_pad_haddr                    (biu_pad_haddr                   ),
  .biu_pad_hburst                   (biu_pad_hburst                  ),
  .biu_pad_hlock                    (biu_pad_hlock                   ),
  .biu_pad_hprot                    (biu_pad_hprot                   ),
  .biu_pad_hsize                    (biu_pad_hsize                   ),
  .biu_pad_htrans                   (biu_pad_htrans                  ),
  .biu_pad_hwdata                   (biu_pad_hwdata                  ),
  .biu_pad_hwrite                   (biu_pad_hwrite                  ),
  .bmu_had_acc_err                  (bmu_had_acc_err                 ),
  .bmu_had_grant                    (bmu_had_grant                   ),
  .bmu_had_rdata                    (bmu_had_rdata                   ),
  .bmu_had_trans_cmplt              (bmu_had_trans_cmplt             ),
  .bmu_tcipif_dbus_acc_deny         (bmu_tcipif_dbus_acc_deny        ),
  .bmu_tcipif_dbus_addr             (bmu_tcipif_dbus_addr            ),
  .bmu_tcipif_dbus_req              (bmu_tcipif_dbus_req             ),
  .bmu_tcipif_dbus_req_dp           (bmu_tcipif_dbus_req_dp          ),
  .bmu_tcipif_dbus_size             (bmu_tcipif_dbus_size            ),
  .bmu_tcipif_dbus_supv_mode        (bmu_tcipif_dbus_supv_mode       ),
  .bmu_tcipif_dbus_wdata            (bmu_tcipif_dbus_wdata           ),
  .bmu_tcipif_dbus_write            (bmu_tcipif_dbus_write           ),
  .bmu_tcipif_had_acc_deny          (bmu_tcipif_had_acc_deny         ),
  .bmu_tcipif_had_addr              (bmu_tcipif_had_addr             ),
  .bmu_tcipif_had_req               (bmu_tcipif_had_req              ),
  .bmu_tcipif_had_req_dp            (bmu_tcipif_had_req_dp           ),
  .bmu_tcipif_had_size              (bmu_tcipif_had_size             ),
  .bmu_tcipif_had_supv_mode         (bmu_tcipif_had_supv_mode        ),
  .bmu_tcipif_had_wdata             (bmu_tcipif_had_wdata            ),
  .bmu_tcipif_had_write             (bmu_tcipif_had_write            ),
  .bmu_tcipif_ibus_acc_deny         (bmu_tcipif_ibus_acc_deny        ),
  .bmu_tcipif_ibus_addr             (bmu_tcipif_ibus_addr            ),
  .bmu_tcipif_ibus_req              (bmu_tcipif_ibus_req             ),
  .bmu_tcipif_ibus_req_dp           (bmu_tcipif_ibus_req_dp          ),
  .bmu_tcipif_ibus_size             (bmu_tcipif_ibus_size            ),
  .bmu_tcipif_ibus_supv_mode        (bmu_tcipif_ibus_supv_mode       ),
  .bmu_tcipif_ibus_wdata            (bmu_tcipif_ibus_wdata           ),
  .bmu_tcipif_ibus_write            (bmu_tcipif_ibus_write           ),
  .clic_cpu_int_hv                  (clic_cpu_int_hv                 ),
  .clic_cpu_int_id                  (clic_cpu_int_id                 ),
  .clic_cpu_int_il                  (clic_cpu_int_il                 ),
  .clic_cpu_int_priv                (clic_cpu_int_priv               ),
  .clk_en                           (clk_en                          ),
  .cp0_had_cpuid_idx0               (cp0_had_cpuid_idx0              ),
  .cp0_had_lpmd_b                   (cp0_had_lpmd_b                  ),
  .cp0_had_mcause_data              (cp0_had_mcause_data             ),
  .cp0_had_pcfifo_wen               (cp0_had_pcfifo_wen              ),
  .cp0_pad_mcause                   (cp0_pad_mcause                  ),
  .cp0_pad_mintstatus               (cp0_pad_mintstatus              ),
  .cp0_pad_mstatus                  (cp0_pad_mstatus                 ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .cp0_yy_priv_mode                 (cp0_yy_priv_mode                ),
  .cpu_clic_curid                   (cpu_clic_curid                  ),
  .cpu_clic_int_exit                (cpu_clic_int_exit               ),
  .cpu_pad_dfs_ack                  (cpu_pad_dfs_ack                 ),
  .cpu_pad_lockup                   (cpu_pad_lockup                  ),
  .cpu_pad_soft_rst                 (cpu_pad_soft_rst                ),
  .cpurst_b                         (cpurst_b                        ),
  .dahbl_pad_haddr                  (dahbl_pad_haddr                 ),
  .dahbl_pad_hburst                 (dahbl_pad_hburst                ),
  .dahbl_pad_hlock                  (dahbl_pad_hlock                 ),
  .dahbl_pad_hprot                  (dahbl_pad_hprot                 ),
  .dahbl_pad_hsize                  (dahbl_pad_hsize                 ),
  .dahbl_pad_htrans                 (dahbl_pad_htrans                ),
  .dahbl_pad_hwdata                 (dahbl_pad_hwdata                ),
  .dahbl_pad_hwrite                 (dahbl_pad_hwrite                ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_bmu_addr                     (had_bmu_addr                    ),
  .had_bmu_burst                    (had_bmu_burst                   ),
  .had_bmu_prot                     (had_bmu_prot                    ),
  .had_bmu_req                      (had_bmu_req                     ),
  .had_bmu_seq                      (had_bmu_seq                     ),
  .had_bmu_size                     (had_bmu_size                    ),
  .had_bmu_wdata                    (had_bmu_wdata                   ),
  .had_bmu_write                    (had_bmu_write                   ),
  .had_core_exit_dbg                (had_core_exit_dbg               ),
  .had_cp0_mcause_data              (had_cp0_mcause_data             ),
  .had_cp0_xx_dbg                   (had_cp0_xx_dbg                  ),
  .had_idu_id_inst_bkpt             (had_idu_id_inst_bkpt            ),
  .had_idu_id_inst_bkpt_brir        (had_idu_id_inst_bkpt_brir       ),
  .had_idu_id_inst_bkpt_hit         (had_idu_id_inst_bkpt_hit        ),
  .had_idu_wbbr_data                (had_idu_wbbr_data               ),
  .had_idu_wbbr_vld                 (had_idu_wbbr_vld                ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .had_ifu_ir_vld                   (had_ifu_ir_vld                  ),
  .had_ifu_pc                       (had_ifu_pc                      ),
  .had_rtu_async_dbgreq             (had_rtu_async_dbgreq            ),
  .had_rtu_data_bkpt_dbgreq         (had_rtu_data_bkpt_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq_raw     (had_rtu_data_bkpt_dbgreq_raw    ),
  .had_rtu_ex1_bkpt_potential       (had_rtu_ex1_bkpt_potential      ),
  .had_rtu_ex1_inst_bkpt_dbgreq     (had_rtu_ex1_inst_bkpt_dbgreq    ),
  .had_rtu_ex1_trace_potential      (had_rtu_ex1_trace_potential     ),
  .had_rtu_fdb                      (had_rtu_fdb                     ),
  .had_rtu_hw_dbgreq                (had_rtu_hw_dbgreq               ),
  .had_rtu_inst_bkpt_dbgreq         (had_rtu_inst_bkpt_dbgreq        ),
  .had_rtu_rst_dbgreq               (had_rtu_rst_dbgreq              ),
  .had_rtu_trace_dbgreq             (had_rtu_trace_dbgreq            ),
  .had_rtu_trace_dbgreq_raw         (had_rtu_trace_dbgreq_raw        ),
  .had_rtu_xx_tme                   (had_rtu_xx_tme                  ),
  .had_yy_xx_bkpta_base             (had_yy_xx_bkpta_base            ),
  .had_yy_xx_bkpta_mask             (had_yy_xx_bkpta_mask            ),
  .had_yy_xx_bkpta_rc               (had_yy_xx_bkpta_rc              ),
  .had_yy_xx_bkptb_base             (had_yy_xx_bkptb_base            ),
  .had_yy_xx_bkptb_mask             (had_yy_xx_bkptb_mask            ),
  .had_yy_xx_bkptb_rc               (had_yy_xx_bkptb_rc              ),
  .had_yy_xx_bkptc_base             (had_yy_xx_bkptc_base            ),
  .had_yy_xx_bkptc_mask             (had_yy_xx_bkptc_mask            ),
  .had_yy_xx_bkptd_base             (had_yy_xx_bkptd_base            ),
  .had_yy_xx_bkptd_mask             (had_yy_xx_bkptd_mask            ),
  .had_yy_xx_bkpte_base             (had_yy_xx_bkpte_base            ),
  .had_yy_xx_bkpte_mask             (had_yy_xx_bkpte_mask            ),
  .had_yy_xx_dbg                    (had_yy_xx_dbg                   ),
  .iahbl_pad_haddr                  (iahbl_pad_haddr                 ),
  .iahbl_pad_hburst                 (iahbl_pad_hburst                ),
  .iahbl_pad_hlock                  (iahbl_pad_hlock                 ),
  .iahbl_pad_hprot                  (iahbl_pad_hprot                 ),
  .iahbl_pad_hsize                  (iahbl_pad_hsize                 ),
  .iahbl_pad_htrans                 (iahbl_pad_htrans                ),
  .iahbl_pad_hwdata                 (iahbl_pad_hwdata                ),
  .iahbl_pad_hwrite                 (iahbl_pad_hwrite                ),
  .idu_had_id_chgflw_inst           (idu_had_id_chgflw_inst          ),
  .idu_had_id_inst_bkpt             (idu_had_id_inst_bkpt            ),
  .idu_had_no_op                    (idu_had_no_op                   ),
  .iu_xx_no_op                      (iu_xx_no_op                     ),
  .lsu_pad_sc_pass                  (lsu_pad_sc_pass                 ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .pad_biu_hrdata                   (pad_biu_hrdata                  ),
  .pad_biu_hready                   (pad_biu_hready                  ),
  .pad_biu_hresp                    (pad_biu_hresp                   ),
  .pad_bmu_dahbl_base               (pad_bmu_dahbl_base              ),
  .pad_bmu_dahbl_mask               (pad_bmu_dahbl_mask              ),
  .pad_bmu_iahbl_base               (pad_bmu_iahbl_base              ),
  .pad_bmu_iahbl_mask               (pad_bmu_iahbl_mask              ),
  .pad_cpu_dfs_req                  (pad_cpu_dfs_req                 ),
  .pad_cpu_ext_int_b                (pad_cpu_ext_int_b               ),
  .pad_cpu_nmi                      (pad_cpu_nmi                     ),
  .pad_cpu_rst_addr                 (pad_cpu_rst_addr                ),
  .pad_cpu_sys_cnt                  (pad_cpu_sys_cnt                 ),
  .pad_cpu_wakeup_event             (pad_cpu_wakeup_event            ),
  .pad_dahbl_hrdata                 (pad_dahbl_hrdata                ),
  .pad_dahbl_hready                 (pad_dahbl_hready                ),
  .pad_dahbl_hresp                  (pad_dahbl_hresp                 ),
  .pad_iahbl_hrdata                 (pad_iahbl_hrdata                ),
  .pad_iahbl_hready                 (pad_iahbl_hready                ),
  .pad_iahbl_hresp                  (pad_iahbl_hresp                 ),
  .pad_sysio_dbgrq_b                (pad_sysio_dbgrq_b               ),
  .pad_yy_gate_clk_en_b             (pad_yy_icg_scan_en              ),
  .rtu_clic_warm_up                 (rtu_clic_warm_up                ),
  .rtu_had_data_bkpta_vld           (rtu_had_data_bkpta_vld          ),
  .rtu_had_data_bkptb_vld           (rtu_had_data_bkptb_vld          ),
  .rtu_had_data_bkptc_vld           (rtu_had_data_bkptc_vld          ),
  .rtu_had_data_bkptd_vld           (rtu_had_data_bkptd_vld          ),
  .rtu_had_data_bkpte_vld           (rtu_had_data_bkpte_vld          ),
  .rtu_had_dbg_disable_for_tee      (rtu_had_dbg_disable_for_tee     ),
  .rtu_had_ex1_data_bkpta_vld       (rtu_had_ex1_data_bkpta_vld      ),
  .rtu_had_ex1_data_bkptb_vld       (rtu_had_ex1_data_bkptb_vld      ),
  .rtu_had_ex1_data_bkptc_vld       (rtu_had_ex1_data_bkptc_vld      ),
  .rtu_had_ex1_data_bkptd_vld       (rtu_had_ex1_data_bkptd_vld      ),
  .rtu_had_ex1_data_bkpte_vld       (rtu_had_ex1_data_bkpte_vld      ),
  .rtu_had_ex1_inst_bkpta_vld       (rtu_had_ex1_inst_bkpta_vld      ),
  .rtu_had_ex1_inst_bkptb_vld       (rtu_had_ex1_inst_bkptb_vld      ),
  .rtu_had_ex1_inst_bkptc_vld       (rtu_had_ex1_inst_bkptc_vld      ),
  .rtu_had_ex1_inst_bkptd_vld       (rtu_had_ex1_inst_bkptd_vld      ),
  .rtu_had_ex1_inst_bkpte_vld       (rtu_had_ex1_inst_bkpte_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpta_vld           (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_bkptb_vld           (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_bkptc_vld           (rtu_had_inst_bkptc_vld          ),
  .rtu_had_inst_bkptd_vld           (rtu_had_inst_bkptd_vld          ),
  .rtu_had_inst_bkpte_vld           (rtu_had_inst_bkpte_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_int_ack                  (rtu_had_int_ack                 ),
  .rtu_had_rst_dbgreq_ack           (rtu_had_rst_dbgreq_ack          ),
  .rtu_had_xx_bkpt_inst             (rtu_had_xx_bkpt_inst            ),
  .rtu_had_xx_chgflow               (rtu_had_xx_chgflow              ),
  .rtu_had_xx_data                  (rtu_had_xx_data                 ),
  .rtu_had_xx_data_vld              (rtu_had_xx_data_vld             ),
  .rtu_had_xx_dbg_ack_pc            (rtu_had_xx_dbg_ack_pc           ),
  .rtu_had_xx_next_pc               (rtu_had_xx_next_pc              ),
  .rtu_had_xx_retire                (rtu_had_xx_retire               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_retire_pc             (rtu_had_xx_retire_pc            ),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_pad_inst_retire              (rtu_pad_inst_retire             ),
  .rtu_pad_inst_split               (rtu_pad_inst_split              ),
  .rtu_pad_retire_pc                (rtu_pad_retire_pc               ),
  .rtu_pad_wb0_data                 (rtu_pad_wb0_data                ),
  .rtu_pad_wb0_preg                 (rtu_pad_wb0_preg                ),
  .rtu_pad_wb0_vld                  (rtu_pad_wb0_vld                 ),
  .rtu_pad_wb1_data                 (rtu_pad_wb1_data                ),
  .rtu_pad_wb1_preg                 (rtu_pad_wb1_preg                ),
  .rtu_pad_wb1_vld                  (rtu_pad_wb1_vld                 ),
  .rtu_xx_no_op                     (rtu_xx_no_op                    ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .rtu_yy_xx_retire                 (rtu_yy_xx_retire                ),
  .sysio_clint_me_int               (sysio_clint_me_int              ),
  .sysio_clint_mtime                (sysio_clint_mtime               ),
  .sysio_had_sdb_req_b              (sysio_had_sdb_req_b             ),
  .sysio_pad_lpmd_b                 (sysio_pad_lpmd_b                ),
  .tcip_cp0_clic_base               (tcip_cp0_clic_base              ),
  .tcipif_bmu_dbus_acc_err          (tcipif_bmu_dbus_acc_err         ),
  .tcipif_bmu_dbus_data             (tcipif_bmu_dbus_data            ),
  .tcipif_bmu_dbus_grnt             (tcipif_bmu_dbus_grnt            ),
  .tcipif_bmu_dbus_trans_cmplt      (tcipif_bmu_dbus_trans_cmplt     ),
  .tcipif_bmu_had_acc_err           (tcipif_bmu_had_acc_err          ),
  .tcipif_bmu_had_data              (tcipif_bmu_had_data             ),
  .tcipif_bmu_had_grnt              (tcipif_bmu_had_grnt             ),
  .tcipif_bmu_had_trans_cmplt       (tcipif_bmu_had_trans_cmplt      ),
  .tcipif_bmu_ibus_acc_err          (tcipif_bmu_ibus_acc_err         ),
  .tcipif_bmu_ibus_data             (tcipif_bmu_ibus_data            ),
  .tcipif_bmu_ibus_grnt             (tcipif_bmu_ibus_grnt            ),
  .tcipif_bmu_ibus_trans_cmplt      (tcipif_bmu_ibus_trans_cmplt     )
);

// &Connect(.pad_yy_gate_clk_en_b (pad_yy_icg_scan_en)); @36




// &Instance("pa_had_top"); @43
pa_had_top  x_pa_had_top (
  .bmu_had_acc_err                  (bmu_had_acc_err                 ),
  .bmu_had_grant                    (bmu_had_grant                   ),
  .bmu_had_rdata                    (bmu_had_rdata                   ),
  .bmu_had_trans_cmplt              (bmu_had_trans_cmplt             ),
  .clk_en                           (clk_en                          ),
  .cp0_had_cpuid_idx0               (cp0_had_cpuid_idx0              ),
  .cp0_had_lpmd_b                   (cp0_had_lpmd_b                  ),
  .cp0_had_mcause_data              (cp0_had_mcause_data             ),
  .cp0_had_pcfifo_wen               (cp0_had_pcfifo_wen              ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_bmu_addr                     (had_bmu_addr                    ),
  .had_bmu_burst                    (had_bmu_burst                   ),
  .had_bmu_prot                     (had_bmu_prot                    ),
  .had_bmu_req                      (had_bmu_req                     ),
  .had_bmu_seq                      (had_bmu_seq                     ),
  .had_bmu_size                     (had_bmu_size                    ),
  .had_bmu_wdata                    (had_bmu_wdata                   ),
  .had_bmu_write                    (had_bmu_write                   ),
  .had_cp0_mcause_data              (had_cp0_mcause_data             ),
  .had_cp0_xx_dbg                   (had_cp0_xx_dbg                  ),
  .had_idu_id_inst_bkpt             (had_idu_id_inst_bkpt            ),
  .had_idu_id_inst_bkpt_brir        (had_idu_id_inst_bkpt_brir       ),
  .had_idu_id_inst_bkpt_hit         (had_idu_id_inst_bkpt_hit        ),
  .had_idu_wbbr_data                (had_idu_wbbr_data               ),
  .had_idu_wbbr_vld                 (had_idu_wbbr_vld                ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .had_ifu_ir_vld                   (had_ifu_ir_vld                  ),
  .had_ifu_pc                       (had_ifu_pc                      ),
  .had_pad_jdb_pm                   (had_pad_jdb_pm                  ),
  .had_pad_jtg_tms_o                (had_pad_jtg_tms_o               ),
  .had_pad_jtg_tms_oe               (had_pad_jtg_tms_oe              ),
  .had_rtu_async_dbgreq             (had_rtu_async_dbgreq            ),
  .had_rtu_data_bkpt_dbgreq         (had_rtu_data_bkpt_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq_raw     (had_rtu_data_bkpt_dbgreq_raw    ),
  .had_rtu_ex1_bkpt_potential       (had_rtu_ex1_bkpt_potential      ),
  .had_rtu_ex1_inst_bkpt_dbgreq     (had_rtu_ex1_inst_bkpt_dbgreq    ),
  .had_rtu_ex1_trace_potential      (had_rtu_ex1_trace_potential     ),
  .had_rtu_fdb                      (had_rtu_fdb                     ),
  .had_rtu_hw_dbgreq                (had_rtu_hw_dbgreq               ),
  .had_rtu_inst_bkpt_dbgreq         (had_rtu_inst_bkpt_dbgreq        ),
  .had_rtu_rst_dbgreq               (had_rtu_rst_dbgreq              ),
  .had_rtu_trace_dbgreq             (had_rtu_trace_dbgreq            ),
  .had_rtu_trace_dbgreq_raw         (had_rtu_trace_dbgreq_raw        ),
  .had_rtu_xx_tme                   (had_rtu_xx_tme                  ),
  .had_tcipif_cmplt                 (had_tcipif_cmplt                ),
  .had_tcipif_rdata                 (had_tcipif_rdata                ),
  .had_yy_xx_bkpta_base             (had_yy_xx_bkpta_base            ),
  .had_yy_xx_bkpta_mask             (had_yy_xx_bkpta_mask            ),
  .had_yy_xx_bkpta_rc               (had_yy_xx_bkpta_rc              ),
  .had_yy_xx_bkptb_base             (had_yy_xx_bkptb_base            ),
  .had_yy_xx_bkptb_mask             (had_yy_xx_bkptb_mask            ),
  .had_yy_xx_bkptb_rc               (had_yy_xx_bkptb_rc              ),
  .had_yy_xx_bkptc_base             (had_yy_xx_bkptc_base            ),
  .had_yy_xx_bkptc_mask             (had_yy_xx_bkptc_mask            ),
  .had_yy_xx_bkptd_base             (had_yy_xx_bkptd_base            ),
  .had_yy_xx_bkptd_mask             (had_yy_xx_bkptd_mask            ),
  .had_yy_xx_bkpte_base             (had_yy_xx_bkpte_base            ),
  .had_yy_xx_bkpte_mask             (had_yy_xx_bkpte_mask            ),
  .had_yy_xx_dbg                    (had_yy_xx_dbg                   ),
  .had_yy_xx_exit_dbg               (had_core_exit_dbg               ),
  .hadrst_b                         (hadrst_b                        ),
  .idu_had_id_chgflw_inst           (idu_had_id_chgflw_inst          ),
  .idu_had_id_inst_bkpt             (idu_had_id_inst_bkpt            ),
  .idu_had_no_op                    (idu_had_no_op                   ),
  .iu_xx_no_op                      (iu_xx_no_op                     ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .pad_had_jtg_tms_i                (pad_had_jtg_tms_i               ),
  .pad_yy_gate_clk_en_b             (pad_yy_icg_scan_en              ),
  .rtu_had_data_bkpta_vld           (rtu_had_data_bkpta_vld          ),
  .rtu_had_data_bkptb_vld           (rtu_had_data_bkptb_vld          ),
  .rtu_had_data_bkptc_vld           (rtu_had_data_bkptc_vld          ),
  .rtu_had_data_bkptd_vld           (rtu_had_data_bkptd_vld          ),
  .rtu_had_data_bkpte_vld           (rtu_had_data_bkpte_vld          ),
  .rtu_had_dbg_disable_for_tee      (rtu_had_dbg_disable_for_tee     ),
  .rtu_had_ex1_data_bkpta_vld       (rtu_had_ex1_data_bkpta_vld      ),
  .rtu_had_ex1_data_bkptb_vld       (rtu_had_ex1_data_bkptb_vld      ),
  .rtu_had_ex1_data_bkptc_vld       (rtu_had_ex1_data_bkptc_vld      ),
  .rtu_had_ex1_data_bkptd_vld       (rtu_had_ex1_data_bkptd_vld      ),
  .rtu_had_ex1_data_bkpte_vld       (rtu_had_ex1_data_bkpte_vld      ),
  .rtu_had_ex1_inst_bkpta_vld       (rtu_had_ex1_inst_bkpta_vld      ),
  .rtu_had_ex1_inst_bkptb_vld       (rtu_had_ex1_inst_bkptb_vld      ),
  .rtu_had_ex1_inst_bkptc_vld       (rtu_had_ex1_inst_bkptc_vld      ),
  .rtu_had_ex1_inst_bkptd_vld       (rtu_had_ex1_inst_bkptd_vld      ),
  .rtu_had_ex1_inst_bkpte_vld       (rtu_had_ex1_inst_bkpte_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpta_vld           (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_bkptb_vld           (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_bkptc_vld           (rtu_had_inst_bkptc_vld          ),
  .rtu_had_inst_bkptd_vld           (rtu_had_inst_bkptd_vld          ),
  .rtu_had_inst_bkpte_vld           (rtu_had_inst_bkpte_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_int_ack                  (rtu_had_int_ack                 ),
  .rtu_had_rst_dbgreq_ack           (rtu_had_rst_dbgreq_ack          ),
  .rtu_had_xx_bkpt_inst             (rtu_had_xx_bkpt_inst            ),
  .rtu_had_xx_chgflow               (rtu_had_xx_chgflow              ),
  .rtu_had_xx_data                  (rtu_had_xx_data                 ),
  .rtu_had_xx_data_vld              (rtu_had_xx_data_vld             ),
  .rtu_had_xx_dbg_ack_pc            (rtu_had_xx_dbg_ack_pc           ),
  .rtu_had_xx_next_pc               (rtu_had_xx_next_pc              ),
  .rtu_had_xx_retire                (rtu_had_xx_retire               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_retire_pc             (rtu_had_xx_retire_pc            ),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_xx_no_op                     (rtu_xx_no_op                    ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .rtu_yy_xx_retire                 (rtu_yy_xx_retire                ),
  .sysio_had_sdb_req_b              (sysio_had_sdb_req_b             ),
  .tcipif_had_addr                  (tcipif_had_addr                 ),
  .tcipif_had_sel                   (tcipif_had_sel                  ),
  .tcipif_had_wdata                 (tcipif_had_wdata                ),
  .tcipif_had_write                 (tcipif_had_write                ),
  .tclk                             (forever_jtgclk                  ),
  .trst_b                           (trst_b                          )
);

// &Connect(.pad_yy_gate_clk_en_b (pad_yy_icg_scan_en)); @45
// &Connect( @47
//          .tclk              (forever_jtgclk   ), @48
//          .had_yy_xx_exit_dbg(had_core_exit_dbg) @49
//         ); @50
// &Instance("pa_had_top_dummy"); @52




// &Instance("pa_clkrst_top"); @58
pa_clkrst_top  x_pa_clkrst_top (
  .cpurst_b           (cpurst_b          ),
  .forever_cpuclk     (forever_cpuclk    ),
  .forever_jtgclk     (forever_jtgclk    ),
  .hadrst_b           (hadrst_b          ),
  .pad_cpu_rst_b      (pad_cpu_rst_b     ),
  .pad_had_jtg_tclk   (pad_had_jtg_tclk  ),
  .pad_had_jtg_trst_b (pad_had_jtg_trst_b),
  .pad_had_rst_b      (pad_had_rst_b     ),
  .pad_yy_scan_mode   (pad_yy_scan_mode  ),
  .pad_yy_scan_rst_b  (pad_yy_scan_rst_b ),
  .pll_core_cpuclk    (pll_core_cpuclk   ),
  .trst_b             (trst_b            )
);





// &Instance("pa_tcipif_top"); @64
pa_tcipif_top  x_pa_tcipif_top (
  .bmu_tcipif_dbus_acc_deny    (bmu_tcipif_dbus_acc_deny   ),
  .bmu_tcipif_dbus_addr        (bmu_tcipif_dbus_addr       ),
  .bmu_tcipif_dbus_req         (bmu_tcipif_dbus_req        ),
  .bmu_tcipif_dbus_req_dp      (bmu_tcipif_dbus_req_dp     ),
  .bmu_tcipif_dbus_size        (bmu_tcipif_dbus_size       ),
  .bmu_tcipif_dbus_supv_mode   (bmu_tcipif_dbus_supv_mode  ),
  .bmu_tcipif_dbus_wdata       (bmu_tcipif_dbus_wdata      ),
  .bmu_tcipif_dbus_write       (bmu_tcipif_dbus_write      ),
  .bmu_tcipif_had_acc_deny     (bmu_tcipif_had_acc_deny    ),
  .bmu_tcipif_had_addr         (bmu_tcipif_had_addr        ),
  .bmu_tcipif_had_req          (bmu_tcipif_had_req         ),
  .bmu_tcipif_had_req_dp       (bmu_tcipif_had_req_dp      ),
  .bmu_tcipif_had_size         (bmu_tcipif_had_size        ),
  .bmu_tcipif_had_supv_mode    (bmu_tcipif_had_supv_mode   ),
  .bmu_tcipif_had_wdata        (bmu_tcipif_had_wdata       ),
  .bmu_tcipif_had_write        (bmu_tcipif_had_write       ),
  .bmu_tcipif_ibus_acc_deny    (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_ibus_addr        (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_ibus_req         (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_ibus_req_dp      (bmu_tcipif_ibus_req_dp     ),
  .bmu_tcipif_ibus_size        (bmu_tcipif_ibus_size       ),
  .bmu_tcipif_ibus_supv_mode   (bmu_tcipif_ibus_supv_mode  ),
  .bmu_tcipif_ibus_wdata       (bmu_tcipif_ibus_wdata      ),
  .bmu_tcipif_ibus_write       (bmu_tcipif_ibus_write      ),
  .clic_cpu_int_hv             (clic_cpu_int_hv            ),
  .clic_cpu_int_id             (clic_cpu_int_id            ),
  .clic_cpu_int_il             (clic_cpu_int_il            ),
  .clic_cpu_int_priv           (clic_cpu_int_priv          ),
  .cp0_yy_priv_mode            (cp0_yy_priv_mode           ),
  .cpu_clic_curid              (cpu_clic_curid             ),
  .cpu_clic_int_exit           (cpu_clic_int_exit          ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_tcipif_cmplt            (had_tcipif_cmplt           ),
  .had_tcipif_rdata            (had_tcipif_rdata           ),
  .pad_clic_int_vld            (pad_clic_int_vld           ),
  .pad_yy_gate_clk_en_b        (pad_yy_icg_scan_en         ),
  .rtu_clic_warm_up            (rtu_clic_warm_up           ),
  .rtu_yy_xx_dbgon             (rtu_yy_xx_dbgon            ),
  .sysio_clint_me_int          (sysio_clint_me_int         ),
  .sysio_clint_mtime           (sysio_clint_mtime          ),
  .tcip_cp0_clic_base          (tcip_cp0_clic_base         ),
  .tcipif_bmu_dbus_acc_err     (tcipif_bmu_dbus_acc_err    ),
  .tcipif_bmu_dbus_data        (tcipif_bmu_dbus_data       ),
  .tcipif_bmu_dbus_grnt        (tcipif_bmu_dbus_grnt       ),
  .tcipif_bmu_dbus_trans_cmplt (tcipif_bmu_dbus_trans_cmplt),
  .tcipif_bmu_had_acc_err      (tcipif_bmu_had_acc_err     ),
  .tcipif_bmu_had_data         (tcipif_bmu_had_data        ),
  .tcipif_bmu_had_grnt         (tcipif_bmu_had_grnt        ),
  .tcipif_bmu_had_trans_cmplt  (tcipif_bmu_had_trans_cmplt ),
  .tcipif_bmu_ibus_acc_err     (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_ibus_data        (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_ibus_grnt        (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_ibus_trans_cmplt (tcipif_bmu_ibus_trans_cmplt),
  .tcipif_had_addr             (tcipif_had_addr            ),
  .tcipif_had_sel              (tcipif_had_sel             ),
  .tcipif_had_wdata            (tcipif_had_wdata           ),
  .tcipif_had_write            (tcipif_had_write           )
);

// &Connect(.pad_yy_gate_clk_en_b (pad_yy_icg_scan_en)); @66
// &Instance("pa_tcipif_top_dummy"); @69
// &Connect(.pad_yy_gate_clk_en_b (pad_yy_icg_scan_en)); @71


// &Force("input", "pad_cpu_nmi"); @80
// &Force("input", "pad_cpu_rst_addr"); &Force("bus", "pad_cpu_rst_addr", 31, 0); @81
// &Force("input", "pad_cpu_wakeup_event"); @82

// &Force("nonport", "sysio_pad_srst"); @84
// &ModuleEnd; @85
endmodule


// &Depend("cpu_cfig.h") @1
// &ModuleBeg @2
module pa_cpu_top_golden_port(
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hlock,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  clk_en,
  cp0_pad_mcause,
  cp0_pad_mintstatus,
  cp0_pad_mstatus,
  cpu_pad_dfs_ack,
  cpu_pad_lockup,
  cpu_pad_soft_rst,
  dahbl_pad_haddr,
  dahbl_pad_hburst,
  dahbl_pad_hlock,
  dahbl_pad_hprot,
  dahbl_pad_hsize,
  dahbl_pad_htrans,
  dahbl_pad_hwdata,
  dahbl_pad_hwrite,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hlock,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  lsu_pad_sc_pass,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_bmu_dahbl_base,
  pad_bmu_dahbl_mask,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_clic_int_vld,
  pad_cpu_dfs_req,
  pad_cpu_ext_int_b,
  pad_cpu_nmi,
  pad_cpu_rst_addr,
  pad_cpu_rst_b,
  pad_cpu_sys_cnt,
  pad_cpu_wakeup_event,
  pad_dahbl_hrdata,
  pad_dahbl_hready,
  pad_dahbl_hresp,
  pad_had_jtg_tclk,
  pad_had_jtg_tms_i,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_sysio_dbgrq_b,
  pad_yy_icg_scan_en,
  pad_yy_scan_mode,
  pad_yy_scan_rst_b,
  pll_core_cpuclk,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  sysio_pad_lpmd_b
);

// &Ports @3
input           clk_en;
input   [31:0]  pad_biu_hrdata;
input           pad_biu_hready;
input           pad_biu_hresp;
input   [11:0]  pad_bmu_dahbl_base;
input   [11:0]  pad_bmu_dahbl_mask;
input   [11:0]  pad_bmu_iahbl_base;
input   [11:0]  pad_bmu_iahbl_mask;
input   [31:0]  pad_clic_int_vld;
input           pad_cpu_dfs_req;
input           pad_cpu_ext_int_b;
input           pad_cpu_nmi;
input   [31:0]  pad_cpu_rst_addr;
input           pad_cpu_rst_b;
input   [63:0]  pad_cpu_sys_cnt;
input           pad_cpu_wakeup_event;
input   [31:0]  pad_dahbl_hrdata;
input           pad_dahbl_hready;
input           pad_dahbl_hresp;
input           pad_had_jtg_tclk;
input           pad_had_jtg_tms_i;
input           pad_had_jtg_trst_b;
input           pad_had_rst_b;
input   [31:0]  pad_iahbl_hrdata;
input           pad_iahbl_hready;
input           pad_iahbl_hresp;
input           pad_sysio_dbgrq_b;
input           pad_yy_icg_scan_en;
input           pad_yy_scan_mode;
input           pad_yy_scan_rst_b;
input           pll_core_cpuclk;
output  [31:0]  biu_pad_haddr;
output  [2 :0]  biu_pad_hburst;
output          biu_pad_hlock;
output  [3 :0]  biu_pad_hprot;
output  [2 :0]  biu_pad_hsize;
output  [1 :0]  biu_pad_htrans;
output  [31:0]  biu_pad_hwdata;
output          biu_pad_hwrite;
output  [31:0]  cp0_pad_mcause;
output  [31:0]  cp0_pad_mintstatus;
output  [31:0]  cp0_pad_mstatus;
output          cpu_pad_dfs_ack;
output          cpu_pad_lockup;
output  [1 :0]  cpu_pad_soft_rst;
output  [31:0]  dahbl_pad_haddr;
output  [2 :0]  dahbl_pad_hburst;
output          dahbl_pad_hlock;
output  [3 :0]  dahbl_pad_hprot;
output  [2 :0]  dahbl_pad_hsize;
output  [1 :0]  dahbl_pad_htrans;
output  [31:0]  dahbl_pad_hwdata;
output          dahbl_pad_hwrite;
output  [1 :0]  had_pad_jdb_pm;
output          had_pad_jtg_tms_o;
output          had_pad_jtg_tms_oe;
output  [31:0]  iahbl_pad_haddr;
output  [2 :0]  iahbl_pad_hburst;
output          iahbl_pad_hlock;
output  [3 :0]  iahbl_pad_hprot;
output  [2 :0]  iahbl_pad_hsize;
output  [1 :0]  iahbl_pad_htrans;
output  [31:0]  iahbl_pad_hwdata;
output          iahbl_pad_hwrite;
output          lsu_pad_sc_pass;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output  [1 :0]  sysio_pad_lpmd_b;


// &Force("input", "pad_yy_scan_mode"); @5
// &Force("input", "pad_yy_scan_rst_b"); @7
// &Force("input", "pad_yy_icg_scan_en"); @8
// &Force("input", "pad_yy_gate_clk_en_b"); @10



// &Force("input", "clk_en"); @16
// &Force("input", "ilite_clk_en"); @19
// &Force("input", "dlite_clk_en"); @22
// &Force("input", "pad_bmu_dahbl_base");        &Force("bus", "pad_bmu_dahbl_base", 11, 0); @25
// &Force("input", "pad_bmu_dahbl_mask");        &Force("bus", "pad_bmu_dahbl_mask", 11, 0); @26
// &Force("input", "pad_dahbl_hrdata");          &Force("bus", "pad_dahbl_hrdata", 31, 0); @27
// &Force("input", "pad_dahbl_hready"); @28
// &Force("input", "pad_dahbl_hresp"); @29
// &Force("output", "dahbl_pad_haddr");          &Force("bus", "dahbl_pad_haddr",31,0); @30
// &Force("output", "dahbl_pad_hburst");         &Force("bus", "dahbl_pad_hburst",2,0); @31
// &Force("output", "dahbl_pad_hprot");          &Force("bus", "dahbl_pad_hprot",3,0); @32
// &Force("output", "dahbl_pad_hsize");          &Force("bus", "dahbl_pad_hsize",2,0); @33
// &Force("output", "dahbl_pad_htrans");         &Force("bus", "dahbl_pad_htrans",1,0); @34
// &Force("output", "dahbl_pad_hwdata");         &Force("bus", "dahbl_pad_hwdata",31,0); @35
// &Force("output", "dahbl_pad_hwrite"); @36
// &Force("output", "dahbl_pad_hlock"); @37
// &Force("input", "pad_bmu_iahbl_base");        &Force("bus", "pad_bmu_iahbl_base", 11, 0); @40
// &Force("input", "pad_bmu_iahbl_mask");        &Force("bus", "pad_bmu_iahbl_mask", 11, 0); @41
// &Force("input", "pad_iahbl_hrdata");          &Force("bus", "pad_iahbl_hrdata", 31, 0); @42
// &Force("input", "pad_iahbl_hready"); @43
// &Force("input", "pad_iahbl_hresp"); @44
// &Force("output", "iahbl_pad_haddr");          &Force("bus", "iahbl_pad_haddr",31,0); @45
// &Force("output", "iahbl_pad_hburst");         &Force("bus", "iahbl_pad_hburst",2,0); @46
// &Force("output", "iahbl_pad_hprot");          &Force("bus", "iahbl_pad_hprot",3,0); @47
// &Force("output", "iahbl_pad_hsize");          &Force("bus", "iahbl_pad_hsize",2,0); @48
// &Force("output", "iahbl_pad_htrans");         &Force("bus", "iahbl_pad_htrans",1,0); @49
// &Force("output", "iahbl_pad_hwdata");         &Force("bus", "iahbl_pad_hwdata",31,0); @50
// &Force("output", "iahbl_pad_hwrite"); @51
// &Force("output", "iahbl_pad_hlock"); @52

// &Force("input", "pad_cpu_dfs_req"); @55
// &Force("output", "cpu_pad_dfs_ack"); @56

// &Force("input", "pad_biu_hrdata");           &Force("bus", "pad_biu_hrdata", 31, 0); @58
// &Force("input", "pad_biu_hready"); @59
// &Force("input", "pad_biu_hresp"); @60
// &Force("output", "biu_pad_haddr");           &Force("bus", "biu_pad_haddr",31,0); @61
// &Force("output", "biu_pad_hburst");          &Force("bus", "biu_pad_hburst",2,0); @62
// &Force("output", "biu_pad_hprot");           &Force("bus", "biu_pad_hprot",3,0); @63
// &Force("output", "biu_pad_hsize");           &Force("bus", "biu_pad_hsize",2,0); @64
// &Force("output", "biu_pad_htrans");          &Force("bus", "biu_pad_htrans",1,0); @65
// &Force("output", "biu_pad_hwdata");          &Force("bus", "biu_pad_hwdata",31,0); @66
// &Force("output", "biu_pad_hwrite"); @67
// &Force("output", "biu_pad_hlock"); @68

// &Force("input", "pll_core_cpuclk"); @70
// &Force("input", "pad_cpu_rst_b"); @71
// &Force("input", "pad_sysio_dbgrq_b"); @72
// &Force("input", "pad_cpu_sys_cnt");          &Force("bus", "pad_cpu_sys_cnt", 63, 0); @73
// &Force("output", "cpu_pad_soft_rst"); &Force("bus", "cpu_pad_soft_rst", 1, 0); @74
// &Force("output", "cpu_pad_lockup"); @75
// &Force("input", "pad_cpu_nmi"); @76
// &Force("input", "pad_cpu_rst_addr"); &Force("bus", "pad_cpu_rst_addr", 31, 0); @77
// &Force("input", "pad_cpu_wakeup_event"); @78




// &Force("input",  "pad_had_jtag2_sel"); @84
// &Force("input",  "pad_had_jtg_tclk"); @85
// &Force("input",  "pad_had_jtg_trst_b"); @86
// &Force("input",  "pad_had_jtg_tms_i"); @87
// &Force("input",  "pad_had_jtg_tdi"); @88
// &Force("output", "had_pad_jtg_tdo"); @89
// &Force("output", "had_pad_jtg_tdo_en"); @90
// &Force("output", "had_pad_jtg_tms_o"); @91
// &Force("output", "had_pad_jtg_tms_oe"); @92
// &Force("input",  "pad_had_jtg_tclk"); @94
// &Force("input",  "pad_had_jtg_trst_b"); @95
// &Force("input",  "pad_had_jtg_tms_i"); @96
// &Force("output", "had_pad_jtg_tms_o"); @97
// &Force("output", "had_pad_jtg_tms_oe"); @98

// &Force("input", "pad_had_rst_b"); @101

// &Force("output", "had_pad_jdb_pm");          &Force("bus", "had_pad_jdb_pm",1,0); @103

// &Force("output", "rtu_pad_inst_retire"); @105
// &Force("output", "rtu_pad_inst_split"); @106
// &Force("output", "rtu_pad_retire_pc");       &Force("bus", "rtu_pad_retire_pc", 31, 0); @107
// &Force("output", "rtu_pad_wb0_data");         &Force("bus", "rtu_pad_wb0_data", 31, 0); @108
// &Force("output", "rtu_pad_wb0_preg");         &Force("bus", "rtu_pad_wb0_preg", 5, 0); @109
// &Force("output", "rtu_pad_wb0_vld"); @110
// &Force("output", "rtu_pad_wb1_data");         &Force("bus", "rtu_pad_wb1_data", 31, 0); @111
// &Force("output", "rtu_pad_wb1_preg");         &Force("bus", "rtu_pad_wb1_preg", 5, 0); @112
// &Force("output", "rtu_pad_wb1_vld"); @113
// &Force("output", "lsu_pad_sc_pass"); @114
// &Force("output", "cp0_pad_mcause");          &Force("bus", "cp0_pad_mcause", 31, 0); @115
// &Force("output", "cp0_pad_mstatus");         &Force("bus", "cp0_pad_mstatus", 31, 0); @116

// &Force("output", "sysio_pad_lpmd_b");          &Force("bus", "sysio_pad_lpmd_b", 1, 0); @118



// &Force("output", "cp0_pad_mintstatus");      &Force("bus", "cp0_pad_mintstatus", 31, 0); @123
// &Force("input", "pad_clic_int_vld");         &Force("bus", "pad_clic_int_vld", `CLIC_INTNUM-1-16, 0); @125




// &Force("input", "pad_cpu_ext_int_b"); @132

// &Force("input","pad_yy_dft_clk_rst_b"); @135




// &Force("output", "rtu_pad_wb_freg_vld"); @142
// &Force("output", "rtu_pad_wb_freg"); &Force("bus", "rtu_pad_wb_freg", 4, 0); @143
// &Force("output", "rtu_pad_wb_freg_data"); &Force("bus", "rtu_pad_wb_freg_data", 63, 0); @145
// &Force("output", "rtu_pad_wb_freg_data"); &Force("bus", "rtu_pad_wb_freg_data", 31, 0); @147

// &ModuleEnd @151
endmodule
























// &ModuleBeg; @22
module pa_dahbl_top(
  bmu_dahbl_dbus_acc_deny,
  bmu_dahbl_dbus_addr,
  bmu_dahbl_dbus_burst,
  bmu_dahbl_dbus_lock,
  bmu_dahbl_dbus_lrsc,
  bmu_dahbl_dbus_prot,
  bmu_dahbl_dbus_req,
  bmu_dahbl_dbus_req_dp,
  bmu_dahbl_dbus_seq,
  bmu_dahbl_dbus_size,
  bmu_dahbl_dbus_wdata,
  bmu_dahbl_dbus_write,
  bmu_dahbl_had_acc_deny,
  bmu_dahbl_had_addr,
  bmu_dahbl_had_burst,
  bmu_dahbl_had_prot,
  bmu_dahbl_had_req,
  bmu_dahbl_had_req_dp,
  bmu_dahbl_had_seq,
  bmu_dahbl_had_size,
  bmu_dahbl_had_wdata,
  bmu_dahbl_had_write,
  bmu_dahbl_ibus_acc_deny,
  bmu_dahbl_ibus_addr,
  bmu_dahbl_ibus_burst,
  bmu_dahbl_ibus_prot,
  bmu_dahbl_ibus_req,
  bmu_dahbl_ibus_req_dp,
  bmu_dahbl_ibus_seq,
  bmu_dahbl_ibus_size,
  cpurst_b,
  dahbl_bmu_dbus_acc_err,
  dahbl_bmu_dbus_data,
  dahbl_bmu_dbus_grnt,
  dahbl_bmu_dbus_trans_cmplt,
  dahbl_bmu_had_acc_err,
  dahbl_bmu_had_data,
  dahbl_bmu_had_grnt,
  dahbl_bmu_had_trans_cmplt,
  dahbl_bmu_ibus_acc_err,
  dahbl_bmu_ibus_data,
  dahbl_bmu_ibus_grnt,
  dahbl_bmu_ibus_trans_cmplt,
  dahbl_pad_haddr,
  dahbl_pad_hburst,
  dahbl_pad_hlock,
  dahbl_pad_hprot,
  dahbl_pad_hsize,
  dahbl_pad_htrans,
  dahbl_pad_hwdata,
  dahbl_pad_hwrite,
  dahbl_sysio_idle,
  forever_cpuclk,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_xx_flush,
  lsu_xx_warm_up,
  pad_dahbl_hrdata,
  pad_dahbl_hready,
  pad_dahbl_hresp,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_async_flush,
  sysio_xx_halt_req
);

// &Ports; @23
input           bmu_dahbl_dbus_acc_deny;
input   [31:0]  bmu_dahbl_dbus_addr;
input   [2 :0]  bmu_dahbl_dbus_burst;
input           bmu_dahbl_dbus_lock;
input           bmu_dahbl_dbus_lrsc;
input   [3 :0]  bmu_dahbl_dbus_prot;
input           bmu_dahbl_dbus_req;
input           bmu_dahbl_dbus_req_dp;
input           bmu_dahbl_dbus_seq;
input   [1 :0]  bmu_dahbl_dbus_size;
input   [31:0]  bmu_dahbl_dbus_wdata;
input           bmu_dahbl_dbus_write;
input           bmu_dahbl_had_acc_deny;
input   [31:0]  bmu_dahbl_had_addr;
input   [2 :0]  bmu_dahbl_had_burst;
input   [3 :0]  bmu_dahbl_had_prot;
input           bmu_dahbl_had_req;
input           bmu_dahbl_had_req_dp;
input           bmu_dahbl_had_seq;
input   [1 :0]  bmu_dahbl_had_size;
input   [31:0]  bmu_dahbl_had_wdata;
input           bmu_dahbl_had_write;
input           bmu_dahbl_ibus_acc_deny;
input   [31:0]  bmu_dahbl_ibus_addr;
input   [2 :0]  bmu_dahbl_ibus_burst;
input   [3 :0]  bmu_dahbl_ibus_prot;
input           bmu_dahbl_ibus_req;
input           bmu_dahbl_ibus_req_dp;
input           bmu_dahbl_ibus_seq;
input   [1 :0]  bmu_dahbl_ibus_size;
input           cpurst_b;
input           forever_cpuclk;
input           lsu_biu_amo_pmp_deny;
input           lsu_biu_async_expt_ack;
input           lsu_xx_flush;
input           lsu_xx_warm_up;
input   [31:0]  pad_dahbl_hrdata;
input           pad_dahbl_hready;
input           pad_dahbl_hresp;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input           sysio_xx_halt_req;
output          dahbl_bmu_dbus_acc_err;
output  [31:0]  dahbl_bmu_dbus_data;
output          dahbl_bmu_dbus_grnt;
output          dahbl_bmu_dbus_trans_cmplt;
output          dahbl_bmu_had_acc_err;
output  [31:0]  dahbl_bmu_had_data;
output          dahbl_bmu_had_grnt;
output          dahbl_bmu_had_trans_cmplt;
output          dahbl_bmu_ibus_acc_err;
output  [31:0]  dahbl_bmu_ibus_data;
output          dahbl_bmu_ibus_grnt;
output          dahbl_bmu_ibus_trans_cmplt;
output  [31:0]  dahbl_pad_haddr;
output  [2 :0]  dahbl_pad_hburst;
output          dahbl_pad_hlock;
output  [3 :0]  dahbl_pad_hprot;
output  [2 :0]  dahbl_pad_hsize;
output  [1 :0]  dahbl_pad_htrans;
output  [31:0]  dahbl_pad_hwdata;
output          dahbl_pad_hwrite;
output          dahbl_sysio_idle;

// &Regs; @24

// &Wires; @25
wire            bmu_dahbl_dbus_acc_deny;
wire    [31:0]  bmu_dahbl_dbus_addr;
wire    [2 :0]  bmu_dahbl_dbus_burst;
wire            bmu_dahbl_dbus_lock;
wire            bmu_dahbl_dbus_lrsc;
wire    [3 :0]  bmu_dahbl_dbus_prot;
wire            bmu_dahbl_dbus_req;
wire            bmu_dahbl_dbus_req_dp;
wire            bmu_dahbl_dbus_seq;
wire    [1 :0]  bmu_dahbl_dbus_size;
wire    [31:0]  bmu_dahbl_dbus_wdata;
wire            bmu_dahbl_dbus_write;
wire            bmu_dahbl_had_acc_deny;
wire    [31:0]  bmu_dahbl_had_addr;
wire    [2 :0]  bmu_dahbl_had_burst;
wire    [3 :0]  bmu_dahbl_had_prot;
wire            bmu_dahbl_had_req;
wire            bmu_dahbl_had_req_dp;
wire            bmu_dahbl_had_seq;
wire    [1 :0]  bmu_dahbl_had_size;
wire    [31:0]  bmu_dahbl_had_wdata;
wire            bmu_dahbl_had_write;
wire            bmu_dahbl_ibus_acc_deny;
wire    [31:0]  bmu_dahbl_ibus_addr;
wire    [2 :0]  bmu_dahbl_ibus_burst;
wire    [3 :0]  bmu_dahbl_ibus_prot;
wire            bmu_dahbl_ibus_req;
wire            bmu_dahbl_ibus_req_dp;
wire            bmu_dahbl_ibus_seq;
wire    [1 :0]  bmu_dahbl_ibus_size;
wire            cpurst_b;
wire            dahbl_bmu_dbus_acc_err;
wire    [31:0]  dahbl_bmu_dbus_data;
wire            dahbl_bmu_dbus_grnt;
wire            dahbl_bmu_dbus_trans_cmplt;
wire            dahbl_bmu_had_acc_err;
wire    [31:0]  dahbl_bmu_had_data;
wire            dahbl_bmu_had_grnt;
wire            dahbl_bmu_had_trans_cmplt;
wire            dahbl_bmu_ibus_acc_err;
wire    [31:0]  dahbl_bmu_ibus_data;
wire            dahbl_bmu_ibus_grnt;
wire            dahbl_bmu_ibus_trans_cmplt;
wire            dahbl_clk_en;
wire            dahbl_gated_clk;
wire    [31:0]  dahbl_pad_haddr;
wire    [2 :0]  dahbl_pad_hburst;
wire            dahbl_pad_hlock;
wire    [3 :0]  dahbl_pad_hprot;
wire    [2 :0]  dahbl_pad_hsize;
wire    [1 :0]  dahbl_pad_htrans;
wire    [31:0]  dahbl_pad_hwdata;
wire            dahbl_pad_hwrite;
wire            dahbl_sysio_idle;
wire            forever_cpuclk;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_xx_flush;
wire    [31:0]  pad_dahbl_hrdata;
wire            pad_dahbl_hready;
wire            pad_dahbl_hresp;
wire            pad_yy_gate_clk_en_b;
wire            rtu_yy_xx_async_flush;
wire            sysio_xx_halt_req;





// &Instance("gated_clk_cell", "x_pa_dahbl_cpuclk_cell"); @30
gated_clk_cell  x_pa_dahbl_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dahbl_gated_clk     ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dahbl_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in     (forever_cpuclk ), @31
//          .global_en  (1'b1           ), @32
//          .local_en   (dahbl_clk_en   ), @33
//          .module_en  (1'b0           ), @34
//          .external_en(1'b0           ), @35
//          .clk_out    (dahbl_gated_clk)); @36

// &ConnRule(s/ahbl/dahbl/);  @38
// &Instance("pa_ahbl_if_fo", "x_pa_ahbl_if"); @40
// &Connect(.clk_en     (dlite_clk_en)); @41
// &Force("input","lsu_xx_warm_up"); @46
// &Instance("pa_ahbl_if", "x_pa_ahbl_if"); @47
pa_ahbl_if  x_pa_ahbl_if (
  .ahbl_bmu_dbus_acc_err      (dahbl_bmu_dbus_acc_err    ),
  .ahbl_bmu_dbus_data         (dahbl_bmu_dbus_data       ),
  .ahbl_bmu_dbus_grnt         (dahbl_bmu_dbus_grnt       ),
  .ahbl_bmu_dbus_trans_cmplt  (dahbl_bmu_dbus_trans_cmplt),
  .ahbl_bmu_had_acc_err       (dahbl_bmu_had_acc_err     ),
  .ahbl_bmu_had_data          (dahbl_bmu_had_data        ),
  .ahbl_bmu_had_grnt          (dahbl_bmu_had_grnt        ),
  .ahbl_bmu_had_trans_cmplt   (dahbl_bmu_had_trans_cmplt ),
  .ahbl_bmu_ibus_acc_err      (dahbl_bmu_ibus_acc_err    ),
  .ahbl_bmu_ibus_data         (dahbl_bmu_ibus_data       ),
  .ahbl_bmu_ibus_grnt         (dahbl_bmu_ibus_grnt       ),
  .ahbl_bmu_ibus_trans_cmplt  (dahbl_bmu_ibus_trans_cmplt),
  .ahbl_clk_en                (dahbl_clk_en              ),
  .ahbl_gated_clk             (dahbl_gated_clk           ),
  .ahbl_pad_haddr             (dahbl_pad_haddr           ),
  .ahbl_pad_hburst            (dahbl_pad_hburst          ),
  .ahbl_pad_hlock             (dahbl_pad_hlock           ),
  .ahbl_pad_hprot             (dahbl_pad_hprot           ),
  .ahbl_pad_hsize             (dahbl_pad_hsize           ),
  .ahbl_pad_htrans            (dahbl_pad_htrans          ),
  .ahbl_pad_hwdata            (dahbl_pad_hwdata          ),
  .ahbl_pad_hwrite            (dahbl_pad_hwrite          ),
  .ahbl_sysio_idle            (dahbl_sysio_idle          ),
  .bmu_ahbl_dbus_acc_deny     (bmu_dahbl_dbus_acc_deny   ),
  .bmu_ahbl_dbus_addr         (bmu_dahbl_dbus_addr       ),
  .bmu_ahbl_dbus_burst        (bmu_dahbl_dbus_burst      ),
  .bmu_ahbl_dbus_lock         (bmu_dahbl_dbus_lock       ),
  .bmu_ahbl_dbus_lrsc         (bmu_dahbl_dbus_lrsc       ),
  .bmu_ahbl_dbus_prot         (bmu_dahbl_dbus_prot       ),
  .bmu_ahbl_dbus_req          (bmu_dahbl_dbus_req        ),
  .bmu_ahbl_dbus_req_dp       (bmu_dahbl_dbus_req_dp     ),
  .bmu_ahbl_dbus_seq          (bmu_dahbl_dbus_seq        ),
  .bmu_ahbl_dbus_size         (bmu_dahbl_dbus_size       ),
  .bmu_ahbl_dbus_wdata        (bmu_dahbl_dbus_wdata      ),
  .bmu_ahbl_dbus_write        (bmu_dahbl_dbus_write      ),
  .bmu_ahbl_had_acc_deny      (bmu_dahbl_had_acc_deny    ),
  .bmu_ahbl_had_addr          (bmu_dahbl_had_addr        ),
  .bmu_ahbl_had_burst         (bmu_dahbl_had_burst       ),
  .bmu_ahbl_had_prot          (bmu_dahbl_had_prot        ),
  .bmu_ahbl_had_req           (bmu_dahbl_had_req         ),
  .bmu_ahbl_had_req_dp        (bmu_dahbl_had_req_dp      ),
  .bmu_ahbl_had_seq           (bmu_dahbl_had_seq         ),
  .bmu_ahbl_had_size          (bmu_dahbl_had_size        ),
  .bmu_ahbl_had_wdata         (bmu_dahbl_had_wdata       ),
  .bmu_ahbl_had_write         (bmu_dahbl_had_write       ),
  .bmu_ahbl_ibus_acc_deny     (bmu_dahbl_ibus_acc_deny   ),
  .bmu_ahbl_ibus_addr         (bmu_dahbl_ibus_addr       ),
  .bmu_ahbl_ibus_burst        (bmu_dahbl_ibus_burst      ),
  .bmu_ahbl_ibus_prot         (bmu_dahbl_ibus_prot       ),
  .bmu_ahbl_ibus_req          (bmu_dahbl_ibus_req        ),
  .bmu_ahbl_ibus_req_dp       (bmu_dahbl_ibus_req_dp     ),
  .bmu_ahbl_ibus_seq          (bmu_dahbl_ibus_seq        ),
  .bmu_ahbl_ibus_size         (bmu_dahbl_ibus_size       ),
  .cpurst_b                   (cpurst_b                  ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .pad_ahbl_hrdata            (pad_dahbl_hrdata          ),
  .pad_ahbl_hready            (pad_dahbl_hready          ),
  .pad_ahbl_hresp             (pad_dahbl_hresp           ),
  .rtu_yy_xx_async_flush      (rtu_yy_xx_async_flush     ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);


// &ModuleEnd; @53
endmodule


















// &Depend("cpu_cfig.h"); @17
// &Depend("pa_spsram_128x32.vp"); @18
// &Depend("pa_spsram_256x32.vp"); @19
// &Depend("pa_spsram_512x32.vp"); @20
// &Depend("pa_spsram_1024x32.vp"); @21
// &Depend("pa_spsram_2048x32.vp"); @22
// &Depend("pa_spsram_4096x32.vp"); @23
// &Depend("gated_clk_cell.vp"); @24

module pa_dcache_data_array(
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  data_clk_en,
  data_cen,
  data_wen,
  data_din,
  data_idx,
  data_gwen,
  data_dout
);

input                          forever_cpuclk;
input                          pad_yy_gate_clk_en_b;
input                          data_clk_en;
input                          data_cen;
input   [11:0]                 data_idx;
input                          data_gwen;
input   [31:0]                 data_wen;
input   [31:0]                 data_din;
output  [31:0]                 data_dout;

wire                           forever_cpuclk;
wire                           pad_yy_gate_clk_en_b;
wire                           data_clk_en;
wire                           data_cen;
wire    [11:0]                 data_idx;
wire                           data_gwen;
wire    [31:0]                 data_wen;
wire    [31:0]                 data_din;
wire    [31:0]                 data_dout;
wire                           data_clk;




gated_clk_cell  x_dcache_data_gated_clk (
  .clk_in               (forever_cpuclk       ),
  .clk_out              (data_clk             ),
  .external_en          (1'b0                 ),
  .global_en            (1'b1                 ),
  .local_en             (data_clk_en          ),
  .module_en            (1'b0                 ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b )
);
//csky vperl_off



`ifdef DCACHE_2K
pa_spsram_128x32  x_pa_spsram_128x32 (
`endif
`ifdef DCACHE_4K
pa_spsram_256x32  x_pa_spsram_256x32 (
`endif
`ifdef DCACHE_8K
pa_spsram_512x32  x_pa_spsram_512x32 (
`endif
`ifdef DCACHE_16K
pa_spsram_1024x32  x_pa_spsram_1024x32 (
`endif
`ifdef DCACHE_32K
pa_spsram_2048x32  x_pa_spsram_2048x32 (
`endif
`ifdef DCACHE_64K
pa_spsram_4096x32  x_pa_spsram_4096x32 (
`endif
  .A              (data_idx[`D_DATA_INDEX_WIDTH-1:0]),
  .CEN            (data_cen            ),
  .CLK            (data_clk            ),
  .GWEN           (data_gwen           ),
  .D              (data_din            ),
  .Q              (data_dout           ),
  .WEN            (data_wen            )
);
//csky vperl_on
endmodule


















// &Depend("cpu_cfig.h"); @18
// &Depend("pa_spsram_32x4.vp"); @19
// &Depend("pa_spsram_64x4.vp"); @20
// &Depend("pa_spsram_128x4.vp"); @21
// &Depend("pa_spsram_256x4.vp"); @22
// &Depend("pa_spsram_512x4.vp"); @23
// &Depend("pa_spsram_1024x4.vp"); @24
// &Depend("gated_clk_cell.vp"); @25

module pa_dcache_dirty_array(
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  dirty_clk_en,
  dirty_cen,
  dirty_wen,
  dirty_din,
  dirty_idx,
  dirty_gwen,
  dirty_dout
);

input                          forever_cpuclk;
input                          pad_yy_gate_clk_en_b;
input                          dirty_clk_en;
input                          dirty_cen;
input   [9:0]                  dirty_idx;
input                          dirty_gwen;
input   [3:0]                  dirty_wen;
input   [3:0]                  dirty_din;
output  [3:0]                  dirty_dout;

wire                           forever_cpuclk;
wire                           pad_yy_gate_clk_en_b;
wire                           dirty_clk_en;
wire                           dirty_cen;
wire    [9:0]                  dirty_idx;
wire                           dirty_gwen;
wire    [3:0]                  dirty_wen;
wire    [3:0]                  dirty_din;
wire    [3:0]                  dirty_dout;
wire                           dirty_clk;




gated_clk_cell  x_dcache_dirty_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dirty_clk           ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dirty_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);
//csky vperl_off



`ifdef DCACHE_2K
pa_spsram_32x4  x_pa_spsram_32x4        (
`endif
`ifdef DCACHE_4K
pa_spsram_64x4  x_pa_spsram_64x4        (
`endif
`ifdef DCACHE_8K
pa_spsram_128x4  x_pa_spsram_128x4      (
`endif
`ifdef DCACHE_16K
pa_spsram_256x4  x_pa_spsram_256x4      (
`endif
`ifdef DCACHE_32K
pa_spsram_512x4  x_pa_spsram_512x4      (
`endif
`ifdef DCACHE_64K
pa_spsram_1024x4  x_pa_spsram_1024x4    (
`endif
  .A              (dirty_idx[`D_TAG_INDEX_WIDTH-1:0]),
  .CEN            (dirty_cen            ),
  .CLK            (dirty_clk            ),
  .GWEN           (dirty_gwen           ),
  .D              (dirty_din            ),
  .Q              (dirty_dout           ),
  .WEN            (dirty_wen            )
);
//csky vperl_on
endmodule


















// &Depend("cpu_cfig.h"); @18
// &Depend("pa_spsram_32x46.vp"); @19
// &Depend("pa_spsram_64x44.vp"); @20
// &Depend("pa_spsram_128x42.vp"); @21
// &Depend("pa_spsram_256x40.vp"); @22
// &Depend("pa_spsram_512x38.vp"); @23
// &Depend("pa_spsram_1024x36.vp"); @24
// &Depend("gated_clk_cell.vp"); @25

module pa_dcache_tag_array(
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  tag_clk_en,
  tag_cen,
  tag_wen,
  tag_din,
  tag_idx,
  tag_gwen,
  tag_dout
);

parameter D_TAG_TAG_LEN   = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN = `D_TAG_INDEX_WIDTH;

input                          forever_cpuclk;
input                          pad_yy_gate_clk_en_b;
input                          tag_clk_en;
input                          tag_cen;
input   [45:0]                 tag_wen;
input   [45:0]                 tag_din;
input   [9:0]                  tag_idx;
input                          tag_gwen;
output  [45:0]                 tag_dout;

wire                           forever_cpuclk;
wire                           pad_yy_gate_clk_en_b;
wire                           tag_clk_en;
wire                           tag_cen;
wire    [45:0]                 tag_wen;
wire    [45:0]                 tag_din;
wire    [9:0]                  tag_idx;
wire                           tag_gwen;
wire    [45:0]                 tag_dout;
wire                           tag_clk;

wire    [2*D_TAG_TAG_LEN+1:0]  tag_wen_raw;
wire    [2*D_TAG_TAG_LEN+1:0]  tag_din_raw;
wire    [2*D_TAG_TAG_LEN+1:0]  tag_dout_raw;

assign tag_wen_raw[2*D_TAG_TAG_LEN+1:0] = {tag_wen[45], tag_wen[23+D_TAG_TAG_LEN-1:23],
                                           tag_wen[22], tag_wen[D_TAG_TAG_LEN-1:0]};

assign tag_din_raw[2*D_TAG_TAG_LEN+1:0] = {tag_din[45], tag_din[23+D_TAG_TAG_LEN-1:23],
                                           tag_din[22], tag_din[D_TAG_TAG_LEN-1:0]};

assign tag_dout[45:0] = {tag_dout_raw[2*D_TAG_TAG_LEN+1], {(22-D_TAG_TAG_LEN){1'b0}}, tag_dout_raw[2*D_TAG_TAG_LEN:D_TAG_TAG_LEN+1],
                         tag_dout_raw[D_TAG_TAG_LEN],     {(22-D_TAG_TAG_LEN){1'b0}}, tag_dout_raw[D_TAG_TAG_LEN-1:0]};




gated_clk_cell  x_dcache_tag_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (tag_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tag_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);
//csky vperl_off



`ifdef DCACHE_2K
pa_spsram_32x46  x_pa_spsram_32x46 (
`endif
`ifdef DCACHE_4K
pa_spsram_64x44  x_pa_spsram_64x44 (
`endif
`ifdef DCACHE_8K
pa_spsram_128x42  x_pa_spsram_128x42 (
`endif
`ifdef DCACHE_16K
pa_spsram_256x40  x_pa_spsram_256x40 (
`endif
`ifdef DCACHE_32K
pa_spsram_512x38  x_pa_spsram_512x38 (
`endif
`ifdef DCACHE_64K
pa_spsram_1024x36 x_pa_spsram_1024x36 (
`endif
  .A              (tag_idx[D_TAG_INDEX_LEN-1:0]),
  .CEN            (tag_cen            ),
  .CLK            (tag_clk            ),
  .GWEN           (tag_gwen           ),
  .D              (tag_din_raw[2*D_TAG_TAG_LEN+1:0]),
  .Q              (tag_dout_raw[2*D_TAG_TAG_LEN+1:0]),
  .WEN            (tag_wen_raw[2*D_TAG_TAG_LEN+1:0])
);
//csky vperl_on
endmodule


















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_dcache_top(
  dcache_data_cen_way0_bank0,
  dcache_data_cen_way0_bank1,
  dcache_data_cen_way1_bank0,
  dcache_data_cen_way1_bank1,
  dcache_data_din,
  dcache_data_dout_way0,
  dcache_data_dout_way1,
  dcache_data_idx,
  dcache_data_wen,
  dcache_dirty_cen,
  dcache_dirty_din,
  dcache_dirty_dout,
  dcache_dirty_idx,
  dcache_dirty_wen,
  dcache_tag_cen,
  dcache_tag_din,
  dcache_tag_dout,
  dcache_tag_idx,
  dcache_tag_wen,
  forever_cpuclk,
  pad_yy_gate_clk_en_b
);

// &Ports; @21
input           dcache_data_cen_way0_bank0;
input           dcache_data_cen_way0_bank1;
input           dcache_data_cen_way1_bank0;
input           dcache_data_cen_way1_bank1;
input   [63:0]  dcache_data_din;
input   [11:0]  dcache_data_idx;
input   [3 :0]  dcache_data_wen;
input           dcache_dirty_cen;
input   [2 :0]  dcache_dirty_din;
input   [9 :0]  dcache_dirty_idx;
input   [2 :0]  dcache_dirty_wen;
input           dcache_tag_cen;
input   [22:0]  dcache_tag_din;
input   [9 :0]  dcache_tag_idx;
input   [1 :0]  dcache_tag_wen;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
output  [63:0]  dcache_data_dout_way0;
output  [63:0]  dcache_data_dout_way1;
output  [2 :0]  dcache_dirty_dout;
output  [45:0]  dcache_tag_dout;

// &Regs; @22

// &Wires; @23
wire            dcache_data_cen00;
wire            dcache_data_cen01;
wire            dcache_data_cen10;
wire            dcache_data_cen11;
wire            dcache_data_cen_way0_bank0;
wire            dcache_data_cen_way0_bank1;
wire            dcache_data_cen_way1_bank0;
wire            dcache_data_cen_way1_bank1;
wire            dcache_data_clk_en00;
wire            dcache_data_clk_en01;
wire            dcache_data_clk_en10;
wire            dcache_data_clk_en11;
wire    [63:0]  dcache_data_din;
wire    [63:0]  dcache_data_dout_way0;
wire    [63:0]  dcache_data_dout_way1;
wire            dcache_data_gwen;
wire    [11:0]  dcache_data_idx;
wire    [3 :0]  dcache_data_wen;
wire    [31:0]  dcache_data_wen_t;
wire            dcache_dirty_cen;
wire            dcache_dirty_clk_en;
wire    [2 :0]  dcache_dirty_din;
wire    [3 :0]  dcache_dirty_din_t;
wire    [2 :0]  dcache_dirty_dout;
wire    [3 :0]  dcache_dirty_dout_t;
wire            dcache_dirty_gwen;
wire    [9 :0]  dcache_dirty_idx;
wire    [2 :0]  dcache_dirty_wen;
wire    [3 :0]  dcache_dirty_wen_t;
wire            dcache_tag_cen;
wire            dcache_tag_clk_en;
wire    [22:0]  dcache_tag_din;
wire    [45:0]  dcache_tag_din_t;
wire    [45:0]  dcache_tag_dout;
wire            dcache_tag_gwen;
wire    [9 :0]  dcache_tag_idx;
wire    [1 :0]  dcache_tag_wen;
wire    [45:0]  dcache_tag_wen_t;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;



assign dcache_tag_clk_en = !dcache_tag_cen;
assign dcache_tag_gwen   = &dcache_tag_wen[1:0];
assign dcache_tag_din_t[45:0] = {2{dcache_tag_din[22:0]}};
assign dcache_tag_wen_t[45:0] = {{23{dcache_tag_wen[1]}},
                                 {23{dcache_tag_wen[0]}}};

// &Instance("pa_dcache_tag_array", "x_pa_dcache_tag_array"); @32
pa_dcache_tag_array  x_pa_dcache_tag_array (
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .tag_cen              (dcache_tag_cen      ),
  .tag_clk_en           (dcache_tag_clk_en   ),
  .tag_din              (dcache_tag_din_t    ),
  .tag_dout             (dcache_tag_dout     ),
  .tag_gwen             (dcache_tag_gwen     ),
  .tag_idx              (dcache_tag_idx      ),
  .tag_wen              (dcache_tag_wen_t    )
);

// &Connect( @33
//          .tag_clk_en             (dcache_tag_clk_en       ), @34
//          .tag_cen                (dcache_tag_cen          ), @35
//          .tag_wen                (dcache_tag_wen_t        ), @36
//          .tag_din                (dcache_tag_din_t        ), @37
//          .tag_idx                (dcache_tag_idx          ), @38
//          .tag_gwen               (dcache_tag_gwen         ), @39
//          .tag_dout               (dcache_tag_dout         )); @40

assign dcache_dirty_clk_en = !dcache_dirty_cen;
assign dcache_dirty_gwen   = &dcache_dirty_wen[2:0];
assign dcache_dirty_wen_t[3:0] = {dcache_dirty_wen[2],dcache_dirty_wen[2:0]};
assign dcache_dirty_din_t[3:0] = {1'b0,dcache_dirty_din[2:0]};
assign dcache_dirty_dout[2:0]  = dcache_dirty_dout_t[2:0];

// &Instance("pa_dcache_dirty_array", "x_pa_dcache_dirty_array"); @48
pa_dcache_dirty_array  x_pa_dcache_dirty_array (
  .dirty_cen            (dcache_dirty_cen    ),
  .dirty_clk_en         (dcache_dirty_clk_en ),
  .dirty_din            (dcache_dirty_din_t  ),
  .dirty_dout           (dcache_dirty_dout_t ),
  .dirty_gwen           (dcache_dirty_gwen   ),
  .dirty_idx            (dcache_dirty_idx    ),
  .dirty_wen            (dcache_dirty_wen_t  ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( @49
//          .dirty_clk_en             (dcache_dirty_clk_en       ), @50
//          .dirty_cen                (dcache_dirty_cen          ), @51
//          .dirty_wen                (dcache_dirty_wen_t        ), @52
//          .dirty_din                (dcache_dirty_din_t        ), @53
//          .dirty_idx                (dcache_dirty_idx          ), @54
//          .dirty_gwen               (dcache_dirty_gwen         ), @55
//          .dirty_dout               (dcache_dirty_dout_t       )); @56

assign dcache_data_gwen   = &dcache_data_wen[3:0];
assign dcache_data_wen_t[31:0] = {{8{dcache_data_wen[3]}},
                                  {8{dcache_data_wen[2]}},
                                  {8{dcache_data_wen[1]}},
                                  {8{dcache_data_wen[0]}}};

assign dcache_data_clk_en00 = !dcache_data_cen_way0_bank0;
assign dcache_data_cen00    =  dcache_data_cen_way0_bank0;

// &Instance("pa_dcache_data_array", "x_pa_dcache_data_array_way0_bank0"); @67
pa_dcache_data_array  x_pa_dcache_data_array_way0_bank0 (
  .data_cen                    (dcache_data_cen00          ),
  .data_clk_en                 (dcache_data_clk_en00       ),
  .data_din                    (dcache_data_din[31:0]      ),
  .data_dout                   (dcache_data_dout_way0[31:0]),
  .data_gwen                   (dcache_data_gwen           ),
  .data_idx                    (dcache_data_idx            ),
  .data_wen                    (dcache_data_wen_t          ),
  .forever_cpuclk              (forever_cpuclk             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);

// &Connect( @68
//          .data_clk_en             (dcache_data_clk_en00    ), @69
//          .data_cen                (dcache_data_cen00       ), @70
//          .data_wen                (dcache_data_wen_t       ), @71
//          .data_din                (dcache_data_din[31:0]   ), @72
//          .data_idx                (dcache_data_idx         ), @73
//          .data_gwen               (dcache_data_gwen        ), @74
//          .data_dout               (dcache_data_dout_way0[31:0])); @75

assign dcache_data_clk_en01 = !dcache_data_cen_way0_bank1;
assign dcache_data_cen01    =  dcache_data_cen_way0_bank1;

// &Instance("pa_dcache_data_array", "x_pa_dcache_data_array_way0_bank1"); @80
pa_dcache_data_array  x_pa_dcache_data_array_way0_bank1 (
  .data_cen                     (dcache_data_cen01           ),
  .data_clk_en                  (dcache_data_clk_en01        ),
  .data_din                     (dcache_data_din[63:32]      ),
  .data_dout                    (dcache_data_dout_way0[63:32]),
  .data_gwen                    (dcache_data_gwen            ),
  .data_idx                     (dcache_data_idx             ),
  .data_wen                     (dcache_data_wen_t           ),
  .forever_cpuclk               (forever_cpuclk              ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        )
);

// &Connect( @81
//          .data_clk_en             (dcache_data_clk_en01    ), @82
//          .data_cen                (dcache_data_cen01       ), @83
//          .data_wen                (dcache_data_wen_t       ), @84
//          .data_din                (dcache_data_din[63:32]  ), @85
//          .data_idx                (dcache_data_idx         ), @86
//          .data_gwen               (dcache_data_gwen        ), @87
//          .data_dout               (dcache_data_dout_way0[63:32])); @88


assign dcache_data_clk_en10 = !dcache_data_cen_way1_bank0;
assign dcache_data_cen10    =  dcache_data_cen_way1_bank0;

// &Instance("pa_dcache_data_array", "x_pa_dcache_data_array_way1_bank0"); @94
pa_dcache_data_array  x_pa_dcache_data_array_way1_bank0 (
  .data_cen                    (dcache_data_cen10          ),
  .data_clk_en                 (dcache_data_clk_en10       ),
  .data_din                    (dcache_data_din[31:0]      ),
  .data_dout                   (dcache_data_dout_way1[31:0]),
  .data_gwen                   (dcache_data_gwen           ),
  .data_idx                    (dcache_data_idx            ),
  .data_wen                    (dcache_data_wen_t          ),
  .forever_cpuclk              (forever_cpuclk             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);

// &Connect( @95
//          .data_clk_en             (dcache_data_clk_en10     ), @96
//          .data_cen                (dcache_data_cen10        ), @97
//          .data_wen                (dcache_data_wen_t        ), @98
//          .data_din                (dcache_data_din[31:0]    ), @99
//          .data_idx                (dcache_data_idx          ), @100
//          .data_gwen               (dcache_data_gwen         ), @101
//          .data_dout               (dcache_data_dout_way1[31:0])); @102

assign dcache_data_clk_en11 = !dcache_data_cen_way1_bank1;
assign dcache_data_cen11    =  dcache_data_cen_way1_bank1;

// &Instance("pa_dcache_data_array", "x_pa_dcache_data_array_way1_bank1"); @107
pa_dcache_data_array  x_pa_dcache_data_array_way1_bank1 (
  .data_cen                     (dcache_data_cen11           ),
  .data_clk_en                  (dcache_data_clk_en11        ),
  .data_din                     (dcache_data_din[63:32]      ),
  .data_dout                    (dcache_data_dout_way1[63:32]),
  .data_gwen                    (dcache_data_gwen            ),
  .data_idx                     (dcache_data_idx             ),
  .data_wen                     (dcache_data_wen_t           ),
  .forever_cpuclk               (forever_cpuclk              ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        )
);

// &Connect( @108
//          .data_clk_en             (dcache_data_clk_en11     ), @109
//          .data_cen                (dcache_data_cen11        ), @110
//          .data_wen                (dcache_data_wen_t        ), @111
//          .data_din                (dcache_data_din[63:32]   ), @112
//          .data_idx                (dcache_data_idx          ), @113
//          .data_gwen               (dcache_data_gwen         ), @114
//          .data_dout               (dcache_data_dout_way1[63:32])); @115

// &ModuleEnd; @117
endmodule


module pa_f_spsram_1024x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_1024x36(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 36;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_1024x37(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 37;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule






















// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_1024x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [9:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @26
reg     [9:0]  addr_holding;

// &Wires; @27
wire    [9:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;
wire    [9:0]  addr;
wire    [0:0]  ram0_din;
wire    [0:0]  ram0_dout;
wire           ram0_wen;
wire    [0:0]  ram1_din;
wire    [0:0]  ram1_dout;
wire           ram1_wen;
wire    [0:0]  ram2_din;
wire    [0:0]  ram2_dout;
wire           ram2_wen;
wire    [0:0]  ram3_din;
wire    [0:0]  ram3_dout;
wire           ram3_wen;


parameter ADDR_WIDTH = 10;
parameter WRAP_SIZE  = 1;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("nonport","ram2_wen"); @35
// &Force("nonport","ram3_wen"); @36
// &Force("bus","WEN",3,0); @37
assign ram0_wen = !CEN && !WEN[0] && !GWEN;
assign ram1_wen = !CEN && !WEN[1] && !GWEN;
assign ram2_wen = !CEN && !WEN[2] && !GWEN;
assign ram3_wen = !CEN && !WEN[3] && !GWEN;


// &Force("nonport","ram0_din"); @44
// &Force("nonport","ram1_din"); @45
// &Force("nonport","ram2_din"); @46
// &Force("nonport","ram3_din"); @47
// &Force("bus","D",4*WRAP_SIZE-1,0); @48
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];
assign ram2_din[WRAP_SIZE-1:0] = D[3*WRAP_SIZE-1:2*WRAP_SIZE];
assign ram3_din[WRAP_SIZE-1:0] = D[4*WRAP_SIZE-1:3*WRAP_SIZE];

// &Force("nonport","addr"); @54
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @65
// &Force("nonport","ram1_dout"); @66
// &Force("nonport","ram2_dout"); @67
// &Force("nonport","ram3_dout"); @68

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];
assign Q[3*WRAP_SIZE-1:2*WRAP_SIZE] = ram2_dout[WRAP_SIZE-1:0];
assign Q[4*WRAP_SIZE-1:2*WRAP_SIZE] = ram3_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram2(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram2_din),
  .PortAWriteEnable(ram2_wen),
  .PortADataOut(ram2_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram3(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram3_din),
  .PortAWriteEnable(ram3_wen),
  .PortADataOut(ram3_dout));


// &ModuleEnd; @105
endmodule





module pa_f_spsram_128x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_128x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 4;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule






















// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_128x42(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [6 :0]  A;
input           CEN;
input           CLK;
input   [41:0]  D;
input           GWEN;
input   [41:0]  WEN;
output  [41:0]  Q;

// &Regs; @26
reg     [6 :0]  addr_holding;

// &Wires; @27
wire    [6 :0]  A;
wire            CEN;
wire            CLK;
wire    [41:0]  D;
wire            GWEN;
wire    [41:0]  Q;
wire    [41:0]  WEN;
wire    [6 :0]  addr;
wire    [20:0]  ram0_din;
wire    [20:0]  ram0_dout;
wire            ram0_wen;
wire    [20:0]  ram1_din;
wire    [20:0]  ram1_dout;
wire            ram1_wen;


parameter ADDR_WIDTH = 7;
parameter WRAP_SIZE  = 21;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("bus","WEN",41,0); @35
assign ram0_wen = !CEN && !WEN[ 0] && !GWEN;
assign ram1_wen = !CEN && !WEN[21] && !GWEN;


// &Force("nonport","ram0_din"); @40
// &Force("nonport","ram1_din"); @41
// &Force("bus","D",2*WRAP_SIZE-1,0); @42
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];

// &Force("nonport","addr"); @46
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @57
// &Force("nonport","ram1_dout"); @58

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

// &ModuleEnd; @78
endmodule





module pa_f_spsram_128x43(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 43;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_2048x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 11;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_256x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule






















// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_256x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [7:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @26
reg     [7:0]  addr_holding;

// &Wires; @27
wire    [7:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;
wire    [7:0]  addr;
wire    [0:0]  ram0_din;
wire    [0:0]  ram0_dout;
wire           ram0_wen;
wire    [0:0]  ram1_din;
wire    [0:0]  ram1_dout;
wire           ram1_wen;
wire    [0:0]  ram2_din;
wire    [0:0]  ram2_dout;
wire           ram2_wen;
wire    [0:0]  ram3_din;
wire    [0:0]  ram3_dout;
wire           ram3_wen;


parameter ADDR_WIDTH = 8;
parameter WRAP_SIZE  = 1;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("nonport","ram2_wen"); @35
// &Force("nonport","ram3_wen"); @36
// &Force("bus","WEN",3,0); @37
assign ram0_wen = !CEN && !WEN[0] && !GWEN;
assign ram1_wen = !CEN && !WEN[1] && !GWEN;
assign ram2_wen = !CEN && !WEN[2] && !GWEN;
assign ram3_wen = !CEN && !WEN[3] && !GWEN;


// &Force("nonport","ram0_din"); @44
// &Force("nonport","ram1_din"); @45
// &Force("nonport","ram2_din"); @46
// &Force("nonport","ram3_din"); @47
// &Force("bus","D",4*WRAP_SIZE-1,0); @48
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];
assign ram2_din[WRAP_SIZE-1:0] = D[3*WRAP_SIZE-1:2*WRAP_SIZE];
assign ram3_din[WRAP_SIZE-1:0] = D[4*WRAP_SIZE-1:3*WRAP_SIZE];

// &Force("nonport","addr"); @54
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @65
// &Force("nonport","ram1_dout"); @66
// &Force("nonport","ram2_dout"); @67
// &Force("nonport","ram3_dout"); @68

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];
assign Q[3*WRAP_SIZE-1:2*WRAP_SIZE] = ram2_dout[WRAP_SIZE-1:0];
assign Q[4*WRAP_SIZE-1:3*WRAP_SIZE] = ram3_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram2(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram2_din),
  .PortAWriteEnable(ram2_wen),
  .PortADataOut(ram2_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram3(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram3_din),
  .PortAWriteEnable(ram3_wen),
  .PortADataOut(ram3_dout));


// &ModuleEnd; @105
endmodule





module pa_f_spsram_256x40(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 40;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_256x41(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 41;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule






















// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_32x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [4:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @26
reg     [4:0]  addr_holding;

// &Wires; @27
wire    [4:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;
wire    [4:0]  addr;
wire    [0:0]  ram0_din;
wire    [0:0]  ram0_dout;
wire           ram0_wen;
wire    [0:0]  ram1_din;
wire    [0:0]  ram1_dout;
wire           ram1_wen;
wire    [0:0]  ram2_din;
wire    [0:0]  ram2_dout;
wire           ram2_wen;
wire    [0:0]  ram3_din;
wire    [0:0]  ram3_dout;
wire           ram3_wen;


parameter ADDR_WIDTH = 5;
parameter WRAP_SIZE  = 1;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("nonport","ram2_wen"); @35
// &Force("nonport","ram3_wen"); @36
// &Force("bus","WEN",3,0); @37
assign ram0_wen = !CEN && !WEN[0] && !GWEN;
assign ram1_wen = !CEN && !WEN[1] && !GWEN;
assign ram2_wen = !CEN && !WEN[2] && !GWEN;
assign ram3_wen = !CEN && !WEN[3] && !GWEN;


// &Force("nonport","ram0_din"); @44
// &Force("nonport","ram1_din"); @45
// &Force("nonport","ram2_din"); @46
// &Force("nonport","ram3_din"); @47
// &Force("bus","D",4*WRAP_SIZE-1,0); @48
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];
assign ram2_din[WRAP_SIZE-1:0] = D[3*WRAP_SIZE-1:2*WRAP_SIZE];
assign ram3_din[WRAP_SIZE-1:0] = D[4*WRAP_SIZE-1:3*WRAP_SIZE];

// &Force("nonport","addr"); @54
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @65
// &Force("nonport","ram1_dout"); @66
// &Force("nonport","ram2_dout"); @67
// &Force("nonport","ram3_dout"); @68

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];
assign Q[3*WRAP_SIZE-1:2*WRAP_SIZE] = ram2_dout[WRAP_SIZE-1:0];
assign Q[4*WRAP_SIZE-1:3*WRAP_SIZE] = ram3_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram2(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram2_din),
  .PortAWriteEnable(ram2_wen),
  .PortADataOut(ram2_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram3(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram3_din),
  .PortAWriteEnable(ram3_wen),
  .PortADataOut(ram3_dout));


// &ModuleEnd; @105
endmodule





module pa_f_spsram_32x46(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 5;
parameter DATA_WIDTH = 46;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_32x47(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 5;
parameter DATA_WIDTH = 47;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_4096x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 12;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_512x16(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 16;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_512x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_512x38(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 38;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_512x39(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 39;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule






















// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_512x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [8:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @26
reg     [8:0]  addr_holding;

// &Wires; @27
wire    [8:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;
wire    [8:0]  addr;
wire    [0:0]  ram0_din;
wire    [0:0]  ram0_dout;
wire           ram0_wen;
wire    [0:0]  ram1_din;
wire    [0:0]  ram1_dout;
wire           ram1_wen;
wire    [0:0]  ram2_din;
wire    [0:0]  ram2_dout;
wire           ram2_wen;
wire    [0:0]  ram3_din;
wire    [0:0]  ram3_dout;
wire           ram3_wen;


parameter ADDR_WIDTH = 9;
parameter WRAP_SIZE  = 1;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("nonport","ram2_wen"); @35
// &Force("nonport","ram3_wen"); @36
// &Force("bus","WEN",3,0); @37
assign ram0_wen = !CEN && !WEN[0] && !GWEN;
assign ram1_wen = !CEN && !WEN[1] && !GWEN;
assign ram2_wen = !CEN && !WEN[2] && !GWEN;
assign ram3_wen = !CEN && !WEN[3] && !GWEN;


// &Force("nonport","ram0_din"); @44
// &Force("nonport","ram1_din"); @45
// &Force("nonport","ram2_din"); @46
// &Force("nonport","ram3_din"); @47
// &Force("bus","D",4*WRAP_SIZE-1,0); @48
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];
assign ram2_din[WRAP_SIZE-1:0] = D[3*WRAP_SIZE-1:2*WRAP_SIZE];
assign ram3_din[WRAP_SIZE-1:0] = D[4*WRAP_SIZE-1:3*WRAP_SIZE];

// &Force("nonport","addr"); @54
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @65
// &Force("nonport","ram1_dout"); @66
// &Force("nonport","ram2_dout"); @67
// &Force("nonport","ram3_dout"); @68

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];
assign Q[3*WRAP_SIZE-1:2*WRAP_SIZE] = ram2_dout[WRAP_SIZE-1:0];
assign Q[4*WRAP_SIZE-1:3*WRAP_SIZE] = ram3_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram2(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram2_din),
  .PortAWriteEnable(ram2_wen),
  .PortADataOut(ram2_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram3(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram3_din),
  .PortAWriteEnable(ram3_wen),
  .PortADataOut(ram3_dout));


// &ModuleEnd; @105
endmodule


























// &Depend("fpga_ram.v"); @22

// &ModuleBeg; @24
module pa_f_spsram_64x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @25
input   [5:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @26
reg     [5:0]  addr_holding;

// &Wires; @27
wire    [5:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;
wire    [5:0]  addr;
wire    [0:0]  ram0_din;
wire    [0:0]  ram0_dout;
wire           ram0_wen;
wire    [0:0]  ram1_din;
wire    [0:0]  ram1_dout;
wire           ram1_wen;
wire    [0:0]  ram2_din;
wire    [0:0]  ram2_dout;
wire           ram2_wen;
wire    [0:0]  ram3_din;
wire    [0:0]  ram3_dout;
wire           ram3_wen;


parameter ADDR_WIDTH = 6;
parameter WRAP_SIZE  = 1;


// &Force("nonport","ram0_wen"); @33
// &Force("nonport","ram1_wen"); @34
// &Force("nonport","ram2_wen"); @35
// &Force("nonport","ram3_wen"); @36
// &Force("bus","WEN",3,0); @37
assign ram0_wen = !CEN && !WEN[0] && !GWEN;
assign ram1_wen = !CEN && !WEN[1] && !GWEN;
assign ram2_wen = !CEN && !WEN[2] && !GWEN;
assign ram3_wen = !CEN && !WEN[3] && !GWEN;


// &Force("nonport","ram0_din"); @44
// &Force("nonport","ram1_din"); @45
// &Force("nonport","ram2_din"); @46
// &Force("nonport","ram3_din"); @47
// &Force("bus","D",4*WRAP_SIZE-1,0); @48
assign ram0_din[WRAP_SIZE-1:0] = D[WRAP_SIZE-1:0];
assign ram1_din[WRAP_SIZE-1:0] = D[2*WRAP_SIZE-1:WRAP_SIZE];
assign ram2_din[WRAP_SIZE-1:0] = D[3*WRAP_SIZE-1:2*WRAP_SIZE];
assign ram3_din[WRAP_SIZE-1:0] = D[4*WRAP_SIZE-1:3*WRAP_SIZE];

// &Force("nonport","addr"); @54
always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

// &Force("nonport","ram0_dout"); @65
// &Force("nonport","ram1_dout"); @66
// &Force("nonport","ram2_dout"); @67
// &Force("nonport","ram3_dout"); @68

assign Q[WRAP_SIZE-1:0]             = ram0_dout[WRAP_SIZE-1:0];
assign Q[2*WRAP_SIZE-1:WRAP_SIZE]   = ram1_dout[WRAP_SIZE-1:0];
assign Q[3*WRAP_SIZE-1:2*WRAP_SIZE] = ram2_dout[WRAP_SIZE-1:0];
assign Q[4*WRAP_SIZE-1:3*WRAP_SIZE] = ram3_dout[WRAP_SIZE-1:0];


fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram0(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram0_din),
  .PortAWriteEnable(ram0_wen),
  .PortADataOut(ram0_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram1(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram1_din),
  .PortAWriteEnable(ram1_wen),
  .PortADataOut(ram1_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram2(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram2_din),
  .PortAWriteEnable(ram2_wen),
  .PortADataOut(ram2_dout));

fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram3(
  .PortAClk (CLK),
  .PortAAddr(addr),
  .PortADataIn (ram3_din),
  .PortAWriteEnable(ram3_wen),
  .PortADataOut(ram3_dout));


// &ModuleEnd; @105
endmodule





module pa_f_spsram_64x44(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 44;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_64x45(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 45;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule

module pa_f_spsram_8192x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

parameter ADDR_WIDTH = 13;
parameter DATA_WIDTH = 32;
parameter WRAP_SIZE  = 1;

input  [ADDR_WIDTH-1:0]   A;
input                     CEN;
input                     CLK;
input  [DATA_WIDTH-1:0]   D;
input                     GWEN;
input  [DATA_WIDTH-1:0]   WEN;
output [DATA_WIDTH-1:0]   Q;

reg    [ADDR_WIDTH-1:0]   addr_holding;

wire  [ADDR_WIDTH-1:0]   A;
wire                     CEN;
wire                     CLK;
wire  [DATA_WIDTH-1:0]   D;
wire                     GWEN;
wire  [DATA_WIDTH-1:0]   WEN;
wire  [DATA_WIDTH-1:0]   Q;
wire  [ADDR_WIDTH-1:0]   addr;

always@(posedge CLK)
begin
  if(!CEN) begin
    addr_holding[ADDR_WIDTH-1:0] <= A[ADDR_WIDTH-1:0];
  end
end

assign addr[ADDR_WIDTH-1:0] = CEN ? addr_holding[ADDR_WIDTH-1:0]
                                  : A[ADDR_WIDTH-1:0];

wire [DATA_WIDTH-1:0] ram_wen_vec;
genvar i;
generate
  for(i=0; i<DATA_WIDTH; i=i+1) begin: RAM_DIN_VEC
    assign ram_wen_vec[i] = !CEN & !WEN[i]  & !GWEN;
    fpga_ram #(WRAP_SIZE,ADDR_WIDTH) ram_instance(
      .PortAClk (CLK),
      .PortAAddr(addr),
      .PortADataIn (D[i]),
      .PortAWriteEnable(ram_wen_vec[i]),
      .PortADataOut(Q[i]));
  end
endgenerate

endmodule




















// &ModuleBeg; @20
module pa_had_bkpt(
  bkpt_ctrl_cnt_eq_0,
  bkpt_ctrl_cnt_ls_3,
  bkpt_ctrl_data_req,
  bkpt_ctrl_data_req_raw,
  bkpt_ctrl_ex_data_req_ls_1,
  bkpt_ctrl_ex_inst_req,
  bkpt_ctrl_id_inst_req,
  bkpt_ctrl_inst_req,
  bkpt_regs_cnt,
  cp0_yy_mach_mode,
  ctrl_bkpt_en,
  ctrl_bkpt_inst_bkpt_req,
  hacr_xx_bkpt_cnt_sel,
  hacr_xx_wdata,
  had_regs_clk,
  hadrst_b,
  idu_had_id_chgflw_inst,
  idu_had_id_inst_bkpt_vld,
  regs_bkpt_bc,
  rtu_had_data_bkpt_vld,
  rtu_had_ex1_data_bkpt_vld,
  rtu_had_ex1_inst_bkpt_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_had_inst_bkpt_vld,
  rtu_had_inst_ld,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_split,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  sm_xx_update_reg_en
);

// &Ports; @21
input           cp0_yy_mach_mode;
input           ctrl_bkpt_en;
input           ctrl_bkpt_inst_bkpt_req;
input           hacr_xx_bkpt_cnt_sel;
input   [31:0]  hacr_xx_wdata;
input           had_regs_clk;
input           hadrst_b;
input           idu_had_id_chgflw_inst;
input           idu_had_id_inst_bkpt_vld;
input   [4 :0]  regs_bkpt_bc;
input           rtu_had_data_bkpt_vld;
input           rtu_had_ex1_data_bkpt_vld;
input           rtu_had_ex1_inst_bkpt_vld;
input           rtu_had_ex1_inst_ld;
input           rtu_had_ex1_spec_fail;
input           rtu_had_ex1_split;
input           rtu_had_inst_bkpt_vld;
input           rtu_had_inst_ld;
input           rtu_had_xx_retire_normal;
input           rtu_had_xx_retire_normal_for_dbg;
input           rtu_had_xx_split;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_flush;
input           sm_xx_update_reg_en;
output          bkpt_ctrl_cnt_eq_0;
output          bkpt_ctrl_cnt_ls_3;
output          bkpt_ctrl_data_req;
output          bkpt_ctrl_data_req_raw;
output          bkpt_ctrl_ex_data_req_ls_1;
output          bkpt_ctrl_ex_inst_req;
output          bkpt_ctrl_id_inst_req;
output          bkpt_ctrl_inst_req;
output  [7 :0]  bkpt_regs_cnt;

// &Regs; @22
reg     [7 :0]  bkpt_counter;
reg             data_bkpt_pending;
reg             ex_data_bkpt_pending_ls_1;

// &Wires; @23
wire            bkpt_all_usr_sel;
wire            bkpt_cnt_eq_0;
wire            bkpt_cnt_eq_1;
wire            bkpt_cnt_ls_1;
wire            bkpt_count_dec_vld;
wire    [7 :0]  bkpt_counter_dec;
wire            bkpt_ctrl_cnt_eq_0;
wire            bkpt_ctrl_cnt_ls_3;
wire            bkpt_ctrl_data_req;
wire            bkpt_ctrl_data_req_raw;
wire            bkpt_ctrl_ex_data_req_ls_1;
wire            bkpt_ctrl_ex_inst_req;
wire            bkpt_ctrl_id_inst_req;
wire            bkpt_ctrl_inst_req;
wire            bkpt_data;
wire            bkpt_data_ld;
wire            bkpt_data_st;
wire            bkpt_inst;
wire            bkpt_inst_br;
wire            bkpt_inst_or_data;
wire            bkpt_norm_usr_sel;
wire    [7 :0]  bkpt_regs_cnt;
wire            bkpt_supv_usr_sel;
wire            bkpt_usr_active;
wire            cp0_yy_mach_mode;
wire            ctrl_bkpt_en;
wire            ctrl_bkpt_inst_bkpt_req;
wire            data_addr_match;
wire            data_bkpt_active;
wire            data_bkpt_req;
wire            data_ex_addr_match;
wire            data_ex_bkpt_active;
wire            ex_data_bkpt_req_ls_1;
wire            ex_inst_bkpt_req_ls_1;
wire            hacr_xx_bkpt_cnt_sel;
wire    [31:0]  hacr_xx_wdata;
wire            had_regs_clk;
wire            hadrst_b;
wire            idu_had_id_chgflw_inst;
wire            idu_had_id_inst_bkpt_vld;
wire            inst_bkpt_active;
wire            inst_bkpt_req;
wire            inst_ex1_bkpt_active;
wire            inst_id_addr_match;
wire            inst_id_bkpt_active;
wire            inst_id_bkpt_sel;
wire            load_bkpt_active;
wire            load_bkpt_sel;
wire            load_ex_bkpt_active;
wire    [4 :0]  regs_bkpt_bc;
wire            rtu_had_data_bkpt_vld;
wire            rtu_had_ex1_data_bkpt_vld;
wire            rtu_had_ex1_inst_bkpt_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpt_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire            rtu_had_xx_split;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_flush;
wire            sm_xx_update_reg_en;
wire            store_bkpt_active;
wire            store_bkpt_sel;
wire            store_ex_bkpt_active;





// &Force ("bus","hacr_xx_wdata","31","0"); @28
assign bkpt_inst_or_data = (regs_bkpt_bc[2:0] == 3'b001);
assign bkpt_inst         = (regs_bkpt_bc[2:0] == 3'b010);
assign bkpt_data         = (regs_bkpt_bc[2:0] == 3'b011);
assign bkpt_inst_br      = (regs_bkpt_bc[2:0] == 3'b100);
assign bkpt_data_st      = (regs_bkpt_bc[2:0] == 3'b101);
assign bkpt_data_ld      = (regs_bkpt_bc[2:0] == 3'b110);

assign bkpt_all_usr_sel  = (regs_bkpt_bc[4:3] == 2'b00);
assign bkpt_supv_usr_sel = (regs_bkpt_bc[4:3] == 2'b11) && cp0_yy_mach_mode;
assign bkpt_norm_usr_sel = (regs_bkpt_bc[4:3] == 2'b10) && !cp0_yy_mach_mode;
assign bkpt_usr_active   = bkpt_all_usr_sel  ||
                           bkpt_supv_usr_sel ||
                           bkpt_norm_usr_sel;







assign inst_id_bkpt_sel  = bkpt_usr_active &&
                           (bkpt_inst_or_data || bkpt_inst ||
                           bkpt_inst_br && idu_had_id_chgflw_inst);

assign load_bkpt_sel  = bkpt_usr_active &&
                        (bkpt_inst_or_data || bkpt_data || bkpt_data_ld);
assign store_bkpt_sel = bkpt_usr_active &&
                        (bkpt_inst_or_data || bkpt_data || bkpt_data_st);







assign inst_bkpt_active    = rtu_had_inst_bkpt_vld;




assign inst_id_addr_match  = idu_had_id_inst_bkpt_vld && ctrl_bkpt_en;
assign inst_id_bkpt_active = inst_id_addr_match && inst_id_bkpt_sel;


assign inst_ex1_bkpt_active = rtu_had_ex1_inst_bkpt_vld;






assign data_addr_match   = rtu_had_data_bkpt_vld && ctrl_bkpt_en;
assign load_bkpt_active  = data_addr_match && load_bkpt_sel && rtu_had_inst_ld;
assign store_bkpt_active = data_addr_match && store_bkpt_sel&& !rtu_had_inst_ld;
assign data_bkpt_active  = load_bkpt_active || store_bkpt_active;




assign data_ex_addr_match   = rtu_had_ex1_data_bkpt_vld && ctrl_bkpt_en;
assign load_ex_bkpt_active  = data_ex_addr_match && load_bkpt_sel &&
                              rtu_had_ex1_inst_ld;
assign store_ex_bkpt_active = data_ex_addr_match && store_bkpt_sel &&
                              !rtu_had_ex1_inst_ld;
assign data_ex_bkpt_active  = load_ex_bkpt_active || store_ex_bkpt_active;






assign bkpt_count_dec_vld =
  !bkpt_cnt_eq_0 && !rtu_yy_xx_dbgon && rtu_had_xx_retire_normal &&
  ((!rtu_had_xx_split && inst_bkpt_active) || data_bkpt_active) &&
  !ctrl_bkpt_inst_bkpt_req;

always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bkpt_counter[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bkpt_cnt_sel)
    bkpt_counter[7:0] <= hacr_xx_wdata[7:0];
  else if (bkpt_count_dec_vld)
    bkpt_counter[7:0] <= bkpt_counter_dec[7:0];
  else
    bkpt_counter[7:0] <= bkpt_counter[7:0];
end
assign bkpt_regs_cnt[7:0] = bkpt_counter[7:0];





assign bkpt_counter_dec[7:0] = bkpt_counter[7:0] - 1'b1;
assign bkpt_cnt_eq_0         = (bkpt_counter[7:0] == 8'b0);
assign bkpt_cnt_eq_1         = (bkpt_counter[7:0] == 8'b1);
assign bkpt_cnt_ls_1         = bkpt_cnt_eq_0 || bkpt_cnt_eq_1;

assign bkpt_ctrl_cnt_eq_0 = bkpt_cnt_eq_0;


assign bkpt_ctrl_cnt_ls_3 = (bkpt_counter[7:2] == 6'b0) && (|bkpt_counter[1:0]);

assign bkpt_ctrl_id_inst_req   = !rtu_yy_xx_dbgon && inst_id_bkpt_active;

assign ex_inst_bkpt_req_ls_1 = bkpt_cnt_ls_1 && !rtu_yy_xx_dbgon &&
                               inst_ex1_bkpt_active;
assign ex_data_bkpt_req_ls_1 = bkpt_cnt_ls_1 && !rtu_yy_xx_dbgon &&
                               data_ex_bkpt_active;

assign bkpt_ctrl_ex_data_req_ls_1 = ex_data_bkpt_req_ls_1 && !rtu_had_ex1_split ||
                                    ex_data_bkpt_pending_ls_1 && !rtu_had_ex1_split ||
                                    ex_inst_bkpt_req_ls_1;

always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ex_data_bkpt_pending_ls_1 <= 1'b0;
  else if (rtu_yy_xx_flush)
    ex_data_bkpt_pending_ls_1 <= 1'b0;
  else if (ex_data_bkpt_req_ls_1 && rtu_had_ex1_split)
    ex_data_bkpt_pending_ls_1 <= 1'b1;
  else if (rtu_yy_xx_dbgon)
    ex_data_bkpt_pending_ls_1 <= 1'b0;
end






assign inst_bkpt_req = bkpt_cnt_eq_0 && !rtu_yy_xx_dbgon &&
                       inst_bkpt_active;
assign data_bkpt_req = bkpt_cnt_eq_0 && !rtu_yy_xx_dbgon &&
                       data_bkpt_active;

assign bkpt_ctrl_ex_inst_req = bkpt_cnt_eq_0
                           && !rtu_yy_xx_dbgon && inst_ex1_bkpt_active;
assign bkpt_ctrl_inst_req = inst_bkpt_req;
assign bkpt_ctrl_data_req = data_bkpt_req && !rtu_had_xx_split && rtu_had_xx_retire_normal_for_dbg ||
                            data_bkpt_pending && !rtu_had_xx_split && rtu_had_xx_retire_normal_for_dbg;
assign bkpt_ctrl_data_req_raw = data_bkpt_req && !rtu_had_xx_split ||
                                data_bkpt_pending && !rtu_had_xx_split;


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    data_bkpt_pending <= 1'b0;
  else if (rtu_yy_xx_flush || rtu_had_ex1_spec_fail)
    data_bkpt_pending <= 1'b0;
  else if (data_bkpt_req && rtu_had_xx_split)
    data_bkpt_pending <= 1'b1;
  else if (rtu_yy_xx_dbgon)
    data_bkpt_pending <= 1'b0;
end

// &ModuleEnd; @186
endmodule






















// &ModuleBeg; @20
module pa_had_ctrl(
  bkpta_cnt_eq_0,
  bkpta_cnt_ls_3,
  bkpta_ctrl_data_req,
  bkpta_ctrl_data_req_raw,
  bkpta_ctrl_ex_data_req_ls_1,
  bkpta_ctrl_ex_inst_req,
  bkpta_ctrl_id_inst_req,
  bkpta_ctrl_inst_req,
  bkptb_cnt_eq_0,
  bkptb_cnt_ls_3,
  bkptb_ctrl_data_req,
  bkptb_ctrl_data_req_raw,
  bkptb_ctrl_ex_data_req_ls_1,
  bkptb_ctrl_ex_inst_req,
  bkptb_ctrl_id_inst_req,
  bkptb_ctrl_inst_req,
  cp0_had_pcfifo_wen,
  cpuclk,
  ctrl_bkpt_inst_bkpt_req,
  ctrl_bkpta_en,
  ctrl_bkptb_en,
  ctrl_bkptc_en,
  ctrl_bkptd_en,
  ctrl_bkpte_en,
  ctrl_pcfifo_ren,
  ctrl_pcfifo_wen,
  ctrl_regs_bkpta_vld,
  ctrl_regs_bkptb_vld,
  ctrl_regs_bkptc_vld,
  ctrl_regs_bkptd_vld,
  ctrl_regs_bkpte_vld,
  ctrl_regs_exit_dbg,
  ctrl_regs_freeze_pcfifo,
  ctrl_regs_set_sqa,
  ctrl_regs_set_sqb,
  ctrl_regs_update_adro,
  ctrl_regs_update_dro,
  ctrl_regs_update_mbo,
  ctrl_regs_update_rsto,
  ctrl_regs_update_swo,
  ctrl_regs_update_to,
  ctrl_trace_en,
  ctrl_trace_en_raw,
  ddc_xx_update_ir,
  hacr_xx_ex,
  hacr_xx_go,
  hacr_xx_ir_sel,
  hacr_xx_pcfifo_sel,
  had_cp0_xx_dbg,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  had_ifu_ir_vld,
  had_regs_clk,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_ex1_trace_potential,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_yy_xx_bxen,
  had_yy_xx_dbg,
  had_yy_xx_dbg_en,
  had_yy_xx_exit_dbg,
  hadrst_b,
  io_ctrl_jdb_req_b,
  lite_bkptc_ctrl_data_req,
  lite_bkptc_ctrl_data_req_raw,
  lite_bkptc_ctrl_ex_data_req,
  lite_bkptc_ctrl_ex_inst_req,
  lite_bkptc_ctrl_id_inst_req,
  lite_bkptc_ctrl_inst_req,
  lite_bkptd_ctrl_data_req,
  lite_bkptd_ctrl_data_req_raw,
  lite_bkptd_ctrl_ex_data_req,
  lite_bkptd_ctrl_ex_inst_req,
  lite_bkptd_ctrl_id_inst_req,
  lite_bkptd_ctrl_inst_req,
  lite_bkpte_ctrl_data_req,
  lite_bkpte_ctrl_data_req_raw,
  lite_bkpte_ctrl_ex_data_req,
  lite_bkpte_ctrl_ex_inst_req,
  lite_bkpte_ctrl_id_inst_req,
  lite_bkpte_ctrl_inst_req,
  regs_bkpta_bc,
  regs_bkptb_bc,
  regs_ctrl_adr,
  regs_ctrl_dr,
  regs_ctrl_fdb,
  regs_ctrl_frzc,
  regs_ctrl_had_int_on,
  regs_ctrl_pcfifo_frozen,
  regs_ctrl_sqa,
  regs_ctrl_sqb,
  regs_ctrl_sqc,
  regs_ctrl_tme,
  regs_xx_ddc_en,
  rtu_had_dbg_disable_for_tee,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_retire,
  sm_ctrl_exit_dbg,
  sm_xx_update_dr_en,
  sm_xx_update_ir_en,
  sm_xx_write_en,
  sysio_had_sdb_req_b,
  trace_ctrl_req,
  trace_ctrl_req_ls_1,
  trace_ctrl_req_raw
);

// &Ports; @21
input          bkpta_cnt_eq_0;
input          bkpta_cnt_ls_3;
input          bkpta_ctrl_data_req;
input          bkpta_ctrl_data_req_raw;
input          bkpta_ctrl_ex_data_req_ls_1;
input          bkpta_ctrl_ex_inst_req;
input          bkpta_ctrl_id_inst_req;
input          bkpta_ctrl_inst_req;
input          bkptb_cnt_eq_0;
input          bkptb_cnt_ls_3;
input          bkptb_ctrl_data_req;
input          bkptb_ctrl_data_req_raw;
input          bkptb_ctrl_ex_data_req_ls_1;
input          bkptb_ctrl_ex_inst_req;
input          bkptb_ctrl_id_inst_req;
input          bkptb_ctrl_inst_req;
input          cp0_had_pcfifo_wen;
input          cpuclk;
input          ddc_xx_update_ir;
input          hacr_xx_ex;
input          hacr_xx_go;
input          hacr_xx_ir_sel;
input          hacr_xx_pcfifo_sel;
input          had_regs_clk;
input   [6:0]  had_yy_xx_bxen;
input          hadrst_b;
input          io_ctrl_jdb_req_b;
input          lite_bkptc_ctrl_data_req;
input          lite_bkptc_ctrl_data_req_raw;
input          lite_bkptc_ctrl_ex_data_req;
input          lite_bkptc_ctrl_ex_inst_req;
input          lite_bkptc_ctrl_id_inst_req;
input          lite_bkptc_ctrl_inst_req;
input          lite_bkptd_ctrl_data_req;
input          lite_bkptd_ctrl_data_req_raw;
input          lite_bkptd_ctrl_ex_data_req;
input          lite_bkptd_ctrl_ex_inst_req;
input          lite_bkptd_ctrl_id_inst_req;
input          lite_bkptd_ctrl_inst_req;
input          lite_bkpte_ctrl_data_req;
input          lite_bkpte_ctrl_data_req_raw;
input          lite_bkpte_ctrl_ex_data_req;
input          lite_bkpte_ctrl_ex_inst_req;
input          lite_bkpte_ctrl_id_inst_req;
input          lite_bkpte_ctrl_inst_req;
input   [4:0]  regs_bkpta_bc;
input   [4:0]  regs_bkptb_bc;
input          regs_ctrl_adr;
input          regs_ctrl_dr;
input          regs_ctrl_fdb;
input          regs_ctrl_frzc;
input          regs_ctrl_had_int_on;
input          regs_ctrl_pcfifo_frozen;
input          regs_ctrl_sqa;
input          regs_ctrl_sqb;
input   [1:0]  regs_ctrl_sqc;
input          regs_ctrl_tme;
input          regs_xx_ddc_en;
input          rtu_had_dbg_disable_for_tee;
input          rtu_had_rst_dbgreq_ack;
input          rtu_had_xx_bkpt_inst;
input          rtu_had_xx_chgflow;
input          rtu_had_xx_retire;
input          rtu_had_xx_retire_normal;
input          rtu_yy_xx_dbgon;
input          rtu_yy_xx_retire;
input          sm_ctrl_exit_dbg;
input          sm_xx_update_dr_en;
input          sm_xx_update_ir_en;
input          sm_xx_write_en;
input          sysio_had_sdb_req_b;
input          trace_ctrl_req;
input          trace_ctrl_req_ls_1;
input          trace_ctrl_req_raw;
output         ctrl_bkpt_inst_bkpt_req;
output         ctrl_bkpta_en;
output         ctrl_bkptb_en;
output         ctrl_bkptc_en;
output         ctrl_bkptd_en;
output         ctrl_bkpte_en;
output         ctrl_pcfifo_ren;
output         ctrl_pcfifo_wen;
output         ctrl_regs_bkpta_vld;
output         ctrl_regs_bkptb_vld;
output         ctrl_regs_bkptc_vld;
output         ctrl_regs_bkptd_vld;
output         ctrl_regs_bkpte_vld;
output         ctrl_regs_exit_dbg;
output         ctrl_regs_freeze_pcfifo;
output         ctrl_regs_set_sqa;
output         ctrl_regs_set_sqb;
output         ctrl_regs_update_adro;
output         ctrl_regs_update_dro;
output         ctrl_regs_update_mbo;
output         ctrl_regs_update_rsto;
output         ctrl_regs_update_swo;
output         ctrl_regs_update_to;
output         ctrl_trace_en;
output         ctrl_trace_en_raw;
output         had_cp0_xx_dbg;
output  [8:0]  had_idu_id_inst_bkpt;
output         had_idu_id_inst_bkpt_brir;
output         had_idu_id_inst_bkpt_hit;
output         had_ifu_ir_vld;
output         had_rtu_async_dbgreq;
output         had_rtu_data_bkpt_dbgreq;
output         had_rtu_data_bkpt_dbgreq_raw;
output         had_rtu_ex1_bkpt_potential;
output         had_rtu_ex1_inst_bkpt_dbgreq;
output         had_rtu_ex1_trace_potential;
output         had_rtu_fdb;
output         had_rtu_hw_dbgreq;
output         had_rtu_inst_bkpt_dbgreq;
output         had_rtu_rst_dbgreq;
output         had_rtu_trace_dbgreq;
output         had_rtu_trace_dbgreq_raw;
output         had_yy_xx_dbg;
output         had_yy_xx_dbg_en;
output         had_yy_xx_exit_dbg;

// &Regs; @22
reg            ctrl_bkptb_en_with_sqc;
reg            ctrl_exit_dbg;
reg            ctrl_go_noex;
reg            ctrl_had_dbgon;
reg            ctrl_trace_en;
reg            update_hacr_ff;

// &Wires; @23
wire           adr_set_req;
wire           async_dbg_req;
wire           bkpta_cnt_eq_0;
wire           bkpta_cnt_ls_3;
wire           bkpta_ctrl_data_req;
wire           bkpta_ctrl_data_req_raw;
wire           bkpta_ctrl_ex_data_req_ls_1;
wire           bkpta_ctrl_ex_inst_req;
wire           bkpta_ctrl_id_inst_req;
wire           bkpta_ctrl_inst_req;
wire           bkptb_cnt_eq_0;
wire           bkptb_cnt_ls_3;
wire           bkptb_ctrl_data_req;
wire           bkptb_ctrl_data_req_raw;
wire           bkptb_ctrl_ex_data_req_ls_1;
wire           bkptb_ctrl_ex_inst_req;
wire           bkptb_ctrl_id_inst_req;
wire           bkptb_ctrl_inst_req;
wire           bkptb_en_sqc;
wire           cp0_had_pcfifo_wen;
wire           cpuclk;
wire           ctrl_bkpt_inst_bkpt_req;
wire           ctrl_bkpta_en;
wire           ctrl_bkptb_en;
wire           ctrl_bkptc_en;
wire           ctrl_bkptd_en;
wire           ctrl_bkpte_en;
wire           ctrl_bkptf_en;
wire           ctrl_bkptg_en;
wire           ctrl_bkpth_en;
wire           ctrl_bkpti_en;
wire           ctrl_pcfifo_ren;
wire           ctrl_pcfifo_wen;
wire           ctrl_regs_bkpta_vld;
wire           ctrl_regs_bkptb_vld;
wire           ctrl_regs_bkptc_vld;
wire           ctrl_regs_bkptd_vld;
wire           ctrl_regs_bkpte_vld;
wire           ctrl_regs_exit_dbg;
wire           ctrl_regs_freeze_pcfifo;
wire           ctrl_regs_set_sqa;
wire           ctrl_regs_set_sqb;
wire           ctrl_regs_update_adro;
wire           ctrl_regs_update_dro;
wire           ctrl_regs_update_mbo;
wire           ctrl_regs_update_rsto;
wire           ctrl_regs_update_swo;
wire           ctrl_regs_update_to;
wire           ctrl_rst_dbgreq;
wire           ctrl_set_sqa;
wire           ctrl_set_sqb;
wire           ctrl_trace_en_raw;
wire           ctrl_update_mbkpt;
wire           data_bkpt_ex_req_ls_1;
wire           data_bkpt_req;
wire           data_bkpt_req_raw;
wire           ddc_inst_go;
wire           ddc_xx_update_ir;
wire           dr_set_req;
wire           ex1_inst_bkpt_req;
wire           exit_dbg;
wire           go_in_dbg;
wire           go_noex;
wire           hacr_xx_ex;
wire           hacr_xx_go;
wire           hacr_xx_ir_sel;
wire           hacr_xx_pcfifo_sel;
wire           had_cp0_xx_dbg;
wire           had_dbg_wakeup;
wire    [8:0]  had_idu_id_inst_bkpt;
wire           had_idu_id_inst_bkpt_brir;
wire           had_idu_id_inst_bkpt_hit;
wire           had_ifu_ir_vld;
wire           had_regs_clk;
wire           had_rtu_async_dbgreq;
wire           had_rtu_data_bkpt_dbgreq;
wire           had_rtu_data_bkpt_dbgreq_raw;
wire           had_rtu_ex1_bkpt_potential;
wire           had_rtu_ex1_inst_bkpt_dbgreq;
wire           had_rtu_ex1_trace_potential;
wire           had_rtu_fdb;
wire           had_rtu_hw_dbgreq;
wire           had_rtu_inst_bkpt_dbgreq;
wire           had_rtu_rst_dbgreq;
wire           had_rtu_trace_dbgreq;
wire           had_rtu_trace_dbgreq_raw;
wire    [6:0]  had_yy_xx_bxen;
wire           had_yy_xx_dbg;
wire           had_yy_xx_dbg_en;
wire           had_yy_xx_exit_dbg;
wire           hadrst_b;
wire           inst_bkpt_req;
wire           inst_bkpta_pre;
wire           inst_bkpta_pre_no_sqc;
wire           inst_bkptb_pre;
wire           inst_bkptb_pre_no_sqc;
wire           inst_bkptb_pre_potential;
wire           io_ctrl_jdb_req_b;
wire           lite_bkptc_ctrl_data_req;
wire           lite_bkptc_ctrl_data_req_raw;
wire           lite_bkptc_ctrl_ex_data_req;
wire           lite_bkptc_ctrl_ex_inst_req;
wire           lite_bkptc_ctrl_id_inst_req;
wire           lite_bkptc_ctrl_inst_req;
wire           lite_bkptd_ctrl_data_req;
wire           lite_bkptd_ctrl_data_req_raw;
wire           lite_bkptd_ctrl_ex_data_req;
wire           lite_bkptd_ctrl_ex_inst_req;
wire           lite_bkptd_ctrl_id_inst_req;
wire           lite_bkptd_ctrl_inst_req;
wire           lite_bkpte_ctrl_data_req;
wire           lite_bkpte_ctrl_data_req_raw;
wire           lite_bkpte_ctrl_ex_data_req;
wire           lite_bkpte_ctrl_ex_inst_req;
wire           lite_bkpte_ctrl_id_inst_req;
wire           lite_bkpte_ctrl_inst_req;
wire           lite_inst_bkptc_pre;
wire           lite_inst_bkptd_pre;
wire           lite_inst_bkpte_pre;
wire           lite_inst_bkptf_pre;
wire           lite_inst_bkptg_pre;
wire           lite_inst_bkpth_pre;
wire           lite_inst_bkpti_pre;
wire           lite_mem_bkptc_data_req;
wire           lite_mem_bkptc_data_req_raw;
wire           lite_mem_bkptc_ex_data_req;
wire           lite_mem_bkptc_ex_inst_req;
wire           lite_mem_bkptc_id_inst_req;
wire           lite_mem_bkptc_inst_req;
wire           lite_mem_bkptd_data_req;
wire           lite_mem_bkptd_data_req_raw;
wire           lite_mem_bkptd_ex_data_req;
wire           lite_mem_bkptd_ex_inst_req;
wire           lite_mem_bkptd_id_inst_req;
wire           lite_mem_bkptd_inst_req;
wire           lite_mem_bkpte_data_req;
wire           lite_mem_bkpte_data_req_raw;
wire           lite_mem_bkpte_ex_data_req;
wire           lite_mem_bkpte_ex_inst_req;
wire           lite_mem_bkpte_id_inst_req;
wire           lite_mem_bkpte_inst_req;
wire           lite_mem_bkptf_data_req;
wire           lite_mem_bkptf_data_req_raw;
wire           lite_mem_bkptf_ex_data_req;
wire           lite_mem_bkptf_ex_inst_req;
wire           lite_mem_bkptf_id_inst_req;
wire           lite_mem_bkptf_inst_req;
wire           lite_mem_bkptg_data_req;
wire           lite_mem_bkptg_data_req_raw;
wire           lite_mem_bkptg_ex_data_req;
wire           lite_mem_bkptg_ex_inst_req;
wire           lite_mem_bkptg_id_inst_req;
wire           lite_mem_bkptg_inst_req;
wire           lite_mem_bkpth_data_req;
wire           lite_mem_bkpth_data_req_raw;
wire           lite_mem_bkpth_ex_data_req;
wire           lite_mem_bkpth_ex_inst_req;
wire           lite_mem_bkpth_id_inst_req;
wire           lite_mem_bkpth_inst_req;
wire           lite_mem_bkpti_data_req;
wire           lite_mem_bkpti_data_req_raw;
wire           lite_mem_bkpti_ex_data_req;
wire           lite_mem_bkpti_ex_inst_req;
wire           lite_mem_bkpti_id_inst_req;
wire           lite_mem_bkpti_inst_req;
wire           mem_bkpta_data_req;
wire           mem_bkpta_data_req_raw;
wire           mem_bkpta_ex1_inst_req;
wire           mem_bkpta_ex_data_req_ls_1;
wire           mem_bkpta_id_inst_req;
wire           mem_bkpta_inst_req;
wire           mem_bkptb_data_req;
wire           mem_bkptb_data_req_raw;
wire           mem_bkptb_ex1_inst_req;
wire           mem_bkptb_ex_data_req_ls_1;
wire           mem_bkptb_id_inst_req;
wire           mem_bkptb_id_inst_req_potential;
wire           mem_bkptb_inst_req;
wire           pcfifo_read;
wire           pcfifo_read_pulse;
wire    [4:0]  regs_bkpta_bc;
wire    [4:0]  regs_bkptb_bc;
wire           regs_ctrl_adr;
wire           regs_ctrl_dr;
wire           regs_ctrl_fdb;
wire           regs_ctrl_frzc;
wire           regs_ctrl_had_int_on;
wire           regs_ctrl_pcfifo_frozen;
wire           regs_ctrl_sqa;
wire           regs_ctrl_sqb;
wire    [1:0]  regs_ctrl_sqc;
wire           regs_ctrl_tme;
wire           regs_xx_ddc_en;
wire           rtu_had_dbg_disable_for_tee;
wire           rtu_had_rst_dbgreq_ack;
wire           rtu_had_xx_bkpt_inst;
wire           rtu_had_xx_chgflow;
wire           rtu_had_xx_retire;
wire           rtu_had_xx_retire_normal;
wire           rtu_yy_xx_dbgon;
wire           rtu_yy_xx_retire;
wire           sdb_req;
wire           sm_ctrl_exit_dbg;
wire           sm_xx_update_dr_en;
wire           sm_xx_update_ir_en;
wire           sm_xx_write_en;
wire           sync_dbg_req;
wire           sysio_had_sdb_req_b;
wire           trace_ctrl_req;
wire           trace_ctrl_req_ls_1;
wire           trace_ctrl_req_raw;
wire           trace_req;
wire           trace_req_raw;
wire           trace_sqc_en;















assign ctrl_bkpta_en = |regs_bkpta_bc[4:0];

assign ctrl_bkptb_en  = |regs_bkptb_bc[4:0];
assign bkptb_en_sqc  = !regs_ctrl_sqc[1] || regs_ctrl_sqa || ctrl_set_sqa;

always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_bkptb_en_with_sqc <= 1'b0;
  else if (ctrl_bkptb_en && bkptb_en_sqc)
    ctrl_bkptb_en_with_sqc <= 1'b1;
  else
    ctrl_bkptb_en_with_sqc <= 1'b0;
end
// &Force("output", "ctrl_bkptb_en"); @52











assign trace_sqc_en = !regs_ctrl_sqc[0] ||
                      regs_ctrl_sqb || ctrl_set_sqb;

always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_trace_en <= 1'b0;
  else if (regs_ctrl_tme && trace_sqc_en)
    ctrl_trace_en <= 1'b1;
  else
    ctrl_trace_en <= 1'b0;
end
assign ctrl_trace_en_raw = regs_ctrl_tme;


always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    update_hacr_ff <= 1'b0;
  else
    update_hacr_ff <= sm_xx_update_ir_en;
end










assign ctrl_pcfifo_wen = !regs_ctrl_pcfifo_frozen && !inst_bkpt_req &&
                         rtu_had_xx_chgflow && rtu_yy_xx_retire &&
			 cp0_had_pcfifo_wen &&
                         !rtu_yy_xx_dbgon;





assign pcfifo_read = !sm_xx_write_en && hacr_xx_pcfifo_sel;

assign pcfifo_read_pulse = pcfifo_read && update_hacr_ff;

assign ctrl_pcfifo_ren = !regs_ctrl_pcfifo_frozen && pcfifo_read_pulse;
// &Force("input", "cp0_had_pcfifo_wen"); @124
// &Force("input", "regs_ctrl_pcfifo_frozen"); @125












assign trace_req = trace_ctrl_req;
assign trace_req_raw = trace_ctrl_req_raw;


assign mem_bkpta_inst_req         = bkpta_ctrl_inst_req && !regs_ctrl_sqc[1];
assign mem_bkpta_id_inst_req      = bkpta_ctrl_id_inst_req && !regs_ctrl_sqc[1];
assign mem_bkpta_ex1_inst_req     = bkpta_ctrl_ex_inst_req && !regs_ctrl_sqc[1];
assign mem_bkpta_data_req         = bkpta_ctrl_data_req && !regs_ctrl_sqc[1];
assign mem_bkpta_data_req_raw     = bkpta_ctrl_data_req_raw && !regs_ctrl_sqc[1];

assign mem_bkpta_ex_data_req_ls_1 = bkpta_ctrl_ex_data_req_ls_1;



assign mem_bkptb_inst_req         = bkptb_ctrl_inst_req && !regs_ctrl_sqc[0] && !regs_ctrl_frzc && ctrl_bkptb_en_with_sqc;
assign mem_bkptb_id_inst_req      = bkptb_ctrl_id_inst_req && !regs_ctrl_sqc[0] && !regs_ctrl_frzc && ctrl_bkptb_en_with_sqc;
assign mem_bkptb_id_inst_req_potential = bkptb_ctrl_id_inst_req && !regs_ctrl_sqc[0] && !regs_ctrl_frzc;
assign mem_bkptb_ex1_inst_req     = bkptb_ctrl_ex_inst_req && !regs_ctrl_sqc[0] && !regs_ctrl_frzc && ctrl_bkptb_en_with_sqc;
assign mem_bkptb_data_req         = bkptb_ctrl_data_req && !regs_ctrl_sqc[0] && !regs_ctrl_frzc && ctrl_bkptb_en_with_sqc;
assign mem_bkptb_data_req_raw     = bkptb_ctrl_data_req_raw && !regs_ctrl_sqc[0] && !regs_ctrl_frzc && ctrl_bkptb_en_with_sqc;

assign mem_bkptb_ex_data_req_ls_1 = bkptb_ctrl_ex_data_req_ls_1;


assign lite_mem_bkptc_inst_req       = lite_bkptc_ctrl_inst_req;
assign lite_mem_bkptc_id_inst_req    = lite_bkptc_ctrl_id_inst_req;
assign lite_mem_bkptc_ex_inst_req    = lite_bkptc_ctrl_ex_inst_req;
assign lite_mem_bkptc_data_req       = lite_bkptc_ctrl_data_req;
assign lite_mem_bkptc_data_req_raw   = lite_bkptc_ctrl_data_req_raw;
assign lite_mem_bkptc_ex_data_req    = lite_bkptc_ctrl_ex_data_req;

assign lite_mem_bkptd_inst_req       = lite_bkptd_ctrl_inst_req;
assign lite_mem_bkptd_id_inst_req    = lite_bkptd_ctrl_id_inst_req;
assign lite_mem_bkptd_ex_inst_req    = lite_bkptd_ctrl_ex_inst_req;
assign lite_mem_bkptd_data_req       = lite_bkptd_ctrl_data_req;
assign lite_mem_bkptd_data_req_raw   = lite_bkptd_ctrl_data_req_raw;
assign lite_mem_bkptd_ex_data_req    = lite_bkptd_ctrl_ex_data_req;

assign lite_mem_bkpte_inst_req       = lite_bkpte_ctrl_inst_req;
assign lite_mem_bkpte_id_inst_req    = lite_bkpte_ctrl_id_inst_req;
assign lite_mem_bkpte_ex_inst_req    = lite_bkpte_ctrl_ex_inst_req;
assign lite_mem_bkpte_data_req       = lite_bkpte_ctrl_data_req;
assign lite_mem_bkpte_data_req_raw   = lite_bkpte_ctrl_data_req_raw;
assign lite_mem_bkpte_ex_data_req    = lite_bkpte_ctrl_ex_data_req;

assign lite_mem_bkptf_inst_req       = 1'b0;
assign lite_mem_bkptf_id_inst_req    = 1'b0;
assign lite_mem_bkptf_ex_inst_req    = 1'b0;
assign lite_mem_bkptf_data_req       = 1'b0;
assign lite_mem_bkptf_data_req_raw   = 1'b0;
assign lite_mem_bkptf_ex_data_req    = 1'b0;

assign lite_mem_bkptg_inst_req       = 1'b0;
assign lite_mem_bkptg_id_inst_req    = 1'b0;
assign lite_mem_bkptg_ex_inst_req    = 1'b0;
assign lite_mem_bkptg_data_req       = 1'b0;
assign lite_mem_bkptg_data_req_raw   = 1'b0;
assign lite_mem_bkptg_ex_data_req    = 1'b0;

assign lite_mem_bkpth_inst_req       = 1'b0;
assign lite_mem_bkpth_id_inst_req    = 1'b0;
assign lite_mem_bkpth_ex_inst_req    = 1'b0;
assign lite_mem_bkpth_data_req       = 1'b0;
assign lite_mem_bkpth_data_req_raw   = 1'b0;
assign lite_mem_bkpth_ex_data_req    = 1'b0;

assign lite_mem_bkpti_inst_req       = 1'b0;
assign lite_mem_bkpti_id_inst_req    = 1'b0;
assign lite_mem_bkpti_ex_inst_req    = 1'b0;
assign lite_mem_bkpti_data_req       = 1'b0;
assign lite_mem_bkpti_data_req_raw   = 1'b0;
assign lite_mem_bkpti_ex_data_req    = 1'b0;

// &Force("output","ctrl_bkptc_en"); @284
// &Force("output","ctrl_bkptd_en"); @285
// &Force("output","ctrl_bkpte_en"); @286

// &Force("output","ctrl_bkptf_en"); @289
// &Force("output","ctrl_bkptg_en"); @290

// &Force("output","ctrl_bkptf_en"); @294
// &Force("output","ctrl_bkptg_en"); @295
// &Force("output","ctrl_bkpth_en"); @296
// &Force("output","ctrl_bkpti_en"); @297

// &Force("bus", "had_yy_xx_bxen", 6, 0); @300
assign ctrl_bkptc_en = had_yy_xx_bxen[0];
assign ctrl_bkptd_en = had_yy_xx_bxen[1];
assign ctrl_bkpte_en = had_yy_xx_bxen[2];
assign ctrl_bkptf_en = 1'b0;
assign ctrl_bkptg_en = 1'b0;
assign ctrl_bkpth_en = 1'b0;
assign ctrl_bkpti_en = 1'b0;


assign dr_set_req = regs_ctrl_dr;

assign adr_set_req = regs_ctrl_adr;


assign sdb_req = !sysio_had_sdb_req_b;





assign ex1_inst_bkpt_req = (mem_bkpta_ex1_inst_req ||
                            mem_bkptb_ex1_inst_req ||
                            lite_mem_bkptc_ex_inst_req ||
                            lite_mem_bkptd_ex_inst_req ||
                            lite_mem_bkpte_ex_inst_req ||
                            lite_mem_bkptf_ex_inst_req ||
                            lite_mem_bkptg_ex_inst_req ||
                            lite_mem_bkpth_ex_inst_req ||
                            lite_mem_bkpti_ex_inst_req
                           ) &&
                           regs_ctrl_fdb &&!rtu_yy_xx_dbgon;

assign inst_bkpt_req = (mem_bkpta_inst_req ||
                        mem_bkptb_inst_req ||
                        lite_mem_bkptc_inst_req ||
                        lite_mem_bkptd_inst_req ||
                        lite_mem_bkpte_inst_req ||
                        lite_mem_bkptf_inst_req ||
                        lite_mem_bkptg_inst_req ||
                        lite_mem_bkpth_inst_req ||
                        lite_mem_bkpti_inst_req
                       ) &&
                       regs_ctrl_fdb &&!rtu_yy_xx_dbgon;

assign ctrl_bkpt_inst_bkpt_req = inst_bkpt_req;












assign inst_bkpta_pre = mem_bkpta_id_inst_req && regs_ctrl_fdb
                        &&!rtu_yy_xx_dbgon;
assign inst_bkpta_pre_no_sqc = bkpta_ctrl_id_inst_req && regs_ctrl_fdb
                        &&!rtu_yy_xx_dbgon;
assign inst_bkptb_pre = mem_bkptb_id_inst_req && regs_ctrl_fdb
                        &&!rtu_yy_xx_dbgon;
assign inst_bkptb_pre_potential = mem_bkptb_id_inst_req_potential && regs_ctrl_fdb
                        &&!rtu_yy_xx_dbgon;
assign inst_bkptb_pre_no_sqc = bkptb_ctrl_id_inst_req && regs_ctrl_fdb
                        &&!rtu_yy_xx_dbgon;

assign lite_inst_bkptc_pre = lite_mem_bkptc_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkptd_pre = lite_mem_bkptd_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkpte_pre = lite_mem_bkpte_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkptf_pre = lite_mem_bkptf_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkptg_pre = lite_mem_bkptg_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkpth_pre = lite_mem_bkpth_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;
assign lite_inst_bkpti_pre = lite_mem_bkpti_id_inst_req && regs_ctrl_fdb
                             &&!rtu_yy_xx_dbgon;

assign had_idu_id_inst_bkpt_brir = inst_bkpta_pre && bkpta_cnt_ls_3 ||
                                   inst_bkptb_pre && bkptb_cnt_ls_3 ||
                                   inst_bkptb_pre_potential && !ctrl_bkptb_en_with_sqc;

assign had_idu_id_inst_bkpt_hit = |{lite_inst_bkpti_pre,
                                    lite_inst_bkpth_pre,
                                    lite_inst_bkptg_pre,
                                    lite_inst_bkptf_pre,
                                    lite_inst_bkpte_pre,
                                    lite_inst_bkptd_pre,
                                    lite_inst_bkptc_pre,
                                    inst_bkptb_pre && bkptb_cnt_eq_0,
                                    inst_bkpta_pre && bkpta_cnt_eq_0};

assign had_idu_id_inst_bkpt[8:0] = {lite_inst_bkpti_pre,
                                    lite_inst_bkpth_pre,
                                    lite_inst_bkptg_pre,
                                    lite_inst_bkptf_pre,
                                    lite_inst_bkpte_pre,
                                    lite_inst_bkptd_pre,
                                    lite_inst_bkptc_pre,
                                    inst_bkptb_pre_no_sqc,
                                    inst_bkpta_pre_no_sqc};


























assign data_bkpt_req = (mem_bkpta_data_req ||
                        mem_bkptb_data_req ||
                        lite_mem_bkptc_data_req ||
                        lite_mem_bkptd_data_req ||
                        lite_mem_bkpte_data_req ||
                        lite_mem_bkptf_data_req ||
                        lite_mem_bkptg_data_req ||
                        lite_mem_bkpth_data_req ||
                        lite_mem_bkpti_data_req
                       ) &&
                       regs_ctrl_fdb;

assign data_bkpt_req_raw = (mem_bkpta_data_req_raw ||
                            mem_bkptb_data_req_raw ||
                            lite_mem_bkptc_data_req_raw ||
                            lite_mem_bkptd_data_req_raw ||
                            lite_mem_bkpte_data_req_raw ||
                            lite_mem_bkptf_data_req_raw ||
                            lite_mem_bkptg_data_req_raw ||
                            lite_mem_bkpth_data_req_raw ||
                            lite_mem_bkpti_data_req_raw
                           ) &&
                           regs_ctrl_fdb;




assign data_bkpt_ex_req_ls_1 = (mem_bkpta_ex_data_req_ls_1 ||
                                mem_bkptb_ex_data_req_ls_1 ||
                                lite_mem_bkptc_ex_data_req ||
                                lite_mem_bkptd_ex_data_req ||
                                lite_mem_bkpte_ex_data_req ||
                                lite_mem_bkptf_ex_data_req ||
                                lite_mem_bkptg_ex_data_req ||
                                lite_mem_bkpth_ex_data_req ||
                                lite_mem_bkpti_ex_data_req
                               ) &&
                               regs_ctrl_fdb;

assign async_dbg_req = (!io_ctrl_jdb_req_b || adr_set_req) && !rtu_yy_xx_dbgon;



assign sync_dbg_req  = (dr_set_req || sdb_req) &&
                       !rtu_yy_xx_dbgon;




assign had_dbg_wakeup = sync_dbg_req || async_dbg_req;
assign had_cp0_xx_dbg = had_dbg_wakeup;
assign had_yy_xx_dbg = had_dbg_wakeup;




assign had_rtu_fdb              = regs_ctrl_fdb;
assign had_rtu_ex1_inst_bkpt_dbgreq = ex1_inst_bkpt_req;
assign had_rtu_inst_bkpt_dbgreq = inst_bkpt_req;
assign had_rtu_async_dbgreq     = async_dbg_req && !ctrl_rst_dbgreq;
assign had_rtu_hw_dbgreq        = sync_dbg_req && !ctrl_rst_dbgreq;
assign had_rtu_data_bkpt_dbgreq = data_bkpt_req && !rtu_yy_xx_dbgon;
assign had_rtu_data_bkpt_dbgreq_raw = data_bkpt_req_raw && !rtu_yy_xx_dbgon;
assign had_rtu_trace_dbgreq     = trace_req && !rtu_yy_xx_dbgon;
assign had_rtu_trace_dbgreq_raw = trace_req_raw && !rtu_yy_xx_dbgon;

// &Force("output","ctrl_bkpta_en"); @571
// &Force("output","ctrl_bkptb_en"); @572
// &Force("output","ctrl_trace_en"); @573
assign had_yy_xx_dbg_en = ((ctrl_bkpta_en || ctrl_bkptb_en
            || ctrl_bkptc_en || ctrl_bkptd_en
            || ctrl_bkpte_en || ctrl_bkptf_en
            || ctrl_bkptg_en || ctrl_bkpth_en
            || ctrl_bkpti_en
            || rtu_had_xx_bkpt_inst) && regs_ctrl_fdb //inst and data membkpt

                         || regs_ctrl_tme //trace
                         || dr_set_req || sdb_req // dr and sdb
                         || adr_set_req); //dr and sdb





assign had_rtu_ex1_bkpt_potential  = data_bkpt_ex_req_ls_1;
assign had_rtu_ex1_trace_potential = trace_ctrl_req_ls_1;























assign ctrl_regs_update_adro = async_dbg_req
                            && !rtu_had_dbg_disable_for_tee
                            && !ctrl_rst_dbgreq;





assign ctrl_regs_update_dro = dr_set_req && !rtu_yy_xx_dbgon
                           && !regs_ctrl_had_int_on
			                     && !rtu_had_dbg_disable_for_tee
                           && !ctrl_rst_dbgreq;


assign ctrl_update_mbkpt =     regs_ctrl_fdb &&
                              !rtu_yy_xx_dbgon &&
			      !regs_ctrl_had_int_on &&
			      !rtu_had_dbg_disable_for_tee &&
            rtu_had_xx_retire;

assign ctrl_regs_update_mbo = (mem_bkpta_inst_req || mem_bkpta_data_req
                            || mem_bkptb_inst_req || mem_bkptb_data_req
                       || lite_mem_bkptc_inst_req || lite_mem_bkptc_data_req
                       || lite_mem_bkptd_inst_req || lite_mem_bkptd_data_req
                       || lite_mem_bkpte_inst_req || lite_mem_bkpte_data_req
                       || lite_mem_bkptf_inst_req || lite_mem_bkptf_data_req
                       || lite_mem_bkptg_inst_req || lite_mem_bkptg_data_req
                       || lite_mem_bkpth_inst_req || lite_mem_bkpth_data_req
                       || lite_mem_bkpti_inst_req || lite_mem_bkpti_data_req
                               ) && ctrl_update_mbkpt;


assign ctrl_regs_bkpta_vld = (mem_bkpta_inst_req || mem_bkpta_data_req) && ctrl_update_mbkpt;
assign ctrl_regs_bkptb_vld = (mem_bkptb_inst_req || mem_bkptb_data_req) && ctrl_update_mbkpt;

assign ctrl_regs_bkptc_vld = (lite_mem_bkptc_inst_req || lite_mem_bkptc_data_req) && ctrl_update_mbkpt;
assign ctrl_regs_bkptd_vld = (lite_mem_bkptd_inst_req || lite_mem_bkptd_data_req) && ctrl_update_mbkpt;
assign ctrl_regs_bkpte_vld = (lite_mem_bkpte_inst_req || lite_mem_bkpte_data_req) && ctrl_update_mbkpt;




// &Force("output","ctrl_regs_update_mbo"); @669
assign ctrl_regs_update_swo =(rtu_had_xx_bkpt_inst && rtu_had_xx_retire) &&
                              regs_ctrl_fdb &&
                              !ctrl_regs_update_mbo &&
                              !rtu_yy_xx_dbgon &&
			      !regs_ctrl_had_int_on &&
			      !rtu_had_dbg_disable_for_tee;



assign ctrl_regs_update_to = trace_req && !rtu_yy_xx_dbgon && !ctrl_regs_update_mbo && rtu_had_xx_retire_normal && !regs_ctrl_had_int_on && !rtu_had_dbg_disable_for_tee;





assign ctrl_regs_freeze_pcfifo = (bkptb_ctrl_inst_req || bkptb_ctrl_data_req) && rtu_had_xx_retire_normal
                              && !inst_bkpt_req && regs_ctrl_frzc
			      && !regs_ctrl_had_int_on
			      && !rtu_had_dbg_disable_for_tee;


assign ctrl_set_sqb      = (bkptb_ctrl_inst_req || bkptb_ctrl_data_req) &&
                           rtu_had_xx_retire_normal && !inst_bkpt_req &&
                           regs_ctrl_sqc[0] &&
			   !regs_ctrl_had_int_on &&
			   !rtu_had_dbg_disable_for_tee;
assign ctrl_regs_set_sqb = ctrl_set_sqb;


assign ctrl_set_sqa      = (bkpta_ctrl_inst_req || bkpta_ctrl_data_req) &&
                           rtu_had_xx_retire_normal && !inst_bkpt_req &&
                           regs_ctrl_sqc[1] &&
			   !regs_ctrl_had_int_on &&
			   !rtu_had_dbg_disable_for_tee;
assign ctrl_regs_set_sqa = ctrl_set_sqa;











assign exit_dbg =  hacr_xx_ex && hacr_xx_go
                && sm_ctrl_exit_dbg            // this is a pulse signal
                && rtu_yy_xx_dbgon;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_exit_dbg <= 1'b0;
  else
    ctrl_exit_dbg <= exit_dbg;
end

assign ctrl_regs_exit_dbg = ctrl_exit_dbg || ctrl_rst_dbgreq;

assign had_yy_xx_exit_dbg = ctrl_exit_dbg;








assign go_noex = !hacr_xx_ex && hacr_xx_go
               && sm_xx_update_dr_en && hacr_xx_ir_sel


               && rtu_yy_xx_dbgon;

assign ddc_inst_go =  regs_xx_ddc_en
                   && ddc_xx_update_ir  // this is a pulse signal
                   && rtu_yy_xx_dbgon;

assign go_in_dbg = go_noex || ddc_inst_go;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_go_noex <= 1'b0;
  else
    ctrl_go_noex <= go_in_dbg;
end

assign had_ifu_ir_vld = ctrl_go_noex;




always @ (posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_had_dbgon <= 1'b0;
  else if (ctrl_exit_dbg)
    ctrl_had_dbgon <= 1'b0;
  else if (rtu_yy_xx_dbgon && !ctrl_had_dbgon)
    ctrl_had_dbgon <= 1'b1;
  else
    ctrl_had_dbgon <= ctrl_had_dbgon;
end

assign ctrl_rst_dbgreq = !rtu_yy_xx_dbgon && ctrl_had_dbgon;

assign had_rtu_rst_dbgreq = ctrl_rst_dbgreq;
assign ctrl_regs_update_rsto = rtu_had_rst_dbgreq_ack;

// &ModuleEnd; @781
endmodule






















// &ModuleBeg; @20
module pa_had_ddc(
  ddc_regs_daddr,
  ddc_regs_ddata,
  ddc_regs_ffy,
  ddc_regs_ir,
  ddc_regs_update_csr,
  ddc_regs_update_wbbr,
  ddc_regs_wbbr,
  ddc_xx_update_ir,
  forever_cpuclk,
  hacr_xx_daddr_sel,
  hacr_xx_ddata_sel,
  hacr_xx_wdata,
  hadrst_b,
  pad_yy_gate_clk_en_b,
  regs_xx_ddc_en,
  rtu_had_xx_retire_normal,
  sm_xx_update_dr_en,
  sm_xx_update_reg_en
);

// &Ports; @21
input           forever_cpuclk;
input           hacr_xx_daddr_sel;
input           hacr_xx_ddata_sel;
input   [31:0]  hacr_xx_wdata;
input           hadrst_b;
input           pad_yy_gate_clk_en_b;
input           regs_xx_ddc_en;
input           rtu_had_xx_retire_normal;
input           sm_xx_update_dr_en;
input           sm_xx_update_reg_en;
output  [31:0]  ddc_regs_daddr;
output  [31:0]  ddc_regs_ddata;
output          ddc_regs_ffy;
output  [31:0]  ddc_regs_ir;
output          ddc_regs_update_csr;
output          ddc_regs_update_wbbr;
output  [31:0]  ddc_regs_wbbr;
output          ddc_xx_update_ir;

// &Regs; @22
reg             addr_ld_finish;
reg     [3 :0]  cur_st;
reg     [31:0]  daddr_reg;
reg     [31:0]  ddata_reg;
reg     [3 :0]  nxt_st;

// &Wires; @23
wire            addr_gen;
wire            addr_ready;
wire            addr_sel;
wire            data_ld_finish;
wire            data_ready;
wire            data_sel;
wire            ddc_clk;
wire            ddc_clk_en;
wire    [31:0]  ddc_regs_daddr;
wire    [31:0]  ddc_regs_ddata;
wire            ddc_regs_ffy;
wire    [31:0]  ddc_regs_ir;
wire            ddc_regs_update_csr;
wire            ddc_regs_update_wbbr;
wire    [31:0]  ddc_regs_wbbr;
wire            ddc_xx_update_ir;
wire            forever_cpuclk;
wire            hacr_xx_daddr_sel;
wire            hacr_xx_ddata_sel;
wire    [31:0]  hacr_xx_wdata;
wire            hadrst_b;
wire            pad_yy_gate_clk_en_b;
wire            regs_xx_ddc_en;
wire            rtu_had_xx_retire_normal;
wire            sm_xx_update_dr_en;
wire            sm_xx_update_reg_en;
wire            stw_inst_retire;
wire            stw_sel;





parameter DDC_IDLE       = 4'h0;
parameter DDC_ADDR_WATI  = 4'h1;
parameter DDC_ADDR_LD    = 4'h2;
parameter DDC_DATA_WAIT  = 4'h3;
parameter DDC_DATA_LD    = 4'h4;
parameter DDC_STW_WAIT   = 4'h5;
parameter DDC_STW_LD     = 4'h6;
parameter DDC_STW_FINISH = 4'h7;
parameter DDC_ADDR_GEN   = 4'h8;

always @(posedge ddc_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    cur_st[3:0] <= DDC_IDLE;
  else
    cur_st[3:0] <= nxt_st[3:0];
end

// &CombBeg; @46
always @( addr_ld_finish
       or cur_st[3:0]
       or regs_xx_ddc_en
       or addr_ready
       or data_ready
       or stw_inst_retire
       or data_ld_finish)
begin
  case(cur_st[3:0])
    DDC_IDLE : begin
      if (regs_xx_ddc_en)
        nxt_st[3:0] = DDC_ADDR_WATI;
      else
        nxt_st[3:0] = DDC_IDLE;
    end
    DDC_ADDR_WATI : begin // wait addr be loaded into daddr
      if (addr_ready)
        nxt_st[3:0] = DDC_ADDR_LD;
      else
        nxt_st[3:0] = DDC_ADDR_WATI;
    end
    DDC_ADDR_LD : begin  // load "mov r0, r0" to ir, ffy and wbbr
      nxt_st[3:0] = DDC_DATA_WAIT;
    end
    DDC_DATA_WAIT : begin
      if (addr_ld_finish && data_ready) // wait finish and data ready.
        nxt_st[3:0] = DDC_DATA_LD;
      else if (addr_ready) // re-prepare base
        nxt_st[3:0] = DDC_ADDR_LD;
      else if (!regs_xx_ddc_en)
        nxt_st[3:0] = DDC_IDLE;
      else
        nxt_st[3:0] = DDC_DATA_WAIT;
    end
    DDC_DATA_LD : begin
      nxt_st[3:0] = DDC_STW_WAIT; // load "mov r1, r1" to ir, ffy and wbbr
    end
    DDC_STW_WAIT : begin
      if (data_ld_finish)  // wait for "mov r1, r1" retire: data prepare finish
        nxt_st[3:0] = DDC_STW_LD;
      else
        nxt_st[3:0] = DDC_STW_WAIT;
    end
    DDC_STW_LD : begin              // load "stw r1, r0" to ir
      nxt_st[3:0] = DDC_STW_FINISH;
    end
    DDC_STW_FINISH : begin // wait for stw finish
      if (stw_inst_retire)
        nxt_st[3:0] = DDC_ADDR_GEN;
      else
        nxt_st[3:0] = DDC_STW_FINISH;
    end
    DDC_ADDR_GEN : begin  // increase addr and recycle
      nxt_st[3:0] = DDC_ADDR_LD;
    end
    default : begin
      nxt_st[3:0] = DDC_IDLE;
    end
  endcase
// &CombEnd; @98
end

assign addr_ready = sm_xx_update_dr_en && hacr_xx_daddr_sel;
assign data_ready = sm_xx_update_dr_en && hacr_xx_ddata_sel;


always @(posedge ddc_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    addr_ld_finish <= 1'b0;
  else if (cur_st[3:0] == DDC_DATA_WAIT) begin
    if (rtu_had_xx_retire_normal)
      addr_ld_finish <= 1'b1;
    else
      addr_ld_finish <= addr_ld_finish; // hold finish state
  end
  else
    addr_ld_finish <= 1'b0;
end



assign data_ld_finish = rtu_had_xx_retire_normal;
assign stw_inst_retire = rtu_had_xx_retire_normal;

assign addr_sel = cur_st[3:0] == DDC_ADDR_LD;
assign data_sel = cur_st[3:0] == DDC_DATA_LD;
assign stw_sel  = cur_st[3:0] == DDC_STW_LD;
assign addr_gen = cur_st[3:0] == DDC_ADDR_GEN;





always @(posedge ddc_clk)
begin
  if (sm_xx_update_reg_en && hacr_xx_ddata_sel)
    ddata_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    ddata_reg[31:0] <= ddata_reg[31:0];
end


always @(posedge ddc_clk)
begin
  if (sm_xx_update_reg_en && hacr_xx_daddr_sel)
    daddr_reg[31:0] <= hacr_xx_wdata[31:0];
  else if (addr_gen)
    daddr_reg[31:0] <= daddr_reg[31:0] + 32'd4;
  else
    daddr_reg[31:0] <= daddr_reg[31:0];
end




assign ddc_regs_update_wbbr = addr_sel || data_sel;
assign ddc_regs_wbbr[31:0]  = addr_sel ? daddr_reg[31:0] : ddata_reg[31:0];
assign ddc_xx_update_ir     = addr_sel || data_sel || stw_sel;
assign ddc_regs_ir[31:0]    = addr_sel ? {16'h0020, 16'h8086} : // c.mv x1, x1, high 16-bit is not care.
                              data_sel ? {16'h0020, 16'h810a}   // c.mv x2, x2, high 16-bit is not care.
                                       : 32'h0020a023;          // sw x2, 0(x1)

assign ddc_regs_update_csr  = addr_sel || data_sel || stw_sel;
assign ddc_regs_ffy         = (addr_sel || data_sel) ? 1'b1 : 1'b0;
assign ddc_regs_daddr[31:0] = daddr_reg[31:0];
assign ddc_regs_ddata[31:0] = ddata_reg[31:0];

assign ddc_clk_en = cur_st != DDC_IDLE
                 || regs_xx_ddc_en
                 || sm_xx_update_reg_en;
// &Instance("gated_clk_cell", "x_ddc_clk"); @169
gated_clk_cell  x_ddc_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ddc_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ddc_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @170
//          .external_en (1'b0), @171
//          .global_en   (1'b1), @172
//          .module_en   (1'b0), @173
//          .local_en    (ddc_clk_en), @174
//          .clk_out     (ddc_clk)); @175

// &ModuleEnd; @177
endmodule






















// &ModuleBeg; @20
module pa_had_ddma(
  bmu_had_acc_err,
  bmu_had_grant,
  bmu_had_rdata,
  bmu_had_trans_cmplt,
  dacsr_reg,
  darwr_reg,
  datr_reg,
  forever_cpuclk,
  hacr_xx_dacsr_sel,
  hacr_xx_darwr_sel,
  hacr_xx_datr_sel,
  hacr_xx_wdata,
  had_bmu_addr,
  had_bmu_burst,
  had_bmu_prot,
  had_bmu_req,
  had_bmu_seq,
  had_bmu_size,
  had_bmu_wdata,
  had_bmu_write,
  hadrst_b,
  pad_yy_gate_clk_en_b,
  regs_ddma_ddae,
  sm_regs_capture_dr_en,
  sm_xx_update_reg_en,
  sm_xx_write_en
);

// &Ports; @21
input           bmu_had_acc_err;
input           bmu_had_grant;
input   [31:0]  bmu_had_rdata;
input           bmu_had_trans_cmplt;
input           forever_cpuclk;
input           hacr_xx_dacsr_sel;
input           hacr_xx_darwr_sel;
input           hacr_xx_datr_sel;
input   [31:0]  hacr_xx_wdata;
input           hadrst_b;
input           pad_yy_gate_clk_en_b;
input           regs_ddma_ddae;
input           sm_regs_capture_dr_en;
input           sm_xx_update_reg_en;
input           sm_xx_write_en;
output  [31:0]  dacsr_reg;
output  [31:0]  darwr_reg;
output  [31:0]  datr_reg;
output  [31:0]  had_bmu_addr;
output  [2 :0]  had_bmu_burst;
output  [3 :0]  had_bmu_prot;
output          had_bmu_req;
output          had_bmu_seq;
output  [1 :0]  had_bmu_size;
output  [31:0]  had_bmu_wdata;
output          had_bmu_write;

// &Regs; @22
reg     [1 :0]  addr_align;
reg     [2 :0]  addr_inc;
reg             dacsr_busy;
reg             dacsr_ca;
reg             dacsr_dp;
reg             dacsr_err;
reg             dacsr_inst;
reg     [2 :0]  dacsr_size;
reg             dacsr_sup;
reg     [2 :0]  dacsr_tm;
reg     [31:0]  darwr_reg;
reg     [31:0]  datr_reg;
reg             req_cur_st;
reg     [31:0]  sized_had_rdata;
reg     [31:0]  sized_had_wdata;
reg             write_flop;

// &Wires; @23
wire            bmu_had_acc_err;
wire            bmu_had_data_vld;
wire            bmu_had_grant;
wire    [31:0]  bmu_had_rdata;
wire            bmu_had_trans_cmplt;
wire            dacsr_dp_clr;
wire            dacsr_dp_set;
wire    [3 :0]  dacsr_prot;
wire    [31:0]  dacsr_reg;
wire            dacsr_sec_final;
wire            dacsr_wen_jtag;
wire            darwr_wen_jtag;
wire            datr_inc_vld;
wire    [31:0]  datr_value_inc;
wire            datr_wen_jtag;
wire            ddma_clk;
wire            ddma_clk_en;
wire            forever_cpuclk;
wire            hacr_xx_dacsr_sel;
wire            hacr_xx_darwr_sel;
wire            hacr_xx_datr_sel;
wire    [31:0]  hacr_xx_wdata;
wire    [31:0]  had_bmu_addr;
wire    [2 :0]  had_bmu_burst;
wire    [3 :0]  had_bmu_prot;
wire            had_bmu_req;
wire            had_bmu_seq;
wire    [1 :0]  had_bmu_size;
wire    [31:0]  had_bmu_wdata;
wire            had_bmu_write;
wire            had_write_set;
wire            hadrst_b;
wire            pad_yy_gate_clk_en_b;
wire            rd_req;
wire            rdarwr_read;
wire            rdarwr_read_pulse;
wire            regs_ddma_ddae;
wire            req_set;
wire            sm_regs_capture_dr_en;
wire            sm_xx_update_reg_en;
wire            sm_xx_write_en;









assign dacsr_wen_jtag = sm_xx_update_reg_en && hacr_xx_dacsr_sel && !dacsr_busy;

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    dacsr_busy <= 1'b0;
  else if (req_set)
    dacsr_busy <= 1'b1;
  else if (bmu_had_trans_cmplt)
    dacsr_busy <= 1'b0;
  else
    dacsr_busy <= dacsr_busy;
end

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    dacsr_err <= 1'b0;
  else if (bmu_had_acc_err)
    dacsr_err <= 1'b1;
  else if (dacsr_wen_jtag)
    dacsr_err <= hacr_xx_wdata[30];
  else
    dacsr_err <= dacsr_err;
end

assign dacsr_dp_set = (dacsr_tm[2:0] == 3'b000) && !dacsr_dp && bmu_had_data_vld && !write_flop;

assign dacsr_dp_clr = rdarwr_read_pulse && dacsr_dp;

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    dacsr_dp <= 1'b0;
  else if(dacsr_dp_set)
    dacsr_dp <= 1'b1;
  else if(dacsr_dp_clr)
    dacsr_dp <= 1'b0;
  else if(dacsr_wen_jtag)
    dacsr_dp <= hacr_xx_wdata[29];
  else
    dacsr_dp <= dacsr_dp;
end

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    dacsr_ca  <= 1'b0;
    dacsr_sup <= 1'b0;
    dacsr_inst<= 1'b0;
    dacsr_size[2:0] <= 3'b0;
    dacsr_tm[2:0]   <= 3'b0;
  end
  else if (dacsr_wen_jtag) begin
    dacsr_ca  <= hacr_xx_wdata[11];
    dacsr_sup <= hacr_xx_wdata[9];
    dacsr_inst<= hacr_xx_wdata[8];
    dacsr_size[2:0] <= hacr_xx_wdata[6:4];
    dacsr_tm[2:0]   <= hacr_xx_wdata[2:0];
  end
  else begin
    dacsr_ca  <= dacsr_ca;
    dacsr_sup <= dacsr_sup;
    dacsr_inst<= dacsr_inst;
    dacsr_size[2:0] <= dacsr_size[2:0];
    dacsr_tm[2:0]   <= dacsr_tm[2:0];
  end
end

assign dacsr_sec_final = 1'b0;

assign dacsr_prot[3:0] = {dacsr_ca, dacsr_sec_final, dacsr_sup, dacsr_inst};

assign dacsr_reg[31:0] = {dacsr_busy, dacsr_err, dacsr_dp, 17'b0, dacsr_prot[3:0], 1'b0, dacsr_size[2:0], 1'b0, dacsr_tm[2:0]};





assign datr_wen_jtag  = sm_xx_update_reg_en && hacr_xx_datr_sel;

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    datr_reg[31:0] <= 32'b0;
  else if(datr_wen_jtag && !dacsr_busy)
    datr_reg[31:0] <= hacr_xx_wdata[31:0];
  else if(datr_inc_vld)
    datr_reg[31:0] <= datr_value_inc[31:0];
  else
    datr_reg[31:0] <= datr_reg[31:0];
end
// &Force("output", "datr_reg"); @141



// &CombBeg; @145
always @( dacsr_size[2:0])
begin
case(dacsr_size[2:0])
  3'b000: addr_inc[2:0]  = 3'b001;
  3'b001: addr_inc[2:0]  = 3'b010;
  3'b010: addr_inc[2:0]  = 3'b100;
  default: addr_inc[2:0] = {3{1'bx}};
endcase
// &CombEnd; @152
end

assign datr_value_inc[31:0] = datr_reg[31:0] + {29'b0, addr_inc[2:0]};
assign datr_inc_vld = bmu_had_trans_cmplt && (dacsr_tm[2:0] == 3'b001);



// &CombBeg; @159
always @( datr_reg[1:0]
       or dacsr_size[2:0])
begin
case(dacsr_size[2:0])
  3'b000: addr_align[1:0]  = datr_reg[1:0];
  3'b001: addr_align[1:0]  = {datr_reg[1], 1'b0};
  3'b010: addr_align[1:0]  = 2'b0;
  default: addr_align[1:0] = {2{1'bx}};
endcase
// &CombEnd; @166
end




assign darwr_wen_jtag = sm_xx_update_reg_en && hacr_xx_darwr_sel;

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    darwr_reg[31:0] <= 32'b0;
  else if(bmu_had_data_vld && !write_flop)
    darwr_reg[31:0] <= sized_had_rdata[31:0];
  else if(darwr_wen_jtag && !dacsr_busy)
    darwr_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    darwr_reg[31:0] <= darwr_reg[31:0];
end
// &Force("output", "darwr_reg"); @184

parameter BYTE = 2'b00,
          HALF = 2'b01,
          WORD = 2'b10;

// &CombBeg; @190
always @( addr_align[1:0]
       or bmu_had_rdata[31:0]
       or dacsr_size[1:0])
begin
  case({dacsr_size[1:0], addr_align[1:0]})
    {BYTE, 2'b00} : sized_had_rdata[31:0] = {24'b0, bmu_had_rdata[7:0]};
    {BYTE, 2'b01} : sized_had_rdata[31:0] = {24'b0, bmu_had_rdata[15:8]};
    {BYTE, 2'b10} : sized_had_rdata[31:0] = {24'b0, bmu_had_rdata[23:16]};
    {BYTE, 2'b11} : sized_had_rdata[31:0] = {24'b0, bmu_had_rdata[31:24]};
    {HALF, 2'b00} : sized_had_rdata[31:0] = {16'b0, bmu_had_rdata[15:0]};
    {HALF, 2'b10} : sized_had_rdata[31:0] = {16'b0, bmu_had_rdata[31:16]};
    {WORD, 2'b00} : sized_had_rdata[31:0] = bmu_had_rdata[31:0];
    default : sized_had_rdata[31:0] = {32{1'bx}};
  endcase
// &CombEnd; @201
end

// &CombBeg; @203
always @( addr_align[1:0]
       or darwr_reg[31:0]
       or dacsr_size[1:0])
begin
  case({dacsr_size[1:0], addr_align[1:0]})
    {BYTE, 2'b00} : sized_had_wdata[31:0] = {24'b0, darwr_reg[7:0]};
    {BYTE, 2'b01} : sized_had_wdata[31:0] = {16'b0, darwr_reg[7:0], 8'b0};
    {BYTE, 2'b10} : sized_had_wdata[31:0] = {8'b0, darwr_reg[7:0], 16'b0};
    {BYTE, 2'b11} : sized_had_wdata[31:0] = {darwr_reg[7:0], 24'b0};
    {HALF, 2'b00} : sized_had_wdata[31:0] = {16'b0, darwr_reg[15:0]};
    {HALF, 2'b10} : sized_had_wdata[31:0] = {darwr_reg[15:0], 16'b0};
    {WORD, 2'b00} : sized_had_wdata[31:0] = darwr_reg[31:0];
    default : sized_had_wdata[31:0] = {32{1'bx}};
  endcase
// &CombEnd; @214
end




assign had_bmu_addr[31:0]   = {datr_reg[31:2],addr_align[1:0]};

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    req_cur_st <= 1'b0;
  else if(req_set && !bmu_had_grant)
    req_cur_st <= 1'b1;
  else if(bmu_had_grant)
    req_cur_st <= 1'b0;
  else
    req_cur_st <= req_cur_st;
end

always @(posedge ddma_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    write_flop <= 1'b0;
  else if(had_write_set)
    write_flop <= 1'b1;
  else if(bmu_had_trans_cmplt)
    write_flop <= 1'b0;
  else
    write_flop <= write_flop;
end

assign req_set              = regs_ddma_ddae && (darwr_wen_jtag || rd_req) && !dacsr_busy;
assign rd_req               = rdarwr_read_pulse && !dacsr_dp;
assign had_bmu_req          = req_cur_st || req_set;
assign had_bmu_prot[3:0]    = dacsr_prot[3:0];
assign had_bmu_size[1:0]    = dacsr_size[1:0];
assign had_bmu_wdata[31:0]  = sized_had_wdata[31:0];
assign had_write_set        = darwr_wen_jtag && !dacsr_busy;
assign had_bmu_write        = had_write_set || write_flop;
assign had_bmu_seq          = 1'b0;
assign had_bmu_burst[2:0]   = 3'b0;
assign bmu_had_data_vld = bmu_had_trans_cmplt && !bmu_had_acc_err;


assign rdarwr_read = !sm_xx_write_en && hacr_xx_darwr_sel;
assign rdarwr_read_pulse = rdarwr_read && sm_regs_capture_dr_en;

assign ddma_clk_en = regs_ddma_ddae
                  || bmu_had_trans_cmplt
                  || bmu_had_data_vld
                  || bmu_had_acc_err
                  || sm_xx_update_reg_en
                  || req_cur_st
                  || rdarwr_read_pulse;
// &Instance("gated_clk_cell", "x_ddma_clk"); @268
gated_clk_cell  x_ddma_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ddma_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ddma_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @269
//          .external_en (1'b0), @270
//          .global_en   (1'b1), @271
//          .module_en   (1'b0), @272
//          .local_en    (ddma_clk_en), @273
//          .clk_out     (ddma_clk)); @274

// &Force("input", "bmu_had_acc_err"); @277
// &Force("input", "bmu_had_rdata");      &Force("bus", "bmu_had_rdata", 31, 0); @278
// &Force("input", "bmu_had_grant"); @280
// &Force("input", "bmu_had_trans_cmplt"); @281



// &ModuleEnd; @295
endmodule






















// &ModuleBeg; @20
module pa_had_hacr(
  cpuclk,
  hacr_sm_read,
  hacr_xx_baba_sel,
  hacr_xx_babb_sel,
  hacr_xx_babc_sel,
  hacr_xx_babd_sel,
  hacr_xx_babe_sel,
  hacr_xx_babf_sel,
  hacr_xx_babg_sel,
  hacr_xx_babh_sel,
  hacr_xx_babi_sel,
  hacr_xx_bama_sel,
  hacr_xx_bamb_sel,
  hacr_xx_bamc_sel,
  hacr_xx_bamd_sel,
  hacr_xx_bame_sel,
  hacr_xx_bamf_sel,
  hacr_xx_bamg_sel,
  hacr_xx_bamh_sel,
  hacr_xx_bami_sel,
  hacr_xx_bsel_sel,
  hacr_xx_bypass_sel,
  hacr_xx_csr_sel,
  hacr_xx_dacsr_sel,
  hacr_xx_daddr_sel,
  hacr_xx_darwr_sel,
  hacr_xx_datr_sel,
  hacr_xx_ddata_sel,
  hacr_xx_ex,
  hacr_xx_go,
  hacr_xx_hcr_sel,
  hacr_xx_hsr_sel,
  hacr_xx_id_sel,
  hacr_xx_ir_sel,
  hacr_xx_mbca_sel,
  hacr_xx_mbcb_sel,
  hacr_xx_mbir_sel,
  hacr_xx_otc_sel,
  hacr_xx_pc_sel,
  hacr_xx_pcfifo_sel,
  hacr_xx_psr_sel,
  hacr_xx_wbbr_sel,
  hacr_xx_wdata,
  hadrst_b,
  regs_hacr_bsel,
  serial_xx_data,
  sm_xx_srst_vld,
  sm_xx_update_ir_en,
  tcip_had_sel,
  tcipif_had_addr,
  tcipif_had_wdata,
  tcipif_update_dr
);

// &Ports; @21
input           cpuclk;
input           hadrst_b;
input   [7 :0]  regs_hacr_bsel;
input   [31:0]  serial_xx_data;
input           sm_xx_srst_vld;
input           sm_xx_update_ir_en;
input           tcip_had_sel;
input   [15:0]  tcipif_had_addr;
input   [31:0]  tcipif_had_wdata;
input           tcipif_update_dr;
output          hacr_sm_read;
output          hacr_xx_baba_sel;
output          hacr_xx_babb_sel;
output          hacr_xx_babc_sel;
output          hacr_xx_babd_sel;
output          hacr_xx_babe_sel;
output          hacr_xx_babf_sel;
output          hacr_xx_babg_sel;
output          hacr_xx_babh_sel;
output          hacr_xx_babi_sel;
output          hacr_xx_bama_sel;
output          hacr_xx_bamb_sel;
output          hacr_xx_bamc_sel;
output          hacr_xx_bamd_sel;
output          hacr_xx_bame_sel;
output          hacr_xx_bamf_sel;
output          hacr_xx_bamg_sel;
output          hacr_xx_bamh_sel;
output          hacr_xx_bami_sel;
output          hacr_xx_bsel_sel;
output          hacr_xx_bypass_sel;
output          hacr_xx_csr_sel;
output          hacr_xx_dacsr_sel;
output          hacr_xx_daddr_sel;
output          hacr_xx_darwr_sel;
output          hacr_xx_datr_sel;
output          hacr_xx_ddata_sel;
output          hacr_xx_ex;
output          hacr_xx_go;
output          hacr_xx_hcr_sel;
output          hacr_xx_hsr_sel;
output          hacr_xx_id_sel;
output          hacr_xx_ir_sel;
output          hacr_xx_mbca_sel;
output          hacr_xx_mbcb_sel;
output          hacr_xx_mbir_sel;
output          hacr_xx_otc_sel;
output          hacr_xx_pc_sel;
output          hacr_xx_pcfifo_sel;
output          hacr_xx_psr_sel;
output          hacr_xx_wbbr_sel;
output  [31:0]  hacr_xx_wdata;

// &Regs; @22
reg     [7 :0]  hacr_reg;

// &Wires; @23
wire            bank0_sel;
wire            bank1_sel;
wire            bank2_sel;
wire            cpuclk;
wire    [4 :0]  hacr_index;
wire            hacr_sm_read;
wire            hacr_xx_baba_sel;
wire            hacr_xx_babb_sel;
wire            hacr_xx_babc_sel;
wire            hacr_xx_babd_sel;
wire            hacr_xx_babe_sel;
wire            hacr_xx_babf_sel;
wire            hacr_xx_babg_sel;
wire            hacr_xx_babh_sel;
wire            hacr_xx_babi_sel;
wire            hacr_xx_bama_sel;
wire            hacr_xx_bamb_sel;
wire            hacr_xx_bamc_sel;
wire            hacr_xx_bamd_sel;
wire            hacr_xx_bame_sel;
wire            hacr_xx_bamf_sel;
wire            hacr_xx_bamg_sel;
wire            hacr_xx_bamh_sel;
wire            hacr_xx_bami_sel;
wire            hacr_xx_bsel_sel;
wire            hacr_xx_bypass_sel;
wire            hacr_xx_csr_sel;
wire            hacr_xx_dacsr_sel;
wire            hacr_xx_daddr_sel;
wire            hacr_xx_darwr_sel;
wire            hacr_xx_datr_sel;
wire            hacr_xx_ddata_sel;
wire            hacr_xx_ex;
wire            hacr_xx_go;
wire            hacr_xx_hcr_sel;
wire            hacr_xx_hsr_sel;
wire            hacr_xx_id_sel;
wire            hacr_xx_ir_sel;
wire            hacr_xx_mbca_sel;
wire            hacr_xx_mbcb_sel;
wire            hacr_xx_mbir_sel;
wire            hacr_xx_otc_sel;
wire            hacr_xx_pc_sel;
wire            hacr_xx_pcfifo_sel;
wire            hacr_xx_psr_sel;
wire            hacr_xx_wbbr_sel;
wire    [31:0]  hacr_xx_wdata;
wire            had_bank0_sel;
wire            had_bank1_sel;
wire            had_bank2_sel;
wire            hadrst_b;
wire    [7 :0]  regs_hacr_bsel;
wire    [31:0]  serial_xx_data;
wire            sm_xx_srst_vld;
wire            sm_xx_update_ir_en;
wire            tcip_bank0_sel;
wire            tcip_bank1_sel;
wire            tcip_bank2_sel;
wire            tcip_had_sel;
wire    [4 :0]  tcip_index;
wire    [31:0]  tcip_wdata;
wire    [15:0]  tcipif_had_addr;
wire    [31:0]  tcipif_had_wdata;
wire            tcipif_update_dr;



// &Force("bus", "tcipif_had_addr", 15, 0); @26



assign tcip_bank0_sel = tcipif_had_addr[8:7] == 2'b0;
assign tcip_bank1_sel = tcipif_had_addr[8:7] == 2'b1;
assign tcip_bank2_sel = tcipif_had_addr[8:7] == 2'b10;

assign tcip_index[4:0]  = tcipif_had_addr[6:2];
assign tcip_wdata[31:0] = tcipif_had_wdata[31:0];









// &Force("bus", "serial_xx_data", 31, 0); @45

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hacr_reg[7:0] <= 8'h82; // Async reset to point to HAD_ID
  else if (sm_xx_srst_vld)
    hacr_reg[7:0] <= 8'h82; // Sync reset
  else if (sm_xx_update_ir_en)
    hacr_reg[7:0] <= serial_xx_data[7:0];
  else
    hacr_reg[7:0] <= hacr_reg[7:0];
end




assign hacr_sm_read = hacr_reg[7];
assign hacr_xx_go   = hacr_reg[6];
assign hacr_xx_ex   = hacr_reg[5];

assign had_bank0_sel = regs_hacr_bsel[7:0] == 8'b0;
assign had_bank1_sel = regs_hacr_bsel[7:0] == 8'b1;
assign had_bank2_sel = regs_hacr_bsel[7:0] == 8'b10;

assign bank0_sel = tcip_had_sel ? tcip_bank0_sel
                                : had_bank0_sel;
// &Force("nonport","bank1_sel"); @72
assign bank1_sel = tcip_had_sel ? tcip_bank1_sel
                                : had_bank1_sel;
// &Force("nonport","bank2_sel"); @75
assign bank2_sel = tcip_had_sel ? tcip_bank2_sel
                                : had_bank2_sel;
assign hacr_index[4:0] = tcip_had_sel ? tcip_index[4:0]
                                      : hacr_reg[4:0];

assign hacr_xx_wdata[31:0] = tcipif_update_dr ? tcip_wdata[31:0]
                                              : serial_xx_data[31:0];

assign hacr_xx_bsel_sel   = (hacr_index[4:0] == 5'b11110);


assign hacr_xx_id_sel     = (hacr_index[4:0] == 5'b00010) && bank0_sel;
assign hacr_xx_otc_sel    = (hacr_index[4:0] == 5'b00011) && bank0_sel;
assign hacr_xx_mbca_sel   = (hacr_index[4:0] == 5'b00100) && bank0_sel;
assign hacr_xx_mbcb_sel   = (hacr_index[4:0] == 5'b00101) && bank0_sel;
assign hacr_xx_pcfifo_sel = (hacr_index[4:0] == 5'b00110) && bank0_sel;
assign hacr_xx_baba_sel   = (hacr_index[4:0] == 5'b00111) && bank0_sel;
assign hacr_xx_babb_sel   = (hacr_index[4:0] == 5'b01000) && bank0_sel;
assign hacr_xx_bama_sel   = (hacr_index[4:0] == 5'b01001) && bank0_sel;
assign hacr_xx_bamb_sel   = (hacr_index[4:0] == 5'b01010) && bank0_sel;
assign hacr_xx_bypass_sel = (hacr_index[4:0] == 5'b01100) && bank0_sel;
assign hacr_xx_hcr_sel    = (hacr_index[4:0] == 5'b01101) && bank0_sel;
assign hacr_xx_hsr_sel    = (hacr_index[4:0] == 5'b01110) && bank0_sel;
assign hacr_xx_wbbr_sel   = (hacr_index[4:0] == 5'b10001) && bank0_sel;
assign hacr_xx_psr_sel    = (hacr_index[4:0] == 5'b10010) && bank0_sel;
assign hacr_xx_pc_sel     = (hacr_index[4:0] == 5'b10011) && bank0_sel;
assign hacr_xx_ir_sel     = (hacr_index[4:0] == 5'b10100) && bank0_sel;
assign hacr_xx_csr_sel    = (hacr_index[4:0] == 5'b10101) && bank0_sel;
assign hacr_xx_daddr_sel  = (hacr_index[4:0] == 5'b11000) && bank0_sel;
assign hacr_xx_ddata_sel  = (hacr_index[4:0] == 5'b11001) && bank0_sel;


assign hacr_xx_mbir_sel  = (hacr_index[4:0] == 5'b11011) && bank1_sel;
assign hacr_xx_babc_sel  = (hacr_index[4:0] == 5'b00000) && bank1_sel;
assign hacr_xx_bamc_sel  = (hacr_index[4:0] == 5'b00001) && bank1_sel;
assign hacr_xx_babd_sel  = (hacr_index[4:0] == 5'b00010) && bank1_sel;
assign hacr_xx_bamd_sel  = (hacr_index[4:0] == 5'b00011) && bank1_sel;
assign hacr_xx_babe_sel  = (hacr_index[4:0] == 5'b00100) && bank1_sel;
assign hacr_xx_bame_sel  = (hacr_index[4:0] == 5'b00101) && bank1_sel;
assign hacr_xx_babf_sel  = (hacr_index[4:0] == 5'b00110) && bank1_sel;
assign hacr_xx_bamf_sel  = (hacr_index[4:0] == 5'b00111) && bank1_sel;
assign hacr_xx_babg_sel  = (hacr_index[4:0] == 5'b01000) && bank1_sel;
assign hacr_xx_bamg_sel  = (hacr_index[4:0] == 5'b01001) && bank1_sel;
assign hacr_xx_babh_sel  = (hacr_index[4:0] == 5'b01010) && bank1_sel;
assign hacr_xx_bamh_sel  = (hacr_index[4:0] == 5'b01011) && bank1_sel;
assign hacr_xx_babi_sel  = (hacr_index[4:0] == 5'b01100) && bank1_sel;
assign hacr_xx_bami_sel  = (hacr_index[4:0] == 5'b01101) && bank1_sel;

assign hacr_xx_dacsr_sel = (hacr_index[4:0] == 5'b11000) && bank1_sel;
assign hacr_xx_datr_sel  = (hacr_index[4:0] == 5'b11001) && bank1_sel;
assign hacr_xx_darwr_sel = (hacr_index[4:0] == 5'b11010) && bank1_sel;




// &ModuleEnd; @152
endmodule






















// &ModuleBeg; @20
module pa_had_inst_bkpt_lite(
  ctrl_bkpt_en,
  idu_had_id_inst_bkpt_vld,
  lite_bkpt_ctrl_data_req,
  lite_bkpt_ctrl_data_req_raw,
  lite_bkpt_ctrl_ex_data_req,
  lite_bkpt_ctrl_ex_inst_req,
  lite_bkpt_ctrl_id_inst_req,
  lite_bkpt_ctrl_inst_req,
  rtu_had_data_bkpt_vld,
  rtu_had_ex1_data_bkpt_vld,
  rtu_had_ex1_inst_bkpt_vld,
  rtu_had_ex1_split,
  rtu_had_inst_bkpt_vld,
  rtu_yy_xx_dbgon
);

// &Ports; @21
input           ctrl_bkpt_en;
input           idu_had_id_inst_bkpt_vld;
input           rtu_had_data_bkpt_vld;
input           rtu_had_ex1_data_bkpt_vld;
input           rtu_had_ex1_inst_bkpt_vld;
input           rtu_had_ex1_split;
input           rtu_had_inst_bkpt_vld;
input           rtu_yy_xx_dbgon;
output          lite_bkpt_ctrl_data_req;
output          lite_bkpt_ctrl_data_req_raw;
output          lite_bkpt_ctrl_ex_data_req;
output          lite_bkpt_ctrl_ex_inst_req;
output          lite_bkpt_ctrl_id_inst_req;
output          lite_bkpt_ctrl_inst_req;

// &Regs; @22

// &Wires; @23
wire            ctrl_bkpt_en;
wire            ex_data_lite_bkpt_pending;
wire            ex_data_lite_bkpt_req;
wire            ex_inst_lite_bkpt_req;
wire            idu_had_id_inst_bkpt_vld;
wire            inst_addr_match;
wire            inst_bkpt_active;
wire            inst_ex_addr_match;
wire            inst_ex_bkpt_active;
wire            inst_id_addr_match;
wire            inst_id_bkpt_active;
wire            lite_bkpt_ctrl_data_req;
wire            lite_bkpt_ctrl_data_req_raw;
wire            lite_bkpt_ctrl_ex_data_req;
wire            lite_bkpt_ctrl_ex_inst_req;
wire            lite_bkpt_ctrl_id_inst_req;
wire            lite_bkpt_ctrl_inst_req;
wire            rtu_had_ex1_inst_bkpt_vld;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpt_vld;
wire            rtu_yy_xx_dbgon;


// &Force ("bus","serial_xx_data","31","0"); @25

assign inst_addr_match      = rtu_had_inst_bkpt_vld && ctrl_bkpt_en;
assign inst_id_addr_match   = idu_had_id_inst_bkpt_vld && ctrl_bkpt_en;
assign inst_ex_addr_match   = rtu_had_ex1_inst_bkpt_vld && ctrl_bkpt_en;


// &Force("nonport", "inst_addr_match"); @32
assign inst_bkpt_active     = rtu_had_inst_bkpt_vld;
assign inst_id_bkpt_active  = inst_id_addr_match;
assign inst_ex_bkpt_active  = inst_ex_addr_match;


// &Force("input", "rtu_had_data_bkpt_vld"); @38
// &Force("input", "rtu_had_ex1_data_bkpt_vld"); @39







assign lite_bkpt_ctrl_inst_req    = !rtu_yy_xx_dbgon && inst_bkpt_active;
assign lite_bkpt_ctrl_id_inst_req = !rtu_yy_xx_dbgon && inst_id_bkpt_active;
assign lite_bkpt_ctrl_ex_inst_req = !rtu_yy_xx_dbgon && inst_ex_bkpt_active;



assign lite_bkpt_ctrl_data_req = 1'b0;
assign lite_bkpt_ctrl_data_req_raw = 1'b0;















assign ex_inst_lite_bkpt_req      = !rtu_yy_xx_dbgon && inst_ex_bkpt_active;

assign ex_data_lite_bkpt_req = 1'b0;
assign ex_data_lite_bkpt_pending = 1'b0;
assign lite_bkpt_ctrl_ex_data_req = ex_data_lite_bkpt_req && !rtu_had_ex1_split ||
                                    ex_data_lite_bkpt_pending && !rtu_had_ex1_split ||
                                    ex_inst_lite_bkpt_req;














// &ModuleEnd; @91
endmodule






















// &ModuleBeg; @20
module pa_had_io(
  clk_en,
  cpuclk,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  hadrst_b,
  io_ctrl_jdb_req_b,
  io_serial_tdi,
  io_sm_tap_en,
  pad_had_jtg_tms_i,
  regs_io_pm,
  rtu_yy_xx_dbgon,
  serial_io_tdo,
  sm_io_tdo_en,
  sm_io_tms_oe,
  sm_xx_tap_on,
  tclk,
  trst_b
);

// &Ports; @21
input          clk_en;
input          cpuclk;
input          hadrst_b;
input          pad_had_jtg_tms_i;
input   [1:0]  regs_io_pm;
input          rtu_yy_xx_dbgon;
input          serial_io_tdo;
input          sm_io_tdo_en;
input          sm_io_tms_oe;
input          sm_xx_tap_on;
input          tclk;
input          trst_b;
output  [1:0]  had_pad_jdb_pm;
output         had_pad_jtg_tms_o;
output         had_pad_jtg_tms_oe;
output         io_ctrl_jdb_req_b;
output         io_serial_tdi;
output         io_sm_tap_en;

// &Regs; @22
reg            had_pad_jdb_ack_b;
reg     [1:0]  had_pad_jdb_pm;
reg            jdb_ack_clr;
reg            jdb_req_b_ff1;
reg            jdb_req_b_ff1_cpu;
reg            jdb_req_b_ff2;
reg            jdb_req_b_ff2_cpu;

// &Wires; @23
wire           clk_en;
wire           cpuclk;
wire           had_pad_jtg_tap_on;
wire           had_pad_jtg_tdo;
wire           had_pad_jtg_tdo_en;
wire           had_pad_jtg_tms_o;
wire           had_pad_jtg_tms_oe;
wire           hadrst_b;
wire           io_ctrl_jdb_req_b;
wire           io_serial_tdi;
wire           io_sm_tap_en;
wire    [1:0]  jdb_pm;
wire           jdb_tap_en;
wire           jtg_tap_en;
wire           pad_had_jdb_req_b;
wire           pad_had_jtg_tap_en;
wire           pad_had_jtg_tms_i;
wire    [1:0]  regs_io_pm;
wire           rtu_yy_xx_dbgon;
wire           serial_io_tdo;
wire           sm_io_tdo_en;
wire           sm_io_tms_oe;
wire           sm_xx_tap_on;
wire           tclk;
wire           trst_b;


















































assign pad_had_jdb_req_b = 1'b1;
always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b) begin
    jdb_req_b_ff1 <= 1'b1;
    jdb_req_b_ff2 <= 1'b1;
  end
  else begin
    jdb_req_b_ff1 <= pad_had_jdb_req_b;
    jdb_req_b_ff2 <= jdb_req_b_ff1;
  end
end

assign jdb_tap_en = !jdb_req_b_ff2;






assign pad_had_jtg_tap_en = 1'b1;
assign jtg_tap_en = pad_had_jtg_tap_en;

// &Force("output", "io_sm_tap_en"); @96
assign io_sm_tap_en = jdb_tap_en || jtg_tap_en;




always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    jdb_req_b_ff1_cpu <= 1'b1;
    jdb_req_b_ff2_cpu <= 1'b1;
  end
  else begin
    jdb_req_b_ff1_cpu <= pad_had_jdb_req_b;
    jdb_req_b_ff2_cpu <= jdb_req_b_ff1_cpu;
  end
end

assign io_ctrl_jdb_req_b = jdb_req_b_ff2_cpu;





assign jdb_pm[1:0] = regs_io_pm[1:0];

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
  begin
   had_pad_jdb_pm[1:0] <= 2'b0;
  end
  else if(clk_en)
  begin
   had_pad_jdb_pm[1:0] <= jdb_pm[1:0];
  end
end




assign had_pad_jtg_tap_on = sm_xx_tap_on;
// &Force("nonport", "had_pad_jtg_tap_on"); @138





// &Force("nonport", "had_pad_jdb_ack_b"); @144
always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    had_pad_jdb_ack_b <= 1'b1;
  else if (jdb_ack_clr)
    had_pad_jdb_ack_b <= 1'b1;
  else if (rtu_yy_xx_dbgon)
    had_pad_jdb_ack_b <= 1'b0;
  else
    had_pad_jdb_ack_b <= had_pad_jdb_ack_b;
end

always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    jdb_ack_clr <= 1'b0;
  else if (!had_pad_jdb_ack_b)
    jdb_ack_clr <= 1'b1;
  else if (!rtu_yy_xx_dbgon)
    jdb_ack_clr <= 1'b0;
  else
    jdb_ack_clr <= jdb_ack_clr;
end























assign io_serial_tdi = pad_had_jtg_tms_i;
assign had_pad_jtg_tdo = serial_io_tdo;
// &Force("nonport", "had_pad_jtg_tdo"); @193
assign had_pad_jtg_tms_o = serial_io_tdo;
assign had_pad_jtg_tdo_en = sm_io_tdo_en;
// &Force("nonport", "had_pad_jtg_tdo_en"); @196
assign had_pad_jtg_tms_oe = sm_io_tms_oe;

// &ModuleEnd; @199
endmodule






















// &ModuleBeg; @20
module pa_had_pcfifo(
  ctrl_pcfifo_ren,
  ctrl_pcfifo_wen,
  forever_cpuclk,
  hadrst_b,
  pad_yy_gate_clk_en_b,
  pcfifo_regs_data,
  rtu_had_xx_next_pc,
  sm_xx_tap_on
);

// &Ports; @21
input           ctrl_pcfifo_ren;
input           ctrl_pcfifo_wen;
input           forever_cpuclk;
input           hadrst_b;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_had_xx_next_pc;
input           sm_xx_tap_on;
output  [31:0]  pcfifo_regs_data;

// &Regs; @22
reg     [31:0]  pcfifo_dout;
reg     [31:0]  pcfifo_reg  [7:0];
reg     [3 :0]  rptr;
reg     [3 :0]  wptr;

// &Wires; @23
wire            ctrl_pcfifo_ren;
wire            ctrl_pcfifo_wen;
wire            forever_cpuclk;
wire            hadrst_b;
wire            pad_yy_gate_clk_en_b;
wire            pcfifo_clk;
wire            pcfifo_clk_en;
wire    [31:0]  pcfifo_din;
wire            pcfifo_empty;
wire            pcfifo_full;
wire    [31:0]  pcfifo_regs_data;
wire    [31:0]  rtu_had_xx_next_pc;
wire            sm_xx_tap_on;






parameter WIDTH		= 32;
parameter DEPTH		= 8;
parameter PTR_WIDTH	= 4;







assign pcfifo_din[WIDTH-1:0] = {32{sm_xx_tap_on}} & rtu_had_xx_next_pc[31:0];

// &Force("mem","pcfifo_reg",31,0,7,0); @41
integer i;
always @(posedge pcfifo_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    for (i=0; i<DEPTH; i=i+1)
      pcfifo_reg[i] <= 32'b0;
  else if (ctrl_pcfifo_wen)
    pcfifo_reg[wptr[PTR_WIDTH-2:0]] <= pcfifo_din[WIDTH-1:0];
  else
    pcfifo_reg[wptr[PTR_WIDTH-2:0]] <= pcfifo_reg[wptr[PTR_WIDTH-2:0]];
end





always @(posedge pcfifo_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    pcfifo_dout[WIDTH-1:0] <= 32'b0;
  else if (ctrl_pcfifo_ren)
    pcfifo_dout[WIDTH-1:0] <= pcfifo_reg[rptr[PTR_WIDTH-2:0]];
  else
    pcfifo_dout[WIDTH-1:0] <= pcfifo_dout[WIDTH-1:0];
end

assign pcfifo_regs_data[31:0] = pcfifo_dout[WIDTH-1:0];







assign pcfifo_full  = (wptr[PTR_WIDTH-2:0] == rptr[PTR_WIDTH-2:0]) &&
                      (wptr[PTR_WIDTH-1]   ^  rptr[PTR_WIDTH-1]);

assign pcfifo_empty = (wptr[PTR_WIDTH-2:0] == rptr[PTR_WIDTH-2:0]) &&
                      (wptr[PTR_WIDTH-1]   ~^ rptr[PTR_WIDTH-1]);




always @(posedge pcfifo_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    wptr[PTR_WIDTH-1:0] <= 4'b0;
  else if (ctrl_pcfifo_wen || ctrl_pcfifo_ren && pcfifo_empty)
    wptr[PTR_WIDTH-1:0] <= wptr[PTR_WIDTH-1:0] + 1'b1;
  else
    wptr[PTR_WIDTH-1:0] <= wptr[PTR_WIDTH-1:0];
end








always @(posedge pcfifo_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    rptr[PTR_WIDTH-1:0] <= 4'b0;
  else if (ctrl_pcfifo_ren || ctrl_pcfifo_wen && pcfifo_full)
    rptr[PTR_WIDTH-1:0] <= rptr[PTR_WIDTH-1:0] + 1'b1;
  else
    rptr[PTR_WIDTH-1:0] <= rptr[PTR_WIDTH-1:0];
end

assign pcfifo_clk_en = ctrl_pcfifo_wen
                    || ctrl_pcfifo_ren;
// &Instance("gated_clk_cell", "x_pcfifo_clk"); @114
gated_clk_cell  x_pcfifo_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (pcfifo_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (pcfifo_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @115
//          .external_en (1'b0), @116
//          .global_en   (1'b1), @117
//          .module_en   (1'b0), @118
//          .local_en    (pcfifo_clk_en), @119
//          .clk_out     (pcfifo_clk)); @120

// &ModuleEnd; @122
endmodule






















// &ModuleBeg; @20
module pa_had_regs(
  bkpta_regs_cnt,
  bkptb_regs_cnt,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_mcause_data,
  cpuclk,
  ctrl_regs_bkpta_vld,
  ctrl_regs_bkptb_vld,
  ctrl_regs_bkptc_vld,
  ctrl_regs_bkptd_vld,
  ctrl_regs_bkpte_vld,
  ctrl_regs_exit_dbg,
  ctrl_regs_freeze_pcfifo,
  ctrl_regs_set_sqa,
  ctrl_regs_set_sqb,
  ctrl_regs_update_adro,
  ctrl_regs_update_dro,
  ctrl_regs_update_mbo,
  ctrl_regs_update_rsto,
  ctrl_regs_update_swo,
  ctrl_regs_update_to,
  dacsr_reg,
  darwr_reg,
  datr_reg,
  ddc_regs_daddr,
  ddc_regs_ddata,
  ddc_regs_ffy,
  ddc_regs_ir,
  ddc_regs_update_csr,
  ddc_regs_update_wbbr,
  ddc_regs_wbbr,
  ddc_xx_update_ir,
  forever_cpuclk,
  hacr_xx_baba_sel,
  hacr_xx_babb_sel,
  hacr_xx_babc_sel,
  hacr_xx_babd_sel,
  hacr_xx_babe_sel,
  hacr_xx_babf_sel,
  hacr_xx_babg_sel,
  hacr_xx_babh_sel,
  hacr_xx_babi_sel,
  hacr_xx_bama_sel,
  hacr_xx_bamb_sel,
  hacr_xx_bamc_sel,
  hacr_xx_bamd_sel,
  hacr_xx_bame_sel,
  hacr_xx_bamf_sel,
  hacr_xx_bamg_sel,
  hacr_xx_bamh_sel,
  hacr_xx_bami_sel,
  hacr_xx_bsel_sel,
  hacr_xx_csr_sel,
  hacr_xx_dacsr_sel,
  hacr_xx_daddr_sel,
  hacr_xx_darwr_sel,
  hacr_xx_datr_sel,
  hacr_xx_ddata_sel,
  hacr_xx_hcr_sel,
  hacr_xx_hsr_sel,
  hacr_xx_id_sel,
  hacr_xx_ir_sel,
  hacr_xx_mbca_sel,
  hacr_xx_mbcb_sel,
  hacr_xx_mbir_sel,
  hacr_xx_otc_sel,
  hacr_xx_pc_sel,
  hacr_xx_pcfifo_sel,
  hacr_xx_psr_sel,
  hacr_xx_wbbr_sel,
  hacr_xx_wdata,
  had_cp0_mcause_data,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_ir,
  had_ifu_pc,
  had_regs_clk,
  had_rtu_xx_tme,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  had_yy_xx_bxen,
  had_yy_xx_dbg_en,
  hadrst_b,
  idu_had_no_op,
  iu_xx_no_op,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  pcfifo_regs_data,
  regs_bkpta_bc,
  regs_bkptb_bc,
  regs_cpu_data,
  regs_ctrl_adr,
  regs_ctrl_dr,
  regs_ctrl_fdb,
  regs_ctrl_frzc,
  regs_ctrl_had_int_on,
  regs_ctrl_pcfifo_frozen,
  regs_ctrl_sqa,
  regs_ctrl_sqb,
  regs_ctrl_sqc,
  regs_ctrl_tme,
  regs_ddma_ddae,
  regs_hacr_bsel,
  regs_io_pm,
  regs_serial_data,
  regs_xx_ddc_en,
  rtu_had_int_ack,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_retire_pc,
  rtu_xx_no_op,
  rtu_yy_xx_dbgon,
  serial_xx_data,
  sm_xx_srst_vld,
  sm_xx_update_dr_en,
  sm_xx_update_reg_en,
  tcipif_update_dr,
  trace_regs_otc
);

// &Ports; @21
input   [7 :0]  bkpta_regs_cnt;
input   [7 :0]  bkptb_regs_cnt;
input   [31:0]  cp0_had_cpuid_idx0;
input   [1 :0]  cp0_had_lpmd_b;
input   [31:0]  cp0_had_mcause_data;
input           cpuclk;
input           ctrl_regs_bkpta_vld;
input           ctrl_regs_bkptb_vld;
input           ctrl_regs_bkptc_vld;
input           ctrl_regs_bkptd_vld;
input           ctrl_regs_bkpte_vld;
input           ctrl_regs_exit_dbg;
input           ctrl_regs_freeze_pcfifo;
input           ctrl_regs_set_sqa;
input           ctrl_regs_set_sqb;
input           ctrl_regs_update_adro;
input           ctrl_regs_update_dro;
input           ctrl_regs_update_mbo;
input           ctrl_regs_update_rsto;
input           ctrl_regs_update_swo;
input           ctrl_regs_update_to;
input   [31:0]  dacsr_reg;
input   [31:0]  darwr_reg;
input   [31:0]  datr_reg;
input   [31:0]  ddc_regs_daddr;
input   [31:0]  ddc_regs_ddata;
input           ddc_regs_ffy;
input   [31:0]  ddc_regs_ir;
input           ddc_regs_update_csr;
input           ddc_regs_update_wbbr;
input   [31:0]  ddc_regs_wbbr;
input           ddc_xx_update_ir;
input           forever_cpuclk;
input           hacr_xx_baba_sel;
input           hacr_xx_babb_sel;
input           hacr_xx_babc_sel;
input           hacr_xx_babd_sel;
input           hacr_xx_babe_sel;
input           hacr_xx_babf_sel;
input           hacr_xx_babg_sel;
input           hacr_xx_babh_sel;
input           hacr_xx_babi_sel;
input           hacr_xx_bama_sel;
input           hacr_xx_bamb_sel;
input           hacr_xx_bamc_sel;
input           hacr_xx_bamd_sel;
input           hacr_xx_bame_sel;
input           hacr_xx_bamf_sel;
input           hacr_xx_bamg_sel;
input           hacr_xx_bamh_sel;
input           hacr_xx_bami_sel;
input           hacr_xx_bsel_sel;
input           hacr_xx_csr_sel;
input           hacr_xx_dacsr_sel;
input           hacr_xx_daddr_sel;
input           hacr_xx_darwr_sel;
input           hacr_xx_datr_sel;
input           hacr_xx_ddata_sel;
input           hacr_xx_hcr_sel;
input           hacr_xx_hsr_sel;
input           hacr_xx_id_sel;
input           hacr_xx_ir_sel;
input           hacr_xx_mbca_sel;
input           hacr_xx_mbcb_sel;
input           hacr_xx_mbir_sel;
input           hacr_xx_otc_sel;
input           hacr_xx_pc_sel;
input           hacr_xx_pcfifo_sel;
input           hacr_xx_psr_sel;
input           hacr_xx_wbbr_sel;
input   [31:0]  hacr_xx_wdata;
input           had_yy_xx_dbg_en;
input           hadrst_b;
input           idu_had_no_op;
input           iu_xx_no_op;
input           lsu_xx_no_op;
input           pad_yy_gate_clk_en_b;
input   [31:0]  pcfifo_regs_data;
input           rtu_had_int_ack;
input   [31:0]  rtu_had_xx_data;
input           rtu_had_xx_data_vld;
input           rtu_had_xx_dbg_ack_pc;
input   [31:0]  rtu_had_xx_retire_pc;
input           rtu_xx_no_op;
input           rtu_yy_xx_dbgon;
input   [31:0]  serial_xx_data;
input           sm_xx_srst_vld;
input           sm_xx_update_dr_en;
input           sm_xx_update_reg_en;
input           tcipif_update_dr;
input   [7 :0]  trace_regs_otc;
output  [31:0]  had_cp0_mcause_data;
output  [31:0]  had_idu_wbbr_data;
output          had_idu_wbbr_vld;
output  [31:0]  had_ifu_ir;
output  [31:0]  had_ifu_pc;
output          had_regs_clk;
output          had_rtu_xx_tme;
output  [31:0]  had_yy_xx_bkpta_base;
output  [7 :0]  had_yy_xx_bkpta_mask;
output          had_yy_xx_bkpta_rc;
output  [31:0]  had_yy_xx_bkptb_base;
output  [7 :0]  had_yy_xx_bkptb_mask;
output          had_yy_xx_bkptb_rc;
output  [31:0]  had_yy_xx_bkptc_base;
output  [7 :0]  had_yy_xx_bkptc_mask;
output  [31:0]  had_yy_xx_bkptd_base;
output  [7 :0]  had_yy_xx_bkptd_mask;
output  [31:0]  had_yy_xx_bkpte_base;
output  [7 :0]  had_yy_xx_bkpte_mask;
output  [6 :0]  had_yy_xx_bxen;
output  [4 :0]  regs_bkpta_bc;
output  [4 :0]  regs_bkptb_bc;
output  [31:0]  regs_cpu_data;
output          regs_ctrl_adr;
output          regs_ctrl_dr;
output          regs_ctrl_fdb;
output          regs_ctrl_frzc;
output          regs_ctrl_had_int_on;
output          regs_ctrl_pcfifo_frozen;
output          regs_ctrl_sqa;
output          regs_ctrl_sqb;
output  [1 :0]  regs_ctrl_sqc;
output          regs_ctrl_tme;
output          regs_ddma_ddae;
output  [7 :0]  regs_hacr_bsel;
output  [1 :0]  regs_io_pm;
output  [31:0]  regs_serial_data;
output          regs_xx_ddc_en;

// &Regs; @22
reg     [31:0]  baba_reg;
reg     [31:0]  babb_reg;
reg     [31:0]  babc_reg;
reg     [31:0]  babd_reg;
reg     [31:0]  babe_reg;
reg     [7 :0]  bama_reg;
reg     [7 :0]  bamb_reg;
reg     [7 :0]  bamc_reg;
reg     [7 :0]  bamd_reg;
reg     [7 :0]  bame_reg;
reg     [7 :0]  bsel;
reg             csr_fdb;
reg             csr_ffy;
reg     [7 :0]  had_mcause_mil;
reg             had_mcause_mpie;
reg     [1 :0]  had_mcause_mpp;
reg             had_mcause_mpsp;
reg             hcr_adr;
reg     [4 :0]  hcr_bca;
reg     [4 :0]  hcr_bcb;
reg     [4 :0]  hcr_bxen_reg;
reg             hcr_ddae;
reg             hcr_ddcen;
reg             hcr_dr;
reg             hcr_frzc;
reg             hcr_rca;
reg             hcr_rcb;
reg     [1 :0]  hcr_sqc;
reg             hcr_tme;
reg             hsr_adro;
reg             hsr_dro;
reg             hsr_frzo;
reg             hsr_mbo;
reg             hsr_ps;
reg             hsr_rsto;
reg             hsr_sqa;
reg             hsr_sqb;
reg             hsr_swo;
reg             hsr_to;
reg     [31:0]  ir_reg;
reg     [2 :0]  mbir_idx;
reg     [30:0]  pc_reg_31_1;
reg     [31:0]  regs_data_out;
reg     [31:0]  wbbr_reg;

// &Wires; @23
wire    [31:0]  babf_reg;
wire    [31:0]  babg_reg;
wire    [31:0]  babh_reg;
wire    [31:0]  babi_reg;
wire    [7 :0]  bamf_reg;
wire    [7 :0]  bamg_reg;
wire    [7 :0]  bamh_reg;
wire    [7 :0]  bami_reg;
wire    [7 :0]  bkpta_regs_cnt;
wire    [7 :0]  bkptb_regs_cnt;
wire    [31:0]  bsel_reg;
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cpu_idle;
wire            cpuclk;
wire    [15:0]  csr_reg;
wire            ctrl_regs_bkpta_vld;
wire            ctrl_regs_bkptb_vld;
wire            ctrl_regs_bkptc_vld;
wire            ctrl_regs_bkptd_vld;
wire            ctrl_regs_bkpte_vld;
wire            ctrl_regs_exit_dbg;
wire            ctrl_regs_freeze_pcfifo;
wire            ctrl_regs_set_sqa;
wire            ctrl_regs_set_sqb;
wire            ctrl_regs_update_adro;
wire            ctrl_regs_update_dro;
wire            ctrl_regs_update_mbo;
wire            ctrl_regs_update_rsto;
wire            ctrl_regs_update_swo;
wire            ctrl_regs_update_to;
wire    [31:0]  dacsr_reg;
wire    [31:0]  darwr_reg;
wire    [31:0]  datr_reg;
wire    [31:0]  ddc_regs_daddr;
wire    [31:0]  ddc_regs_ddata;
wire            ddc_regs_ffy;
wire    [31:0]  ddc_regs_ir;
wire            ddc_regs_update_csr;
wire            ddc_regs_update_wbbr;
wire    [31:0]  ddc_regs_wbbr;
wire            ddc_xx_update_ir;
wire            forever_cpuclk;
wire            hacr_xx_baba_sel;
wire            hacr_xx_babb_sel;
wire            hacr_xx_babc_sel;
wire            hacr_xx_babd_sel;
wire            hacr_xx_babe_sel;
wire            hacr_xx_babf_sel;
wire            hacr_xx_babg_sel;
wire            hacr_xx_babh_sel;
wire            hacr_xx_babi_sel;
wire            hacr_xx_bama_sel;
wire            hacr_xx_bamb_sel;
wire            hacr_xx_bamc_sel;
wire            hacr_xx_bamd_sel;
wire            hacr_xx_bame_sel;
wire            hacr_xx_bamf_sel;
wire            hacr_xx_bamg_sel;
wire            hacr_xx_bamh_sel;
wire            hacr_xx_bami_sel;
wire            hacr_xx_bsel_sel;
wire            hacr_xx_csr_sel;
wire            hacr_xx_dacsr_sel;
wire            hacr_xx_daddr_sel;
wire            hacr_xx_darwr_sel;
wire            hacr_xx_datr_sel;
wire            hacr_xx_ddata_sel;
wire            hacr_xx_hcr_sel;
wire            hacr_xx_hsr_sel;
wire            hacr_xx_id_sel;
wire            hacr_xx_ir_sel;
wire            hacr_xx_mbca_sel;
wire            hacr_xx_mbcb_sel;
wire            hacr_xx_mbir_sel;
wire            hacr_xx_otc_sel;
wire            hacr_xx_pc_sel;
wire            hacr_xx_pcfifo_sel;
wire            hacr_xx_psr_sel;
wire            hacr_xx_wbbr_sel;
wire    [31:0]  hacr_xx_wdata;
wire    [31:0]  had_cp0_mcause_data;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire    [31:0]  had_ifu_ir;
wire    [31:0]  had_ifu_pc;
wire            had_regs_clk;
wire            had_regs_clk_en;
wire            had_rtu_xx_tme;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire    [6 :0]  had_yy_xx_bxen;
wire            had_yy_xx_dbg_en;
wire            hadrst_b;
wire    [6 :0]  hcr_bxen;
wire            hcr_idre;
wire    [31:0]  hcr_reg;
wire    [1 :0]  hsr_pm;
wire            hsr_pm_dbg;
wire            hsr_pm_lpm;
wire    [15:0]  hsr_reg;
wire    [31:0]  id_reg;
wire            idu_had_no_op;
wire            iu_xx_no_op;
wire            jtag_psr_pc_wen;
wire            lsu_xx_no_op;
wire    [8 :0]  mbir_reg;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  pc_reg;
wire            pc_wen;
wire    [31:0]  pcfifo_regs_data;
wire    [31:0]  psr_reg;
wire            psr_wen;
wire    [4 :0]  regs_bkpta_bc;
wire    [4 :0]  regs_bkptb_bc;
wire    [31:0]  regs_cpu_data;
wire            regs_ctrl_adr;
wire            regs_ctrl_dr;
wire            regs_ctrl_fdb;
wire            regs_ctrl_frzc;
wire            regs_ctrl_had_int_on;
wire            regs_ctrl_pcfifo_frozen;
wire            regs_ctrl_sqa;
wire            regs_ctrl_sqb;
wire    [1 :0]  regs_ctrl_sqc;
wire            regs_ctrl_tme;
wire            regs_ddma_ddae;
wire    [7 :0]  regs_hacr_bsel;
wire    [1 :0]  regs_io_pm;
wire    [31:0]  regs_serial_data;
wire            regs_xx_ddc_en;
wire            rtu_had_int_ack;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_dbgon;
wire    [31:0]  serial_xx_data;
wire            sm_xx_srst_vld;
wire            sm_xx_update_dr_en;
wire            sm_xx_update_reg_en;
wire            tcip_psr_pc_wen;
wire            tcipif_update_dr;
wire    [7 :0]  trace_regs_otc;


















// &Force("bus", "serial_xx_data", 31, 0); @41
// &Force("bus", "cp0_had_cpuid_idx0", 31, 0); @42
// &Force("bus", "rtu_had_xx_retire_pc", 31, 0); @43
assign id_reg[31:28] = 4'b0001;
assign id_reg[27:26] = cp0_had_cpuid_idx0[27:26]; // ARCH
assign id_reg[25:18] = 8'd0;   // -
assign id_reg[16]    = 1'b1;  // DDC
assign id_reg[17]    = 1'b1;  // BANK1
assign id_reg[15:12] = 4'd5;  // BKPT_NUM



















assign id_reg[11:8]  = 4'b0011;


assign id_reg[7:4]   = 4'b0011;

assign id_reg[3:0]   = 4'd2; // ID_VER





always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    baba_reg[31:0] <= 32'b0;
  else if (sm_xx_update_reg_en && hacr_xx_baba_sel)
    baba_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    baba_reg[31:0] <= baba_reg[31:0];
end




always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    babb_reg[31:0] <= 32'b0;
  else if (sm_xx_update_reg_en && hacr_xx_babb_sel)
    babb_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    babb_reg[31:0] <= babb_reg[31:0];
end





always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bama_reg[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bama_sel)
    bama_reg[7:0] <= hacr_xx_wdata[7:0];
  else
    bama_reg[7:0] <= bama_reg[7:0];
end




always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bamb_reg[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bamb_sel)
    bamb_reg[7:0] <= hacr_xx_wdata[7:0];
  else
    bamb_reg[7:0] <= bamb_reg[7:0];
end





always @(posedge had_regs_clk)
begin
  if (sm_xx_update_reg_en && hacr_xx_wbbr_sel)
    wbbr_reg[31:0] <= hacr_xx_wdata[31:0];
  else if (ddc_regs_update_wbbr)
    wbbr_reg[31:0] <= ddc_regs_wbbr[31:0];
  else if (rtu_had_xx_data_vld)
    wbbr_reg[31:0] <= rtu_had_xx_data[31:0];
  else
    wbbr_reg[31:0] <= wbbr_reg[31:0];
end





assign jtag_psr_pc_wen = sm_xx_update_dr_en && rtu_yy_xx_dbgon;


assign tcip_psr_pc_wen = tcipif_update_dr;

assign psr_wen = (jtag_psr_pc_wen || tcip_psr_pc_wen) && hacr_xx_psr_sel;

// &Force("bus", "cp0_had_mcause_data", 31, 0); @169
always @ (posedge had_regs_clk)
begin
  if (rtu_had_int_ack) begin
    had_mcause_mpp[1:0] <= cp0_had_mcause_data[29:28];
    had_mcause_mil[7:0] <= cp0_had_mcause_data[23:16];
    had_mcause_mpie     <= cp0_had_mcause_data[27];
    had_mcause_mpsp     <= cp0_had_mcause_data[26];
  end
  else if (psr_wen) begin
    had_mcause_mpp[1:0] <= hacr_xx_wdata[29:28];
    had_mcause_mil[7:0] <= hacr_xx_wdata[23:16];
    had_mcause_mpie     <= hacr_xx_wdata[27];
    had_mcause_mpsp     <= hacr_xx_wdata[26];
  end
end
assign psr_reg[31:0]      = {1'b0,1'b0,had_mcause_mpp[1:0],had_mcause_mpie,had_mcause_mpsp,2'b0,had_mcause_mil[7:0],16'b0};


assign pc_wen = (jtag_psr_pc_wen || tcip_psr_pc_wen) && hacr_xx_pc_sel;
always @(posedge had_regs_clk)
begin


  if (rtu_had_xx_dbg_ack_pc || rtu_had_int_ack)
    pc_reg_31_1[30:0] <= rtu_had_xx_retire_pc[31:1];
  else if (pc_wen)
    pc_reg_31_1[30:0] <= hacr_xx_wdata[31:1];
  else
    pc_reg_31_1[30:0] <= pc_reg_31_1[30:0];
end
assign pc_reg[31:0] = {pc_reg_31_1[30:0], 1'b0};


always @(posedge had_regs_clk)
begin
  if (sm_xx_update_reg_en && hacr_xx_ir_sel)
    ir_reg[31:0] <= hacr_xx_wdata[31:0];
  else if (ddc_xx_update_ir)
    ir_reg[31:0] <= ddc_regs_ir[31:0];
  else
    ir_reg[31:0] <= ir_reg[31:0];
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    csr_ffy <= 1'b0;
    csr_fdb <= 1'b0;
  end
  else if (sm_xx_update_reg_en && hacr_xx_csr_sel) begin
    csr_ffy <= hacr_xx_wdata[8];
    csr_fdb <= hacr_xx_wdata[7];
  end
  else if (ddc_regs_update_csr) begin
    csr_ffy <= ddc_regs_ffy;
    csr_fdb	<= 1'b0;
  end
  else begin
    csr_ffy <= csr_ffy;
    csr_fdb <= csr_fdb;
  end
end
assign csr_reg[15:0] = {7'b0, csr_ffy, csr_fdb, 7'b0};




always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    hcr_adr      <= 1'b0;
    hcr_ddcen    <= 1'b0;
    hcr_sqc[1:0] <= 2'b0;
    hcr_dr       <= 1'b0;

    hcr_tme      <= 1'b0;
    hcr_frzc     <= 1'b0;
    hcr_rcb      <= 1'b0;
    hcr_bcb[4:0] <= 5'b0;
    hcr_rca      <= 1'b0;
    hcr_bca[4:0] <= 5'b0;
  end
  else if(sm_xx_update_reg_en && hacr_xx_hcr_sel) begin
    hcr_adr      <= hacr_xx_wdata[21];
    hcr_ddcen    <= hacr_xx_wdata[20];
    hcr_sqc[1:0] <= hacr_xx_wdata[17:16];
    hcr_dr       <= hacr_xx_wdata[15];

    hcr_tme      <= hacr_xx_wdata[13];
    hcr_frzc     <= hacr_xx_wdata[12];
    hcr_rcb      <= hacr_xx_wdata[11];
    hcr_bcb[4:0] <= hacr_xx_wdata[10:6];
    hcr_rca      <= hacr_xx_wdata[5];
    hcr_bca[4:0] <= hacr_xx_wdata[4:0];
  end
  else begin
    hcr_adr      <= hcr_adr;
    hcr_ddcen    <= hcr_ddcen;
    hcr_sqc[1:0] <= hcr_sqc[1:0];
    hcr_dr       <= hcr_dr;

    hcr_tme      <= hcr_tme;
    hcr_frzc     <= hcr_frzc;
    hcr_rcb      <= hcr_rcb;
    hcr_bcb[4:0] <= hcr_bcb[4:0];
    hcr_rca      <= hcr_rca;
    hcr_bca[4:0] <= hcr_bca[4:0];
  end
end
assign hcr_idre = 1'b0;





always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hcr_bxen_reg[2:0] <= 3'b0;
  else if (sm_xx_update_reg_en && hacr_xx_hcr_sel)
    hcr_bxen_reg[4:0] <= hacr_xx_wdata[24:22];
  else
    hcr_bxen_reg[2:0] <= hcr_bxen_reg[2:0];
end
assign hcr_bxen[6:0] = {4'b0,hcr_bxen_reg[2:0]};



always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hcr_ddae <= 1'b0;
  else if (sm_xx_update_reg_en && hacr_xx_hcr_sel)
    hcr_ddae <= serial_xx_data[29];
  else
    hcr_ddae <= hcr_ddae;
end
assign regs_ddma_ddae = hcr_ddae;

assign hcr_reg[31:0] = {2'b0, hcr_ddae, hcr_bxen[6:0],
                        hcr_adr, hcr_ddcen, 2'b0, hcr_sqc[1:0],
                        hcr_dr, hcr_idre, hcr_tme, hcr_frzc,
                        hcr_rcb, hcr_bcb[4:0], hcr_rca, hcr_bca[4:0]};





always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bsel[7:0] <= 8'b0;
  else if (sm_xx_srst_vld)
    bsel[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bsel_sel)
    bsel[7:0] <= hacr_xx_wdata[7:0];
  else
    bsel[7:0] <= bsel[7:0];
end

assign bsel_reg[31:0] = {24'b0,bsel[7:0]};
assign regs_hacr_bsel[7:0] = bsel[7:0];



always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    babc_reg[31:0] <= 32'b0;
  else if (sm_xx_update_reg_en && hacr_xx_babc_sel)
    babc_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    babc_reg[31:0] <= babc_reg[31:0];
end



always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bamc_reg[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bamc_sel)
    bamc_reg[7:0] <= hacr_xx_wdata[7:0];
  else
    bamc_reg[7:0] <= bamc_reg[7:0];
end





always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    babd_reg[31:0] <= 32'b0;
  else if (sm_xx_update_reg_en && hacr_xx_babd_sel)
    babd_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    babd_reg[31:0] <= babd_reg[31:0];
end



always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bamd_reg[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bamd_sel)
    bamd_reg[7:0] <= hacr_xx_wdata[7:0];
  else
    bamd_reg[7:0] <= bamd_reg[7:0];
end





always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    babe_reg[31:0] <= 32'b0;
  else if (sm_xx_update_reg_en && hacr_xx_babe_sel)
    babe_reg[31:0] <= hacr_xx_wdata[31:0];
  else
    babe_reg[31:0] <= babe_reg[31:0];
end



always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bame_reg[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_bame_sel)
    bame_reg[7:0] <= hacr_xx_wdata[7:0];
  else
    bame_reg[7:0] <= bame_reg[7:0];
end

assign babf_reg[31:0] = 32'b0;
assign bamf_reg[7:0]  = 8'b0;

assign babg_reg[31:0] = 32'b0;
assign bamg_reg[7:0]  = 8'b0;

assign babh_reg[31:0] = 32'b0;
assign bamh_reg[7:0]  = 8'b0;

assign babi_reg[31:0] = 32'b0;
assign bami_reg[7:0]  = 8'b0;











assign cpu_idle = idu_had_no_op && iu_xx_no_op && rtu_xx_no_op && lsu_xx_no_op;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_ps <= 1'b1;
  else if (cpu_idle)
    hsr_ps <= 1'b1;
  else
    hsr_ps <= 1'b0;
end

always @ (posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_rsto <= 1'b0;
  else if (ctrl_regs_update_rsto)
    hsr_rsto <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    hsr_rsto <= 1'b0;
  else
    hsr_rsto <= hsr_rsto;
end


















always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_adro <= 1'b0;
  else if (ctrl_regs_update_adro)
    hsr_adro <= 1'b1;


  else if (ctrl_regs_exit_dbg)
    hsr_adro <= 1'b0;
  else
    hsr_adro <= hsr_adro;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_dro <= 1'b0;
  else if (ctrl_regs_update_dro)
    hsr_dro <= 1'b1;


  else if (ctrl_regs_exit_dbg)
    hsr_dro <= 1'b0;
  else
    hsr_dro <= hsr_dro;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_mbo <= 1'b0;
  else if (ctrl_regs_update_mbo)
    hsr_mbo <= 1'b1;


  else if (ctrl_regs_exit_dbg)
    hsr_mbo <= 1'b0;
  else
    hsr_mbo <= hsr_mbo;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_swo <= 1'b0;
  else if (ctrl_regs_update_swo)
    hsr_swo <= 1'b1;


  else if (ctrl_regs_exit_dbg)
    hsr_swo <= 1'b0;
  else
    hsr_swo <= hsr_swo;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_to <= 1'b0;
  else if (ctrl_regs_update_to)
    hsr_to <= 1'b1;


  else if (ctrl_regs_exit_dbg)
    hsr_to <= 1'b0;
  else
    hsr_to <= hsr_to;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_frzo <= 1'b0;
  else if (ctrl_regs_freeze_pcfifo)
    hsr_frzo <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    hsr_frzo <= 1'b0;
  else
    hsr_frzo <= hsr_frzo;
end
// &Force("input", "ctrl_regs_freeze_pcfifo"); @903


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_sqb <= 1'b0;
  else if (ctrl_regs_set_sqb)
    hsr_sqb <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    hsr_sqb <= 1'b0;
  else
    hsr_sqb <= hsr_sqb;
end


always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hsr_sqa <= 1'b0;
  else if (ctrl_regs_set_sqa)
    hsr_sqa <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    hsr_sqa <= 1'b0;
  else
    hsr_sqa <= hsr_sqa;
end


assign hsr_pm_dbg  = rtu_yy_xx_dbgon;
assign hsr_pm_lpm  = !cp0_had_lpmd_b[1] || !cp0_had_lpmd_b[0];
assign hsr_pm[1:0] = {hsr_pm_dbg, hsr_pm_lpm};

assign hsr_reg[15:0] = {3'b0, hsr_ps, 1'b0, hsr_rsto, hsr_adro, hsr_dro,
                        hsr_mbo, hsr_swo, hsr_to, hsr_frzo,
                        hsr_sqb, hsr_sqa, hsr_pm[1:0]};







always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    mbir_idx[2:0] <= 3'd0;
  else if (ctrl_regs_bkpta_vld)
    mbir_idx[2:0] <= 3'd1;
  else if (ctrl_regs_bkptb_vld)
    mbir_idx[2:0] <= 3'd2;
  else if (ctrl_regs_bkptc_vld)
    mbir_idx[2:0] <= 3'd3;
  else if (ctrl_regs_bkptd_vld)
    mbir_idx[2:0] <= 3'd4;
  else if (ctrl_regs_bkpte_vld)
    mbir_idx[2:0] <= 3'd5;
  else if (ctrl_regs_exit_dbg)
    mbir_idx[2:0] <= 3'd0;
  else
    mbir_idx[2:0] <= mbir_idx[2:0];
end

assign mbir_reg[8:0] = {1'b0, mbir_idx[2:0]};






assign had_ifu_pc[31:0]          = pc_reg[31:0];
assign had_ifu_ir[31:0]          = ir_reg[31:0];
assign had_idu_wbbr_data[31:0]   = wbbr_reg[31:0];
assign had_idu_wbbr_vld          = csr_ffy && rtu_yy_xx_dbgon;

assign had_cp0_mcause_data[31:0] = psr_reg[31:0];






















assign regs_ctrl_fdb      = csr_fdb;
assign regs_ctrl_adr      = hcr_adr;
assign regs_xx_ddc_en     = hcr_ddcen;
assign regs_ctrl_sqc[1:0] = hcr_sqc[1:0];
assign regs_ctrl_dr       = hcr_dr;

assign regs_ctrl_tme      = hcr_tme;
assign regs_ctrl_frzc	  = hcr_frzc;
assign regs_bkpta_bc[4:0] = hcr_bca[4:0];
assign regs_bkptb_bc[4:0] = hcr_bcb[4:0];
assign regs_ctrl_had_int_on    = 1'b0;




assign regs_ctrl_pcfifo_frozen = hsr_frzo;
assign regs_ctrl_sqa           = hsr_sqa;
assign regs_ctrl_sqb           = hsr_sqb;




assign had_yy_xx_bkpta_base[31:0] = baba_reg[31:0];
assign had_yy_xx_bkptb_base[31:0] = babb_reg[31:0];
assign had_yy_xx_bkpta_mask[7:0]  = bama_reg[7:0];
assign had_yy_xx_bkptb_mask[7:0]  = bamb_reg[7:0];
assign had_yy_xx_bkpta_rc         = hcr_rca;
assign had_yy_xx_bkptb_rc         = hcr_rcb;
assign had_rtu_xx_tme             = hcr_tme;

assign had_yy_xx_bkptc_base[31:0] = babc_reg[31:0];
assign had_yy_xx_bkptc_mask[7:0]  = bamc_reg[7:0];
assign had_yy_xx_bkptd_base[31:0] = babd_reg[31:0];
assign had_yy_xx_bkptd_mask[7:0]  = bamd_reg[7:0];
assign had_yy_xx_bkpte_base[31:0] = babe_reg[31:0];
assign had_yy_xx_bkpte_mask[7:0]  = bame_reg[7:0];
assign had_yy_xx_bxen[6:0]        = hcr_bxen[6:0];



assign regs_io_pm[1:0] = hsr_pm[1:0];




always @( * )
begin
  case(1'b1)
    hacr_xx_id_sel:
      regs_data_out[31:0] = id_reg[31:0];
    hacr_xx_otc_sel:
      regs_data_out[31:0] = {24'b0, trace_regs_otc[7:0]};
    hacr_xx_mbca_sel:
      regs_data_out[31:0] = {24'b0, bkpta_regs_cnt[7:0]};
    hacr_xx_mbcb_sel:
      regs_data_out[31:0] = {24'b0, bkptb_regs_cnt[7:0]};
    hacr_xx_pcfifo_sel:
      regs_data_out[31:0] = pcfifo_regs_data[31:0];
    hacr_xx_baba_sel:
      regs_data_out[31:0] = baba_reg[31:0];
    hacr_xx_babb_sel:
      regs_data_out[31:0] = babb_reg[31:0];
    hacr_xx_bama_sel:
      regs_data_out[31:0] = {24'b0, bama_reg[7:0]};
    hacr_xx_bamb_sel:
      regs_data_out[31:0] = {24'b0, bamb_reg[7:0]};
    hacr_xx_wbbr_sel:
      regs_data_out[31:0] = wbbr_reg[31:0];
    hacr_xx_psr_sel:
      regs_data_out[31:0] = psr_reg[31:0];
    hacr_xx_pc_sel:
      regs_data_out[31:0] = pc_reg[31:0];
    hacr_xx_ir_sel:
      regs_data_out[31:0] = ir_reg[31:0];
    hacr_xx_csr_sel:
      regs_data_out[31:0] = {16'b0, csr_reg[15:0]};
    hacr_xx_mbir_sel:
      regs_data_out[31:0] = {28'b0, mbir_reg[3:0]};
    hacr_xx_hcr_sel:
      regs_data_out[31:0] = hcr_reg[31:0];
    hacr_xx_hsr_sel:
      regs_data_out[31:0] = {16'b0, hsr_reg[15:0]};
    hacr_xx_daddr_sel:
      regs_data_out[31:0] = ddc_regs_daddr[31:0];
    hacr_xx_ddata_sel:
      regs_data_out[31:0] = ddc_regs_ddata[31:0];
    hacr_xx_bsel_sel:
      regs_data_out[31:0] = bsel_reg[31:0];
    hacr_xx_babc_sel:
      regs_data_out[31:0] = babc_reg[31:0];
    hacr_xx_bamc_sel:
      regs_data_out[31:0] = {24'b0, bamc_reg[7:0]};
    hacr_xx_babd_sel:
      regs_data_out[31:0] = babd_reg[31:0];
    hacr_xx_bamd_sel:
      regs_data_out[31:0] = {24'b0, bamd_reg[7:0]};
    hacr_xx_babe_sel:
      regs_data_out[31:0] = babe_reg[31:0];
    hacr_xx_bame_sel:
      regs_data_out[31:0] = {24'b0, bame_reg[7:0]};
    hacr_xx_babf_sel:
      regs_data_out[31:0] = babf_reg[31:0];
    hacr_xx_bamf_sel:
      regs_data_out[31:0] = {24'b0, bamf_reg[7:0]};
    hacr_xx_babg_sel:
      regs_data_out[31:0] = babg_reg[31:0];
    hacr_xx_bamg_sel:
      regs_data_out[31:0] = {24'b0, bamg_reg[7:0]};
    hacr_xx_babh_sel:
      regs_data_out[31:0] = babh_reg[31:0];
    hacr_xx_bamh_sel:
      regs_data_out[31:0] = {24'b0, bamh_reg[7:0]};
    hacr_xx_babi_sel:
      regs_data_out[31:0] = babi_reg[31:0];
    hacr_xx_bami_sel:
      regs_data_out[31:0] = {24'b0, bami_reg[7:0]};
    hacr_xx_dacsr_sel:
      regs_data_out[31:0] = dacsr_reg[31:0];
    hacr_xx_datr_sel:
      regs_data_out[31:0] = datr_reg[31:0];
    hacr_xx_darwr_sel:
      regs_data_out[31:0] = darwr_reg[31:0];
    default:
      regs_data_out[31:0] = 32'b0;
  endcase
end





assign regs_serial_data[31:0] = regs_data_out[31:0];


assign regs_cpu_data[31:0]    = regs_data_out[31:0];

assign had_regs_clk_en = sm_xx_update_reg_en
                      || had_yy_xx_dbg_en
                      || rtu_had_int_ack
                      || rtu_had_xx_dbg_ack_pc
                      || ddc_xx_update_ir
                      || ddc_regs_update_csr
                      || ddc_regs_update_wbbr
                      || ctrl_regs_exit_dbg
                      || rtu_had_xx_data_vld;
// &Instance("gated_clk_cell", "x_had_regs_clk"); @1453
gated_clk_cell  x_had_regs_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (had_regs_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (had_regs_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @1454
//          .external_en (1'b0), @1455
//          .global_en   (1'b1), @1456
//          .module_en   (1'b0), @1457
//          .local_en    (had_regs_clk_en), @1458
//          .clk_out     (had_regs_clk)); @1459
// &Force("output", "had_regs_clk"); @1460

// &ModuleEnd; @1462
endmodule






















// &ModuleBeg; @20
module pa_had_serial(
  hacr_xx_bama_sel,
  hacr_xx_bamb_sel,
  hacr_xx_bamc_sel,
  hacr_xx_bamd_sel,
  hacr_xx_bame_sel,
  hacr_xx_bamf_sel,
  hacr_xx_bamg_sel,
  hacr_xx_bamh_sel,
  hacr_xx_bami_sel,
  hacr_xx_csr_sel,
  hacr_xx_hsr_sel,
  hacr_xx_mbca_sel,
  hacr_xx_mbcb_sel,
  hacr_xx_otc_sel,
  io_serial_tdi,
  pad_had_jtag2_sel,
  regs_serial_data,
  serial_io_tdo,
  serial_xx_data,
  sm_serial_capture_dr,
  sm_serial_shift_dr,
  sm_serial_shift_ir,
  sm_serial_shift_par,
  sm_serial_shift_sync,
  sm_xx_write_en,
  tclk,
  trst_b
);

// &Ports; @21
input           hacr_xx_bama_sel;
input           hacr_xx_bamb_sel;
input           hacr_xx_bamc_sel;
input           hacr_xx_bamd_sel;
input           hacr_xx_bame_sel;
input           hacr_xx_bamf_sel;
input           hacr_xx_bamg_sel;
input           hacr_xx_bamh_sel;
input           hacr_xx_bami_sel;
input           hacr_xx_csr_sel;
input           hacr_xx_hsr_sel;
input           hacr_xx_mbca_sel;
input           hacr_xx_mbcb_sel;
input           hacr_xx_otc_sel;
input           io_serial_tdi;
input           pad_had_jtag2_sel;
input   [31:0]  regs_serial_data;
input           sm_serial_capture_dr;
input           sm_serial_shift_dr;
input           sm_serial_shift_ir;
input           sm_serial_shift_par;
input           sm_serial_shift_sync;
input           sm_xx_write_en;
input           tclk;
input           trst_b;
output          serial_io_tdo;
output  [31:0]  serial_xx_data;

// &Regs; @22
reg             parity;
reg     [31:0]  serial_shifter;
reg     [31:0]  serial_shifter_pre;
reg             tdo;

// &Wires; @23
wire            hacr_xx_bama_sel;
wire            hacr_xx_bamb_sel;
wire            hacr_xx_bamc_sel;
wire            hacr_xx_bamd_sel;
wire            hacr_xx_bame_sel;
wire            hacr_xx_bamf_sel;
wire            hacr_xx_bamg_sel;
wire            hacr_xx_bamh_sel;
wire            hacr_xx_bami_sel;
wire            hacr_xx_csr_sel;
wire            hacr_xx_hsr_sel;
wire            hacr_xx_mbca_sel;
wire            hacr_xx_mbcb_sel;
wire            hacr_xx_otc_sel;
wire            io_serial_tdi;
wire            pad_had_jtag2_sel;
wire    [31:0]  regs_serial_data;
wire            serial_io_tdo;
wire    [31:0]  serial_xx_data;
wire            sm_serial_capture_dr;
wire            sm_serial_shift_dr;
wire            sm_serial_shift_ir;
wire            sm_serial_shift_par;
wire            sm_serial_shift_sync;
wire            sm_xx_write_en;
wire            tclk;
wire            tdi;
wire            trst_b;










// &CombBeg; @43
always @( hacr_xx_otc_sel
       or hacr_xx_bami_sel
       or hacr_xx_csr_sel
       or regs_serial_data[31:0]
       or tdi
       or hacr_xx_mbcb_sel
       or hacr_xx_hsr_sel
       or sm_serial_shift_ir
       or hacr_xx_bame_sel
       or serial_shifter[31:0]
       or hacr_xx_bamh_sel
       or hacr_xx_bamb_sel
       or hacr_xx_bama_sel
       or sm_serial_shift_dr
       or hacr_xx_bamf_sel
       or hacr_xx_bamd_sel
       or hacr_xx_bamc_sel
       or sm_serial_capture_dr
       or pad_had_jtag2_sel
       or hacr_xx_bamg_sel
       or hacr_xx_mbca_sel)
begin
  serial_shifter_pre[31:0] = 32'b0;
  if (sm_serial_shift_ir)
    serial_shifter_pre[7:0] = {tdi, serial_shifter[7:1]};
  else if (sm_serial_capture_dr)
    serial_shifter_pre[31:0] = regs_serial_data[31:0];
  else if (sm_serial_shift_dr) begin
    if (pad_had_jtag2_sel)
      serial_shifter_pre[31:0] = {tdi, serial_shifter[31:1]};
    else begin
      case(1'b1)
        hacr_xx_otc_sel,
        hacr_xx_mbca_sel,
        hacr_xx_mbcb_sel,
        hacr_xx_bamc_sel,
        hacr_xx_bamd_sel,
        hacr_xx_bame_sel,
        hacr_xx_bamf_sel,
        hacr_xx_bamg_sel,
        hacr_xx_bamh_sel,
        hacr_xx_bami_sel,
        hacr_xx_bama_sel,
        hacr_xx_bamb_sel:
          serial_shifter_pre[7:0] = {tdi, serial_shifter[7:1]};
        hacr_xx_hsr_sel,
        hacr_xx_csr_sel:
          serial_shifter_pre[15:0] = {tdi, serial_shifter[15:1]};
        default:
          serial_shifter_pre[31:0] = {tdi, serial_shifter[31:1]};
      endcase
    end
  end
  else
    serial_shifter_pre[31:0] = serial_shifter[31:0];
// &CombEnd; @77
end



always @(posedge tclk)
begin
  serial_shifter[31:0] <= serial_shifter_pre[31:0];
end


assign serial_xx_data[31:0] = serial_shifter[31:0];




always @(posedge tclk)
begin
  if (sm_serial_capture_dr)
    parity <= 1'b1;
  else if (sm_serial_shift_dr && !sm_xx_write_en)
    parity <= parity ^ serial_shifter[0];
  else
    parity <= parity;
end





always @(negedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tdo <= 1'b1;
  else if (sm_serial_shift_sync)
    tdo <= 1'b0;
  else if (sm_serial_shift_dr && !sm_xx_write_en)
    tdo <= serial_shifter[0];
  else if (sm_serial_shift_par && !sm_xx_write_en)
    tdo <= parity;
  else
    tdo <= 1'b1;
end





assign tdi = io_serial_tdi;

assign serial_io_tdo = tdo;

// &ModuleEnd; @128
endmodule























// &ModuleBeg; @21
module pa_had_sm(
  cpuclk,
  forever_cpuclk,
  hacr_sm_read,
  hacr_xx_bypass_sel,
  hacr_xx_csr_sel,
  hacr_xx_ir_sel,
  hacr_xx_pc_sel,
  hacr_xx_wbbr_sel,
  hadrst_b,
  io_sm_tap_en,
  pad_had_jtag2_sel,
  pad_had_jtg_tms_i,
  sm_ctrl_exit_dbg,
  sm_io_tdo_en,
  sm_io_tms_oe,
  sm_regs_capture_dr_en,
  sm_serial_capture_dr,
  sm_serial_shift_dr,
  sm_serial_shift_ir,
  sm_serial_shift_par,
  sm_serial_shift_sync,
  sm_xx_srst_vld,
  sm_xx_tap_on,
  sm_xx_update_dr_en,
  sm_xx_update_ir_en,
  sm_xx_update_reg_en,
  sm_xx_write_en,
  tcipif_update_dr,
  tclk,
  trst_b
);

// &Ports; @22
input          cpuclk;
input          forever_cpuclk;
input          hacr_sm_read;
input          hacr_xx_bypass_sel;
input          hacr_xx_csr_sel;
input          hacr_xx_ir_sel;
input          hacr_xx_pc_sel;
input          hacr_xx_wbbr_sel;
input          hadrst_b;
input          io_sm_tap_en;
input          pad_had_jtag2_sel;
input          pad_had_jtg_tms_i;
input          tcipif_update_dr;
input          tclk;
input          trst_b;
output         sm_ctrl_exit_dbg;
output         sm_io_tdo_en;
output         sm_io_tms_oe;
output         sm_regs_capture_dr_en;
output         sm_serial_capture_dr;
output         sm_serial_shift_dr;
output         sm_serial_shift_ir;
output         sm_serial_shift_par;
output         sm_serial_shift_sync;
output         sm_xx_srst_vld;
output         sm_xx_tap_on;
output         sm_xx_update_dr_en;
output         sm_xx_update_ir_en;
output         sm_xx_update_reg_en;
output         sm_xx_write_en;

// &Regs; @23
reg     [7:0]  sm2_data_counter;
reg            sm2_parity;
reg            sm2_read_vld;
reg     [1:0]  sm2_rs;
reg     [1:0]  sm2_rs_counter;
reg            sm_xx_tap_on;
reg     [3:0]  tap2_cur_st;
reg     [3:0]  tap2_nxt_st;
reg     [6:0]  tap2_rst_cnt;
reg     [3:0]  tap5_cur_st;
reg     [3:0]  tap5_nxt_st;
reg            tdo_en;
reg            tms_oe;

// &Wires; @24
wire           cpuclk;
wire           forever_cpuclk;
wire           hacr_sm_read;
wire           hacr_xx_bypass_sel;
wire           hacr_xx_csr_sel;
wire           hacr_xx_ir_sel;
wire           hacr_xx_pc_sel;
wire           hacr_xx_wbbr_sel;
wire           hadrst_b;
wire           io_sm_tap_en;
wire           jtag2_sel;
wire           pad_had_jtag2_sel;
wire           pad_had_jtg_tms_i;
wire           sm2_capture_dr;
wire           sm2_load_rs;
wire           sm2_load_rw;
wire           sm2_parity_vld;
wire           sm2_rs_cdic_dr_sel;
wire           sm2_rs_had_dr_sel;
wire           sm2_rs_had_ir_sel;
wire           sm2_shift_dr;
wire           sm2_shift_ir;
wire           sm2_shift_vld;
wire           sm2_start_vld;
wire           sm2_sync_vld;
wire           sm2_trn1;
wire           sm2_trn2;
wire           sm2_update_dr;
wire           sm2_update_ir;
wire           sm2_update_vld;
wire           sm5_capture_dr;
wire           sm5_shift_dr;
wire           sm5_shift_ir;
wire           sm5_update_dr;
wire           sm5_update_ir;
wire           sm_capture_dr;
wire           sm_capture_dr_cpu;
wire           sm_ctrl_exit_dbg;
wire           sm_io_tdo_en;
wire           sm_io_tms_oe;
wire           sm_regs_capture_dr_en;
wire           sm_serial_capture_dr;
wire           sm_serial_shift_dr;
wire           sm_serial_shift_ir;
wire           sm_serial_shift_par;
wire           sm_serial_shift_sync;
wire           sm_update_dr;
wire           sm_update_dr_cpu;
wire           sm_update_ir;
wire           sm_update_ir_cpu;
wire           sm_xx_srst_vld;
wire           sm_xx_update_dr_en;
wire           sm_xx_update_ir_en;
wire           sm_xx_update_reg_en;
wire           sm_xx_write_en;
wire           tap2_rst_vld;
wire           tap2_rst_vld_cpu;
wire           tap_on;
wire           tcipif_update_dr;
wire           tclk;
wire           tms_i;
wire           trst_b;


assign tms_i     = pad_had_jtg_tms_i;
assign jtag2_sel = pad_had_jtag2_sel;




parameter TAP5_RESET          = 4'b0000;
parameter TAP5_IDLE           = 4'b0001;
parameter TAP5_SELECT_DR_SCAN = 4'b0011;
parameter TAP5_SELECT_IR_SCAN = 4'b0010;
parameter TAP5_CAPTURE_IR     = 4'b0110;
parameter TAP5_SHIFT_IR       = 4'b0100;
parameter TAP5_EXIT1_IR       = 4'b0101;
parameter TAP5_UPDATE_IR      = 4'b0111;
parameter TAP5_CAPTURE_DR     = 4'b1011;
parameter TAP5_SHIFT_DR       = 4'b1010;
parameter TAP5_EXIT1_DR       = 4'b1000;
parameter TAP5_UPDATE_DR      = 4'b1001;
parameter TAP5_PAUSE_IR       = 4'b1101;
parameter TAP5_EXIT2_IR       = 4'b1111;
parameter TAP5_PAUSE_DR       = 4'b1100;
parameter TAP5_EXIT2_DR       = 4'b1110;

always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tap5_cur_st[3:0] <= TAP5_RESET;
  else begin
    if (jtag2_sel)
      tap5_cur_st[3:0] <= TAP5_RESET;
    else
      tap5_cur_st[3:0] <= tap5_nxt_st[3:0];
  end
end

// &CombBeg; @61
always @( io_sm_tap_en
       or tap5_cur_st[3:0]
       or tms_i)
begin
  case(tap5_cur_st[3:0])
    TAP5_RESET:
      if (io_sm_tap_en && !tms_i)
        tap5_nxt_st[3:0] = TAP5_IDLE;
      else
        tap5_nxt_st[3:0] = TAP5_RESET;
    TAP5_IDLE:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_SELECT_DR_SCAN;
      else
        tap5_nxt_st[3:0] = TAP5_IDLE;
    TAP5_SELECT_DR_SCAN:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_SELECT_IR_SCAN;
      else
        tap5_nxt_st[3:0] = TAP5_CAPTURE_DR;
    TAP5_SELECT_IR_SCAN:
      if (!tms_i)
        tap5_nxt_st[3:0] = TAP5_CAPTURE_IR;
      else
        tap5_nxt_st[3:0] = TAP5_RESET;
    TAP5_CAPTURE_IR:
      if (!tms_i)
        tap5_nxt_st[3:0] = TAP5_SHIFT_IR;
      else
        tap5_nxt_st[3:0] = TAP5_EXIT1_IR;
    TAP5_SHIFT_IR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_EXIT1_IR;
      else
        tap5_nxt_st[3:0] = TAP5_SHIFT_IR;
    TAP5_EXIT1_IR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_UPDATE_IR;
      else
        tap5_nxt_st[3:0] = TAP5_PAUSE_IR;
    TAP5_PAUSE_IR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_EXIT2_IR;
      else
        tap5_nxt_st[3:0] = TAP5_PAUSE_IR;
    TAP5_EXIT2_IR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_UPDATE_IR;
      else
        tap5_nxt_st[3:0] = TAP5_SHIFT_IR;
    TAP5_UPDATE_IR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_SELECT_DR_SCAN;
      else
        tap5_nxt_st[3:0] = TAP5_IDLE;
    TAP5_CAPTURE_DR:
      if (!tms_i)
        tap5_nxt_st[3:0] = TAP5_SHIFT_DR;
      else
        tap5_nxt_st[3:0] = TAP5_EXIT1_DR;
    TAP5_SHIFT_DR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_EXIT1_DR;
      else
        tap5_nxt_st[3:0] = TAP5_SHIFT_DR;
    TAP5_EXIT1_DR:
      if (!tms_i)
        tap5_nxt_st[3:0] = TAP5_PAUSE_DR;
      else
        tap5_nxt_st[3:0] = TAP5_UPDATE_DR;
    TAP5_PAUSE_DR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_EXIT2_DR;
      else
        tap5_nxt_st[3:0] = TAP5_PAUSE_DR;
    TAP5_EXIT2_DR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_UPDATE_DR;
      else
        tap5_nxt_st[3:0] = TAP5_SHIFT_DR;
    TAP5_UPDATE_DR:
      if (tms_i)
        tap5_nxt_st[3:0] = TAP5_SELECT_DR_SCAN;
      else
        tap5_nxt_st[3:0] = TAP5_IDLE;
    default:
        tap5_nxt_st[3:0] = TAP5_RESET;
  endcase
// &CombEnd; @146
end




assign sm5_shift_ir   = (tap5_cur_st[3:0] == TAP5_SHIFT_IR);
assign sm5_update_ir  = (tap5_cur_st[3:0] == TAP5_UPDATE_IR);
assign sm5_shift_dr   = (tap5_cur_st[3:0] == TAP5_SHIFT_DR);
assign sm5_update_dr  = (tap5_cur_st[3:0] == TAP5_UPDATE_DR);
assign sm5_capture_dr = (tap5_cur_st[3:0] == TAP5_CAPTURE_DR);




always @(negedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tdo_en <= 1'b0;
  else if (sm5_shift_dr && hacr_sm_read)
    tdo_en <= 1'b1;
  else
    tdo_en <= 1'b0;
end

assign sm_io_tdo_en = tdo_en;




parameter TAP2_RESET  = 4'b0000;
parameter TAP2_START  = 4'b0001;
parameter TAP2_RW     = 4'b0010;
parameter TAP2_RS     = 4'b0011;
parameter TAP2_TRN1   = 4'b0100;
parameter TAP2_DATA   = 4'b0101;
parameter TAP2_SYNC   = 4'b0110;
parameter TAP2_PARITY = 4'b0111;
parameter TAP2_TRN2   = 4'b1000;

always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tap2_cur_st[3:0] <= TAP2_RESET;
  else if ((tap2_rst_vld && tms_i) || (!jtag2_sel))
    tap2_cur_st[3:0] <= TAP2_RESET;
  else
    tap2_cur_st[3:0] <= tap2_nxt_st[3:0];
end





always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tap2_rst_cnt[6:0] <= 7'd80;
  else begin
    if (!jtag2_sel)
      tap2_rst_cnt[6:0] <= 7'd80;
    else if (!tms_i)
      tap2_rst_cnt[6:0] <= 7'd80;
    else if (tap2_rst_cnt[6:0] > 7'd0)
      tap2_rst_cnt[6:0] <= tap2_rst_cnt[6:0] - 7'd1;
    else
      tap2_rst_cnt[6:0] <= 7'd80;
  end
end

assign tap2_rst_vld = (tap2_rst_cnt[6:0] == 7'd00);

// &CombBeg; @217
always @( sm2_data_counter[7:0]
       or tap2_cur_st[3:0]
       or io_sm_tap_en
       or sm2_read_vld
       or tms_i
       or sm2_rs_counter[1:0])
begin
  case (tap2_cur_st[3:0])
    TAP2_RESET : begin
      if (io_sm_tap_en) begin
        if (tms_i)
          tap2_nxt_st[3:0] = TAP2_START;
        else
          tap2_nxt_st[3:0] = TAP2_RW;
      end
      else
        tap2_nxt_st[3:0] = TAP2_RESET;
    end

    TAP2_START : begin // wait for START bit (tms = 0)
      if (!tms_i) // sample START bit, logic 0
        tap2_nxt_st[3:0] = TAP2_RW;
      else
          tap2_nxt_st[3:0] = TAP2_START;
    end

    TAP2_RW : begin  // RnW bit, 1=Read Op, 0=Write Op
      tap2_nxt_st[3:0] = TAP2_RS;
    end

    TAP2_RS : begin // RS[1:0] - Register Group Select
      if (sm2_rs_counter[1:0] == 2'd0)
        tap2_nxt_st[3:0] = TAP2_TRN1;
      else
        tap2_nxt_st[3:0] = TAP2_RS;
    end

    TAP2_TRN1 : begin // Turn Around 1
      if (sm2_read_vld)  // Read operation need a sync cycle
        tap2_nxt_st[3:0] = TAP2_SYNC;
      else               // write operation
        tap2_nxt_st[3:0] = TAP2_DATA;
    end

    TAP2_SYNC : begin
      tap2_nxt_st[3:0] = TAP2_DATA;
    end

    TAP2_DATA : begin // IR or DR, Sample or Set
      if (sm2_data_counter[7:0] == 8'd0)
        tap2_nxt_st[3:0] = TAP2_PARITY;
      else
        tap2_nxt_st[3:0] = TAP2_DATA;
    end

    TAP2_PARITY : begin
      tap2_nxt_st[3:0] = TAP2_TRN2;
    end

    TAP2_TRN2 : begin
      tap2_nxt_st[3:0] = TAP2_START;
    end
    default : begin
      tap2_nxt_st[3:0] = TAP2_RESET;
    end
  endcase
// &CombEnd; @277
end

assign sm2_start_vld  = (tap2_cur_st[3:0] == TAP2_RW);
assign sm2_load_rw    = (tap2_cur_st[3:0] == TAP2_RW);
assign sm2_load_rs    = (tap2_cur_st[3:0] == TAP2_RS);
assign sm2_trn1       = (tap2_cur_st[3:0] == TAP2_TRN1);
assign sm2_trn2       = (tap2_cur_st[3:0] == TAP2_TRN2);
assign sm2_shift_vld  = (tap2_cur_st[3:0] == TAP2_DATA);
assign sm2_update_vld = (tap2_cur_st[3:0] == TAP2_TRN2);
assign sm2_parity_vld = (tap2_cur_st[3:0] == TAP2_PARITY);
assign sm2_sync_vld   = (tap2_cur_st[3:0] == TAP2_SYNC);




always @(posedge tclk)
begin
  if (sm2_load_rw)
    sm2_read_vld <= tms_i;
  else
    sm2_read_vld <= sm2_read_vld;
end




always @(posedge tclk)
begin
  if (sm2_start_vld)
    sm2_rs_counter[1:0] <= 2'd1;
  else if (sm2_load_rs)
    sm2_rs_counter[1:0] <= sm2_rs_counter[1:0] - 2'd1;
  else
    sm2_rs_counter[1:0] <= sm2_rs_counter[1:0];
end

always @(posedge tclk)
begin
  if (sm2_load_rs)
    sm2_rs[1:0] <= {tms_i, sm2_rs[1]};
  else
    sm2_rs[1:0] <= sm2_rs[1:0];
end


assign sm2_rs_cdic_dr_sel = sm2_rs[1:0] == 2'b01;
assign sm2_rs_had_ir_sel  = sm2_rs[1:0] == 2'b10;
assign sm2_rs_had_dr_sel  = sm2_rs[1:0] == 2'b11;






always @(posedge tclk)
begin
  if (sm2_trn1) begin
    if (sm2_rs_had_dr_sel || sm2_rs_cdic_dr_sel)
      sm2_data_counter[7:0] <= 8'd31;
    else
      sm2_data_counter[7:0] <= 8'd7;
  end
  else if (sm2_shift_vld)
    sm2_data_counter[7:0] <= sm2_data_counter[7:0] - 8'd1;
  else
    sm2_data_counter[7:0] <= sm2_data_counter[7:0];
end




always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tms_oe <= 1'b0; // default is input
  else if (sm2_trn1 && sm2_read_vld)
    tms_oe <= 1'b1;
  else if (sm2_trn2)
    tms_oe <= 1'b0;
  else
    tms_oe <= tms_oe;
end
assign sm_io_tms_oe = tms_oe;




always @(posedge tclk)
begin
  if (sm2_start_vld)
    sm2_parity <= 1'b1;
  else if ((sm2_rs_had_dr_sel || sm2_rs_had_ir_sel) && sm2_shift_vld)
    sm2_parity <= sm2_parity ^ tms_i; // calculate the parity bit
  else if (sm2_parity_vld)
    sm2_parity <= sm2_parity ^ tms_i; // check received parity bit
  else
    sm2_parity <= sm2_parity;
end

assign sm2_shift_ir   = sm2_rs_had_ir_sel && sm2_shift_vld;
assign sm2_shift_dr   = sm2_rs_had_dr_sel && sm2_shift_vld;
assign sm2_capture_dr = sm2_rs_had_dr_sel && sm2_read_vld && sm2_trn1;






assign sm_serial_shift_ir   = sm5_shift_ir || sm2_shift_ir;
assign sm_serial_shift_dr   = sm5_shift_dr || sm2_shift_dr;
assign sm_serial_capture_dr = sm5_capture_dr || sm2_capture_dr;
assign sm_serial_shift_par  = sm2_parity_vld;
assign sm_serial_shift_sync = sm2_sync_vld;






assign sm2_update_ir = sm2_update_vld && sm2_rs_had_ir_sel && (!sm2_parity);
assign sm2_update_dr = sm2_update_vld && sm2_rs_had_dr_sel && (!sm2_parity);
assign sm_update_ir = sm5_update_ir || sm2_update_ir;
assign sm_update_dr = sm5_update_dr || sm2_update_dr;
// &Instance("pa_had_sync", "x_pa_had_sync_cap_dr"); @404
// &Connect(.clk1           (cpuclk), @405
//          .clk2           (tclk), @406
//          .rst1_b         (hadrst_b), @407
//          .rst2_b         (trst_b), @408
//          .sync_in        (sm_capture_dr), @409
//          .sync_out       (sm_capture_dr_cpu) @410
//         ); @411


assign sm_capture_dr = sm5_capture_dr || sm2_capture_dr;
// &Instance("pa_had_sync", "x_pa_had_sync_cap_dr"); @418
pa_had_sync  x_pa_had_sync_cap_dr (
  .clk1              (cpuclk           ),
  .clk2              (tclk             ),
  .rst1_b            (hadrst_b         ),
  .rst2_b            (trst_b           ),
  .sync_in           (sm_capture_dr    ),
  .sync_out          (sm_capture_dr_cpu)
);

// &Connect(.clk1           (cpuclk), @419
//          .clk2           (tclk), @420
//          .rst1_b         (hadrst_b), @421
//          .rst2_b         (trst_b), @422
//          .sync_in        (sm_capture_dr), @423
//          .sync_out       (sm_capture_dr_cpu) @424
//         ); @425
assign sm_regs_capture_dr_en = sm_capture_dr_cpu && hacr_sm_read;

// &Instance("pa_had_sync", "x_pa_had_sync_ir"); @430
pa_had_sync  x_pa_had_sync_ir (
  .clk1             (cpuclk          ),
  .clk2             (tclk            ),
  .rst1_b           (hadrst_b        ),
  .rst2_b           (trst_b          ),
  .sync_in          (sm_update_ir    ),
  .sync_out         (sm_update_ir_cpu)
);

// &Connect(.clk1           (cpuclk), @431
//          .clk2           (tclk), @432
//          .rst1_b         (hadrst_b), @433
//          .rst2_b         (trst_b), @434
//          .sync_in        (sm_update_ir), @435
//          .sync_out       (sm_update_ir_cpu) @436
//         ); @437

// &Instance("pa_had_sync", "x_pa_had_sync_dr"); @439
pa_had_sync  x_pa_had_sync_dr (
  .clk1             (cpuclk          ),
  .clk2             (tclk            ),
  .rst1_b           (hadrst_b        ),
  .rst2_b           (trst_b          ),
  .sync_in          (sm_update_dr    ),
  .sync_out         (sm_update_dr_cpu)
);

// &Connect(.clk1           (cpuclk), @440
//          .clk2           (tclk), @441
//          .rst1_b         (hadrst_b), @442
//          .rst2_b         (trst_b), @443
//          .sync_in        (sm_update_dr), @444
//          .sync_out       (sm_update_dr_cpu) @445
//         ); @446

// &Instance("pa_had_sync", "x_pa_had_sync_rst"); @448
pa_had_sync  x_pa_had_sync_rst (
  .clk1             (cpuclk          ),
  .clk2             (tclk            ),
  .rst1_b           (hadrst_b        ),
  .rst2_b           (trst_b          ),
  .sync_in          (tap2_rst_vld    ),
  .sync_out         (tap2_rst_vld_cpu)
);

// &Connect(.clk1           (cpuclk), @449
//          .clk2           (tclk), @450
//          .rst1_b         (hadrst_b), @451
//          .rst2_b         (trst_b), @452
//          .sync_in        (tap2_rst_vld), @453
//          .sync_out       (tap2_rst_vld_cpu) @454
//         ); @455




assign sm_ctrl_exit_dbg = sm_update_dr_cpu &&
                         (hacr_xx_pc_sel
                       || hacr_xx_ir_sel
                       || hacr_xx_wbbr_sel
                       || hacr_xx_csr_sel
                       || hacr_xx_bypass_sel);




assign sm_xx_update_ir_en = sm_update_ir_cpu;
assign sm_xx_srst_vld     = tap2_rst_vld_cpu;
assign sm_xx_write_en     = !hacr_sm_read;
assign sm_xx_update_dr_en  = sm_update_dr_cpu && sm_xx_write_en;
assign sm_xx_update_reg_en = sm_update_dr_cpu && sm_xx_write_en || tcipif_update_dr;
// &Force ("output", "sm_xx_write_en"); @475




assign tap_on = !((tap5_cur_st[3:0] == TAP5_RESET) &&
                  (tap2_cur_st[3:0] == TAP2_RESET));

// &Force("output", "sm_xx_tap_on"); @483

always @(posedge forever_cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    sm_xx_tap_on <= 1'b0;
  else if (tap_on)
    sm_xx_tap_on <= 1'b1;
  else
    sm_xx_tap_on <= sm_xx_tap_on;
end

// &ModuleEnd; @495
endmodule























// &ModuleBeg; @21
module pa_had_sync(
  clk1,
  clk2,
  rst1_b,
  rst2_b,
  sync_in,
  sync_out
);

// &Ports; @22
input        clk1;
input        clk2;
input        rst1_b;
input        rst2_b;
input        sync_in;
output       sync_out;

// &Regs; @23
reg          sync_ff1_clk1;
reg          sync_ff2_clk1;
reg          sync_ff3_clk1;
reg          sync_ff_clk2;

// &Wires; @24
wire         clk1;
wire         clk2;
wire         rst1_b;
wire         rst2_b;
wire         sync_in;
wire         sync_out;










always @(posedge clk2 or negedge rst2_b)
begin
  if (!rst2_b)
    sync_ff_clk2 <= 1'b0;
  else
    sync_ff_clk2 <= sync_in;
end

always @(posedge clk1 or negedge rst1_b)
begin
  if (!rst1_b) begin
    sync_ff1_clk1 <= 1'b0;
    sync_ff2_clk1 <= 1'b0;
  end
  else begin
    sync_ff1_clk1 <= sync_ff_clk2;
    sync_ff2_clk1 <= sync_ff1_clk1;
  end
end


always @(posedge clk1 or negedge rst1_b)
begin
  if (!rst1_b)
    sync_ff3_clk1 <= 1'b0;
  else
    sync_ff3_clk1 <= sync_ff2_clk1;
end

assign sync_out = !sync_ff3_clk1 && sync_ff2_clk1;

// &ModuleEnd; @65
endmodule






















// &Depend ("cpu_cfig.h"); @20
// &ModuleBeg; @21
module pa_had_top(
  bmu_had_acc_err,
  bmu_had_grant,
  bmu_had_rdata,
  bmu_had_trans_cmplt,
  clk_en,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_mcause_data,
  cp0_had_pcfifo_wen,
  cp0_yy_mach_mode,
  forever_cpuclk,
  had_bmu_addr,
  had_bmu_burst,
  had_bmu_prot,
  had_bmu_req,
  had_bmu_seq,
  had_bmu_size,
  had_bmu_wdata,
  had_bmu_write,
  had_cp0_mcause_data,
  had_cp0_xx_dbg,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_ifu_pc,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_ex1_trace_potential,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_rtu_xx_tme,
  had_tcipif_cmplt,
  had_tcipif_rdata,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  had_yy_xx_dbg,
  had_yy_xx_exit_dbg,
  hadrst_b,
  idu_had_id_chgflw_inst,
  idu_had_id_inst_bkpt,
  idu_had_no_op,
  iu_xx_no_op,
  lsu_xx_no_op,
  pad_had_jtg_tms_i,
  pad_yy_gate_clk_en_b,
  rtu_had_data_bkpta_vld,
  rtu_had_data_bkptb_vld,
  rtu_had_data_bkptc_vld,
  rtu_had_data_bkptd_vld,
  rtu_had_data_bkpte_vld,
  rtu_had_dbg_disable_for_tee,
  rtu_had_ex1_data_bkpta_vld,
  rtu_had_ex1_data_bkptb_vld,
  rtu_had_ex1_data_bkptc_vld,
  rtu_had_ex1_data_bkptd_vld,
  rtu_had_ex1_data_bkpte_vld,
  rtu_had_ex1_inst_bkpta_vld,
  rtu_had_ex1_inst_bkptb_vld,
  rtu_had_ex1_inst_bkptc_vld,
  rtu_had_ex1_inst_bkptd_vld,
  rtu_had_ex1_inst_bkpte_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_had_inst_bkpta_vld,
  rtu_had_inst_bkptb_vld,
  rtu_had_inst_bkptc_vld,
  rtu_had_inst_bkptd_vld,
  rtu_had_inst_bkpte_vld,
  rtu_had_inst_ld,
  rtu_had_int_ack,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_next_pc,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_retire_pc,
  rtu_had_xx_split,
  rtu_xx_no_op,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_flush,
  rtu_yy_xx_retire,
  sysio_had_sdb_req_b,
  tcipif_had_addr,
  tcipif_had_sel,
  tcipif_had_wdata,
  tcipif_had_write,
  tclk,
  trst_b
);

// &Ports; @22
input           bmu_had_acc_err;
input           bmu_had_grant;
input   [31:0]  bmu_had_rdata;
input           bmu_had_trans_cmplt;
input           clk_en;
input   [31:0]  cp0_had_cpuid_idx0;
input   [1 :0]  cp0_had_lpmd_b;
input   [31:0]  cp0_had_mcause_data;
input           cp0_had_pcfifo_wen;
input           cp0_yy_mach_mode;
input           forever_cpuclk;
input           hadrst_b;
input           idu_had_id_chgflw_inst;
input   [8 :0]  idu_had_id_inst_bkpt;
input           idu_had_no_op;
input           iu_xx_no_op;
input           lsu_xx_no_op;
input           pad_had_jtg_tms_i;
input           pad_yy_gate_clk_en_b;
input           rtu_had_data_bkpta_vld;
input           rtu_had_data_bkptb_vld;
input           rtu_had_data_bkptc_vld;
input           rtu_had_data_bkptd_vld;
input           rtu_had_data_bkpte_vld;
input           rtu_had_dbg_disable_for_tee;
input           rtu_had_ex1_data_bkpta_vld;
input           rtu_had_ex1_data_bkptb_vld;
input           rtu_had_ex1_data_bkptc_vld;
input           rtu_had_ex1_data_bkptd_vld;
input           rtu_had_ex1_data_bkpte_vld;
input           rtu_had_ex1_inst_bkpta_vld;
input           rtu_had_ex1_inst_bkptb_vld;
input           rtu_had_ex1_inst_bkptc_vld;
input           rtu_had_ex1_inst_bkptd_vld;
input           rtu_had_ex1_inst_bkpte_vld;
input           rtu_had_ex1_inst_ld;
input           rtu_had_ex1_spec_fail;
input           rtu_had_ex1_split;
input           rtu_had_inst_bkpta_vld;
input           rtu_had_inst_bkptb_vld;
input           rtu_had_inst_bkptc_vld;
input           rtu_had_inst_bkptd_vld;
input           rtu_had_inst_bkpte_vld;
input           rtu_had_inst_ld;
input           rtu_had_int_ack;
input           rtu_had_rst_dbgreq_ack;
input           rtu_had_xx_bkpt_inst;
input           rtu_had_xx_chgflow;
input   [31:0]  rtu_had_xx_data;
input           rtu_had_xx_data_vld;
input           rtu_had_xx_dbg_ack_pc;
input   [31:0]  rtu_had_xx_next_pc;
input           rtu_had_xx_retire;
input           rtu_had_xx_retire_normal;
input           rtu_had_xx_retire_normal_for_dbg;
input   [31:0]  rtu_had_xx_retire_pc;
input           rtu_had_xx_split;
input           rtu_xx_no_op;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_flush;
input           rtu_yy_xx_retire;
input           sysio_had_sdb_req_b;
input   [15:0]  tcipif_had_addr;
input           tcipif_had_sel;
input   [31:0]  tcipif_had_wdata;
input           tcipif_had_write;
input           tclk;
input           trst_b;
output  [31:0]  had_bmu_addr;
output  [2 :0]  had_bmu_burst;
output  [3 :0]  had_bmu_prot;
output          had_bmu_req;
output          had_bmu_seq;
output  [1 :0]  had_bmu_size;
output  [31:0]  had_bmu_wdata;
output          had_bmu_write;
output  [31:0]  had_cp0_mcause_data;
output          had_cp0_xx_dbg;
output  [8 :0]  had_idu_id_inst_bkpt;
output          had_idu_id_inst_bkpt_brir;
output          had_idu_id_inst_bkpt_hit;
output  [31:0]  had_idu_wbbr_data;
output          had_idu_wbbr_vld;
output  [31:0]  had_ifu_ir;
output          had_ifu_ir_vld;
output  [31:0]  had_ifu_pc;
output  [1 :0]  had_pad_jdb_pm;
output          had_pad_jtg_tms_o;
output          had_pad_jtg_tms_oe;
output          had_rtu_async_dbgreq;
output          had_rtu_data_bkpt_dbgreq;
output          had_rtu_data_bkpt_dbgreq_raw;
output          had_rtu_ex1_bkpt_potential;
output          had_rtu_ex1_inst_bkpt_dbgreq;
output          had_rtu_ex1_trace_potential;
output          had_rtu_fdb;
output          had_rtu_hw_dbgreq;
output          had_rtu_inst_bkpt_dbgreq;
output          had_rtu_rst_dbgreq;
output          had_rtu_trace_dbgreq;
output          had_rtu_trace_dbgreq_raw;
output          had_rtu_xx_tme;
output          had_tcipif_cmplt;
output  [31:0]  had_tcipif_rdata;
output  [31:0]  had_yy_xx_bkpta_base;
output  [7 :0]  had_yy_xx_bkpta_mask;
output          had_yy_xx_bkpta_rc;
output  [31:0]  had_yy_xx_bkptb_base;
output  [7 :0]  had_yy_xx_bkptb_mask;
output          had_yy_xx_bkptb_rc;
output  [31:0]  had_yy_xx_bkptc_base;
output  [7 :0]  had_yy_xx_bkptc_mask;
output  [31:0]  had_yy_xx_bkptd_base;
output  [7 :0]  had_yy_xx_bkptd_mask;
output  [31:0]  had_yy_xx_bkpte_base;
output  [7 :0]  had_yy_xx_bkpte_mask;
output          had_yy_xx_dbg;
output          had_yy_xx_exit_dbg;

// &Regs; @23
reg     [31:0]  regs_cpu_data_flop;
reg             tcip_read_flop;

// &Wires; @24
wire            bkpta_cnt_eq_0;
wire            bkpta_cnt_ls_3;
wire            bkpta_ctrl_data_req;
wire            bkpta_ctrl_data_req_raw;
wire            bkpta_ctrl_ex_data_req_ls_1;
wire            bkpta_ctrl_ex_inst_req;
wire            bkpta_ctrl_id_inst_req;
wire            bkpta_ctrl_inst_req;
wire    [7 :0]  bkpta_regs_cnt;
wire            bkptb_cnt_eq_0;
wire            bkptb_cnt_ls_3;
wire            bkptb_ctrl_data_req;
wire            bkptb_ctrl_data_req_raw;
wire            bkptb_ctrl_ex_data_req_ls_1;
wire            bkptb_ctrl_ex_inst_req;
wire            bkptb_ctrl_id_inst_req;
wire            bkptb_ctrl_inst_req;
wire    [7 :0]  bkptb_regs_cnt;
wire            bmu_had_acc_err;
wire            bmu_had_grant;
wire    [31:0]  bmu_had_rdata;
wire            bmu_had_trans_cmplt;
wire            clk_en;
wire    [31:0]  cp0_had_cpuid_idx0;
wire    [1 :0]  cp0_had_lpmd_b;
wire    [31:0]  cp0_had_mcause_data;
wire            cp0_had_pcfifo_wen;
wire            cp0_yy_mach_mode;
wire            cpuclk;
wire            ctrl_bkpt_inst_bkpt_req;
wire            ctrl_bkpta_en;
wire            ctrl_bkptb_en;
wire            ctrl_bkptc_en;
wire            ctrl_bkptd_en;
wire            ctrl_bkpte_en;
wire            ctrl_pcfifo_ren;
wire            ctrl_pcfifo_wen;
wire            ctrl_regs_bkpta_vld;
wire            ctrl_regs_bkptb_vld;
wire            ctrl_regs_bkptc_vld;
wire            ctrl_regs_bkptd_vld;
wire            ctrl_regs_bkpte_vld;
wire            ctrl_regs_exit_dbg;
wire            ctrl_regs_freeze_pcfifo;
wire            ctrl_regs_set_sqa;
wire            ctrl_regs_set_sqb;
wire            ctrl_regs_update_adro;
wire            ctrl_regs_update_dro;
wire            ctrl_regs_update_mbo;
wire            ctrl_regs_update_rsto;
wire            ctrl_regs_update_swo;
wire            ctrl_regs_update_to;
wire            ctrl_trace_en;
wire            ctrl_trace_en_raw;
wire    [31:0]  dacsr_reg;
wire    [31:0]  darwr_reg;
wire    [31:0]  datr_reg;
wire    [31:0]  ddc_regs_daddr;
wire    [31:0]  ddc_regs_ddata;
wire            ddc_regs_ffy;
wire    [31:0]  ddc_regs_ir;
wire            ddc_regs_update_csr;
wire            ddc_regs_update_wbbr;
wire    [31:0]  ddc_regs_wbbr;
wire            ddc_xx_update_ir;
wire            forever_cpuclk;
wire            hacr_sm_read;
wire            hacr_xx_baba_sel;
wire            hacr_xx_babb_sel;
wire            hacr_xx_babc_sel;
wire            hacr_xx_babd_sel;
wire            hacr_xx_babe_sel;
wire            hacr_xx_babf_sel;
wire            hacr_xx_babg_sel;
wire            hacr_xx_babh_sel;
wire            hacr_xx_babi_sel;
wire            hacr_xx_bama_sel;
wire            hacr_xx_bamb_sel;
wire            hacr_xx_bamc_sel;
wire            hacr_xx_bamd_sel;
wire            hacr_xx_bame_sel;
wire            hacr_xx_bamf_sel;
wire            hacr_xx_bamg_sel;
wire            hacr_xx_bamh_sel;
wire            hacr_xx_bami_sel;
wire            hacr_xx_bsel_sel;
wire            hacr_xx_bypass_sel;
wire            hacr_xx_csr_sel;
wire            hacr_xx_dacsr_sel;
wire            hacr_xx_daddr_sel;
wire            hacr_xx_darwr_sel;
wire            hacr_xx_datr_sel;
wire            hacr_xx_ddata_sel;
wire            hacr_xx_ex;
wire            hacr_xx_go;
wire            hacr_xx_hcr_sel;
wire            hacr_xx_hsr_sel;
wire            hacr_xx_id_sel;
wire            hacr_xx_ir_sel;
wire            hacr_xx_mbca_sel;
wire            hacr_xx_mbcb_sel;
wire            hacr_xx_mbir_sel;
wire            hacr_xx_otc_sel;
wire            hacr_xx_pc_sel;
wire            hacr_xx_pcfifo_sel;
wire            hacr_xx_psr_sel;
wire            hacr_xx_wbbr_sel;
wire    [31:0]  hacr_xx_wdata;
wire    [31:0]  had_bmu_addr;
wire    [2 :0]  had_bmu_burst;
wire    [3 :0]  had_bmu_prot;
wire            had_bmu_req;
wire            had_bmu_seq;
wire    [1 :0]  had_bmu_size;
wire    [31:0]  had_bmu_wdata;
wire            had_bmu_write;
wire    [31:0]  had_cp0_mcause_data;
wire            had_cp0_xx_dbg;
wire    [8 :0]  had_idu_id_inst_bkpt;
wire            had_idu_id_inst_bkpt_brir;
wire            had_idu_id_inst_bkpt_hit;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire    [31:0]  had_ifu_pc;
wire    [1 :0]  had_pad_jdb_pm;
wire            had_pad_jtg_tms_o;
wire            had_pad_jtg_tms_oe;
wire            had_regs_clk;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_ex1_trace_potential;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_rtu_xx_tme;
wire            had_tcipif_cmplt;
wire    [31:0]  had_tcipif_rdata;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire    [6 :0]  had_yy_xx_bxen;
wire            had_yy_xx_dbg;
wire            had_yy_xx_dbg_en;
wire            had_yy_xx_exit_dbg;
wire            hadrst_b;
wire            idu_had_id_chgflw_inst;
wire    [8 :0]  idu_had_id_inst_bkpt;
wire            idu_had_no_op;
wire            io_ctrl_jdb_req_b;
wire            io_serial_tdi;
wire            io_sm_tap_en;
wire            iu_xx_no_op;
wire            lite_bkptc_ctrl_data_req;
wire            lite_bkptc_ctrl_data_req_raw;
wire            lite_bkptc_ctrl_ex_data_req;
wire            lite_bkptc_ctrl_ex_inst_req;
wire            lite_bkptc_ctrl_id_inst_req;
wire            lite_bkptc_ctrl_inst_req;
wire            lite_bkptd_ctrl_data_req;
wire            lite_bkptd_ctrl_data_req_raw;
wire            lite_bkptd_ctrl_ex_data_req;
wire            lite_bkptd_ctrl_ex_inst_req;
wire            lite_bkptd_ctrl_id_inst_req;
wire            lite_bkptd_ctrl_inst_req;
wire            lite_bkpte_ctrl_data_req;
wire            lite_bkpte_ctrl_data_req_raw;
wire            lite_bkpte_ctrl_ex_data_req;
wire            lite_bkpte_ctrl_ex_inst_req;
wire            lite_bkpte_ctrl_id_inst_req;
wire            lite_bkpte_ctrl_inst_req;
wire            lsu_xx_no_op;
wire            pad_had_jtag2_sel;
wire            pad_had_jtg_tms_i;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  pcfifo_regs_data;
wire    [4 :0]  regs_bkpta_bc;
wire    [4 :0]  regs_bkptb_bc;
wire    [31:0]  regs_cpu_data;
wire            regs_ctrl_adr;
wire            regs_ctrl_dr;
wire            regs_ctrl_fdb;
wire            regs_ctrl_frzc;
wire            regs_ctrl_had_int_on;
wire            regs_ctrl_pcfifo_frozen;
wire            regs_ctrl_sqa;
wire            regs_ctrl_sqb;
wire    [1 :0]  regs_ctrl_sqc;
wire            regs_ctrl_tme;
wire            regs_ddma_ddae;
wire    [7 :0]  regs_hacr_bsel;
wire    [1 :0]  regs_io_pm;
wire    [31:0]  regs_serial_data;
wire            regs_xx_ddc_en;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_had_xx_split;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_retire;
wire            serial_io_tdo;
wire    [31:0]  serial_xx_data;
wire            sm_ctrl_exit_dbg;
wire            sm_io_tdo_en;
wire            sm_io_tms_oe;
wire            sm_regs_capture_dr_en;
wire            sm_serial_capture_dr;
wire            sm_serial_shift_dr;
wire            sm_serial_shift_ir;
wire            sm_serial_shift_par;
wire            sm_serial_shift_sync;
wire            sm_xx_srst_vld;
wire            sm_xx_tap_on;
wire            sm_xx_update_dr_en;
wire            sm_xx_update_ir_en;
wire            sm_xx_update_reg_en;
wire            sm_xx_write_en;
wire            sysio_had_sdb_req_b;
wire            tcip_had_sel;
wire    [15:0]  tcipif_had_addr;
wire            tcipif_had_sel;
wire    [31:0]  tcipif_had_wdata;
wire            tcipif_had_write;
wire            tcipif_update_dr;
wire            tclk;
wire            trace_ctrl_req;
wire            trace_ctrl_req_ls_1;
wire            trace_ctrl_req_raw;
wire    [7 :0]  trace_regs_otc;
wire            trst_b;



assign tcip_had_sel           = tcipif_had_sel;
assign tcipif_update_dr       = tcip_had_sel && tcipif_had_write;
assign had_tcipif_cmplt       = tcip_had_sel && tcipif_had_write || tcip_read_flop;

always @ (posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    tcip_read_flop <= 1'b0;
  else if (tcip_had_sel && !tcipif_had_write && !tcip_read_flop)
    tcip_read_flop <= 1'b1;
  else
    tcip_read_flop <= 1'b0;
end

always @ (posedge cpuclk)
begin
  if (tcip_had_sel && !tcipif_had_write)
    regs_cpu_data_flop[31:0] <= regs_cpu_data[31:0];
end

assign had_tcipif_rdata[31:0] = regs_cpu_data_flop[31:0];



// &Force("output","had_rtu_inst_bkpt_dbgreq"); @58

// &Instance("gated_clk_cell", "x_pa_had_gated_clk"); @60
gated_clk_cell  x_pa_had_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (cpuclk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (sm_xx_tap_on        ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in                (forever_cpuclk      ), @61
//          .clk_out               (cpuclk              ), @62
//          .external_en           (1'b0                ), @63
//          .global_en             (1'b1                ), @64
//          .local_en              (1'b0                ), @65
//          .module_en             (sm_xx_tap_on        ) @66
//         ); @67










// &Force("bus", "idu_had_id_inst_bkpt", 8, 0); @78

// &Instance("pa_had_bkpt", "x_pa_had_bkpta"); @80
pa_had_bkpt  x_pa_had_bkpta (
  .bkpt_ctrl_cnt_eq_0               (bkpta_cnt_eq_0                  ),
  .bkpt_ctrl_cnt_ls_3               (bkpta_cnt_ls_3                  ),
  .bkpt_ctrl_data_req               (bkpta_ctrl_data_req             ),
  .bkpt_ctrl_data_req_raw           (bkpta_ctrl_data_req_raw         ),
  .bkpt_ctrl_ex_data_req_ls_1       (bkpta_ctrl_ex_data_req_ls_1     ),
  .bkpt_ctrl_ex_inst_req            (bkpta_ctrl_ex_inst_req          ),
  .bkpt_ctrl_id_inst_req            (bkpta_ctrl_id_inst_req          ),
  .bkpt_ctrl_inst_req               (bkpta_ctrl_inst_req             ),
  .bkpt_regs_cnt                    (bkpta_regs_cnt                  ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .ctrl_bkpt_en                     (ctrl_bkpta_en                   ),
  .ctrl_bkpt_inst_bkpt_req          (ctrl_bkpt_inst_bkpt_req         ),
  .hacr_xx_bkpt_cnt_sel             (hacr_xx_mbca_sel                ),
  .hacr_xx_wdata                    (hacr_xx_wdata                   ),
  .had_regs_clk                     (had_regs_clk                    ),
  .hadrst_b                         (hadrst_b                        ),
  .idu_had_id_chgflw_inst           (idu_had_id_chgflw_inst          ),
  .idu_had_id_inst_bkpt_vld         (idu_had_id_inst_bkpt[0]         ),
  .regs_bkpt_bc                     (regs_bkpta_bc                   ),
  .rtu_had_data_bkpt_vld            (rtu_had_data_bkpta_vld          ),
  .rtu_had_ex1_data_bkpt_vld        (rtu_had_ex1_data_bkpta_vld      ),
  .rtu_had_ex1_inst_bkpt_vld        (rtu_had_ex1_inst_bkpta_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpt_vld            (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .sm_xx_update_reg_en              (sm_xx_update_reg_en             )
);

// &Connect(.bkpt_ctrl_cnt         (bkpta_ctrl_cnt         ), @81
//          .bkpt_ctrl_data_req    (bkpta_ctrl_data_req    ), @82
//          .bkpt_ctrl_data_req_raw (bkpta_ctrl_data_req_raw ), @83
//          .bkpt_ctrl_need_retire (bkpta_ctrl_need_retire ), @84
//          .bkpt_ctrl_inst_req    (bkpta_ctrl_inst_req    ), @85
//          .bkpt_regs_cnt         (bkpta_regs_cnt         ), @86
//          .bkpt_ctrl_cnt_eq_0    (bkpta_cnt_eq_0    ), @87
//          .bkpt_ctrl_cnt_ls_3    (bkpta_cnt_ls_3         ), @88
//          .regs_bkpt_bc          (regs_bkpta_bc          ), @89
//          .ctrl_bkpt_en          (ctrl_bkpta_en          ), @90
//          .bkpt_ctrl_ex_data_req_ls_1(bkpta_ctrl_ex_data_req_ls_1          ), @91
//          .bkpt_ctrl_ex_inst_req (bkpta_ctrl_ex_inst_req ), @92
//          .bkpt_ctrl_id_inst_req (bkpta_ctrl_id_inst_req ), @93
//          .hacr_xx_bkpt_cnt_sel  (hacr_xx_mbca_sel       ), @94
//          .idu_had_id_inst_bkpt_vld (idu_had_id_inst_bkpt[0] ), @95
//          .rtu_had_ex1_inst_bkpt_vld (rtu_had_ex1_inst_bkpta_vld ), @96
//          .rtu_had_ex1_data_bkpt_vld (rtu_had_ex1_data_bkpta_vld ), @97
//          .rtu_had_inst_bkpt_vld (rtu_had_inst_bkpta_vld ), @98
//          .rtu_had_data_bkpt_vld (rtu_had_data_bkpta_vld ) @99
//         ); @100

// &Instance("pa_had_bkpt", "x_pa_had_bkptb"); @102
pa_had_bkpt  x_pa_had_bkptb (
  .bkpt_ctrl_cnt_eq_0               (bkptb_cnt_eq_0                  ),
  .bkpt_ctrl_cnt_ls_3               (bkptb_cnt_ls_3                  ),
  .bkpt_ctrl_data_req               (bkptb_ctrl_data_req             ),
  .bkpt_ctrl_data_req_raw           (bkptb_ctrl_data_req_raw         ),
  .bkpt_ctrl_ex_data_req_ls_1       (bkptb_ctrl_ex_data_req_ls_1     ),
  .bkpt_ctrl_ex_inst_req            (bkptb_ctrl_ex_inst_req          ),
  .bkpt_ctrl_id_inst_req            (bkptb_ctrl_id_inst_req          ),
  .bkpt_ctrl_inst_req               (bkptb_ctrl_inst_req             ),
  .bkpt_regs_cnt                    (bkptb_regs_cnt                  ),
  .cp0_yy_mach_mode                 (cp0_yy_mach_mode                ),
  .ctrl_bkpt_en                     (ctrl_bkptb_en                   ),
  .ctrl_bkpt_inst_bkpt_req          (ctrl_bkpt_inst_bkpt_req         ),
  .hacr_xx_bkpt_cnt_sel             (hacr_xx_mbcb_sel                ),
  .hacr_xx_wdata                    (hacr_xx_wdata                   ),
  .had_regs_clk                     (had_regs_clk                    ),
  .hadrst_b                         (hadrst_b                        ),
  .idu_had_id_chgflw_inst           (idu_had_id_chgflw_inst          ),
  .idu_had_id_inst_bkpt_vld         (idu_had_id_inst_bkpt[1]         ),
  .regs_bkpt_bc                     (regs_bkptb_bc                   ),
  .rtu_had_data_bkpt_vld            (rtu_had_data_bkptb_vld          ),
  .rtu_had_ex1_data_bkpt_vld        (rtu_had_ex1_data_bkptb_vld      ),
  .rtu_had_ex1_inst_bkpt_vld        (rtu_had_ex1_inst_bkptb_vld      ),
  .rtu_had_ex1_inst_ld              (rtu_had_ex1_inst_ld             ),
  .rtu_had_ex1_spec_fail            (rtu_had_ex1_spec_fail           ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_inst_bkpt_vld            (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .sm_xx_update_reg_en              (sm_xx_update_reg_en             )
);

// &Connect(.bkpt_ctrl_cnt         (bkptb_ctrl_cnt         ), @103
//          .bkpt_ctrl_data_req    (bkptb_ctrl_data_req    ), @104
//          .bkpt_ctrl_data_req_raw (bkptb_ctrl_data_req_raw ), @105
//          .bkpt_ctrl_need_retire (bkptb_ctrl_need_retire ), @106
//          .bkpt_ctrl_inst_req    (bkptb_ctrl_inst_req    ), @107
//          .bkpt_regs_cnt         (bkptb_regs_cnt         ), @108
//          .bkpt_ctrl_cnt_eq_0    (bkptb_cnt_eq_0    ), @109
//          .bkpt_ctrl_cnt_ls_3    (bkptb_cnt_ls_3         ), @110
//          .regs_bkpt_bc          (regs_bkptb_bc          ), @111
//          .ctrl_bkpt_en          (ctrl_bkptb_en          ), @112
//          .bkpt_ctrl_ex_data_req_ls_1(bkptb_ctrl_ex_data_req_ls_1          ), @113
//          .bkpt_ctrl_ex_inst_req (bkptb_ctrl_ex_inst_req ), @114
//          .bkpt_ctrl_id_inst_req (bkptb_ctrl_id_inst_req ), @115
//          .hacr_xx_bkpt_cnt_sel  (hacr_xx_mbcb_sel       ), @116
//          .idu_had_id_inst_bkpt_vld (idu_had_id_inst_bkpt[1] ), @117
//          .rtu_had_ex1_inst_bkpt_vld (rtu_had_ex1_inst_bkptb_vld ), @118
//          .rtu_had_ex1_data_bkpt_vld (rtu_had_ex1_data_bkptb_vld ), @119
//          .rtu_had_inst_bkpt_vld (rtu_had_inst_bkptb_vld ), @120
//          .rtu_had_data_bkpt_vld (rtu_had_data_bkptb_vld ) @121
//         ); @122

// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptc"); @125
pa_had_inst_bkpt_lite  x_pa_had_lite_bkptc (
  .ctrl_bkpt_en                 (ctrl_bkptc_en               ),
  .idu_had_id_inst_bkpt_vld     (idu_had_id_inst_bkpt[2]     ),
  .lite_bkpt_ctrl_data_req      (lite_bkptc_ctrl_data_req    ),
  .lite_bkpt_ctrl_data_req_raw  (lite_bkptc_ctrl_data_req_raw),
  .lite_bkpt_ctrl_ex_data_req   (lite_bkptc_ctrl_ex_data_req ),
  .lite_bkpt_ctrl_ex_inst_req   (lite_bkptc_ctrl_ex_inst_req ),
  .lite_bkpt_ctrl_id_inst_req   (lite_bkptc_ctrl_id_inst_req ),
  .lite_bkpt_ctrl_inst_req      (lite_bkptc_ctrl_inst_req    ),
  .rtu_had_data_bkpt_vld        (rtu_had_data_bkptc_vld      ),
  .rtu_had_ex1_data_bkpt_vld    (rtu_had_ex1_data_bkptc_vld  ),
  .rtu_had_ex1_inst_bkpt_vld    (rtu_had_ex1_inst_bkptc_vld  ),
  .rtu_had_ex1_split            (rtu_had_ex1_split           ),
  .rtu_had_inst_bkpt_vld        (rtu_had_inst_bkptc_vld      ),
  .rtu_yy_xx_dbgon              (rtu_yy_xx_dbgon             )
);

// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptc_ctrl_data_req    ), @126
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptc_ctrl_data_req_raw), @127
//          .lite_bkpt_ctrl_inst_req       (lite_bkptc_ctrl_inst_req    ), @128
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptc_ctrl_ex_data_req ), @129
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptc_ctrl_ex_inst_req ), @130
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptc_ctrl_id_inst_req ), @131
//          .ctrl_bkpt_en                  (ctrl_bkptc_en          ), @132
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[2] ), @133
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptc_vld ), @134
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptc_vld ), @135
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptc_vld ), @136
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptc_vld ) @137
//         ); @138

// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptd"); @140
pa_had_inst_bkpt_lite  x_pa_had_lite_bkptd (
  .ctrl_bkpt_en                 (ctrl_bkptd_en               ),
  .idu_had_id_inst_bkpt_vld     (idu_had_id_inst_bkpt[3]     ),
  .lite_bkpt_ctrl_data_req      (lite_bkptd_ctrl_data_req    ),
  .lite_bkpt_ctrl_data_req_raw  (lite_bkptd_ctrl_data_req_raw),
  .lite_bkpt_ctrl_ex_data_req   (lite_bkptd_ctrl_ex_data_req ),
  .lite_bkpt_ctrl_ex_inst_req   (lite_bkptd_ctrl_ex_inst_req ),
  .lite_bkpt_ctrl_id_inst_req   (lite_bkptd_ctrl_id_inst_req ),
  .lite_bkpt_ctrl_inst_req      (lite_bkptd_ctrl_inst_req    ),
  .rtu_had_data_bkpt_vld        (rtu_had_data_bkptd_vld      ),
  .rtu_had_ex1_data_bkpt_vld    (rtu_had_ex1_data_bkptd_vld  ),
  .rtu_had_ex1_inst_bkpt_vld    (rtu_had_ex1_inst_bkptd_vld  ),
  .rtu_had_ex1_split            (rtu_had_ex1_split           ),
  .rtu_had_inst_bkpt_vld        (rtu_had_inst_bkptd_vld      ),
  .rtu_yy_xx_dbgon              (rtu_yy_xx_dbgon             )
);

// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptd_ctrl_data_req    ), @141
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptd_ctrl_data_req_raw), @142
//          .lite_bkpt_ctrl_inst_req       (lite_bkptd_ctrl_inst_req    ), @143
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptd_ctrl_ex_data_req ), @144
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptd_ctrl_ex_inst_req ), @145
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptd_ctrl_id_inst_req ), @146
//          .ctrl_bkpt_en                  (ctrl_bkptd_en          ), @147
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[3] ), @148
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptd_vld ), @149
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptd_vld ), @150
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptd_vld ), @151
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptd_vld ) @152
//         ); @153

// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkpte"); @155
pa_had_inst_bkpt_lite  x_pa_had_lite_bkpte (
  .ctrl_bkpt_en                 (ctrl_bkpte_en               ),
  .idu_had_id_inst_bkpt_vld     (idu_had_id_inst_bkpt[4]     ),
  .lite_bkpt_ctrl_data_req      (lite_bkpte_ctrl_data_req    ),
  .lite_bkpt_ctrl_data_req_raw  (lite_bkpte_ctrl_data_req_raw),
  .lite_bkpt_ctrl_ex_data_req   (lite_bkpte_ctrl_ex_data_req ),
  .lite_bkpt_ctrl_ex_inst_req   (lite_bkpte_ctrl_ex_inst_req ),
  .lite_bkpt_ctrl_id_inst_req   (lite_bkpte_ctrl_id_inst_req ),
  .lite_bkpt_ctrl_inst_req      (lite_bkpte_ctrl_inst_req    ),
  .rtu_had_data_bkpt_vld        (rtu_had_data_bkpte_vld      ),
  .rtu_had_ex1_data_bkpt_vld    (rtu_had_ex1_data_bkpte_vld  ),
  .rtu_had_ex1_inst_bkpt_vld    (rtu_had_ex1_inst_bkpte_vld  ),
  .rtu_had_ex1_split            (rtu_had_ex1_split           ),
  .rtu_had_inst_bkpt_vld        (rtu_had_inst_bkpte_vld      ),
  .rtu_yy_xx_dbgon              (rtu_yy_xx_dbgon             )
);

// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkpte_ctrl_data_req    ), @156
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkpte_ctrl_data_req_raw), @157
//          .lite_bkpt_ctrl_inst_req       (lite_bkpte_ctrl_inst_req    ), @158
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkpte_ctrl_ex_data_req ), @159
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkpte_ctrl_ex_inst_req ), @160
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkpte_ctrl_id_inst_req ), @161
//          .ctrl_bkpt_en                  (ctrl_bkpte_en          ), @162
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[4] ), @163
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkpte_vld ), @164
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkpte_vld ), @165
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkpte_vld ), @166
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkpte_vld ) @167
//         ); @168

// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptf"); @171
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptf_ctrl_data_req    ), @172
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptf_ctrl_data_req_raw), @173
//          .lite_bkpt_ctrl_inst_req       (lite_bkptf_ctrl_inst_req    ), @174
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptf_ctrl_ex_data_req ), @175
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptf_ctrl_ex_inst_req ), @176
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptf_ctrl_id_inst_req ), @177
//          .ctrl_bkpt_en                  (ctrl_bkptf_en          ), @178
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[5] ), @179
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptf_vld ), @180
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptf_vld ), @181
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptf_vld ), @182
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptf_vld ) @183
//         ); @184
// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptg"); @186
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptg_ctrl_data_req    ), @187
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptg_ctrl_data_req_raw), @188
//          .lite_bkpt_ctrl_inst_req       (lite_bkptg_ctrl_inst_req    ), @189
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptg_ctrl_ex_data_req ), @190
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptg_ctrl_ex_inst_req ), @191
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptg_ctrl_id_inst_req ), @192
//          .ctrl_bkpt_en                  (ctrl_bkptg_en          ), @193
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[6] ), @194
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptg_vld ), @195
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptg_vld ), @196
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptg_vld ), @197
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptg_vld ) @198
//         ); @199
// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkpth"); @201
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkpth_ctrl_data_req    ), @202
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkpth_ctrl_data_req_raw), @203
//          .lite_bkpt_ctrl_inst_req       (lite_bkpth_ctrl_inst_req    ), @204
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkpth_ctrl_ex_data_req ), @205
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkpth_ctrl_ex_inst_req ), @206
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkpth_ctrl_id_inst_req ), @207
//          .ctrl_bkpt_en                  (ctrl_bkpth_en          ), @208
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[7] ), @209
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkpth_vld ), @210
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkpth_vld ), @211
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkpth_vld ), @212
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkpth_vld ) @213
//         ); @214
// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkpti"); @216
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkpti_ctrl_data_req    ), @217
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkpti_ctrl_data_req_raw), @218
//          .lite_bkpt_ctrl_inst_req       (lite_bkpti_ctrl_inst_req    ), @219
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkpti_ctrl_ex_data_req ), @220
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkpti_ctrl_ex_inst_req ), @221
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkpti_ctrl_id_inst_req ), @222
//          .ctrl_bkpt_en                  (ctrl_bkpti_en          ), @223
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[8] ), @224
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkpti_vld ), @225
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkpti_vld ), @226
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkpti_vld ), @227
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkpti_vld ) @228
//         ); @229
// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptf"); @232
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptf_ctrl_data_req    ), @233
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptf_ctrl_data_req_raw), @234
//          .lite_bkpt_ctrl_inst_req       (lite_bkptf_ctrl_inst_req    ), @235
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptf_ctrl_ex_data_req ), @236
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptf_ctrl_ex_inst_req ), @237
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptf_ctrl_id_inst_req ), @238
//          .ctrl_bkpt_en                  (ctrl_bkptf_en          ), @239
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[5] ), @240
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptf_vld ), @241
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptf_vld ), @242
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptf_vld ), @243
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptf_vld ) @244
//         ); @245
// &Instance("pa_had_inst_bkpt_lite", "x_pa_had_lite_bkptg"); @247
// &Connect(.lite_bkpt_ctrl_data_req       (lite_bkptg_ctrl_data_req    ), @248
//          .lite_bkpt_ctrl_data_req_raw   (lite_bkptg_ctrl_data_req_raw), @249
//          .lite_bkpt_ctrl_inst_req       (lite_bkptg_ctrl_inst_req    ), @250
//          .lite_bkpt_ctrl_ex_data_req    (lite_bkptg_ctrl_ex_data_req ), @251
//          .lite_bkpt_ctrl_ex_inst_req    (lite_bkptg_ctrl_ex_inst_req ), @252
//          .lite_bkpt_ctrl_id_inst_req    (lite_bkptg_ctrl_id_inst_req ), @253
//          .ctrl_bkpt_en                  (ctrl_bkptg_en          ), @254
//          .idu_had_id_inst_bkpt_vld      (idu_had_id_inst_bkpt[6] ), @255
//          .rtu_had_ex1_inst_bkpt_vld     (rtu_had_ex1_inst_bkptg_vld ), @256
//          .rtu_had_ex1_data_bkpt_vld     (rtu_had_ex1_data_bkptg_vld ), @257
//          .rtu_had_inst_bkpt_vld         (rtu_had_inst_bkptg_vld ), @258
//          .rtu_had_data_bkpt_vld         (rtu_had_data_bkptg_vld ) @259
//         ); @260


// &Instance("pa_had_ctrl"); @266
pa_had_ctrl  x_pa_had_ctrl (
  .bkpta_cnt_eq_0               (bkpta_cnt_eq_0              ),
  .bkpta_cnt_ls_3               (bkpta_cnt_ls_3              ),
  .bkpta_ctrl_data_req          (bkpta_ctrl_data_req         ),
  .bkpta_ctrl_data_req_raw      (bkpta_ctrl_data_req_raw     ),
  .bkpta_ctrl_ex_data_req_ls_1  (bkpta_ctrl_ex_data_req_ls_1 ),
  .bkpta_ctrl_ex_inst_req       (bkpta_ctrl_ex_inst_req      ),
  .bkpta_ctrl_id_inst_req       (bkpta_ctrl_id_inst_req      ),
  .bkpta_ctrl_inst_req          (bkpta_ctrl_inst_req         ),
  .bkptb_cnt_eq_0               (bkptb_cnt_eq_0              ),
  .bkptb_cnt_ls_3               (bkptb_cnt_ls_3              ),
  .bkptb_ctrl_data_req          (bkptb_ctrl_data_req         ),
  .bkptb_ctrl_data_req_raw      (bkptb_ctrl_data_req_raw     ),
  .bkptb_ctrl_ex_data_req_ls_1  (bkptb_ctrl_ex_data_req_ls_1 ),
  .bkptb_ctrl_ex_inst_req       (bkptb_ctrl_ex_inst_req      ),
  .bkptb_ctrl_id_inst_req       (bkptb_ctrl_id_inst_req      ),
  .bkptb_ctrl_inst_req          (bkptb_ctrl_inst_req         ),
  .cp0_had_pcfifo_wen           (cp0_had_pcfifo_wen          ),
  .cpuclk                       (cpuclk                      ),
  .ctrl_bkpt_inst_bkpt_req      (ctrl_bkpt_inst_bkpt_req     ),
  .ctrl_bkpta_en                (ctrl_bkpta_en               ),
  .ctrl_bkptb_en                (ctrl_bkptb_en               ),
  .ctrl_bkptc_en                (ctrl_bkptc_en               ),
  .ctrl_bkptd_en                (ctrl_bkptd_en               ),
  .ctrl_bkpte_en                (ctrl_bkpte_en               ),
  .ctrl_pcfifo_ren              (ctrl_pcfifo_ren             ),
  .ctrl_pcfifo_wen              (ctrl_pcfifo_wen             ),
  .ctrl_regs_bkpta_vld          (ctrl_regs_bkpta_vld         ),
  .ctrl_regs_bkptb_vld          (ctrl_regs_bkptb_vld         ),
  .ctrl_regs_bkptc_vld          (ctrl_regs_bkptc_vld         ),
  .ctrl_regs_bkptd_vld          (ctrl_regs_bkptd_vld         ),
  .ctrl_regs_bkpte_vld          (ctrl_regs_bkpte_vld         ),
  .ctrl_regs_exit_dbg           (ctrl_regs_exit_dbg          ),
  .ctrl_regs_freeze_pcfifo      (ctrl_regs_freeze_pcfifo     ),
  .ctrl_regs_set_sqa            (ctrl_regs_set_sqa           ),
  .ctrl_regs_set_sqb            (ctrl_regs_set_sqb           ),
  .ctrl_regs_update_adro        (ctrl_regs_update_adro       ),
  .ctrl_regs_update_dro         (ctrl_regs_update_dro        ),
  .ctrl_regs_update_mbo         (ctrl_regs_update_mbo        ),
  .ctrl_regs_update_rsto        (ctrl_regs_update_rsto       ),
  .ctrl_regs_update_swo         (ctrl_regs_update_swo        ),
  .ctrl_regs_update_to          (ctrl_regs_update_to         ),
  .ctrl_trace_en                (ctrl_trace_en               ),
  .ctrl_trace_en_raw            (ctrl_trace_en_raw           ),
  .ddc_xx_update_ir             (ddc_xx_update_ir            ),
  .hacr_xx_ex                   (hacr_xx_ex                  ),
  .hacr_xx_go                   (hacr_xx_go                  ),
  .hacr_xx_ir_sel               (hacr_xx_ir_sel              ),
  .hacr_xx_pcfifo_sel           (hacr_xx_pcfifo_sel          ),
  .had_cp0_xx_dbg               (had_cp0_xx_dbg              ),
  .had_idu_id_inst_bkpt         (had_idu_id_inst_bkpt        ),
  .had_idu_id_inst_bkpt_brir    (had_idu_id_inst_bkpt_brir   ),
  .had_idu_id_inst_bkpt_hit     (had_idu_id_inst_bkpt_hit    ),
  .had_ifu_ir_vld               (had_ifu_ir_vld              ),
  .had_regs_clk                 (had_regs_clk                ),
  .had_rtu_async_dbgreq         (had_rtu_async_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq     (had_rtu_data_bkpt_dbgreq    ),
  .had_rtu_data_bkpt_dbgreq_raw (had_rtu_data_bkpt_dbgreq_raw),
  .had_rtu_ex1_bkpt_potential   (had_rtu_ex1_bkpt_potential  ),
  .had_rtu_ex1_inst_bkpt_dbgreq (had_rtu_ex1_inst_bkpt_dbgreq),
  .had_rtu_ex1_trace_potential  (had_rtu_ex1_trace_potential ),
  .had_rtu_fdb                  (had_rtu_fdb                 ),
  .had_rtu_hw_dbgreq            (had_rtu_hw_dbgreq           ),
  .had_rtu_inst_bkpt_dbgreq     (had_rtu_inst_bkpt_dbgreq    ),
  .had_rtu_rst_dbgreq           (had_rtu_rst_dbgreq          ),
  .had_rtu_trace_dbgreq         (had_rtu_trace_dbgreq        ),
  .had_rtu_trace_dbgreq_raw     (had_rtu_trace_dbgreq_raw    ),
  .had_yy_xx_bxen               (had_yy_xx_bxen              ),
  .had_yy_xx_dbg                (had_yy_xx_dbg               ),
  .had_yy_xx_dbg_en             (had_yy_xx_dbg_en            ),
  .had_yy_xx_exit_dbg           (had_yy_xx_exit_dbg          ),
  .hadrst_b                     (hadrst_b                    ),
  .io_ctrl_jdb_req_b            (io_ctrl_jdb_req_b           ),
  .lite_bkptc_ctrl_data_req     (lite_bkptc_ctrl_data_req    ),
  .lite_bkptc_ctrl_data_req_raw (lite_bkptc_ctrl_data_req_raw),
  .lite_bkptc_ctrl_ex_data_req  (lite_bkptc_ctrl_ex_data_req ),
  .lite_bkptc_ctrl_ex_inst_req  (lite_bkptc_ctrl_ex_inst_req ),
  .lite_bkptc_ctrl_id_inst_req  (lite_bkptc_ctrl_id_inst_req ),
  .lite_bkptc_ctrl_inst_req     (lite_bkptc_ctrl_inst_req    ),
  .lite_bkptd_ctrl_data_req     (lite_bkptd_ctrl_data_req    ),
  .lite_bkptd_ctrl_data_req_raw (lite_bkptd_ctrl_data_req_raw),
  .lite_bkptd_ctrl_ex_data_req  (lite_bkptd_ctrl_ex_data_req ),
  .lite_bkptd_ctrl_ex_inst_req  (lite_bkptd_ctrl_ex_inst_req ),
  .lite_bkptd_ctrl_id_inst_req  (lite_bkptd_ctrl_id_inst_req ),
  .lite_bkptd_ctrl_inst_req     (lite_bkptd_ctrl_inst_req    ),
  .lite_bkpte_ctrl_data_req     (lite_bkpte_ctrl_data_req    ),
  .lite_bkpte_ctrl_data_req_raw (lite_bkpte_ctrl_data_req_raw),
  .lite_bkpte_ctrl_ex_data_req  (lite_bkpte_ctrl_ex_data_req ),
  .lite_bkpte_ctrl_ex_inst_req  (lite_bkpte_ctrl_ex_inst_req ),
  .lite_bkpte_ctrl_id_inst_req  (lite_bkpte_ctrl_id_inst_req ),
  .lite_bkpte_ctrl_inst_req     (lite_bkpte_ctrl_inst_req    ),
  .regs_bkpta_bc                (regs_bkpta_bc               ),
  .regs_bkptb_bc                (regs_bkptb_bc               ),
  .regs_ctrl_adr                (regs_ctrl_adr               ),
  .regs_ctrl_dr                 (regs_ctrl_dr                ),
  .regs_ctrl_fdb                (regs_ctrl_fdb               ),
  .regs_ctrl_frzc               (regs_ctrl_frzc              ),
  .regs_ctrl_had_int_on         (regs_ctrl_had_int_on        ),
  .regs_ctrl_pcfifo_frozen      (regs_ctrl_pcfifo_frozen     ),
  .regs_ctrl_sqa                (regs_ctrl_sqa               ),
  .regs_ctrl_sqb                (regs_ctrl_sqb               ),
  .regs_ctrl_sqc                (regs_ctrl_sqc               ),
  .regs_ctrl_tme                (regs_ctrl_tme               ),
  .regs_xx_ddc_en               (regs_xx_ddc_en              ),
  .rtu_had_dbg_disable_for_tee  (rtu_had_dbg_disable_for_tee ),
  .rtu_had_rst_dbgreq_ack       (rtu_had_rst_dbgreq_ack      ),
  .rtu_had_xx_bkpt_inst         (rtu_had_xx_bkpt_inst        ),
  .rtu_had_xx_chgflow           (rtu_had_xx_chgflow          ),
  .rtu_had_xx_retire            (rtu_had_xx_retire           ),
  .rtu_had_xx_retire_normal     (rtu_had_xx_retire_normal    ),
  .rtu_yy_xx_dbgon              (rtu_yy_xx_dbgon             ),
  .rtu_yy_xx_retire             (rtu_yy_xx_retire            ),
  .sm_ctrl_exit_dbg             (sm_ctrl_exit_dbg            ),
  .sm_xx_update_dr_en           (sm_xx_update_dr_en          ),
  .sm_xx_update_ir_en           (sm_xx_update_ir_en          ),
  .sm_xx_write_en               (sm_xx_write_en              ),
  .sysio_had_sdb_req_b          (sysio_had_sdb_req_b         ),
  .trace_ctrl_req               (trace_ctrl_req              ),
  .trace_ctrl_req_ls_1          (trace_ctrl_req_ls_1         ),
  .trace_ctrl_req_raw           (trace_ctrl_req_raw          )
);


// &Instance("pa_had_ddc"); @268
pa_had_ddc  x_pa_had_ddc (
  .ddc_regs_daddr           (ddc_regs_daddr          ),
  .ddc_regs_ddata           (ddc_regs_ddata          ),
  .ddc_regs_ffy             (ddc_regs_ffy            ),
  .ddc_regs_ir              (ddc_regs_ir             ),
  .ddc_regs_update_csr      (ddc_regs_update_csr     ),
  .ddc_regs_update_wbbr     (ddc_regs_update_wbbr    ),
  .ddc_regs_wbbr            (ddc_regs_wbbr           ),
  .ddc_xx_update_ir         (ddc_xx_update_ir        ),
  .forever_cpuclk           (forever_cpuclk          ),
  .hacr_xx_daddr_sel        (hacr_xx_daddr_sel       ),
  .hacr_xx_ddata_sel        (hacr_xx_ddata_sel       ),
  .hacr_xx_wdata            (hacr_xx_wdata           ),
  .hadrst_b                 (hadrst_b                ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .regs_xx_ddc_en           (regs_xx_ddc_en          ),
  .rtu_had_xx_retire_normal (rtu_had_xx_retire_normal),
  .sm_xx_update_dr_en       (sm_xx_update_dr_en      ),
  .sm_xx_update_reg_en      (sm_xx_update_reg_en     )
);


// &Instance("pa_had_hacr"); @270
pa_had_hacr  x_pa_had_hacr (
  .cpuclk             (cpuclk            ),
  .hacr_sm_read       (hacr_sm_read      ),
  .hacr_xx_baba_sel   (hacr_xx_baba_sel  ),
  .hacr_xx_babb_sel   (hacr_xx_babb_sel  ),
  .hacr_xx_babc_sel   (hacr_xx_babc_sel  ),
  .hacr_xx_babd_sel   (hacr_xx_babd_sel  ),
  .hacr_xx_babe_sel   (hacr_xx_babe_sel  ),
  .hacr_xx_babf_sel   (hacr_xx_babf_sel  ),
  .hacr_xx_babg_sel   (hacr_xx_babg_sel  ),
  .hacr_xx_babh_sel   (hacr_xx_babh_sel  ),
  .hacr_xx_babi_sel   (hacr_xx_babi_sel  ),
  .hacr_xx_bama_sel   (hacr_xx_bama_sel  ),
  .hacr_xx_bamb_sel   (hacr_xx_bamb_sel  ),
  .hacr_xx_bamc_sel   (hacr_xx_bamc_sel  ),
  .hacr_xx_bamd_sel   (hacr_xx_bamd_sel  ),
  .hacr_xx_bame_sel   (hacr_xx_bame_sel  ),
  .hacr_xx_bamf_sel   (hacr_xx_bamf_sel  ),
  .hacr_xx_bamg_sel   (hacr_xx_bamg_sel  ),
  .hacr_xx_bamh_sel   (hacr_xx_bamh_sel  ),
  .hacr_xx_bami_sel   (hacr_xx_bami_sel  ),
  .hacr_xx_bsel_sel   (hacr_xx_bsel_sel  ),
  .hacr_xx_bypass_sel (hacr_xx_bypass_sel),
  .hacr_xx_csr_sel    (hacr_xx_csr_sel   ),
  .hacr_xx_dacsr_sel  (hacr_xx_dacsr_sel ),
  .hacr_xx_daddr_sel  (hacr_xx_daddr_sel ),
  .hacr_xx_darwr_sel  (hacr_xx_darwr_sel ),
  .hacr_xx_datr_sel   (hacr_xx_datr_sel  ),
  .hacr_xx_ddata_sel  (hacr_xx_ddata_sel ),
  .hacr_xx_ex         (hacr_xx_ex        ),
  .hacr_xx_go         (hacr_xx_go        ),
  .hacr_xx_hcr_sel    (hacr_xx_hcr_sel   ),
  .hacr_xx_hsr_sel    (hacr_xx_hsr_sel   ),
  .hacr_xx_id_sel     (hacr_xx_id_sel    ),
  .hacr_xx_ir_sel     (hacr_xx_ir_sel    ),
  .hacr_xx_mbca_sel   (hacr_xx_mbca_sel  ),
  .hacr_xx_mbcb_sel   (hacr_xx_mbcb_sel  ),
  .hacr_xx_mbir_sel   (hacr_xx_mbir_sel  ),
  .hacr_xx_otc_sel    (hacr_xx_otc_sel   ),
  .hacr_xx_pc_sel     (hacr_xx_pc_sel    ),
  .hacr_xx_pcfifo_sel (hacr_xx_pcfifo_sel),
  .hacr_xx_psr_sel    (hacr_xx_psr_sel   ),
  .hacr_xx_wbbr_sel   (hacr_xx_wbbr_sel  ),
  .hacr_xx_wdata      (hacr_xx_wdata     ),
  .hadrst_b           (hadrst_b          ),
  .regs_hacr_bsel     (regs_hacr_bsel    ),
  .serial_xx_data     (serial_xx_data    ),
  .sm_xx_srst_vld     (sm_xx_srst_vld    ),
  .sm_xx_update_ir_en (sm_xx_update_ir_en),
  .tcip_had_sel       (tcip_had_sel      ),
  .tcipif_had_addr    (tcipif_had_addr   ),
  .tcipif_had_wdata   (tcipif_had_wdata  ),
  .tcipif_update_dr   (tcipif_update_dr  )
);


// &Instance("pa_had_io"); @272
pa_had_io  x_pa_had_io (
  .clk_en             (clk_en            ),
  .cpuclk             (cpuclk            ),
  .had_pad_jdb_pm     (had_pad_jdb_pm    ),
  .had_pad_jtg_tms_o  (had_pad_jtg_tms_o ),
  .had_pad_jtg_tms_oe (had_pad_jtg_tms_oe),
  .hadrst_b           (hadrst_b          ),
  .io_ctrl_jdb_req_b  (io_ctrl_jdb_req_b ),
  .io_serial_tdi      (io_serial_tdi     ),
  .io_sm_tap_en       (io_sm_tap_en      ),
  .pad_had_jtg_tms_i  (pad_had_jtg_tms_i ),
  .regs_io_pm         (regs_io_pm        ),
  .rtu_yy_xx_dbgon    (rtu_yy_xx_dbgon   ),
  .serial_io_tdo      (serial_io_tdo     ),
  .sm_io_tdo_en       (sm_io_tdo_en      ),
  .sm_io_tms_oe       (sm_io_tms_oe      ),
  .sm_xx_tap_on       (sm_xx_tap_on      ),
  .tclk               (tclk              ),
  .trst_b             (trst_b            )
);


// &Instance("pa_had_pcfifo"); @275
pa_had_pcfifo  x_pa_had_pcfifo (
  .ctrl_pcfifo_ren      (ctrl_pcfifo_ren     ),
  .ctrl_pcfifo_wen      (ctrl_pcfifo_wen     ),
  .forever_cpuclk       (forever_cpuclk      ),
  .hadrst_b             (hadrst_b            ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .pcfifo_regs_data     (pcfifo_regs_data    ),
  .rtu_had_xx_next_pc   (rtu_had_xx_next_pc  ),
  .sm_xx_tap_on         (sm_xx_tap_on        )
);

// &Force("input", "rtu_had_xx_next_pc"); &Force("bus", "rtu_had_xx_next_pc", 31, 0); @277

// &Instance("pa_had_dbg_info"); @281

// &Instance("pa_had_regs"); @285
pa_had_regs  x_pa_had_regs (
  .bkpta_regs_cnt          (bkpta_regs_cnt         ),
  .bkptb_regs_cnt          (bkptb_regs_cnt         ),
  .cp0_had_cpuid_idx0      (cp0_had_cpuid_idx0     ),
  .cp0_had_lpmd_b          (cp0_had_lpmd_b         ),
  .cp0_had_mcause_data     (cp0_had_mcause_data    ),
  .cpuclk                  (cpuclk                 ),
  .ctrl_regs_bkpta_vld     (ctrl_regs_bkpta_vld    ),
  .ctrl_regs_bkptb_vld     (ctrl_regs_bkptb_vld    ),
  .ctrl_regs_bkptc_vld     (ctrl_regs_bkptc_vld    ),
  .ctrl_regs_bkptd_vld     (ctrl_regs_bkptd_vld    ),
  .ctrl_regs_bkpte_vld     (ctrl_regs_bkpte_vld    ),
  .ctrl_regs_exit_dbg      (ctrl_regs_exit_dbg     ),
  .ctrl_regs_freeze_pcfifo (ctrl_regs_freeze_pcfifo),
  .ctrl_regs_set_sqa       (ctrl_regs_set_sqa      ),
  .ctrl_regs_set_sqb       (ctrl_regs_set_sqb      ),
  .ctrl_regs_update_adro   (ctrl_regs_update_adro  ),
  .ctrl_regs_update_dro    (ctrl_regs_update_dro   ),
  .ctrl_regs_update_mbo    (ctrl_regs_update_mbo   ),
  .ctrl_regs_update_rsto   (ctrl_regs_update_rsto  ),
  .ctrl_regs_update_swo    (ctrl_regs_update_swo   ),
  .ctrl_regs_update_to     (ctrl_regs_update_to    ),
  .dacsr_reg               (dacsr_reg              ),
  .darwr_reg               (darwr_reg              ),
  .datr_reg                (datr_reg               ),
  .ddc_regs_daddr          (ddc_regs_daddr         ),
  .ddc_regs_ddata          (ddc_regs_ddata         ),
  .ddc_regs_ffy            (ddc_regs_ffy           ),
  .ddc_regs_ir             (ddc_regs_ir            ),
  .ddc_regs_update_csr     (ddc_regs_update_csr    ),
  .ddc_regs_update_wbbr    (ddc_regs_update_wbbr   ),
  .ddc_regs_wbbr           (ddc_regs_wbbr          ),
  .ddc_xx_update_ir        (ddc_xx_update_ir       ),
  .forever_cpuclk          (forever_cpuclk         ),
  .hacr_xx_baba_sel        (hacr_xx_baba_sel       ),
  .hacr_xx_babb_sel        (hacr_xx_babb_sel       ),
  .hacr_xx_babc_sel        (hacr_xx_babc_sel       ),
  .hacr_xx_babd_sel        (hacr_xx_babd_sel       ),
  .hacr_xx_babe_sel        (hacr_xx_babe_sel       ),
  .hacr_xx_babf_sel        (hacr_xx_babf_sel       ),
  .hacr_xx_babg_sel        (hacr_xx_babg_sel       ),
  .hacr_xx_babh_sel        (hacr_xx_babh_sel       ),
  .hacr_xx_babi_sel        (hacr_xx_babi_sel       ),
  .hacr_xx_bama_sel        (hacr_xx_bama_sel       ),
  .hacr_xx_bamb_sel        (hacr_xx_bamb_sel       ),
  .hacr_xx_bamc_sel        (hacr_xx_bamc_sel       ),
  .hacr_xx_bamd_sel        (hacr_xx_bamd_sel       ),
  .hacr_xx_bame_sel        (hacr_xx_bame_sel       ),
  .hacr_xx_bamf_sel        (hacr_xx_bamf_sel       ),
  .hacr_xx_bamg_sel        (hacr_xx_bamg_sel       ),
  .hacr_xx_bamh_sel        (hacr_xx_bamh_sel       ),
  .hacr_xx_bami_sel        (hacr_xx_bami_sel       ),
  .hacr_xx_bsel_sel        (hacr_xx_bsel_sel       ),
  .hacr_xx_csr_sel         (hacr_xx_csr_sel        ),
  .hacr_xx_dacsr_sel       (hacr_xx_dacsr_sel      ),
  .hacr_xx_daddr_sel       (hacr_xx_daddr_sel      ),
  .hacr_xx_darwr_sel       (hacr_xx_darwr_sel      ),
  .hacr_xx_datr_sel        (hacr_xx_datr_sel       ),
  .hacr_xx_ddata_sel       (hacr_xx_ddata_sel      ),
  .hacr_xx_hcr_sel         (hacr_xx_hcr_sel        ),
  .hacr_xx_hsr_sel         (hacr_xx_hsr_sel        ),
  .hacr_xx_id_sel          (hacr_xx_id_sel         ),
  .hacr_xx_ir_sel          (hacr_xx_ir_sel         ),
  .hacr_xx_mbca_sel        (hacr_xx_mbca_sel       ),
  .hacr_xx_mbcb_sel        (hacr_xx_mbcb_sel       ),
  .hacr_xx_mbir_sel        (hacr_xx_mbir_sel       ),
  .hacr_xx_otc_sel         (hacr_xx_otc_sel        ),
  .hacr_xx_pc_sel          (hacr_xx_pc_sel         ),
  .hacr_xx_pcfifo_sel      (hacr_xx_pcfifo_sel     ),
  .hacr_xx_psr_sel         (hacr_xx_psr_sel        ),
  .hacr_xx_wbbr_sel        (hacr_xx_wbbr_sel       ),
  .hacr_xx_wdata           (hacr_xx_wdata          ),
  .had_cp0_mcause_data     (had_cp0_mcause_data    ),
  .had_idu_wbbr_data       (had_idu_wbbr_data      ),
  .had_idu_wbbr_vld        (had_idu_wbbr_vld       ),
  .had_ifu_ir              (had_ifu_ir             ),
  .had_ifu_pc              (had_ifu_pc             ),
  .had_regs_clk            (had_regs_clk           ),
  .had_rtu_xx_tme          (had_rtu_xx_tme         ),
  .had_yy_xx_bkpta_base    (had_yy_xx_bkpta_base   ),
  .had_yy_xx_bkpta_mask    (had_yy_xx_bkpta_mask   ),
  .had_yy_xx_bkpta_rc      (had_yy_xx_bkpta_rc     ),
  .had_yy_xx_bkptb_base    (had_yy_xx_bkptb_base   ),
  .had_yy_xx_bkptb_mask    (had_yy_xx_bkptb_mask   ),
  .had_yy_xx_bkptb_rc      (had_yy_xx_bkptb_rc     ),
  .had_yy_xx_bkptc_base    (had_yy_xx_bkptc_base   ),
  .had_yy_xx_bkptc_mask    (had_yy_xx_bkptc_mask   ),
  .had_yy_xx_bkptd_base    (had_yy_xx_bkptd_base   ),
  .had_yy_xx_bkptd_mask    (had_yy_xx_bkptd_mask   ),
  .had_yy_xx_bkpte_base    (had_yy_xx_bkpte_base   ),
  .had_yy_xx_bkpte_mask    (had_yy_xx_bkpte_mask   ),
  .had_yy_xx_bxen          (had_yy_xx_bxen         ),
  .had_yy_xx_dbg_en        (had_yy_xx_dbg_en       ),
  .hadrst_b                (hadrst_b               ),
  .idu_had_no_op           (idu_had_no_op          ),
  .iu_xx_no_op             (iu_xx_no_op            ),
  .lsu_xx_no_op            (lsu_xx_no_op           ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   ),
  .pcfifo_regs_data        (pcfifo_regs_data       ),
  .regs_bkpta_bc           (regs_bkpta_bc          ),
  .regs_bkptb_bc           (regs_bkptb_bc          ),
  .regs_cpu_data           (regs_cpu_data          ),
  .regs_ctrl_adr           (regs_ctrl_adr          ),
  .regs_ctrl_dr            (regs_ctrl_dr           ),
  .regs_ctrl_fdb           (regs_ctrl_fdb          ),
  .regs_ctrl_frzc          (regs_ctrl_frzc         ),
  .regs_ctrl_had_int_on    (regs_ctrl_had_int_on   ),
  .regs_ctrl_pcfifo_frozen (regs_ctrl_pcfifo_frozen),
  .regs_ctrl_sqa           (regs_ctrl_sqa          ),
  .regs_ctrl_sqb           (regs_ctrl_sqb          ),
  .regs_ctrl_sqc           (regs_ctrl_sqc          ),
  .regs_ctrl_tme           (regs_ctrl_tme          ),
  .regs_ddma_ddae          (regs_ddma_ddae         ),
  .regs_hacr_bsel          (regs_hacr_bsel         ),
  .regs_io_pm              (regs_io_pm             ),
  .regs_serial_data        (regs_serial_data       ),
  .regs_xx_ddc_en          (regs_xx_ddc_en         ),
  .rtu_had_int_ack         (rtu_had_int_ack        ),
  .rtu_had_xx_data         (rtu_had_xx_data        ),
  .rtu_had_xx_data_vld     (rtu_had_xx_data_vld    ),
  .rtu_had_xx_dbg_ack_pc   (rtu_had_xx_dbg_ack_pc  ),
  .rtu_had_xx_retire_pc    (rtu_had_xx_retire_pc   ),
  .rtu_xx_no_op            (rtu_xx_no_op           ),
  .rtu_yy_xx_dbgon         (rtu_yy_xx_dbgon        ),
  .serial_xx_data          (serial_xx_data         ),
  .sm_xx_srst_vld          (sm_xx_srst_vld         ),
  .sm_xx_update_dr_en      (sm_xx_update_dr_en     ),
  .sm_xx_update_reg_en     (sm_xx_update_reg_en    ),
  .tcipif_update_dr        (tcipif_update_dr       ),
  .trace_regs_otc          (trace_regs_otc         )
);


// &Instance("pa_had_serial"); @287
pa_had_serial  x_pa_had_serial (
  .hacr_xx_bama_sel     (hacr_xx_bama_sel    ),
  .hacr_xx_bamb_sel     (hacr_xx_bamb_sel    ),
  .hacr_xx_bamc_sel     (hacr_xx_bamc_sel    ),
  .hacr_xx_bamd_sel     (hacr_xx_bamd_sel    ),
  .hacr_xx_bame_sel     (hacr_xx_bame_sel    ),
  .hacr_xx_bamf_sel     (hacr_xx_bamf_sel    ),
  .hacr_xx_bamg_sel     (hacr_xx_bamg_sel    ),
  .hacr_xx_bamh_sel     (hacr_xx_bamh_sel    ),
  .hacr_xx_bami_sel     (hacr_xx_bami_sel    ),
  .hacr_xx_csr_sel      (hacr_xx_csr_sel     ),
  .hacr_xx_hsr_sel      (hacr_xx_hsr_sel     ),
  .hacr_xx_mbca_sel     (hacr_xx_mbca_sel    ),
  .hacr_xx_mbcb_sel     (hacr_xx_mbcb_sel    ),
  .hacr_xx_otc_sel      (hacr_xx_otc_sel     ),
  .io_serial_tdi        (io_serial_tdi       ),
  .pad_had_jtag2_sel    (pad_had_jtag2_sel   ),
  .regs_serial_data     (regs_serial_data    ),
  .serial_io_tdo        (serial_io_tdo       ),
  .serial_xx_data       (serial_xx_data      ),
  .sm_serial_capture_dr (sm_serial_capture_dr),
  .sm_serial_shift_dr   (sm_serial_shift_dr  ),
  .sm_serial_shift_ir   (sm_serial_shift_ir  ),
  .sm_serial_shift_par  (sm_serial_shift_par ),
  .sm_serial_shift_sync (sm_serial_shift_sync),
  .sm_xx_write_en       (sm_xx_write_en      ),
  .tclk                 (tclk                ),
  .trst_b               (trst_b              )
);


// &Instance("pa_had_sm"); @289
pa_had_sm  x_pa_had_sm (
  .cpuclk                (cpuclk               ),
  .forever_cpuclk        (forever_cpuclk       ),
  .hacr_sm_read          (hacr_sm_read         ),
  .hacr_xx_bypass_sel    (hacr_xx_bypass_sel   ),
  .hacr_xx_csr_sel       (hacr_xx_csr_sel      ),
  .hacr_xx_ir_sel        (hacr_xx_ir_sel       ),
  .hacr_xx_pc_sel        (hacr_xx_pc_sel       ),
  .hacr_xx_wbbr_sel      (hacr_xx_wbbr_sel     ),
  .hadrst_b              (hadrst_b             ),
  .io_sm_tap_en          (io_sm_tap_en         ),
  .pad_had_jtag2_sel     (pad_had_jtag2_sel    ),
  .pad_had_jtg_tms_i     (pad_had_jtg_tms_i    ),
  .sm_ctrl_exit_dbg      (sm_ctrl_exit_dbg     ),
  .sm_io_tdo_en          (sm_io_tdo_en         ),
  .sm_io_tms_oe          (sm_io_tms_oe         ),
  .sm_regs_capture_dr_en (sm_regs_capture_dr_en),
  .sm_serial_capture_dr  (sm_serial_capture_dr ),
  .sm_serial_shift_dr    (sm_serial_shift_dr   ),
  .sm_serial_shift_ir    (sm_serial_shift_ir   ),
  .sm_serial_shift_par   (sm_serial_shift_par  ),
  .sm_serial_shift_sync  (sm_serial_shift_sync ),
  .sm_xx_srst_vld        (sm_xx_srst_vld       ),
  .sm_xx_tap_on          (sm_xx_tap_on         ),
  .sm_xx_update_dr_en    (sm_xx_update_dr_en   ),
  .sm_xx_update_ir_en    (sm_xx_update_ir_en   ),
  .sm_xx_update_reg_en   (sm_xx_update_reg_en  ),
  .sm_xx_write_en        (sm_xx_write_en       ),
  .tcipif_update_dr      (tcipif_update_dr     ),
  .tclk                  (tclk                 ),
  .trst_b                (trst_b               )
);


// &Instance("pa_had_trace"); @291
pa_had_trace  x_pa_had_trace (
  .ctrl_trace_en                    (ctrl_trace_en                   ),
  .ctrl_trace_en_raw                (ctrl_trace_en_raw               ),
  .hacr_xx_otc_sel                  (hacr_xx_otc_sel                 ),
  .hacr_xx_wdata                    (hacr_xx_wdata                   ),
  .had_regs_clk                     (had_regs_clk                    ),
  .hadrst_b                         (hadrst_b                        ),
  .rtu_had_ex1_split                (rtu_had_ex1_split               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .sm_xx_update_reg_en              (sm_xx_update_reg_en             ),
  .trace_ctrl_req                   (trace_ctrl_req                  ),
  .trace_ctrl_req_ls_1              (trace_ctrl_req_ls_1             ),
  .trace_ctrl_req_raw               (trace_ctrl_req_raw              ),
  .trace_regs_otc                   (trace_regs_otc                  )
);


// &Instance("pa_had_ddma"); @293
pa_had_ddma  x_pa_had_ddma (
  .bmu_had_acc_err       (bmu_had_acc_err      ),
  .bmu_had_grant         (bmu_had_grant        ),
  .bmu_had_rdata         (bmu_had_rdata        ),
  .bmu_had_trans_cmplt   (bmu_had_trans_cmplt  ),
  .dacsr_reg             (dacsr_reg            ),
  .darwr_reg             (darwr_reg            ),
  .datr_reg              (datr_reg             ),
  .forever_cpuclk        (forever_cpuclk       ),
  .hacr_xx_dacsr_sel     (hacr_xx_dacsr_sel    ),
  .hacr_xx_darwr_sel     (hacr_xx_darwr_sel    ),
  .hacr_xx_datr_sel      (hacr_xx_datr_sel     ),
  .hacr_xx_wdata         (hacr_xx_wdata        ),
  .had_bmu_addr          (had_bmu_addr         ),
  .had_bmu_burst         (had_bmu_burst        ),
  .had_bmu_prot          (had_bmu_prot         ),
  .had_bmu_req           (had_bmu_req          ),
  .had_bmu_seq           (had_bmu_seq          ),
  .had_bmu_size          (had_bmu_size         ),
  .had_bmu_wdata         (had_bmu_wdata        ),
  .had_bmu_write         (had_bmu_write        ),
  .hadrst_b              (hadrst_b             ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .regs_ddma_ddae        (regs_ddma_ddae       ),
  .sm_regs_capture_dr_en (sm_regs_capture_dr_en),
  .sm_xx_update_reg_en   (sm_xx_update_reg_en  ),
  .sm_xx_write_en        (sm_xx_write_en       )
);



assign pad_had_jtag2_sel = 1'b1;
// &Force("input", "rtu_yy_xx_retire"); @297



// &Force("input", "rtu_had_xx_chgflow"); @359

// &ModuleEnd; @361
endmodule






















// &ModuleBeg; @20
module pa_had_trace(
  ctrl_trace_en,
  ctrl_trace_en_raw,
  hacr_xx_otc_sel,
  hacr_xx_wdata,
  had_regs_clk,
  hadrst_b,
  rtu_had_ex1_split,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_split,
  rtu_yy_xx_dbgon,
  sm_xx_update_reg_en,
  trace_ctrl_req,
  trace_ctrl_req_ls_1,
  trace_ctrl_req_raw,
  trace_regs_otc
);

// &Ports; @21
input           ctrl_trace_en;
input           ctrl_trace_en_raw;
input           hacr_xx_otc_sel;
input   [31:0]  hacr_xx_wdata;
input           had_regs_clk;
input           hadrst_b;
input           rtu_had_ex1_split;
input           rtu_had_xx_retire_normal;
input           rtu_had_xx_retire_normal_for_dbg;
input           rtu_had_xx_split;
input           rtu_yy_xx_dbgon;
input           sm_xx_update_reg_en;
output          trace_ctrl_req;
output          trace_ctrl_req_ls_1;
output          trace_ctrl_req_raw;
output  [7 :0]  trace_regs_otc;

// &Regs; @22
reg     [7 :0]  trace_counter;

// &Wires; @23
wire            ctrl_trace_en;
wire            ctrl_trace_en_raw;
wire            hacr_xx_otc_sel;
wire    [31:0]  hacr_xx_wdata;
wire            had_regs_clk;
wire            hadrst_b;
wire            rtu_had_ex1_split;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire            rtu_had_xx_split;
wire            rtu_yy_xx_dbgon;
wire            sm_xx_update_reg_en;
wire            trace_counter_dec;
wire            trace_counter_eq_0;
wire            trace_counter_eq_1;
wire            trace_counter_ls_1;
wire            trace_ctrl_req;
wire            trace_ctrl_req_ls_1;
wire            trace_ctrl_req_raw;
wire            trace_dec_vld;
wire            trace_ex_vld;
wire    [7 :0]  trace_regs_otc;
wire            trace_vld;
wire            trace_vld_raw;












assign trace_vld = rtu_had_xx_retire_normal_for_dbg &&
                   !rtu_had_xx_split &&
                   !rtu_yy_xx_dbgon &&
                   ctrl_trace_en;
assign trace_vld_raw = !rtu_had_xx_split &&
                       !rtu_yy_xx_dbgon &&
                       ctrl_trace_en;
assign trace_ex_vld = !rtu_had_ex1_split &&
                      !rtu_yy_xx_dbgon &&
                      ctrl_trace_en_raw;



assign trace_dec_vld = rtu_had_xx_retire_normal &&
                       !rtu_had_xx_split &&
                       !rtu_yy_xx_dbgon &&
                       ctrl_trace_en;








assign trace_counter_eq_0 = trace_counter[7:0] == 8'b0;
assign trace_counter_eq_1 = trace_counter[7:0] == 8'b1;

assign trace_counter_ls_1 = trace_counter_eq_0 || trace_counter_eq_1;

assign trace_counter_dec  = trace_dec_vld && !trace_counter_eq_0;





// &Force("bus", "serial_xx_data", 31, 0); @71
// &Force("bus", "hacr_xx_wdata", 31, 0); @72
always @(posedge had_regs_clk or negedge hadrst_b)
begin
  if (!hadrst_b)
    trace_counter[7:0] <= 8'b0;
  else if (sm_xx_update_reg_en && hacr_xx_otc_sel)
    trace_counter[7:0] <= hacr_xx_wdata[7:0];
  else if (trace_counter_dec)
    trace_counter[7:0] <= trace_counter[7:0] - 1'b1;
  else
    trace_counter[7:0] <= trace_counter[7:0];
end





assign trace_regs_otc[7:0] = trace_counter[7:0];









assign trace_ctrl_req      = trace_vld && trace_counter_eq_0;
assign trace_ctrl_req_raw  = trace_vld_raw && trace_counter_eq_0;
assign trace_ctrl_req_ls_1 = trace_ex_vld && trace_counter_ls_1;

// &ModuleEnd; @103
endmodule
























// &ModuleBeg; @22
module pa_hpcp_cnt(
  clk_en,
  cnt_adder,
  cnt_en,
  cnt_hwen,
  cnt_output,
  cnt_wen,
  cpurst_b,
  forever_cpuclk,
  hpcp_wdata,
  pad_yy_gate_clk_en_b
);

// &Ports; @23
input           clk_en;
input           cnt_adder;
input           cnt_en;
input           cnt_hwen;
input           cnt_wen;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  hpcp_wdata;
input           pad_yy_gate_clk_en_b;
output  [63:0]  cnt_output;

// &Regs; @24
reg     [63:0]  counter;

// &Wires @25
wire            clk_en;
wire            cnt_adder;
wire            cnt_clk;
wire            cnt_en;
wire            cnt_hwen;
wire    [63:0]  cnt_output;
wire            cnt_wen;
wire    [63:0]  counter_adder;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  hpcp_wdata;
wire            pad_yy_gate_clk_en_b;





// &Instance("gated_clk_cell", "x_gated_clk"); @30
gated_clk_cell  x_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (cnt_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (clk_en              ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @31
//          .external_en (1'b0), @32
//          .global_en   (1'b1), @33
//          .module_en   (1'b0), @34
//          .local_en    (clk_en), @35
//          .clk_out     (cnt_clk)); @36




always @(posedge cnt_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    counter[63:0] <= 64'b0;
  else if(cnt_wen)
    counter[63:0] <= {counter[63:32], hpcp_wdata[31:0]};
  else if(cnt_hwen)
    counter[63:0] <= {hpcp_wdata[31:0], counter[31:0]};
  else if(cnt_en)   //if gateclk is not immplented
    counter[63:0] <= counter_adder[63:0];
  else
    counter[63:0] <= counter[63:0];
end

assign counter_adder[63:0] = counter[63:0] + {63'b0, cnt_adder};


assign cnt_output[63:0] = counter[63:0];

// &ModuleEnd; @60
endmodule























// &ModuleBeg; @22
module pa_hpcp_cnt_dummy(
  clk_en,
  cnt_adder,
  cnt_en,
  cnt_hwen,
  cnt_output,
  cnt_wen
);

// &Ports; @23
input           clk_en;
input           cnt_adder;
input           cnt_en;
input           cnt_hwen;
input           cnt_wen;
output  [63:0]  cnt_output;

// &Regs; @24

// &Wires @25
wire    [63:0]  cnt_output;


// &Force("input", "clk_en"); @27
// &Force("input", "cnt_en"); @28
// &Force("input", "cnt_wen"); @29
// &Force("input", "cnt_hwen"); @30
// &Force("input", "cnt_adder"); @31

assign cnt_output[63:0] = 64'b0;

// &ModuleEnd; @35
endmodule























// &ModuleBeg; @22
module pa_hpcp_event_dummy(
  clk_en,
  cnt_output,
  cnt_wen,
  hpcp_wdata
);

// &Ports; @23
input           clk_en;
input           cnt_wen;
input   [31:0]  hpcp_wdata;
output  [31:0]  cnt_output;

// &Regs; @24

// &Wires @25
wire    [31:0]  cnt_output;


// &Force("input", "clk_en"); @27
// &Force("input", "cnt_wen"); @28
// &Force("input", "hpcp_wdata"); &Force("bus", "hpcp_wdata", 31, 0); @29

assign cnt_output[31:0] = 32'b0;

// &ModuleEnd; @33
endmodule























// &ModuleBeg; @22
module pa_hpcp_top(
  cp0_hpcp_index,
  cp0_hpcp_pmdm,
  cp0_hpcp_pmdu,
  cp0_hpcp_wdata,
  cp0_hpcp_wreg,
  cp0_yy_priv_mode,
  cpurst_b,
  forever_cpuclk,
  hpcp_cp0_data,
  ifu_hpcp_icache_access,
  ifu_hpcp_icache_miss,
  iu_hpcp_inst_bht_mispred,
  iu_hpcp_inst_condbr,
  iu_hpcp_inst_condbr_gate,
  lsu_hpcp_cache_read_access,
  lsu_hpcp_cache_read_access_gate,
  lsu_hpcp_cache_read_miss,
  lsu_hpcp_cache_read_miss_gate,
  lsu_hpcp_cache_write_access,
  lsu_hpcp_cache_write_access_gate,
  lsu_hpcp_cache_write_miss,
  lsu_hpcp_cache_write_miss_gate,
  lsu_hpcp_inst_store,
  lsu_hpcp_inst_store_gate,
  pad_yy_gate_clk_en_b,
  rtu_hpcp_retire_inst_vld,
  rtu_yy_xx_dbgon,
  sysio_hpcp_time
);

// &Ports; @23
input   [11:0]  cp0_hpcp_index;
input           cp0_hpcp_pmdm;
input           cp0_hpcp_pmdu;
input   [31:0]  cp0_hpcp_wdata;
input           cp0_hpcp_wreg;
input   [1 :0]  cp0_yy_priv_mode;
input           cpurst_b;
input           forever_cpuclk;
input           ifu_hpcp_icache_access;
input           ifu_hpcp_icache_miss;
input           iu_hpcp_inst_bht_mispred;
input           iu_hpcp_inst_condbr;
input           iu_hpcp_inst_condbr_gate;
input           lsu_hpcp_cache_read_access;
input           lsu_hpcp_cache_read_access_gate;
input           lsu_hpcp_cache_read_miss;
input           lsu_hpcp_cache_read_miss_gate;
input           lsu_hpcp_cache_write_access;
input           lsu_hpcp_cache_write_access_gate;
input           lsu_hpcp_cache_write_miss;
input           lsu_hpcp_cache_write_miss_gate;
input           lsu_hpcp_inst_store;
input           lsu_hpcp_inst_store_gate;
input           pad_yy_gate_clk_en_b;
input           rtu_hpcp_retire_inst_vld;
input           rtu_yy_xx_dbgon;
input   [63:0]  sysio_hpcp_time;
output  [31:0]  hpcp_cp0_data;

// &Regs; @24
reg             cy;
reg     [31:0]  data_out;
reg             ir;

// &Wires @25
wire            bht_mispred;
wire            cnt_mode_dis;
wire    [11:0]  cp0_hpcp_index;
wire            cp0_hpcp_pmdm;
wire            cp0_hpcp_pmdu;
wire    [31:0]  cp0_hpcp_wdata;
wire            cp0_hpcp_wreg;
wire    [1 :0]  cp0_yy_priv_mode;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  hpcp_cp0_data;
wire            hpcp_ifu_icache_access;
wire            hpcp_ifu_icache_miss;
wire            hpcp_lsu_dcache_read_access;
wire            hpcp_lsu_dcache_read_access_gate;
wire            hpcp_lsu_dcache_read_miss;
wire            hpcp_lsu_dcache_read_miss_gate;
wire            hpcp_lsu_dcache_write_access;
wire            hpcp_lsu_dcache_write_access_gate;
wire            hpcp_lsu_dcache_write_miss;
wire            hpcp_lsu_dcache_write_miss_gate;
wire            hpcp_retire_bht_mispred;
wire            hpcp_retire_inst_condbr;
wire            hpcp_retire_inst_condbr_gate;
wire            hpcp_retire_inst_store;
wire            hpcp_retire_inst_store_gate;
wire            hpcp_retire_inst_vld;
wire    [31:0]  hpcp_wdata;
wire    [27:0]  hpm;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire            inhibt_clk;
wire            inst_condbr;
wire            inst_condbr_gate;
wire            inst_store;
wire            inst_store_gate;
wire            iu_hpcp_inst_bht_mispred;
wire            iu_hpcp_inst_condbr;
wire            iu_hpcp_inst_condbr_gate;
wire            lsu_hpcp_cache_read_access;
wire            lsu_hpcp_cache_read_access_gate;
wire            lsu_hpcp_cache_read_miss;
wire            lsu_hpcp_cache_read_miss_gate;
wire            lsu_hpcp_cache_write_access;
wire            lsu_hpcp_cache_write_access_gate;
wire            lsu_hpcp_cache_write_miss;
wire            lsu_hpcp_cache_write_miss_gate;
wire            lsu_hpcp_inst_store;
wire            lsu_hpcp_inst_store_gate;
wire    [31:0]  mcntinhbt_value;
wire            mcntinhbt_wen;
wire            mcycle_clk_en;
wire            mcycle_cnt_en;
wire            mcycle_en;
wire    [63:0]  mcycle_value;
wire            mcycle_wen;
wire            mcycleh_wen;
wire            mhpmcnt13_adder;
wire            mhpmcnt13_clk_en;
wire            mhpmcnt13_cnt_en;
wire            mhpmcnt13_cnt_en_gate;
wire            mhpmcnt13_en;
wire    [63:0]  mhpmcnt13_value;
wire            mhpmcnt13_wen;
wire            mhpmcnt13h_wen;
wire            mhpmcnt14_adder;
wire            mhpmcnt14_clk_en;
wire            mhpmcnt14_cnt_en;
wire            mhpmcnt14_cnt_en_gate;
wire            mhpmcnt14_en;
wire    [63:0]  mhpmcnt14_value;
wire            mhpmcnt14_wen;
wire            mhpmcnt14h_wen;
wire            mhpmcnt15_adder;
wire            mhpmcnt15_clk_en;
wire            mhpmcnt15_cnt_en;
wire            mhpmcnt15_cnt_en_gate;
wire            mhpmcnt15_en;
wire    [63:0]  mhpmcnt15_value;
wire            mhpmcnt15_wen;
wire            mhpmcnt15h_wen;
wire            mhpmcnt16_adder;
wire            mhpmcnt16_clk_en;
wire            mhpmcnt16_cnt_en;
wire            mhpmcnt16_cnt_en_gate;
wire            mhpmcnt16_en;
wire    [63:0]  mhpmcnt16_value;
wire            mhpmcnt16_wen;
wire            mhpmcnt16h_wen;
wire            mhpmcnt17_adder;
wire            mhpmcnt17_clk_en;
wire            mhpmcnt17_cnt_en;
wire            mhpmcnt17_cnt_en_gate;
wire            mhpmcnt17_en;
wire    [63:0]  mhpmcnt17_value;
wire            mhpmcnt17_wen;
wire            mhpmcnt17h_wen;
wire            mhpmcnt3_adder;
wire            mhpmcnt3_clk_en;
wire            mhpmcnt3_cnt_en;
wire            mhpmcnt3_en;
wire    [63:0]  mhpmcnt3_value;
wire            mhpmcnt3_wen;
wire            mhpmcnt3h_wen;
wire            mhpmcnt4_adder;
wire            mhpmcnt4_clk_en;
wire            mhpmcnt4_cnt_en;
wire            mhpmcnt4_en;
wire    [63:0]  mhpmcnt4_value;
wire            mhpmcnt4_wen;
wire            mhpmcnt4h_wen;
wire            mhpmcnt8_adder;
wire            mhpmcnt8_clk_en;
wire            mhpmcnt8_cnt_en;
wire            mhpmcnt8_en;
wire    [63:0]  mhpmcnt8_value;
wire            mhpmcnt8_wen;
wire            mhpmcnt8h_wen;
wire            mhpmcnt9_adder;
wire            mhpmcnt9_clk_en;
wire            mhpmcnt9_cnt_en;
wire            mhpmcnt9_cnt_en_gate;
wire            mhpmcnt9_en;
wire    [63:0]  mhpmcnt9_value;
wire            mhpmcnt9_wen;
wire            mhpmcnt9h_wen;
wire            mhpmevt13_clk_en;
wire    [31:0]  mhpmevt13_value;
wire            mhpmevt13_wen;
wire            mhpmevt14_clk_en;
wire    [31:0]  mhpmevt14_value;
wire            mhpmevt14_wen;
wire            mhpmevt15_clk_en;
wire    [31:0]  mhpmevt15_value;
wire            mhpmevt15_wen;
wire            mhpmevt16_clk_en;
wire    [31:0]  mhpmevt16_value;
wire            mhpmevt16_wen;
wire            mhpmevt17_clk_en;
wire    [31:0]  mhpmevt17_value;
wire            mhpmevt17_wen;
wire            mhpmevt3_clk_en;
wire    [31:0]  mhpmevt3_value;
wire            mhpmevt3_wen;
wire            mhpmevt4_clk_en;
wire    [31:0]  mhpmevt4_value;
wire            mhpmevt4_wen;
wire            mhpmevt8_clk_en;
wire    [31:0]  mhpmevt8_value;
wire            mhpmevt8_wen;
wire            mhpmevt9_clk_en;
wire    [31:0]  mhpmevt9_value;
wire            mhpmevt9_wen;
wire            minstret_adder;
wire            minstret_clk_en;
wire            minstret_cnt_en;
wire            minstret_en;
wire    [63:0]  minstret_value;
wire            minstret_wen;
wire            minstreth_wen;
wire            pad_yy_gate_clk_en_b;
wire            rtu_hpcp_retire_inst_vld;
wire            rtu_yy_xx_dbgon;
wire    [63:0]  sysio_hpcp_time;





parameter MCNTINHBT = 12'h320;
parameter MHPMEVT3  = 12'h323;
parameter MHPMEVT4  = 12'h324;
parameter MHPMEVT5  = 12'h325;
parameter MHPMEVT6  = 12'h326;
parameter MHPMEVT7  = 12'h327;
parameter MHPMEVT8  = 12'h328;
parameter MHPMEVT9  = 12'h329;
parameter MHPMEVT10 = 12'h32A;
parameter MHPMEVT11 = 12'h32B;
parameter MHPMEVT12 = 12'h32C;
parameter MHPMEVT13 = 12'h32D;
parameter MHPMEVT14 = 12'h32E;
parameter MHPMEVT15 = 12'h32F;
parameter MHPMEVT16 = 12'h330;
parameter MHPMEVT17 = 12'h331;
parameter MHPMEVT18 = 12'h332;
parameter MHPMEVT19 = 12'h333;
parameter MHPMEVT20 = 12'h334;
parameter MHPMEVT21 = 12'h335;
parameter MHPMEVT22 = 12'h336;
parameter MHPMEVT23 = 12'h337;
parameter MHPMEVT24 = 12'h338;
parameter MHPMEVT25 = 12'h339;
parameter MHPMEVT26 = 12'h33A;
parameter MHPMEVT27 = 12'h33B;
parameter MHPMEVT28 = 12'h33C;
parameter MHPMEVT29 = 12'h33D;
parameter MHPMEVT30 = 12'h33E;
parameter MHPMEVT31 = 12'h33F;
parameter MCNTWEN   = 12'h7C9;


parameter MCYCLE    = 12'hB00;
parameter MINSTRET  = 12'hB02;
parameter MHPMCNT3  = 12'hB03;
parameter MHPMCNT4  = 12'hB04;
parameter MHPMCNT5  = 12'hB05;
parameter MHPMCNT6  = 12'hB06;
parameter MHPMCNT7  = 12'hB07;
parameter MHPMCNT8  = 12'hB08;
parameter MHPMCNT9  = 12'hB09;
parameter MHPMCNT10 = 12'hB0A;
parameter MHPMCNT11 = 12'hB0B;
parameter MHPMCNT12 = 12'hB0C;
parameter MHPMCNT13 = 12'hB0D;
parameter MHPMCNT14 = 12'hB0E;
parameter MHPMCNT15 = 12'hB0F;
parameter MHPMCNT16 = 12'hB10;
parameter MHPMCNT17 = 12'hB11;
parameter MHPMCNT18 = 12'hB12;
parameter MHPMCNT19 = 12'hB13;
parameter MHPMCNT20 = 12'hB14;
parameter MHPMCNT21 = 12'hB15;
parameter MHPMCNT22 = 12'hB16;
parameter MHPMCNT23 = 12'hB17;
parameter MHPMCNT24 = 12'hB18;
parameter MHPMCNT25 = 12'hB19;
parameter MHPMCNT26 = 12'hB1A;
parameter MHPMCNT27 = 12'hB1B;
parameter MHPMCNT28 = 12'hB1C;
parameter MHPMCNT29 = 12'hB1D;
parameter MHPMCNT30 = 12'hB1E;
parameter MHPMCNT31 = 12'hB1F;

parameter MCYCLEH    = 12'hB80;
parameter MINSTRETH  = 12'hB82;
parameter MHPMCNT3H  = 12'hB83;
parameter MHPMCNT4H  = 12'hB84;
parameter MHPMCNT5H  = 12'hB85;
parameter MHPMCNT6H  = 12'hB86;
parameter MHPMCNT7H  = 12'hB87;
parameter MHPMCNT8H  = 12'hB88;
parameter MHPMCNT9H  = 12'hB89;
parameter MHPMCNT10H = 12'hB8A;
parameter MHPMCNT11H = 12'hB8B;
parameter MHPMCNT12H = 12'hB8C;
parameter MHPMCNT13H = 12'hB8D;
parameter MHPMCNT14H = 12'hB8E;
parameter MHPMCNT15H = 12'hB8F;
parameter MHPMCNT16H = 12'hB90;
parameter MHPMCNT17H = 12'hB91;
parameter MHPMCNT18H = 12'hB92;
parameter MHPMCNT19H = 12'hB93;
parameter MHPMCNT20H = 12'hB94;
parameter MHPMCNT21H = 12'hB95;
parameter MHPMCNT22H = 12'hB96;
parameter MHPMCNT23H = 12'hB97;
parameter MHPMCNT24H = 12'hB98;
parameter MHPMCNT25H = 12'hB99;
parameter MHPMCNT26H = 12'hB9A;
parameter MHPMCNT27H = 12'hB9B;
parameter MHPMCNT28H = 12'hB9C;
parameter MHPMCNT29H = 12'hB9D;
parameter MHPMCNT30H = 12'hB9E;
parameter MHPMCNT31H = 12'hB9F;


parameter CYCLE    = 12'hC00;
parameter TIME     = 12'hC01;
parameter INSTRET  = 12'hC02;
parameter HPMCNT3  = 12'hC03;
parameter HPMCNT4  = 12'hC04;
parameter HPMCNT5  = 12'hC05;
parameter HPMCNT6  = 12'hC06;
parameter HPMCNT7  = 12'hC07;
parameter HPMCNT8  = 12'hC08;
parameter HPMCNT9  = 12'hC09;
parameter HPMCNT10 = 12'hC0A;
parameter HPMCNT11 = 12'hC0B;
parameter HPMCNT12 = 12'hC0C;
parameter HPMCNT13 = 12'hC0D;
parameter HPMCNT14 = 12'hC0E;
parameter HPMCNT15 = 12'hC0F;
parameter HPMCNT16 = 12'hC10;
parameter HPMCNT17 = 12'hC11;
parameter HPMCNT18 = 12'hC12;
parameter HPMCNT19 = 12'hC13;
parameter HPMCNT20 = 12'hC14;
parameter HPMCNT21 = 12'hC15;
parameter HPMCNT22 = 12'hC16;
parameter HPMCNT23 = 12'hC17;
parameter HPMCNT24 = 12'hC18;
parameter HPMCNT25 = 12'hC19;
parameter HPMCNT26 = 12'hC1A;
parameter HPMCNT27 = 12'hC1B;
parameter HPMCNT28 = 12'hC1C;
parameter HPMCNT29 = 12'hC1D;
parameter HPMCNT30 = 12'hC1E;
parameter HPMCNT31 = 12'hC1F;

parameter CYCLEH    = 12'hC80;
parameter TIMEH     = 12'hC81;
parameter INSTRETH  = 12'hC82;
parameter HPMCNT3H  = 12'hC83;
parameter HPMCNT4H  = 12'hC84;
parameter HPMCNT5H  = 12'hC85;
parameter HPMCNT6H  = 12'hC86;
parameter HPMCNT7H  = 12'hC87;
parameter HPMCNT8H  = 12'hC88;
parameter HPMCNT9H  = 12'hC89;
parameter HPMCNT10H = 12'hC8A;
parameter HPMCNT11H = 12'hC8B;
parameter HPMCNT12H = 12'hC8C;
parameter HPMCNT13H = 12'hC8D;
parameter HPMCNT14H = 12'hC8E;
parameter HPMCNT15H = 12'hC8F;
parameter HPMCNT16H = 12'hC90;
parameter HPMCNT17H = 12'hC91;
parameter HPMCNT18H = 12'hC92;
parameter HPMCNT19H = 12'hC93;
parameter HPMCNT20H = 12'hC94;
parameter HPMCNT21H = 12'hC95;
parameter HPMCNT22H = 12'hC96;
parameter HPMCNT23H = 12'hC97;
parameter HPMCNT24H = 12'hC98;
parameter HPMCNT25H = 12'hC99;
parameter HPMCNT26H = 12'hC9A;
parameter HPMCNT27H = 12'hC9B;
parameter HPMCNT28H = 12'hC9C;
parameter HPMCNT29H = 12'hC9D;
parameter HPMCNT30H = 12'hC9E;
parameter HPMCNT31H = 12'hC9F;





assign mcntinhbt_wen   = (cp0_hpcp_index[11:0] == MCNTINHBT ) && cp0_hpcp_wreg;


assign mhpmevt3_wen    = (cp0_hpcp_index[11:0] == MHPMEVT3 ) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd1));
assign mhpmevt4_wen    = (cp0_hpcp_index[11:0] == MHPMEVT4 ) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd2));
assign mhpmevt8_wen    = (cp0_hpcp_index[11:0] == MHPMEVT8 ) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd6));
assign mhpmevt9_wen    = (cp0_hpcp_index[11:0] == MHPMEVT9 ) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd7));
assign mhpmevt13_wen   = (cp0_hpcp_index[11:0] == MHPMEVT13) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd11));
assign mhpmevt14_wen   = (cp0_hpcp_index[11:0] == MHPMEVT14) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd12));
assign mhpmevt15_wen   = (cp0_hpcp_index[11:0] == MHPMEVT15) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd13));
assign mhpmevt16_wen   = (cp0_hpcp_index[11:0] == MHPMEVT16) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd14));
assign mhpmevt17_wen   = (cp0_hpcp_index[11:0] == MHPMEVT17) && cp0_hpcp_wreg
                      && ((cp0_hpcp_wdata[4:0] == 5'b0) || (cp0_hpcp_wdata[4:0] == 5'd15));


assign mcycle_wen      = (cp0_hpcp_index[11:0] == MCYCLE)    && cp0_hpcp_wreg;
assign minstret_wen    = (cp0_hpcp_index[11:0] == MINSTRET)  && cp0_hpcp_wreg;
assign mhpmcnt3_wen    = (cp0_hpcp_index[11:0] == MHPMCNT3)  && cp0_hpcp_wreg && (mhpmevt3_value[4:0]  == 5'b00001);
assign mhpmcnt4_wen    = (cp0_hpcp_index[11:0] == MHPMCNT4)  && cp0_hpcp_wreg && (mhpmevt4_value[4:0]  == 5'b00010);
assign mhpmcnt8_wen    = (cp0_hpcp_index[11:0] == MHPMCNT8)  && cp0_hpcp_wreg && (mhpmevt8_value[4:0]  == 5'b00110);
assign mhpmcnt9_wen    = (cp0_hpcp_index[11:0] == MHPMCNT9)  && cp0_hpcp_wreg && (mhpmevt9_value[4:0]  == 5'b00111);
assign mhpmcnt13_wen   = (cp0_hpcp_index[11:0] == MHPMCNT13) && cp0_hpcp_wreg && (mhpmevt13_value[4:0] == 5'b01011);
assign mhpmcnt14_wen   = (cp0_hpcp_index[11:0] == MHPMCNT14) && cp0_hpcp_wreg && (mhpmevt14_value[4:0] == 5'b01100);
assign mhpmcnt15_wen   = (cp0_hpcp_index[11:0] == MHPMCNT15) && cp0_hpcp_wreg && (mhpmevt15_value[4:0] == 5'b01101);
assign mhpmcnt16_wen   = (cp0_hpcp_index[11:0] == MHPMCNT16) && cp0_hpcp_wreg && (mhpmevt16_value[4:0] == 5'b01110);
assign mhpmcnt17_wen   = (cp0_hpcp_index[11:0] == MHPMCNT17) && cp0_hpcp_wreg && (mhpmevt17_value[4:0] == 5'b01111);

assign mcycleh_wen     = (cp0_hpcp_index[11:0] == MCYCLEH)    && cp0_hpcp_wreg;
assign minstreth_wen   = (cp0_hpcp_index[11:0] == MINSTRETH)  && cp0_hpcp_wreg;
assign mhpmcnt3h_wen   = (cp0_hpcp_index[11:0] == MHPMCNT3H)  && cp0_hpcp_wreg && (mhpmevt3_value[4:0]  == 5'b00001);
assign mhpmcnt4h_wen   = (cp0_hpcp_index[11:0] == MHPMCNT4H)  && cp0_hpcp_wreg && (mhpmevt4_value[4:0]  == 5'b00010);
assign mhpmcnt8h_wen   = (cp0_hpcp_index[11:0] == MHPMCNT8H)  && cp0_hpcp_wreg && (mhpmevt8_value[4:0]  == 5'b00110);
assign mhpmcnt9h_wen   = (cp0_hpcp_index[11:0] == MHPMCNT9H)  && cp0_hpcp_wreg && (mhpmevt9_value[4:0]  == 5'b00111);
assign mhpmcnt13h_wen  = (cp0_hpcp_index[11:0] == MHPMCNT13H) && cp0_hpcp_wreg && (mhpmevt13_value[4:0] == 5'b01011);
assign mhpmcnt14h_wen  = (cp0_hpcp_index[11:0] == MHPMCNT14H) && cp0_hpcp_wreg && (mhpmevt14_value[4:0] == 5'b01100);
assign mhpmcnt15h_wen  = (cp0_hpcp_index[11:0] == MHPMCNT15H) && cp0_hpcp_wreg && (mhpmevt15_value[4:0] == 5'b01101);
assign mhpmcnt16h_wen  = (cp0_hpcp_index[11:0] == MHPMCNT16H) && cp0_hpcp_wreg && (mhpmevt16_value[4:0] == 5'b01110);
assign mhpmcnt17h_wen  = (cp0_hpcp_index[11:0] == MHPMCNT17H) && cp0_hpcp_wreg && (mhpmevt17_value[4:0] == 5'b01111);





assign cnt_mode_dis = (cp0_yy_priv_mode[1:0] == 2'b11) && cp0_hpcp_pmdm
                   || (cp0_yy_priv_mode[1:0] == 2'b00) && cp0_hpcp_pmdu;


assign mcycle_en    = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[0];
assign minstret_en  = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[2];
assign mhpmcnt3_en  = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[3]  && (mhpmevt3_value[4:0]  == 5'b00001);
assign mhpmcnt4_en  = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[4]  && (mhpmevt4_value[4:0]  == 5'b00010);
assign mhpmcnt8_en  = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[8]  && (mhpmevt8_value[4:0]  == 5'b00110);
assign mhpmcnt9_en  = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[9]  && (mhpmevt9_value[4:0]  == 5'b00111);
assign mhpmcnt13_en = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[13] && (mhpmevt13_value[4:0] == 5'b01011);
assign mhpmcnt14_en = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[14] && (mhpmevt14_value[4:0] == 5'b01100);
assign mhpmcnt15_en = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[15] && (mhpmevt15_value[4:0] == 5'b01101);
assign mhpmcnt16_en = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[16] && (mhpmevt16_value[4:0] == 5'b01110);
assign mhpmcnt17_en = !rtu_yy_xx_dbgon && !cnt_mode_dis && !mcntinhbt_value[17] && (mhpmevt17_value[4:0] == 5'b01111);


assign mcycle_cnt_en    = mcycle_en;
assign minstret_cnt_en  = minstret_en  && hpcp_retire_inst_vld;
assign mhpmcnt3_cnt_en  = mhpmcnt3_en  && hpcp_ifu_icache_access;
assign mhpmcnt4_cnt_en  = mhpmcnt4_en  && hpcp_ifu_icache_miss;
assign mhpmcnt8_cnt_en  = mhpmcnt8_en  && bht_mispred;
assign mhpmcnt9_cnt_en  = mhpmcnt9_en  && inst_condbr;
assign mhpmcnt13_cnt_en = mhpmcnt13_en && inst_store;
assign mhpmcnt14_cnt_en = mhpmcnt14_en && hpcp_lsu_dcache_read_access;
assign mhpmcnt15_cnt_en = mhpmcnt15_en && hpcp_lsu_dcache_read_miss;
assign mhpmcnt16_cnt_en = mhpmcnt16_en && hpcp_lsu_dcache_write_access;
assign mhpmcnt17_cnt_en = mhpmcnt17_en && hpcp_lsu_dcache_write_miss;

assign mhpmcnt9_cnt_en_gate = mhpmcnt9_en  && inst_condbr_gate;
assign mhpmcnt13_cnt_en_gate = mhpmcnt13_en && inst_store_gate;
assign mhpmcnt14_cnt_en_gate = mhpmcnt14_en && hpcp_lsu_dcache_read_access_gate;
assign mhpmcnt15_cnt_en_gate = mhpmcnt15_en && hpcp_lsu_dcache_read_miss_gate;
assign mhpmcnt16_cnt_en_gate = mhpmcnt16_en && hpcp_lsu_dcache_write_access_gate;
assign mhpmcnt17_cnt_en_gate = mhpmcnt17_en && hpcp_lsu_dcache_write_miss_gate;



assign hpcp_retire_inst_vld           = rtu_hpcp_retire_inst_vld;
assign hpcp_retire_inst_condbr        = iu_hpcp_inst_condbr;
assign hpcp_retire_bht_mispred        = iu_hpcp_inst_bht_mispred;
assign hpcp_retire_inst_store         = lsu_hpcp_inst_store;
assign hpcp_ifu_icache_access         = ifu_hpcp_icache_access;
assign hpcp_ifu_icache_miss           = ifu_hpcp_icache_miss;
assign hpcp_lsu_dcache_read_access    = lsu_hpcp_cache_read_access;
assign hpcp_lsu_dcache_read_miss      = lsu_hpcp_cache_read_miss;
assign hpcp_lsu_dcache_write_access   = lsu_hpcp_cache_write_access;
assign hpcp_lsu_dcache_write_miss     = lsu_hpcp_cache_write_miss;

assign hpcp_retire_inst_condbr_gate      = iu_hpcp_inst_condbr_gate;
assign hpcp_retire_inst_store_gate       = lsu_hpcp_inst_store_gate;
assign hpcp_lsu_dcache_read_access_gate  = lsu_hpcp_cache_read_access_gate;
assign hpcp_lsu_dcache_read_miss_gate    = lsu_hpcp_cache_read_miss_gate;
assign hpcp_lsu_dcache_write_access_gate = lsu_hpcp_cache_write_access_gate;
assign hpcp_lsu_dcache_write_miss_gate   = lsu_hpcp_cache_write_miss_gate;



assign mhpmevt3_clk_en   =  mhpmevt3_wen;
assign mhpmevt4_clk_en   =  mhpmevt4_wen;
assign mhpmevt8_clk_en   =  mhpmevt8_wen;
assign mhpmevt9_clk_en   =  mhpmevt9_wen;
assign mhpmevt13_clk_en  =  mhpmevt13_wen;
assign mhpmevt14_clk_en  =  mhpmevt14_wen;
assign mhpmevt15_clk_en  =  mhpmevt15_wen;
assign mhpmevt16_clk_en  =  mhpmevt16_wen;
assign mhpmevt17_clk_en  =  mhpmevt17_wen;
assign mcycle_clk_en     =  mcycle_cnt_en    || mcycle_wen   ;
assign minstret_clk_en   =  minstret_cnt_en  || minstret_wen ;
assign mhpmcnt3_clk_en   =  mhpmcnt3_cnt_en  || mhpmcnt3_wen ;
assign mhpmcnt4_clk_en   =  mhpmcnt4_cnt_en  || mhpmcnt4_wen ;
assign mhpmcnt8_clk_en   =  mhpmcnt8_cnt_en  || mhpmcnt8_wen ;
assign mhpmcnt9_clk_en   =  mhpmcnt9_cnt_en_gate || mhpmcnt9_wen ;
assign mhpmcnt13_clk_en  =  mhpmcnt13_cnt_en_gate || mhpmcnt13_wen;
assign mhpmcnt14_clk_en  =  mhpmcnt14_cnt_en_gate || mhpmcnt14_wen;
assign mhpmcnt15_clk_en  =  mhpmcnt15_cnt_en_gate || mhpmcnt15_wen;
assign mhpmcnt16_clk_en  =  mhpmcnt16_cnt_en_gate || mhpmcnt16_wen;
assign mhpmcnt17_clk_en  =  mhpmcnt17_cnt_en_gate || mhpmcnt17_wen;


assign hpcp_wdata[31:0] = cp0_hpcp_wdata[31:0];




// &Instance("gated_clk_cell", "x_inhibt_gated_clk"); @334
gated_clk_cell  x_inhibt_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (inhibt_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (mcntinhbt_wen       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @335
//          .external_en (1'b0), @336
//          .global_en   (1'b1), @337
//          .module_en   (1'b0), @338
//          .local_en    (mcntinhbt_wen), @339
//          .clk_out     (inhibt_clk)); @340


















assign mcntinhbt_value[31:0] = {1'b0, hpm[27:0], ir, 1'b0, cy};




always @(posedge inhibt_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ir        <= 1'b0;
    cy        <= 1'b0;
  end
  else if(mcntinhbt_wen)
  begin
    ir        <= hpcp_wdata[2];
    cy        <= hpcp_wdata[0];
  end
  else
  begin
    ir        <= ir;
    cy        <= cy;
  end
end

assign hpm[27:0] = 28'b0;




// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent3"); @401
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent3"); @403
pa_hpcp_event_dummy  x_hpcp_mhpmevent3 (
  .clk_en          (mhpmevt3_clk_en),
  .cnt_output      (mhpmevt3_value ),
  .cnt_wen         (mhpmevt3_wen   ),
  .hpcp_wdata      (hpcp_wdata     )
);

// &Connect(.clk_en         (mhpmevt3_clk_en), @405
//          .cnt_wen        (mhpmevt3_wen), @406
//          .cnt_output     (mhpmevt3_value)); @407

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent4"); @410
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent4"); @412
pa_hpcp_event_dummy  x_hpcp_mhpmevent4 (
  .clk_en          (mhpmevt4_clk_en),
  .cnt_output      (mhpmevt4_value ),
  .cnt_wen         (mhpmevt4_wen   ),
  .hpcp_wdata      (hpcp_wdata     )
);

// &Connect(.clk_en         (mhpmevt4_clk_en), @414
//          .cnt_wen        (mhpmevt4_wen), @415
//          .cnt_output     (mhpmevt4_value)); @416

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent8"); @419
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent8"); @421
pa_hpcp_event_dummy  x_hpcp_mhpmevent8 (
  .clk_en          (mhpmevt8_clk_en),
  .cnt_output      (mhpmevt8_value ),
  .cnt_wen         (mhpmevt8_wen   ),
  .hpcp_wdata      (hpcp_wdata     )
);

// &Connect(.clk_en         (mhpmevt8_clk_en), @423
//          .cnt_wen        (mhpmevt8_wen), @424
//          .cnt_output     (mhpmevt8_value)); @425

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent9"); @428
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent9"); @430
pa_hpcp_event_dummy  x_hpcp_mhpmevent9 (
  .clk_en          (mhpmevt9_clk_en),
  .cnt_output      (mhpmevt9_value ),
  .cnt_wen         (mhpmevt9_wen   ),
  .hpcp_wdata      (hpcp_wdata     )
);

// &Connect(.clk_en         (mhpmevt9_clk_en), @432
//          .cnt_wen        (mhpmevt9_wen), @433
//          .cnt_output     (mhpmevt9_value)); @434

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent13"); @437
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent13"); @439
pa_hpcp_event_dummy  x_hpcp_mhpmevent13 (
  .clk_en           (mhpmevt13_clk_en),
  .cnt_output       (mhpmevt13_value ),
  .cnt_wen          (mhpmevt13_wen   ),
  .hpcp_wdata       (hpcp_wdata      )
);

// &Connect(.clk_en         (mhpmevt13_clk_en), @441
//          .cnt_wen        (mhpmevt13_wen), @442
//          .cnt_output     (mhpmevt13_value)); @443

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent14"); @446
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent14"); @448
pa_hpcp_event_dummy  x_hpcp_mhpmevent14 (
  .clk_en           (mhpmevt14_clk_en),
  .cnt_output       (mhpmevt14_value ),
  .cnt_wen          (mhpmevt14_wen   ),
  .hpcp_wdata       (hpcp_wdata      )
);

// &Connect(.clk_en         (mhpmevt14_clk_en), @450
//          .cnt_wen        (mhpmevt14_wen), @451
//          .cnt_output     (mhpmevt14_value)); @452

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent15"); @455
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent15"); @457
pa_hpcp_event_dummy  x_hpcp_mhpmevent15 (
  .clk_en           (mhpmevt15_clk_en),
  .cnt_output       (mhpmevt15_value ),
  .cnt_wen          (mhpmevt15_wen   ),
  .hpcp_wdata       (hpcp_wdata      )
);

// &Connect(.clk_en         (mhpmevt15_clk_en), @459
//          .cnt_wen        (mhpmevt15_wen), @460
//          .cnt_output     (mhpmevt15_value)); @461

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent16"); @464
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent16"); @466
pa_hpcp_event_dummy  x_hpcp_mhpmevent16 (
  .clk_en           (mhpmevt16_clk_en),
  .cnt_output       (mhpmevt16_value ),
  .cnt_wen          (mhpmevt16_wen   ),
  .hpcp_wdata       (hpcp_wdata      )
);

// &Connect(.clk_en         (mhpmevt16_clk_en), @468
//          .cnt_wen        (mhpmevt16_wen), @469
//          .cnt_output     (mhpmevt16_value)); @470

// &Instance("pa_hpcp_event", "x_hpcp_mhpmevent17"); @473
// &Instance("pa_hpcp_event_dummy", "x_hpcp_mhpmevent17"); @475
pa_hpcp_event_dummy  x_hpcp_mhpmevent17 (
  .clk_en           (mhpmevt17_clk_en),
  .cnt_output       (mhpmevt17_value ),
  .cnt_wen          (mhpmevt17_wen   ),
  .hpcp_wdata       (hpcp_wdata      )
);

// &Connect(.clk_en         (mhpmevt17_clk_en), @477
//          .cnt_wen        (mhpmevt17_wen), @478
//          .cnt_output     (mhpmevt17_value)); @479





// &Instance("pa_hpcp_cnt", "x_hpcp_mcycle"); @485
pa_hpcp_cnt  x_hpcp_mcycle (
  .clk_en               (mcycle_clk_en       ),
  .cnt_adder            (1'b1                ),
  .cnt_en               (mcycle_cnt_en       ),
  .cnt_hwen             (mcycleh_wen         ),
  .cnt_output           (mcycle_value        ),
  .cnt_wen              (mcycle_wen          ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .hpcp_wdata           (hpcp_wdata          ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_en         (mcycle_clk_en), @486
//          .cnt_en         (mcycle_cnt_en), @487
//          .cnt_wen        (mcycle_wen), @488
//          .cnt_hwen       (mcycleh_wen), @489
//          .cnt_adder      (1'b1), @490
//          .cnt_output     (mcycle_value)); @491



assign minstret_adder = hpcp_retire_inst_vld;
// &Instance("pa_hpcp_cnt", "x_hpcp_minstret"); @496
pa_hpcp_cnt  x_hpcp_minstret (
  .clk_en               (minstret_clk_en     ),
  .cnt_adder            (minstret_adder      ),
  .cnt_en               (minstret_cnt_en     ),
  .cnt_hwen             (minstreth_wen       ),
  .cnt_output           (minstret_value      ),
  .cnt_wen              (minstret_wen        ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .hpcp_wdata           (hpcp_wdata          ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_en         (minstret_clk_en), @497
//          .cnt_en         (minstret_cnt_en), @498
//          .cnt_wen        (minstret_wen), @499
//          .cnt_hwen       (minstreth_wen), @500
//          .cnt_adder      (minstret_adder), @501
//          .cnt_output     (minstret_value)); @502


assign mhpmcnt3_adder = hpcp_ifu_icache_access;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt3"); @507
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt3"); @509
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt3 (
  .clk_en          (mhpmcnt3_clk_en),
  .cnt_adder       (mhpmcnt3_adder ),
  .cnt_en          (mhpmcnt3_cnt_en),
  .cnt_hwen        (mhpmcnt3h_wen  ),
  .cnt_output      (mhpmcnt3_value ),
  .cnt_wen         (mhpmcnt3_wen   )
);

// &Connect(.clk_en         (mhpmcnt3_clk_en), @511
//          .cnt_en         (mhpmcnt3_cnt_en), @512
//          .cnt_wen        (mhpmcnt3_wen), @513
//          .cnt_hwen       (mhpmcnt3h_wen), @514
//          .cnt_adder      (mhpmcnt3_adder), @515
//          .cnt_output     (mhpmcnt3_value)); @516


assign mhpmcnt4_adder = hpcp_ifu_icache_miss;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt4"); @521
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt4"); @523
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt4 (
  .clk_en          (mhpmcnt4_clk_en),
  .cnt_adder       (mhpmcnt4_adder ),
  .cnt_en          (mhpmcnt4_cnt_en),
  .cnt_hwen        (mhpmcnt4h_wen  ),
  .cnt_output      (mhpmcnt4_value ),
  .cnt_wen         (mhpmcnt4_wen   )
);

// &Connect(.clk_en         (mhpmcnt4_clk_en), @525
//          .cnt_en         (mhpmcnt4_cnt_en), @526
//          .cnt_wen        (mhpmcnt4_wen), @527
//          .cnt_hwen       (mhpmcnt4h_wen), @528
//          .cnt_adder      (mhpmcnt4_adder), @529
//          .cnt_output     (mhpmcnt4_value)); @530


assign bht_mispred         = hpcp_retire_bht_mispred;
assign mhpmcnt8_adder      = bht_mispred;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt8"); @536
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt8"); @538
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt8 (
  .clk_en          (mhpmcnt8_clk_en),
  .cnt_adder       (mhpmcnt8_adder ),
  .cnt_en          (mhpmcnt8_cnt_en),
  .cnt_hwen        (mhpmcnt8h_wen  ),
  .cnt_output      (mhpmcnt8_value ),
  .cnt_wen         (mhpmcnt8_wen   )
);

// &Connect(.clk_en         (mhpmcnt8_clk_en), @540
//          .cnt_en         (mhpmcnt8_cnt_en), @541
//          .cnt_wen        (mhpmcnt8_wen), @542
//          .cnt_hwen       (mhpmcnt8h_wen), @543
//          .cnt_adder      (mhpmcnt8_adder), @544
//          .cnt_output     (mhpmcnt8_value)); @545


assign inst_condbr    = hpcp_retire_inst_condbr;
assign inst_condbr_gate = hpcp_retire_inst_condbr_gate;
assign mhpmcnt9_adder = inst_condbr;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt9"); @552
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt9"); @554
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt9 (
  .clk_en          (mhpmcnt9_clk_en),
  .cnt_adder       (mhpmcnt9_adder ),
  .cnt_en          (mhpmcnt9_cnt_en),
  .cnt_hwen        (mhpmcnt9h_wen  ),
  .cnt_output      (mhpmcnt9_value ),
  .cnt_wen         (mhpmcnt9_wen   )
);

// &Connect(.clk_en         (mhpmcnt9_clk_en), @556
//          .cnt_en         (mhpmcnt9_cnt_en), @557
//          .cnt_wen        (mhpmcnt9_wen), @558
//          .cnt_hwen       (mhpmcnt9h_wen), @559
//          .cnt_adder      (mhpmcnt9_adder), @560
//          .cnt_output     (mhpmcnt9_value)); @561


assign inst_store      = hpcp_retire_inst_store;
assign inst_store_gate = hpcp_retire_inst_store_gate;
assign mhpmcnt13_adder = inst_store;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt13"); @568
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt13"); @570
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt13 (
  .clk_en           (mhpmcnt13_clk_en),
  .cnt_adder        (mhpmcnt13_adder ),
  .cnt_en           (mhpmcnt13_cnt_en),
  .cnt_hwen         (mhpmcnt13h_wen  ),
  .cnt_output       (mhpmcnt13_value ),
  .cnt_wen          (mhpmcnt13_wen   )
);

// &Connect(.clk_en         (mhpmcnt13_clk_en), @572
//          .cnt_en         (mhpmcnt13_cnt_en), @573
//          .cnt_wen        (mhpmcnt13_wen), @574
//          .cnt_hwen       (mhpmcnt13h_wen), @575
//          .cnt_adder      (mhpmcnt13_adder), @576
//          .cnt_output     (mhpmcnt13_value));                             @577


assign mhpmcnt14_adder = hpcp_lsu_dcache_read_access;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt14"); @582
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt14"); @584
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt14 (
  .clk_en           (mhpmcnt14_clk_en),
  .cnt_adder        (mhpmcnt14_adder ),
  .cnt_en           (mhpmcnt14_cnt_en),
  .cnt_hwen         (mhpmcnt14h_wen  ),
  .cnt_output       (mhpmcnt14_value ),
  .cnt_wen          (mhpmcnt14_wen   )
);

// &Connect(.clk_en         (mhpmcnt14_clk_en), @586
//          .cnt_en         (mhpmcnt14_cnt_en), @587
//          .cnt_wen        (mhpmcnt14_wen), @588
//          .cnt_hwen       (mhpmcnt14h_wen), @589
//          .cnt_adder      (mhpmcnt14_adder), @590
//          .cnt_output     (mhpmcnt14_value));  @591


assign mhpmcnt15_adder = hpcp_lsu_dcache_read_miss;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt15"); @596
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt15"); @598
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt15 (
  .clk_en           (mhpmcnt15_clk_en),
  .cnt_adder        (mhpmcnt15_adder ),
  .cnt_en           (mhpmcnt15_cnt_en),
  .cnt_hwen         (mhpmcnt15h_wen  ),
  .cnt_output       (mhpmcnt15_value ),
  .cnt_wen          (mhpmcnt15_wen   )
);

// &Connect(.clk_en         (mhpmcnt15_clk_en), @600
//          .cnt_en         (mhpmcnt15_cnt_en), @601
//          .cnt_wen        (mhpmcnt15_wen), @602
//          .cnt_hwen       (mhpmcnt15h_wen), @603
//          .cnt_adder      (mhpmcnt15_adder), @604
//          .cnt_output     (mhpmcnt15_value));      @605


assign mhpmcnt16_adder = hpcp_lsu_dcache_write_access;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt16"); @610
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt16"); @612
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt16 (
  .clk_en           (mhpmcnt16_clk_en),
  .cnt_adder        (mhpmcnt16_adder ),
  .cnt_en           (mhpmcnt16_cnt_en),
  .cnt_hwen         (mhpmcnt16h_wen  ),
  .cnt_output       (mhpmcnt16_value ),
  .cnt_wen          (mhpmcnt16_wen   )
);

// &Connect(.clk_en         (mhpmcnt16_clk_en), @614
//          .cnt_en         (mhpmcnt16_cnt_en), @615
//          .cnt_wen        (mhpmcnt16_wen), @616
//          .cnt_hwen       (mhpmcnt16h_wen), @617
//          .cnt_adder      (mhpmcnt16_adder), @618
//          .cnt_output     (mhpmcnt16_value));    @619


assign mhpmcnt17_adder = hpcp_lsu_dcache_write_miss;
// &Instance("pa_hpcp_cnt", "x_hpcp_mhpmcnt17"); @624
// &Instance("pa_hpcp_cnt_dummy", "x_hpcp_mhpmcnt17"); @626
pa_hpcp_cnt_dummy  x_hpcp_mhpmcnt17 (
  .clk_en           (mhpmcnt17_clk_en),
  .cnt_adder        (mhpmcnt17_adder ),
  .cnt_en           (mhpmcnt17_cnt_en),
  .cnt_hwen         (mhpmcnt17h_wen  ),
  .cnt_output       (mhpmcnt17_value ),
  .cnt_wen          (mhpmcnt17_wen   )
);

// &Connect(.clk_en         (mhpmcnt17_clk_en), @628
//          .cnt_en         (mhpmcnt17_cnt_en), @629
//          .cnt_wen        (mhpmcnt17_wen), @630
//          .cnt_hwen       (mhpmcnt17h_wen), @631
//          .cnt_adder      (mhpmcnt17_adder), @632
//          .cnt_output     (mhpmcnt17_value));   @633




// &CombBeg; @638
always @( mhpmcnt14_value[63:0]
       or mhpmevt16_value[31:0]
       or mhpmcnt9_value[63:0]
       or mhpmevt13_value[31:0]
       or mhpmevt4_value[31:0]
       or sysio_hpcp_time[63:0]
       or mcntinhbt_value[31:0]
       or mcycle_value[63:0]
       or cp0_hpcp_index[11:0]
       or mhpmcnt4_value[63:0]
       or mhpmevt3_value[31:0]
       or mhpmcnt16_value[63:0]
       or mhpmevt9_value[31:0]
       or mhpmevt15_value[31:0]
       or mhpmcnt17_value[63:0]
       or minstret_value[63:0]
       or mhpmcnt15_value[63:0]
       or mhpmcnt8_value[63:0]
       or mhpmcnt13_value[63:0]
       or mhpmcnt3_value[63:0]
       or mhpmevt14_value[31:0]
       or mhpmevt8_value[31:0]
       or mhpmevt17_value[31:0])
begin
  case(cp0_hpcp_index[11:0])
    MCNTINHBT  : data_out[31:0] = mcntinhbt_value[31:0];
    MHPMEVT3   : data_out[31:0] = mhpmevt3_value[31:0];
    MHPMEVT4   : data_out[31:0] = mhpmevt4_value[31:0];
    MHPMEVT8   : data_out[31:0] = mhpmevt8_value[31:0];
    MHPMEVT9   : data_out[31:0] = mhpmevt9_value[31:0];
    MHPMEVT13  : data_out[31:0] = mhpmevt13_value[31:0];
    MHPMEVT14  : data_out[31:0] = mhpmevt14_value[31:0];
    MHPMEVT15  : data_out[31:0] = mhpmevt15_value[31:0];
    MHPMEVT16  : data_out[31:0] = mhpmevt16_value[31:0];
    MHPMEVT17  : data_out[31:0] = mhpmevt17_value[31:0];

    MCYCLE     : data_out[31:0] = mcycle_value[31:0];
    MINSTRET   : data_out[31:0] = minstret_value[31:0];
    MHPMCNT3   : data_out[31:0] = mhpmcnt3_value[31:0];
    MHPMCNT4   : data_out[31:0] = mhpmcnt4_value[31:0];
    MHPMCNT8   : data_out[31:0] = mhpmcnt8_value[31:0];
    MHPMCNT9   : data_out[31:0] = mhpmcnt9_value[31:0];
    MHPMCNT13  : data_out[31:0] = mhpmcnt13_value[31:0];
    MHPMCNT14  : data_out[31:0] = mhpmcnt14_value[31:0];
    MHPMCNT15  : data_out[31:0] = mhpmcnt15_value[31:0];
    MHPMCNT16  : data_out[31:0] = mhpmcnt16_value[31:0];
    MHPMCNT17  : data_out[31:0] = mhpmcnt17_value[31:0];

    MCYCLEH    : data_out[31:0] = mcycle_value[63:32];
    MINSTRETH  : data_out[31:0] = minstret_value[63:32];
    MHPMCNT3H  : data_out[31:0] = mhpmcnt3_value[63:32];
    MHPMCNT4H  : data_out[31:0] = mhpmcnt4_value[63:32];
    MHPMCNT8H  : data_out[31:0] = mhpmcnt8_value[63:32];
    MHPMCNT9H  : data_out[31:0] = mhpmcnt9_value[63:32];
    MHPMCNT13H : data_out[31:0] = mhpmcnt13_value[63:32];
    MHPMCNT14H : data_out[31:0] = mhpmcnt14_value[63:32];
    MHPMCNT15H : data_out[31:0] = mhpmcnt15_value[63:32];
    MHPMCNT16H : data_out[31:0] = mhpmcnt16_value[63:32];
    MHPMCNT17H : data_out[31:0] = mhpmcnt17_value[63:32];

    CYCLE      : data_out[31:0] = mcycle_value[31:0];
    TIME       : data_out[31:0] = sysio_hpcp_time[31:0];
    INSTRET    : data_out[31:0] = minstret_value[31:0];
    HPMCNT3    : data_out[31:0] = mhpmcnt3_value[31:0];
    HPMCNT4    : data_out[31:0] = mhpmcnt4_value[31:0];
    HPMCNT8    : data_out[31:0] = mhpmcnt8_value[31:0];
    HPMCNT9    : data_out[31:0] = mhpmcnt9_value[31:0];
    HPMCNT13   : data_out[31:0] = mhpmcnt13_value[31:0];
    HPMCNT14   : data_out[31:0] = mhpmcnt14_value[31:0];
    HPMCNT15   : data_out[31:0] = mhpmcnt15_value[31:0];
    HPMCNT16   : data_out[31:0] = mhpmcnt16_value[31:0];
    HPMCNT17   : data_out[31:0] = mhpmcnt17_value[31:0];

    CYCLEH     : data_out[31:0] = mcycle_value[63:32];
    TIMEH      : data_out[31:0] = sysio_hpcp_time[63:32];
    INSTRETH   : data_out[31:0] = minstret_value[63:32];
    HPMCNT3H   : data_out[31:0] = mhpmcnt3_value[63:32];
    HPMCNT4H   : data_out[31:0] = mhpmcnt4_value[63:32];
    HPMCNT8H   : data_out[31:0] = mhpmcnt8_value[63:32];
    HPMCNT9H   : data_out[31:0] = mhpmcnt9_value[63:32];
    HPMCNT13H  : data_out[31:0] = mhpmcnt13_value[63:32];
    HPMCNT14H  : data_out[31:0] = mhpmcnt14_value[63:32];
    HPMCNT15H  : data_out[31:0] = mhpmcnt15_value[63:32];
    HPMCNT16H  : data_out[31:0] = mhpmcnt16_value[63:32];
    HPMCNT17H  : data_out[31:0] = mhpmcnt17_value[63:32];
    default    : data_out[31:0] = 32'b0;
  endcase
// &CombEnd; @702
end




assign hpcp_cp0_data[31:0] = data_out[31:0];































// &ModuleEnd; @739
endmodule























// &ModuleBeg; @22
module pa_iahbl_top(
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_burst,
  bmu_iahbl_dbus_lock,
  bmu_iahbl_dbus_lrsc,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_dp,
  bmu_iahbl_dbus_seq,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_iahbl_had_acc_deny,
  bmu_iahbl_had_addr,
  bmu_iahbl_had_burst,
  bmu_iahbl_had_prot,
  bmu_iahbl_had_req,
  bmu_iahbl_had_req_dp,
  bmu_iahbl_had_seq,
  bmu_iahbl_had_size,
  bmu_iahbl_had_wdata,
  bmu_iahbl_had_write,
  bmu_iahbl_ibus_acc_deny,
  bmu_iahbl_ibus_addr,
  bmu_iahbl_ibus_burst,
  bmu_iahbl_ibus_prot,
  bmu_iahbl_ibus_req,
  bmu_iahbl_ibus_req_dp,
  bmu_iahbl_ibus_seq,
  bmu_iahbl_ibus_size,
  cpurst_b,
  forever_cpuclk,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  iahbl_bmu_had_acc_err,
  iahbl_bmu_had_data,
  iahbl_bmu_had_grnt,
  iahbl_bmu_had_trans_cmplt,
  iahbl_bmu_ibus_acc_err,
  iahbl_bmu_ibus_data,
  iahbl_bmu_ibus_grnt,
  iahbl_bmu_ibus_trans_cmplt,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hlock,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  iahbl_sysio_idle,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_xx_flush,
  lsu_xx_warm_up,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_async_flush,
  sysio_xx_halt_req
);

// &Ports; @23
input           bmu_iahbl_dbus_acc_deny;
input   [31:0]  bmu_iahbl_dbus_addr;
input   [2 :0]  bmu_iahbl_dbus_burst;
input           bmu_iahbl_dbus_lock;
input           bmu_iahbl_dbus_lrsc;
input   [3 :0]  bmu_iahbl_dbus_prot;
input           bmu_iahbl_dbus_req;
input           bmu_iahbl_dbus_req_dp;
input           bmu_iahbl_dbus_seq;
input   [1 :0]  bmu_iahbl_dbus_size;
input   [31:0]  bmu_iahbl_dbus_wdata;
input           bmu_iahbl_dbus_write;
input           bmu_iahbl_had_acc_deny;
input   [31:0]  bmu_iahbl_had_addr;
input   [2 :0]  bmu_iahbl_had_burst;
input   [3 :0]  bmu_iahbl_had_prot;
input           bmu_iahbl_had_req;
input           bmu_iahbl_had_req_dp;
input           bmu_iahbl_had_seq;
input   [1 :0]  bmu_iahbl_had_size;
input   [31:0]  bmu_iahbl_had_wdata;
input           bmu_iahbl_had_write;
input           bmu_iahbl_ibus_acc_deny;
input   [31:0]  bmu_iahbl_ibus_addr;
input   [2 :0]  bmu_iahbl_ibus_burst;
input   [3 :0]  bmu_iahbl_ibus_prot;
input           bmu_iahbl_ibus_req;
input           bmu_iahbl_ibus_req_dp;
input           bmu_iahbl_ibus_seq;
input   [1 :0]  bmu_iahbl_ibus_size;
input           cpurst_b;
input           forever_cpuclk;
input           lsu_biu_amo_pmp_deny;
input           lsu_biu_async_expt_ack;
input           lsu_xx_flush;
input           lsu_xx_warm_up;
input   [31:0]  pad_iahbl_hrdata;
input           pad_iahbl_hready;
input           pad_iahbl_hresp;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input           sysio_xx_halt_req;
output          iahbl_bmu_dbus_acc_err;
output  [31:0]  iahbl_bmu_dbus_data;
output          iahbl_bmu_dbus_grnt;
output          iahbl_bmu_dbus_trans_cmplt;
output          iahbl_bmu_had_acc_err;
output  [31:0]  iahbl_bmu_had_data;
output          iahbl_bmu_had_grnt;
output          iahbl_bmu_had_trans_cmplt;
output          iahbl_bmu_ibus_acc_err;
output  [31:0]  iahbl_bmu_ibus_data;
output          iahbl_bmu_ibus_grnt;
output          iahbl_bmu_ibus_trans_cmplt;
output  [31:0]  iahbl_pad_haddr;
output  [2 :0]  iahbl_pad_hburst;
output          iahbl_pad_hlock;
output  [3 :0]  iahbl_pad_hprot;
output  [2 :0]  iahbl_pad_hsize;
output  [1 :0]  iahbl_pad_htrans;
output  [31:0]  iahbl_pad_hwdata;
output          iahbl_pad_hwrite;
output          iahbl_sysio_idle;

// &Regs; @24

// &Wires; @25
wire            bmu_iahbl_dbus_acc_deny;
wire    [31:0]  bmu_iahbl_dbus_addr;
wire    [2 :0]  bmu_iahbl_dbus_burst;
wire            bmu_iahbl_dbus_lock;
wire            bmu_iahbl_dbus_lrsc;
wire    [3 :0]  bmu_iahbl_dbus_prot;
wire            bmu_iahbl_dbus_req;
wire            bmu_iahbl_dbus_req_dp;
wire            bmu_iahbl_dbus_seq;
wire    [1 :0]  bmu_iahbl_dbus_size;
wire    [31:0]  bmu_iahbl_dbus_wdata;
wire            bmu_iahbl_dbus_write;
wire            bmu_iahbl_had_acc_deny;
wire    [31:0]  bmu_iahbl_had_addr;
wire    [2 :0]  bmu_iahbl_had_burst;
wire    [3 :0]  bmu_iahbl_had_prot;
wire            bmu_iahbl_had_req;
wire            bmu_iahbl_had_req_dp;
wire            bmu_iahbl_had_seq;
wire    [1 :0]  bmu_iahbl_had_size;
wire    [31:0]  bmu_iahbl_had_wdata;
wire            bmu_iahbl_had_write;
wire            bmu_iahbl_ibus_acc_deny;
wire    [31:0]  bmu_iahbl_ibus_addr;
wire    [2 :0]  bmu_iahbl_ibus_burst;
wire    [3 :0]  bmu_iahbl_ibus_prot;
wire            bmu_iahbl_ibus_req;
wire            bmu_iahbl_ibus_req_dp;
wire            bmu_iahbl_ibus_seq;
wire    [1 :0]  bmu_iahbl_ibus_size;
wire            cpurst_b;
wire            forever_cpuclk;
wire            iahbl_bmu_dbus_acc_err;
wire    [31:0]  iahbl_bmu_dbus_data;
wire            iahbl_bmu_dbus_grnt;
wire            iahbl_bmu_dbus_trans_cmplt;
wire            iahbl_bmu_had_acc_err;
wire    [31:0]  iahbl_bmu_had_data;
wire            iahbl_bmu_had_grnt;
wire            iahbl_bmu_had_trans_cmplt;
wire            iahbl_bmu_ibus_acc_err;
wire    [31:0]  iahbl_bmu_ibus_data;
wire            iahbl_bmu_ibus_grnt;
wire            iahbl_bmu_ibus_trans_cmplt;
wire            iahbl_clk_en;
wire            iahbl_gated_clk;
wire    [31:0]  iahbl_pad_haddr;
wire    [2 :0]  iahbl_pad_hburst;
wire            iahbl_pad_hlock;
wire    [3 :0]  iahbl_pad_hprot;
wire    [2 :0]  iahbl_pad_hsize;
wire    [1 :0]  iahbl_pad_htrans;
wire    [31:0]  iahbl_pad_hwdata;
wire            iahbl_pad_hwrite;
wire            iahbl_sysio_idle;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_xx_flush;
wire    [31:0]  pad_iahbl_hrdata;
wire            pad_iahbl_hready;
wire            pad_iahbl_hresp;
wire            pad_yy_gate_clk_en_b;
wire            rtu_yy_xx_async_flush;
wire            sysio_xx_halt_req;





// &Instance("gated_clk_cell", "x_pa_iahbl_cpuclk_cell"); @30
gated_clk_cell  x_pa_iahbl_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (iahbl_gated_clk     ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (iahbl_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in     (forever_cpuclk ), @31
//          .global_en  (1'b1           ), @32
//          .local_en   (iahbl_clk_en   ), @33
//          .module_en  (1'b0           ), @34
//          .external_en(1'b0           ), @35
//          .clk_out    (iahbl_gated_clk)); @36

// &ConnRule(s/ahbl/iahbl/);  @38
// &Instance("pa_ahbl_if_fo", "x_pa_ahbl_if"); @40
// &Connect(.clk_en    (ilite_clk_en)); @41
// &Force("input","lsu_xx_warm_up"); @46
// &Instance("pa_ahbl_if", "x_pa_ahbl_if"); @47
pa_ahbl_if  x_pa_ahbl_if (
  .ahbl_bmu_dbus_acc_err      (iahbl_bmu_dbus_acc_err    ),
  .ahbl_bmu_dbus_data         (iahbl_bmu_dbus_data       ),
  .ahbl_bmu_dbus_grnt         (iahbl_bmu_dbus_grnt       ),
  .ahbl_bmu_dbus_trans_cmplt  (iahbl_bmu_dbus_trans_cmplt),
  .ahbl_bmu_had_acc_err       (iahbl_bmu_had_acc_err     ),
  .ahbl_bmu_had_data          (iahbl_bmu_had_data        ),
  .ahbl_bmu_had_grnt          (iahbl_bmu_had_grnt        ),
  .ahbl_bmu_had_trans_cmplt   (iahbl_bmu_had_trans_cmplt ),
  .ahbl_bmu_ibus_acc_err      (iahbl_bmu_ibus_acc_err    ),
  .ahbl_bmu_ibus_data         (iahbl_bmu_ibus_data       ),
  .ahbl_bmu_ibus_grnt         (iahbl_bmu_ibus_grnt       ),
  .ahbl_bmu_ibus_trans_cmplt  (iahbl_bmu_ibus_trans_cmplt),
  .ahbl_clk_en                (iahbl_clk_en              ),
  .ahbl_gated_clk             (iahbl_gated_clk           ),
  .ahbl_pad_haddr             (iahbl_pad_haddr           ),
  .ahbl_pad_hburst            (iahbl_pad_hburst          ),
  .ahbl_pad_hlock             (iahbl_pad_hlock           ),
  .ahbl_pad_hprot             (iahbl_pad_hprot           ),
  .ahbl_pad_hsize             (iahbl_pad_hsize           ),
  .ahbl_pad_htrans            (iahbl_pad_htrans          ),
  .ahbl_pad_hwdata            (iahbl_pad_hwdata          ),
  .ahbl_pad_hwrite            (iahbl_pad_hwrite          ),
  .ahbl_sysio_idle            (iahbl_sysio_idle          ),
  .bmu_ahbl_dbus_acc_deny     (bmu_iahbl_dbus_acc_deny   ),
  .bmu_ahbl_dbus_addr         (bmu_iahbl_dbus_addr       ),
  .bmu_ahbl_dbus_burst        (bmu_iahbl_dbus_burst      ),
  .bmu_ahbl_dbus_lock         (bmu_iahbl_dbus_lock       ),
  .bmu_ahbl_dbus_lrsc         (bmu_iahbl_dbus_lrsc       ),
  .bmu_ahbl_dbus_prot         (bmu_iahbl_dbus_prot       ),
  .bmu_ahbl_dbus_req          (bmu_iahbl_dbus_req        ),
  .bmu_ahbl_dbus_req_dp       (bmu_iahbl_dbus_req_dp     ),
  .bmu_ahbl_dbus_seq          (bmu_iahbl_dbus_seq        ),
  .bmu_ahbl_dbus_size         (bmu_iahbl_dbus_size       ),
  .bmu_ahbl_dbus_wdata        (bmu_iahbl_dbus_wdata      ),
  .bmu_ahbl_dbus_write        (bmu_iahbl_dbus_write      ),
  .bmu_ahbl_had_acc_deny      (bmu_iahbl_had_acc_deny    ),
  .bmu_ahbl_had_addr          (bmu_iahbl_had_addr        ),
  .bmu_ahbl_had_burst         (bmu_iahbl_had_burst       ),
  .bmu_ahbl_had_prot          (bmu_iahbl_had_prot        ),
  .bmu_ahbl_had_req           (bmu_iahbl_had_req         ),
  .bmu_ahbl_had_req_dp        (bmu_iahbl_had_req_dp      ),
  .bmu_ahbl_had_seq           (bmu_iahbl_had_seq         ),
  .bmu_ahbl_had_size          (bmu_iahbl_had_size        ),
  .bmu_ahbl_had_wdata         (bmu_iahbl_had_wdata       ),
  .bmu_ahbl_had_write         (bmu_iahbl_had_write       ),
  .bmu_ahbl_ibus_acc_deny     (bmu_iahbl_ibus_acc_deny   ),
  .bmu_ahbl_ibus_addr         (bmu_iahbl_ibus_addr       ),
  .bmu_ahbl_ibus_burst        (bmu_iahbl_ibus_burst      ),
  .bmu_ahbl_ibus_prot         (bmu_iahbl_ibus_prot       ),
  .bmu_ahbl_ibus_req          (bmu_iahbl_ibus_req        ),
  .bmu_ahbl_ibus_req_dp       (bmu_iahbl_ibus_req_dp     ),
  .bmu_ahbl_ibus_seq          (bmu_iahbl_ibus_seq        ),
  .bmu_ahbl_ibus_size         (bmu_iahbl_ibus_size       ),
  .cpurst_b                   (cpurst_b                  ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .pad_ahbl_hrdata            (pad_iahbl_hrdata          ),
  .pad_ahbl_hready            (pad_iahbl_hready          ),
  .pad_ahbl_hresp             (pad_iahbl_hresp           ),
  .rtu_yy_xx_async_flush      (rtu_yy_xx_async_flush     ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);

// &ModuleEnd; @52
endmodule
























// &ModuleBeg; @23
module pa_idu_ctrl(
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_dp_ex1_bju_sel,
  ctrl_dp_ex1_div_sel,
  ctrl_dp_ex1_dst_preg,
  ctrl_dp_ex1_dst_vld,
  ctrl_dp_ex1_inst_vld,
  ctrl_dp_ex1_lsu_sel,
  ctrl_dp_ex1_rs1_dep,
  ctrl_dp_ex1_rs2_dep,
  ctrl_dp_ex1_st_sel,
  ctrl_dp_pipe_down,
  ctrl_dp_pipe_down_gate,
  ctrl_dp_wbbr_en,
  ctrl_dp_wbbr_rs2_use_zero,
  ctrl_gpr_div_inst,
  ctrl_gpr_id_dst_vld,
  ctrl_gpr_id_wr_idx,
  ctrl_gpr_ld_inst,
  ctrl_gpr_wr_issue,
  ctrl_hs_be_idle,
  ctrl_hs_no_op,
  ctrl_hs_stall,
  ctrl_split_stall,
  ctrl_top_bju_dep1_vld,
  ctrl_top_bju_dep2_vld,
  ctrl_top_cp0_stall,
  ctrl_top_div_stall,
  ctrl_top_ex1_fp_vld,
  ctrl_top_ex1_sel,
  ctrl_top_ex1_stall,
  ctrl_top_ex1_vld,
  ctrl_top_id_cancel,
  ctrl_top_id_inst_vld,
  ctrl_top_id_stall,
  ctrl_top_ld_stall,
  ctrl_top_norm_stall,
  ctrl_top_st_dep_vld,
  decd_ctrl_bju_use_pc,
  decd_ctrl_dst_idx,
  decd_ctrl_dst_vld,
  decd_ctrl_id_func,
  decd_ctrl_ill_expt,
  decd_ctrl_inst_32bit,
  decd_ctrl_sti_vld,
  decd_ctrl_str_vld,
  decd_ctrl_unit_sel,
  dp_ctrl_ex1_ex_st_rs2_vld,
  dp_ctrl_ex1_st_vld,
  dp_ctrl_rs1_dep_ex1_dst,
  dp_ctrl_rs1_fwd_lsu,
  dp_ctrl_rs1_stall_upd,
  dp_ctrl_rs2_dep_ex1_dst,
  dp_ctrl_rs2_fwd_lsu,
  dp_ctrl_rs2_stall_upd,
  dp_ctrl_rs3_dep_ex1_dst,
  dp_ctrl_rs3_fwd_lsu,
  dp_ctrl_rs3_stall_upd,
  dp_ctrl_rs_dep_ex1,
  forever_cpuclk,
  gpr_ctrl_rd_busy,
  gpr_ctrl_rd_busy_div,
  gpr_ctrl_rd_busy_lsu,
  gpr_ctrl_rs1_busy,
  gpr_ctrl_rs1_busy_div,
  gpr_ctrl_rs1_busy_lsu,
  gpr_ctrl_rs1_busy_lsu2,
  gpr_ctrl_rs2_busy,
  gpr_ctrl_rs2_busy_div,
  gpr_ctrl_rs2_busy_lsu,
  gpr_ctrl_rs2_busy_lsu2,
  gpr_ctrl_rs3_busy,
  gpr_ctrl_rs3_busy_div,
  gpr_ctrl_rs3_busy_lsu,
  gpr_ctrl_rs3_busy_lsu2,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  hs_ctrl_cancel,
  hs_ctrl_inst_vld,
  hs_ctrl_spec_ipush,
  hs_ctrl_stall,
  idu_cp0_ex1_dst_idx,
  idu_cp0_ex1_dst_vld,
  idu_cp0_ex1_expt_type,
  idu_cp0_ex1_expt_vld,
  idu_cp0_ex1_inst_bkpt,
  idu_cp0_ex1_sel,
  idu_had_id_inst_bkpt,
  idu_had_no_op,
  idu_ifu_id_stall,
  idu_iu_ex1_alu_sel,
  idu_iu_ex1_bht_pred,
  idu_iu_ex1_bju_depd_lsu_src0,
  idu_iu_ex1_bju_depd_lsu_src1,
  idu_iu_ex1_bju_sel,
  idu_iu_ex1_bju_use_pc,
  idu_iu_ex1_div_sel,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_inst_len,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_mul_sel,
  idu_iu_ex1_wb_vld,
  idu_lsu_ex1_base_sel,
  idu_lsu_ex1_dest_reg,
  idu_lsu_ex1_dest_vld,
  idu_lsu_ex1_fls,
  idu_lsu_ex1_sel,
  idu_lsu_ex1_src1_depd,
  idu_misc_cpuclk,
  idu_rtu_ex1_dst_vld,
  idu_rtu_ex1_inst_vld,
  idu_rtu_ex1_lsu_sel,
  idu_xx_ex1_warm_up,
  ifu_idu_chgflw_flush,
  ifu_idu_id_expt_vld,
  ifu_idu_id_inst_bkpt,
  ifu_idu_id_inst_vld,
  ifu_idu_id_pred_taken,
  ifu_idu_id_warm_up,
  ifu_xx_warm_up_clk,
  iu_xx_no_op,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  rtu_idu_ex1_stall,
  rtu_idu_id_cancel,
  rtu_idu_id_stall,
  rtu_idu_late_flush,
  rtu_xx_no_op,
  rtu_yy_xx_flush,
  split_ctrl_cancel,
  split_ctrl_icg_en,
  split_ctrl_stall
);

// &Ports; @24
input          cp0_yy_clk_en;
input          cpurst_b;
input          decd_ctrl_bju_use_pc;
input   [5:0]  decd_ctrl_dst_idx;
input          decd_ctrl_dst_vld;
input   [4:0]  decd_ctrl_id_func;
input          decd_ctrl_ill_expt;
input          decd_ctrl_inst_32bit;
input          decd_ctrl_sti_vld;
input          decd_ctrl_str_vld;
input   [5:0]  decd_ctrl_unit_sel;
input          dp_ctrl_ex1_ex_st_rs2_vld;
input          dp_ctrl_ex1_st_vld;
input          dp_ctrl_rs1_dep_ex1_dst;
input          dp_ctrl_rs1_fwd_lsu;
input          dp_ctrl_rs1_stall_upd;
input          dp_ctrl_rs2_dep_ex1_dst;
input          dp_ctrl_rs2_fwd_lsu;
input          dp_ctrl_rs2_stall_upd;
input          dp_ctrl_rs3_dep_ex1_dst;
input          dp_ctrl_rs3_fwd_lsu;
input          dp_ctrl_rs3_stall_upd;
input          dp_ctrl_rs_dep_ex1;
input          forever_cpuclk;
input          gpr_ctrl_rd_busy;
input          gpr_ctrl_rd_busy_div;
input          gpr_ctrl_rd_busy_lsu;
input          gpr_ctrl_rs1_busy;
input          gpr_ctrl_rs1_busy_div;
input          gpr_ctrl_rs1_busy_lsu;
input          gpr_ctrl_rs1_busy_lsu2;
input          gpr_ctrl_rs2_busy;
input          gpr_ctrl_rs2_busy_div;
input          gpr_ctrl_rs2_busy_lsu;
input          gpr_ctrl_rs2_busy_lsu2;
input          gpr_ctrl_rs3_busy;
input          gpr_ctrl_rs3_busy_div;
input          gpr_ctrl_rs3_busy_lsu;
input          gpr_ctrl_rs3_busy_lsu2;
input   [8:0]  had_idu_id_inst_bkpt;
input          had_idu_id_inst_bkpt_brir;
input          had_idu_id_inst_bkpt_hit;
input          hs_ctrl_cancel;
input          hs_ctrl_inst_vld;
input          hs_ctrl_spec_ipush;
input          hs_ctrl_stall;
input          ifu_idu_chgflw_flush;
input          ifu_idu_id_expt_vld;
input   [8:0]  ifu_idu_id_inst_bkpt;
input          ifu_idu_id_inst_vld;
input   [1:0]  ifu_idu_id_pred_taken;
input          ifu_idu_id_warm_up;
input          ifu_xx_warm_up_clk;
input          iu_xx_no_op;
input          lsu_xx_no_op;
input          pad_yy_gate_clk_en_b;
input          rtu_idu_ex1_stall;
input          rtu_idu_id_cancel;
input          rtu_idu_id_stall;
input          rtu_idu_late_flush;
input          rtu_xx_no_op;
input          rtu_yy_xx_flush;
input          split_ctrl_cancel;
input          split_ctrl_icg_en;
input          split_ctrl_stall;
output         ctrl_dp_ex1_bju_sel;
output         ctrl_dp_ex1_div_sel;
output  [5:0]  ctrl_dp_ex1_dst_preg;
output         ctrl_dp_ex1_dst_vld;
output         ctrl_dp_ex1_inst_vld;
output         ctrl_dp_ex1_lsu_sel;
output         ctrl_dp_ex1_rs1_dep;
output         ctrl_dp_ex1_rs2_dep;
output         ctrl_dp_ex1_st_sel;
output         ctrl_dp_pipe_down;
output         ctrl_dp_pipe_down_gate;
output         ctrl_dp_wbbr_en;
output         ctrl_dp_wbbr_rs2_use_zero;
output         ctrl_gpr_div_inst;
output         ctrl_gpr_id_dst_vld;
output  [5:0]  ctrl_gpr_id_wr_idx;
output         ctrl_gpr_ld_inst;
output         ctrl_gpr_wr_issue;
output         ctrl_hs_be_idle;
output         ctrl_hs_no_op;
output         ctrl_hs_stall;
output         ctrl_split_stall;
output         ctrl_top_bju_dep1_vld;
output         ctrl_top_bju_dep2_vld;
output         ctrl_top_cp0_stall;
output         ctrl_top_div_stall;
output         ctrl_top_ex1_fp_vld;
output  [5:0]  ctrl_top_ex1_sel;
output         ctrl_top_ex1_stall;
output         ctrl_top_ex1_vld;
output         ctrl_top_id_cancel;
output         ctrl_top_id_inst_vld;
output         ctrl_top_id_stall;
output         ctrl_top_ld_stall;
output         ctrl_top_norm_stall;
output         ctrl_top_st_dep_vld;
output  [5:0]  idu_cp0_ex1_dst_idx;
output         idu_cp0_ex1_dst_vld;
output         idu_cp0_ex1_expt_type;
output         idu_cp0_ex1_expt_vld;
output  [8:0]  idu_cp0_ex1_inst_bkpt;
output         idu_cp0_ex1_sel;
output  [8:0]  idu_had_id_inst_bkpt;
output         idu_had_no_op;
output         idu_ifu_id_stall;
output         idu_iu_ex1_alu_sel;
output  [1:0]  idu_iu_ex1_bht_pred;
output         idu_iu_ex1_bju_depd_lsu_src0;
output         idu_iu_ex1_bju_depd_lsu_src1;
output         idu_iu_ex1_bju_sel;
output         idu_iu_ex1_bju_use_pc;
output         idu_iu_ex1_div_sel;
output  [5:0]  idu_iu_ex1_dst_preg;
output         idu_iu_ex1_inst_len;
output         idu_iu_ex1_inst_vld;
output         idu_iu_ex1_mul_sel;
output         idu_iu_ex1_wb_vld;
output         idu_lsu_ex1_base_sel;
output  [5:0]  idu_lsu_ex1_dest_reg;
output         idu_lsu_ex1_dest_vld;
output         idu_lsu_ex1_fls;
output         idu_lsu_ex1_sel;
output         idu_lsu_ex1_src1_depd;
output         idu_misc_cpuclk;
output         idu_rtu_ex1_dst_vld;
output         idu_rtu_ex1_inst_vld;
output         idu_rtu_ex1_lsu_sel;
output         idu_xx_ex1_warm_up;

// &Regs; @25
reg            ctrl_ex1_bju_rs1_dep;
reg            ctrl_ex1_bju_use_pc;
reg     [5:0]  ctrl_ex1_dst_idx;
reg            ctrl_ex1_dst_vld;
reg            ctrl_ex1_expt_type;
reg            ctrl_ex1_expt_vld;
reg            ctrl_ex1_fls;
reg     [8:0]  ctrl_ex1_inst_bkpt;
reg            ctrl_ex1_inst_len;
reg            ctrl_ex1_inst_vld;
reg            ctrl_ex1_int_dst_vld;
reg     [1:0]  ctrl_ex1_pred_taken;
reg            ctrl_ex1_rs2_dep;
reg     [5:0]  ctrl_ex1_unit_sel;
reg            ctrl_ex1_warm_up;

// &Wires; @26
wire           cp0_yy_clk_en;
wire           cpurst_b;
wire           ctrl_bju_rs1_dep_vld;
wire           ctrl_bju_rs2_dep_vld;
wire           ctrl_cpuclk;
wire           ctrl_dep_div_stall;
wire           ctrl_dep_ld_stall;
wire           ctrl_dep_mul_stall;
wire           ctrl_dep_norm_stall;
wire           ctrl_dp_ex1_bju_sel;
wire           ctrl_dp_ex1_div_sel;
wire    [5:0]  ctrl_dp_ex1_dst_preg;
wire           ctrl_dp_ex1_dst_vld;
wire           ctrl_dp_ex1_inst_vld;
wire           ctrl_dp_ex1_lsu_sel;
wire           ctrl_dp_ex1_rs1_dep;
wire           ctrl_dp_ex1_rs2_dep;
wire           ctrl_dp_ex1_st_sel;
wire           ctrl_dp_pipe_down;
wire           ctrl_dp_pipe_down_gate;
wire           ctrl_dp_wbbr_en;
wire           ctrl_dp_wbbr_rs2_use_zero;
wire           ctrl_ex1_bju_sel;
wire           ctrl_ex1_cp0_sel;
wire           ctrl_ex1_div_sel;
wire           ctrl_ex1_lsu_sel;
wire           ctrl_ex1_mul_sel;
wire           ctrl_fence_bkpt_stall;
wire           ctrl_fence_cp0_stall;
wire           ctrl_gpr_div_inst;
wire           ctrl_gpr_id_dst_vld;
wire    [5:0]  ctrl_gpr_id_wr_idx;
wire           ctrl_gpr_ld_inst;
wire           ctrl_gpr_wr_issue;
wire           ctrl_hs_be_idle;
wire           ctrl_hs_no_op;
wire           ctrl_hs_stall;
wire           ctrl_icg_en;
wire           ctrl_id_bju_inst;
wire           ctrl_id_div_inst;
wire           ctrl_id_expt_type;
wire           ctrl_id_expt_vld;
wire           ctrl_id_inst_bkpt_vld;
wire           ctrl_id_inst_vld;
wire           ctrl_id_inst_vld_fin;
wire           ctrl_id_issue_cancel;
wire           ctrl_id_ld_inst;
wire           ctrl_id_st_inst;
wire           ctrl_id_stall;
wire    [5:0]  ctrl_id_unit_sel;
wire           ctrl_issue_stall;
wire           ctrl_pipe_down;
wire           ctrl_rtu_id_stall;
wire           ctrl_split_stall;
wire           ctrl_st_rs2_dep_vld;
wire           ctrl_st_rs3_dep_vld;
wire           ctrl_top_bju_dep1_vld;
wire           ctrl_top_bju_dep2_vld;
wire           ctrl_top_cp0_stall;
wire           ctrl_top_div_stall;
wire           ctrl_top_ex1_fp_vld;
wire    [5:0]  ctrl_top_ex1_sel;
wire           ctrl_top_ex1_stall;
wire           ctrl_top_ex1_vld;
wire           ctrl_top_id_cancel;
wire           ctrl_top_id_inst_vld;
wire           ctrl_top_id_stall;
wire           ctrl_top_ld_stall;
wire           ctrl_top_norm_stall;
wire           ctrl_top_st_dep_vld;
wire           decd_ctrl_bju_use_pc;
wire    [5:0]  decd_ctrl_dst_idx;
wire           decd_ctrl_dst_vld;
wire    [4:0]  decd_ctrl_id_func;
wire           decd_ctrl_ill_expt;
wire           decd_ctrl_inst_32bit;
wire           decd_ctrl_sti_vld;
wire           decd_ctrl_str_vld;
wire    [5:0]  decd_ctrl_unit_sel;
wire           dp_ctrl_ex1_ex_st_rs2_vld;
wire           dp_ctrl_ex1_st_vld;
wire           dp_ctrl_rs1_dep_ex1_dst;
wire           dp_ctrl_rs1_fwd_lsu;
wire           dp_ctrl_rs1_stall_upd;
wire           dp_ctrl_rs2_dep_ex1_dst;
wire           dp_ctrl_rs2_fwd_lsu;
wire           dp_ctrl_rs2_stall_upd;
wire           dp_ctrl_rs3_dep_ex1_dst;
wire           dp_ctrl_rs3_fwd_lsu;
wire           dp_ctrl_rs3_stall_upd;
wire           dp_ctrl_rs_dep_ex1;
wire    [5:0]  fdecd_ctrl_dst_idx;
wire           fdecd_ctrl_dst_vld;
wire           fdecd_ctrl_fls;
wire           fdecd_ctrl_int_dst_vld;
wire           forever_cpuclk;
wire           fpu_xx_no_op;
wire           gpr_ctrl_rd_busy;
wire           gpr_ctrl_rd_busy_div;
wire           gpr_ctrl_rd_busy_lsu;
wire           gpr_ctrl_rs1_busy;
wire           gpr_ctrl_rs1_busy_div;
wire           gpr_ctrl_rs1_busy_lsu;
wire           gpr_ctrl_rs1_busy_lsu2;
wire           gpr_ctrl_rs2_busy;
wire           gpr_ctrl_rs2_busy_div;
wire           gpr_ctrl_rs2_busy_lsu;
wire           gpr_ctrl_rs2_busy_lsu2;
wire           gpr_ctrl_rs3_busy;
wire           gpr_ctrl_rs3_busy_div;
wire           gpr_ctrl_rs3_busy_lsu;
wire           gpr_ctrl_rs3_busy_lsu2;
wire    [8:0]  had_idu_id_inst_bkpt;
wire           had_idu_id_inst_bkpt_brir;
wire           had_idu_id_inst_bkpt_hit;
wire           hs_ctrl_cancel;
wire           hs_ctrl_inst_vld;
wire           hs_ctrl_spec_ipush;
wire           hs_ctrl_stall;
wire           id_fp_ctrl_id_stall;
wire           id_fp_ctrl_rs2_dep_ex1_dst;
wire           id_fp_ctrl_rs2_stall_upd;
wire    [5:0]  idu_cp0_ex1_dst_idx;
wire           idu_cp0_ex1_dst_vld;
wire           idu_cp0_ex1_expt_type;
wire           idu_cp0_ex1_expt_vld;
wire    [8:0]  idu_cp0_ex1_inst_bkpt;
wire           idu_cp0_ex1_sel;
wire    [8:0]  idu_had_id_inst_bkpt;
wire           idu_had_no_op;
wire           idu_ifu_id_stall;
wire           idu_iu_ex1_alu_sel;
wire    [1:0]  idu_iu_ex1_bht_pred;
wire           idu_iu_ex1_bju_depd_lsu_src0;
wire           idu_iu_ex1_bju_depd_lsu_src1;
wire           idu_iu_ex1_bju_sel;
wire           idu_iu_ex1_bju_use_pc;
wire           idu_iu_ex1_div_sel;
wire    [5:0]  idu_iu_ex1_dst_preg;
wire           idu_iu_ex1_inst_len;
wire           idu_iu_ex1_inst_vld;
wire           idu_iu_ex1_mul_sel;
wire           idu_iu_ex1_wb_vld;
wire           idu_lsu_ex1_base_sel;
wire    [5:0]  idu_lsu_ex1_dest_reg;
wire           idu_lsu_ex1_dest_vld;
wire           idu_lsu_ex1_fls;
wire           idu_lsu_ex1_sel;
wire           idu_lsu_ex1_src1_depd;
wire           idu_misc_cpuclk;
wire           idu_rtu_ex1_dst_vld;
wire           idu_rtu_ex1_inst_vld;
wire           idu_rtu_ex1_lsu_sel;
wire           idu_xx_ex1_warm_up;
wire           ifu_idu_chgflw_flush;
wire           ifu_idu_id_expt_vld;
wire    [8:0]  ifu_idu_id_inst_bkpt;
wire           ifu_idu_id_inst_vld;
wire    [1:0]  ifu_idu_id_pred_taken;
wire           ifu_idu_id_warm_up;
wire           ifu_xx_warm_up_clk;
wire           iu_xx_no_op;
wire           lsu_xx_no_op;
wire           misc_icg_en;
wire           pad_yy_gate_clk_en_b;
wire           rtu_idu_ex1_stall;
wire           rtu_idu_id_cancel;
wire           rtu_idu_id_stall;
wire           rtu_idu_late_flush;
wire           rtu_xx_no_op;
wire           rtu_yy_xx_flush;
wire           split_ctrl_cancel;
wire           split_ctrl_icg_en;
wire           split_ctrl_stall;














// &Force("output", "idu_misc_cpuclk"); @40
assign ctrl_icg_en = ifu_idu_id_inst_vld
                  || ctrl_ex1_inst_vld
                  || hs_ctrl_inst_vld;
// &Instance("gated_clk_cell", "x_idu_ctrl_icg_cell"); @44
gated_clk_cell  x_idu_ctrl_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ctrl_cpuclk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ctrl_icg_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @45
//          .external_en (1'b0), @46
//          .global_en   (cp0_yy_clk_en), @47
//          .module_en   (1'b0), @48
//          .local_en    (ctrl_icg_en), @49
//          .clk_out     (ctrl_cpuclk)); @50
assign misc_icg_en = ifu_idu_id_inst_vld && ctrl_id_expt_vld
                  || ctrl_ex1_expt_vld
                  || split_ctrl_icg_en
                  || ifu_idu_id_warm_up;
// &Instance("gated_clk_cell", "x_idu_misc_icg_cell"); @55
gated_clk_cell  x_idu_misc_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (idu_misc_cpuclk     ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (misc_icg_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @56
//          .external_en (1'b0), @57
//          .global_en   (cp0_yy_clk_en), @58
//          .module_en   (1'b0), @59
//          .local_en    (misc_icg_en), @60
//          .clk_out     (idu_misc_cpuclk)); @61





assign ctrl_id_inst_vld = ifu_idu_id_inst_vld;
assign ctrl_id_inst_vld_fin = ifu_idu_id_inst_vld || hs_ctrl_inst_vld;

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_inst_vld <= 1'b0;
  end
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || ifu_idu_chgflw_flush && !ctrl_issue_stall)
  begin
    ctrl_ex1_inst_vld <= 1'b0;
  end
  else if(ctrl_id_issue_cancel)
  begin
    ctrl_ex1_inst_vld <= 1'b0;
  end
  else if(!ctrl_issue_stall)
  begin
    ctrl_ex1_inst_vld <= ctrl_id_inst_vld_fin && !ctrl_rtu_id_stall;
  end
  else
  begin
    ctrl_ex1_inst_vld <= ctrl_ex1_inst_vld;
  end
end


assign ctrl_id_inst_bkpt_vld = had_idu_id_inst_bkpt_hit && !hs_ctrl_inst_vld && !ifu_idu_id_expt_vld;
assign ctrl_id_unit_sel[5:0] = (ctrl_id_expt_vld || ctrl_id_inst_bkpt_vld) ? 6'b100000
                             : decd_ctrl_unit_sel[5:0];

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_unit_sel[5:0] <= 6'b0;
    ctrl_ex1_inst_len      <= 1'b0;
    ctrl_ex1_bju_use_pc    <= 1'b0;

    ctrl_ex1_fls           <= 1'b0;
  end
  else if(ctrl_pipe_down)
  begin
    ctrl_ex1_unit_sel[5:0] <= ctrl_id_unit_sel[5:0];
    ctrl_ex1_inst_len      <= decd_ctrl_inst_32bit;
    ctrl_ex1_bju_use_pc    <= decd_ctrl_bju_use_pc;

    ctrl_ex1_fls           <= fdecd_ctrl_fls;
  end
  else
  begin
    ctrl_ex1_unit_sel[5:0] <= ctrl_ex1_unit_sel[5:0];
    ctrl_ex1_inst_len      <= ctrl_ex1_inst_len;
    ctrl_ex1_bju_use_pc    <= ctrl_ex1_bju_use_pc;

    ctrl_ex1_fls           <= ctrl_ex1_fls;
  end
end


assign ctrl_ex1_mul_sel = ctrl_ex1_inst_vld && ctrl_ex1_unit_sel[1];
assign ctrl_ex1_div_sel = ctrl_ex1_inst_vld && ctrl_ex1_unit_sel[2];
assign ctrl_ex1_bju_sel = ctrl_ex1_inst_vld && ctrl_ex1_unit_sel[3];
assign ctrl_ex1_lsu_sel = ctrl_ex1_inst_vld && ctrl_ex1_unit_sel[4];
assign ctrl_ex1_cp0_sel = ctrl_ex1_inst_vld && ctrl_ex1_unit_sel[5];




always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_dst_vld <= 1'b0;
  end
  else if(rtu_yy_xx_flush)
  begin
    ctrl_ex1_dst_vld <= 1'b0;
  end
  else if(ctrl_pipe_down)
  begin
    ctrl_ex1_dst_vld <= (decd_ctrl_dst_vld || fdecd_ctrl_dst_vld);
  end
  else
  begin
    ctrl_ex1_dst_vld <= ctrl_ex1_dst_vld;
  end
end

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_int_dst_vld <= 1'b0;
  end
  else if(rtu_yy_xx_flush)
  begin
    ctrl_ex1_int_dst_vld <= 1'b0;
  end
  else if(ctrl_pipe_down)
  begin
    ctrl_ex1_int_dst_vld <= decd_ctrl_dst_vld;
  end
  else
  begin
    ctrl_ex1_int_dst_vld <= ctrl_ex1_int_dst_vld;
  end
end

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_dst_idx[5:0] <= 6'b0;
  end
  else if(ctrl_pipe_down && (decd_ctrl_dst_vld || fdecd_ctrl_dst_vld))
  begin
    ctrl_ex1_dst_idx[5:0] <= fdecd_ctrl_dst_vld ? fdecd_ctrl_dst_idx[5:0] : decd_ctrl_dst_idx[5:0];
  end
  else
  begin
    ctrl_ex1_dst_idx[5:0] <= ctrl_ex1_dst_idx[5:0];
  end
end

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_pred_taken[1:0] <= 2'b0;
    ctrl_ex1_inst_bkpt[8:0]  <= 9'b0;
  end
  else if(rtu_yy_xx_flush)
  begin
    ctrl_ex1_pred_taken[1:0] <= 2'b0;
    ctrl_ex1_inst_bkpt[8:0]  <= 9'b0;
  end
  else if(ctrl_pipe_down)
  begin
    ctrl_ex1_pred_taken[1:0] <= ifu_idu_id_pred_taken[1:0];
    ctrl_ex1_inst_bkpt[8:0]  <= {9{!(ifu_idu_id_expt_vld || hs_ctrl_inst_vld)}} & had_idu_id_inst_bkpt[8:0];
  end
  else
  begin
    ctrl_ex1_pred_taken[1:0] <= ctrl_ex1_pred_taken[1:0];
    ctrl_ex1_inst_bkpt[8:0]  <= ctrl_ex1_inst_bkpt[8:0];
  end
end




assign ctrl_id_expt_vld = (decd_ctrl_ill_expt && ifu_idu_id_inst_vld || ifu_idu_id_expt_vld || had_idu_id_inst_bkpt_hit && !hs_ctrl_inst_vld);

always @ (posedge idu_misc_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_expt_vld <= 1'b0;
  end
  else if(rtu_yy_xx_flush)
  begin
    ctrl_ex1_expt_vld <= 1'b0;
  end
  else if(ctrl_pipe_down)
  begin
    ctrl_ex1_expt_vld <= ctrl_id_expt_vld;
  end
  else
  begin
    ctrl_ex1_expt_vld <= ctrl_ex1_expt_vld;
  end
end


assign ctrl_id_expt_type = ifu_idu_id_expt_vld;

always @ (posedge idu_misc_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_expt_type <= 1'b0;
  end
  else if(ctrl_pipe_down && ctrl_id_expt_vld)
  begin
    ctrl_ex1_expt_type <= ctrl_id_expt_type;
  end
  else
  begin
    ctrl_ex1_expt_type <= ctrl_ex1_expt_type;
  end
end

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_rs2_dep <= 1'b0;
  end
  else if(ctrl_pipe_down && decd_ctrl_unit_sel[4])
  begin
    ctrl_ex1_rs2_dep <= ctrl_st_rs2_dep_vld || ctrl_st_rs3_dep_vld;
  end
  else if(ctrl_pipe_down && ctrl_id_unit_sel[3])
  begin
    ctrl_ex1_rs2_dep <= ctrl_bju_rs2_dep_vld;
  end
  else if(dp_ctrl_rs2_stall_upd || dp_ctrl_rs3_stall_upd || id_fp_ctrl_rs2_stall_upd)
  begin
    ctrl_ex1_rs2_dep <= 1'b0;
  end
  else
  begin
    ctrl_ex1_rs2_dep <= ctrl_ex1_rs2_dep;
  end
end

always @ (posedge ctrl_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_bju_rs1_dep <= 1'b0;
  end
  else if(ctrl_pipe_down && decd_ctrl_unit_sel[3])
  begin
    ctrl_ex1_bju_rs1_dep <= ctrl_bju_rs1_dep_vld;
  end
  else if(dp_ctrl_rs1_stall_upd)
  begin
    ctrl_ex1_bju_rs1_dep <= 1'b0;
  end
  else
  begin
    ctrl_ex1_bju_rs1_dep <= ctrl_ex1_bju_rs1_dep;
  end
end
always @ (posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    ctrl_ex1_warm_up <= 1'b0;
  end
  else
  begin
    ctrl_ex1_warm_up <= ifu_idu_id_warm_up;
  end
end



assign ctrl_id_st_inst  = decd_ctrl_unit_sel[4] && !decd_ctrl_dst_vld;
assign ctrl_id_ld_inst  = decd_ctrl_unit_sel[4] && decd_ctrl_dst_vld;
assign ctrl_id_div_inst = decd_ctrl_unit_sel[2] && decd_ctrl_dst_vld;
assign ctrl_id_bju_inst = decd_ctrl_unit_sel[3] && decd_ctrl_id_func[1]; // Only condition branch.


// &Force("bus", "decd_ctrl_id_func", 4, 0); @349



assign ctrl_dep_norm_stall = (gpr_ctrl_rs1_busy
                           || gpr_ctrl_rs2_busy
                           || gpr_ctrl_rs3_busy
                           || gpr_ctrl_rd_busy)


                           && ctrl_id_inst_vld_fin;


assign ctrl_dep_mul_stall = ctrl_ex1_mul_sel && dp_ctrl_rs_dep_ex1 && ctrl_id_inst_vld_fin;







assign ctrl_dep_ld_stall = (gpr_ctrl_rs1_busy_lsu && !(ctrl_id_bju_inst && !gpr_ctrl_rs1_busy_lsu2)
                         || gpr_ctrl_rs2_busy_lsu && !(ctrl_id_bju_inst && !gpr_ctrl_rs2_busy_lsu2)
                           && !(ctrl_id_st_inst && !decd_ctrl_str_vld && !gpr_ctrl_rs2_busy_lsu2)
                         || gpr_ctrl_rs3_busy_lsu && !(decd_ctrl_sti_vld && !gpr_ctrl_rs3_busy_lsu2)
                         || gpr_ctrl_rd_busy_lsu)
                         && ctrl_id_inst_vld_fin;








assign ctrl_dep_div_stall = (gpr_ctrl_rs1_busy_div
                          || gpr_ctrl_rs2_busy_div
                          || gpr_ctrl_rs3_busy_div
                          || gpr_ctrl_rd_busy_div) && ctrl_id_inst_vld_fin;


assign ctrl_fence_cp0_stall = !(iu_xx_no_op && rtu_xx_no_op && lsu_xx_no_op
                            && fpu_xx_no_op)
                        && ctrl_id_inst_vld_fin && decd_ctrl_unit_sel[5];


assign ctrl_fence_bkpt_stall = !(iu_xx_no_op && rtu_xx_no_op && lsu_xx_no_op
                            && fpu_xx_no_op)
                        && ctrl_id_inst_vld_fin && had_idu_id_inst_bkpt_brir && !ifu_idu_id_expt_vld;





assign ctrl_st_rs2_dep_vld = (gpr_ctrl_rs2_busy_lsu && !dp_ctrl_rs2_fwd_lsu && !gpr_ctrl_rs2_busy_lsu2
                            || ctrl_ex1_lsu_sel && dp_ctrl_rs2_dep_ex1_dst && !ctrl_ex1_fls
                            && ctrl_ex1_dst_vld && !dp_ctrl_ex1_ex_st_rs2_vld
                            || id_fp_ctrl_rs2_dep_ex1_dst)
                          && ctrl_id_st_inst && ctrl_id_inst_vld_fin && !decd_ctrl_str_vld;

assign ctrl_st_rs3_dep_vld = (gpr_ctrl_rs3_busy_lsu && !dp_ctrl_rs3_fwd_lsu && !gpr_ctrl_rs3_busy_lsu2
                            || ctrl_ex1_lsu_sel && dp_ctrl_rs3_dep_ex1_dst && !ctrl_ex1_fls
                            && ctrl_ex1_dst_vld && dp_ctrl_ex1_ex_st_rs2_vld
                            )
                          && ctrl_id_st_inst && ctrl_id_inst_vld_fin;







assign ctrl_bju_rs1_dep_vld = ctrl_ex1_lsu_sel && dp_ctrl_rs1_dep_ex1_dst && !ctrl_ex1_fls
                           && !dp_ctrl_ex1_st_vld
                          || gpr_ctrl_rs1_busy_lsu && !dp_ctrl_rs1_fwd_lsu && !gpr_ctrl_rs1_busy_lsu2;
assign ctrl_bju_rs2_dep_vld = ctrl_ex1_lsu_sel && dp_ctrl_rs2_dep_ex1_dst && !ctrl_ex1_fls
                           && !dp_ctrl_ex1_st_vld
                          || gpr_ctrl_rs2_busy_lsu && !dp_ctrl_rs2_fwd_lsu && !gpr_ctrl_rs2_busy_lsu2;

assign ctrl_id_issue_cancel = (ctrl_dep_ld_stall || ctrl_dep_norm_stall || ctrl_dep_mul_stall
                             || ctrl_fence_cp0_stall || ctrl_fence_bkpt_stall || ctrl_dep_div_stall
                             || id_fp_ctrl_id_stall || split_ctrl_cancel || hs_ctrl_cancel)
                           && !ctrl_issue_stall
                           || rtu_idu_id_cancel && !hs_ctrl_spec_ipush;


assign ctrl_issue_stall = rtu_idu_ex1_stall;
assign ctrl_rtu_id_stall = rtu_idu_id_stall;

assign ctrl_id_stall = ctrl_dep_ld_stall || ctrl_dep_norm_stall || ctrl_dep_div_stall
                    || ctrl_dep_mul_stall || ctrl_fence_cp0_stall || ctrl_fence_bkpt_stall
                    || rtu_idu_ex1_stall || id_fp_ctrl_id_stall || rtu_idu_id_stall;

assign ctrl_pipe_down = ctrl_id_inst_vld_fin && !ctrl_issue_stall;

assign ctrl_split_stall = ctrl_id_stall || rtu_idu_id_cancel;
assign ctrl_hs_stall    = ctrl_id_stall || rtu_idu_id_cancel;








assign ctrl_dp_pipe_down         = ctrl_pipe_down;
assign ctrl_dp_pipe_down_gate    = ctrl_id_inst_vld_fin;
assign ctrl_dp_ex1_dst_preg[5:0] = ctrl_ex1_dst_idx[5:0];

assign ctrl_dp_wbbr_en           = ctrl_id_inst_vld && !decd_ctrl_unit_sel[4];

assign ctrl_dp_wbbr_rs2_use_zero = ctrl_id_inst_vld &&  decd_ctrl_unit_sel[0];
assign ctrl_dp_ex1_inst_vld      = ctrl_ex1_inst_vld;
assign ctrl_dp_ex1_dst_vld       = ctrl_ex1_inst_vld && ctrl_ex1_int_dst_vld;
assign ctrl_dp_ex1_bju_sel       = ctrl_ex1_bju_sel;
assign ctrl_dp_ex1_div_sel       = ctrl_ex1_div_sel;
assign ctrl_dp_ex1_st_sel        = ctrl_ex1_lsu_sel && !ctrl_ex1_dst_vld && !ctrl_ex1_fls;
assign ctrl_dp_ex1_lsu_sel       = ctrl_ex1_lsu_sel;
assign ctrl_dp_ex1_rs1_dep       = ctrl_ex1_bju_rs1_dep;
assign ctrl_dp_ex1_rs2_dep       = ctrl_ex1_rs2_dep;


assign ctrl_gpr_id_dst_vld       = ctrl_id_inst_vld_fin && (decd_ctrl_dst_vld || decd_ctrl_sti_vld);
assign ctrl_gpr_wr_issue         = ctrl_pipe_down && (decd_ctrl_dst_vld || decd_ctrl_sti_vld)
                              && !(rtu_yy_xx_flush || ifu_idu_chgflw_flush && !ctrl_issue_stall
                               || ctrl_id_issue_cancel || ctrl_id_stall);
assign ctrl_gpr_id_wr_idx[5:0]   = decd_ctrl_dst_idx[5:0];
assign ctrl_gpr_ld_inst          = ctrl_id_ld_inst;
assign ctrl_gpr_div_inst         = ctrl_id_div_inst || fdecd_ctrl_int_dst_vld;

assign id_fp_ctrl_id_stall     = 1'b0;
assign id_fp_ctrl_rs2_dep_ex1_dst = 1'b0;
assign id_fp_ctrl_rs2_stall_upd = 1'b0;
assign fpu_xx_no_op            = 1'b1;
assign fdecd_ctrl_dst_vld      = 1'b0;
assign fdecd_ctrl_int_dst_vld  = 1'b0;
assign fdecd_ctrl_dst_idx[5:0] = 6'b0;
assign fdecd_ctrl_fls          = 1'b0;

assign ctrl_top_ex1_fp_vld   = 1'b0;

assign ctrl_hs_no_op   = iu_xx_no_op && lsu_xx_no_op && fpu_xx_no_op;
assign ctrl_hs_be_idle = iu_xx_no_op && rtu_xx_no_op && lsu_xx_no_op && fpu_xx_no_op;


assign ctrl_top_id_inst_vld  = ctrl_id_inst_vld_fin;
assign ctrl_top_norm_stall   = ctrl_dep_norm_stall;
assign ctrl_top_ld_stall     = ctrl_dep_ld_stall;
assign ctrl_top_div_stall    = ctrl_dep_div_stall;
assign ctrl_top_cp0_stall    = ctrl_fence_cp0_stall;
assign ctrl_top_st_dep_vld   = ctrl_st_rs2_dep_vld;
assign ctrl_top_bju_dep1_vld = ctrl_bju_rs1_dep_vld;
assign ctrl_top_bju_dep2_vld = ctrl_bju_rs2_dep_vld;
assign ctrl_top_ex1_sel[5:0] = ctrl_ex1_unit_sel[5:0];
assign ctrl_top_id_cancel    = rtu_idu_id_cancel;
assign ctrl_top_id_stall     = 1'b0;
assign ctrl_top_ex1_stall    = rtu_idu_ex1_stall;
assign ctrl_top_ex1_vld      = ctrl_ex1_inst_vld;




assign idu_ifu_id_stall = (ctrl_id_stall | split_ctrl_stall | hs_ctrl_stall) & ctrl_id_inst_vld_fin;





assign idu_iu_ex1_inst_vld     = ctrl_ex1_inst_vld;
assign idu_rtu_ex1_inst_vld    = ctrl_ex1_inst_vld;
assign idu_iu_ex1_inst_len     = ctrl_ex1_inst_len;

assign idu_iu_ex1_alu_sel      = ctrl_ex1_unit_sel[0];
assign idu_iu_ex1_mul_sel      = ctrl_ex1_unit_sel[1];
assign idu_iu_ex1_div_sel      = ctrl_ex1_unit_sel[2];
assign idu_iu_ex1_bju_sel      = ctrl_ex1_unit_sel[3];

assign idu_iu_ex1_wb_vld        = ctrl_ex1_dst_vld;
assign idu_iu_ex1_dst_preg[5:0] = ctrl_ex1_dst_idx[5:0];

assign idu_iu_ex1_bht_pred[1:0] = ctrl_ex1_pred_taken[1:0];

assign idu_iu_ex1_bju_depd_lsu_src0 = ctrl_ex1_bju_rs1_dep;
assign idu_iu_ex1_bju_depd_lsu_src1 = ctrl_ex1_rs2_dep;

assign idu_iu_ex1_bju_use_pc    = ctrl_ex1_bju_use_pc;




assign idu_lsu_ex1_sel           = ctrl_ex1_lsu_sel;
assign idu_lsu_ex1_base_sel      = ctrl_ex1_unit_sel[4];
assign idu_lsu_ex1_src1_depd     = ctrl_ex1_rs2_dep;
assign idu_lsu_ex1_dest_vld      = ctrl_ex1_dst_vld;
assign idu_lsu_ex1_dest_reg[5:0] = ctrl_ex1_dst_idx[5:0];
assign idu_lsu_ex1_fls           = 1'b0;




assign idu_cp0_ex1_sel         = ctrl_ex1_cp0_sel;

assign idu_cp0_ex1_expt_vld    = ctrl_ex1_expt_vld;
assign idu_cp0_ex1_expt_type   = ctrl_ex1_expt_type;
assign idu_cp0_ex1_inst_bkpt[8:0] = ctrl_ex1_inst_bkpt[8:0];

assign idu_cp0_ex1_dst_vld      = ctrl_ex1_dst_vld;
assign idu_cp0_ex1_dst_idx[5:0] = ctrl_ex1_dst_idx[5:0];




assign idu_xx_ex1_warm_up      = ctrl_ex1_warm_up;




assign idu_had_no_op = !ctrl_id_inst_vld_fin;
assign idu_had_id_inst_bkpt[8:0] = ifu_idu_id_inst_bkpt[8:0];




assign idu_rtu_ex1_lsu_sel     = ctrl_ex1_lsu_sel;
assign idu_rtu_ex1_dst_vld     = ctrl_ex1_dst_vld;

// &ModuleEnd; @593
endmodule



























// &ModuleBeg; @26
module pa_idu_decd(
  cp0_yy_cskyisaee,
  cp0_yy_mach_mode,
  decd_ctrl_bju_use_pc,
  decd_ctrl_dst_idx,
  decd_ctrl_dst_vld,
  decd_ctrl_id_func,
  decd_ctrl_ill_expt,
  decd_ctrl_inst_32bit,
  decd_ctrl_sti_vld,
  decd_ctrl_str_vld,
  decd_ctrl_unit_sel,
  decd_dp_ag_imm,
  decd_dp_ag_imm_vld,
  decd_dp_csri_rs1,
  decd_dp_csri_vld,
  decd_dp_ex_st_rs2_vld,
  decd_dp_func,
  decd_dp_imm,
  decd_dp_imm_vld,
  decd_dp_lsr_vld,
  decd_dp_lsu_sel,
  decd_dp_mul_high_sel,
  decd_dp_rs1_idx,
  decd_dp_rs1_vld,
  decd_dp_rs2_idx,
  decd_dp_rs2_vld,
  decd_dp_rs3_idx,
  decd_dp_rs3_vld,
  decd_dp_split,
  decd_dp_sub_func,
  decd_gpr_dep_rs1,
  decd_gpr_dep_rs2,
  decd_gpr_ldi_vld,
  decd_gpr_rd_vld,
  decd_gpr_rs1,
  decd_gpr_rs1_vld,
  decd_gpr_rs2,
  decd_gpr_rs2_vld,
  decd_gpr_rs3,
  decd_gpr_rs3_vld,
  decd_gpr_sti_vld,
  decd_hs_ipop_vld,
  decd_hs_ipush_vld,
  decd_split_dst_idx,
  decd_split_opcode,
  decd_split_req,
  decd_split_rs1_idx,
  decd_split_rs2_idx,
  decd_split_rs2_vld,
  dp_decd_rs2_aft_fwd,
  had_idu_id_inst_bkpt_hit,
  hs_decd_dp_vld,
  hs_decd_dst_vld,
  hs_decd_func,
  hs_decd_imm,
  hs_decd_imm_vld,
  hs_decd_rd,
  hs_decd_rs1,
  hs_decd_rs1_vld,
  hs_decd_rs2,
  hs_decd_rs2_imm_vld,
  hs_decd_rs2_vld,
  hs_decd_sel,
  hs_decd_split,
  hs_decd_sub_func,
  idu_had_id_chgflw_inst,
  ifu_idu_id_expt_vld,
  ifu_idu_id_inst,
  rtu_yy_xx_dbgon,
  split_decd_ag_imm,
  split_decd_ag_imm_vld,
  split_decd_dp_sel,
  split_decd_dst_idx,
  split_decd_dst_vld,
  split_decd_func,
  split_decd_rs1_idx,
  split_decd_rs1_vld,
  split_decd_rs2_idx,
  split_decd_rs2_imm,
  split_decd_rs2_imm_vld,
  split_decd_rs2_vld,
  split_decd_sel,
  split_decd_split,
  split_decd_sub_func
);

// &Ports; @27
input           cp0_yy_cskyisaee;
input           cp0_yy_mach_mode;
input   [31:0]  dp_decd_rs2_aft_fwd;
input           had_idu_id_inst_bkpt_hit;
input           hs_decd_dp_vld;
input           hs_decd_dst_vld;
input   [4 :0]  hs_decd_func;
input   [31:0]  hs_decd_imm;
input           hs_decd_imm_vld;
input   [5 :0]  hs_decd_rd;
input   [5 :0]  hs_decd_rs1;
input           hs_decd_rs1_vld;
input   [5 :0]  hs_decd_rs2;
input           hs_decd_rs2_imm_vld;
input           hs_decd_rs2_vld;
input   [5 :0]  hs_decd_sel;
input           hs_decd_split;
input   [4 :0]  hs_decd_sub_func;
input           ifu_idu_id_expt_vld;
input   [31:0]  ifu_idu_id_inst;
input           rtu_yy_xx_dbgon;
input   [31:0]  split_decd_ag_imm;
input           split_decd_ag_imm_vld;
input           split_decd_dp_sel;
input   [5 :0]  split_decd_dst_idx;
input           split_decd_dst_vld;
input   [4 :0]  split_decd_func;
input   [5 :0]  split_decd_rs1_idx;
input           split_decd_rs1_vld;
input   [5 :0]  split_decd_rs2_idx;
input   [31:0]  split_decd_rs2_imm;
input           split_decd_rs2_imm_vld;
input           split_decd_rs2_vld;
input   [5 :0]  split_decd_sel;
input           split_decd_split;
input   [4 :0]  split_decd_sub_func;
output          decd_ctrl_bju_use_pc;
output  [5 :0]  decd_ctrl_dst_idx;
output          decd_ctrl_dst_vld;
output  [4 :0]  decd_ctrl_id_func;
output          decd_ctrl_ill_expt;
output          decd_ctrl_inst_32bit;
output          decd_ctrl_sti_vld;
output          decd_ctrl_str_vld;
output  [5 :0]  decd_ctrl_unit_sel;
output  [31:0]  decd_dp_ag_imm;
output          decd_dp_ag_imm_vld;
output  [4 :0]  decd_dp_csri_rs1;
output          decd_dp_csri_vld;
output          decd_dp_ex_st_rs2_vld;
output  [4 :0]  decd_dp_func;
output  [31:0]  decd_dp_imm;
output          decd_dp_imm_vld;
output          decd_dp_lsr_vld;
output          decd_dp_lsu_sel;
output          decd_dp_mul_high_sel;
output  [5 :0]  decd_dp_rs1_idx;
output          decd_dp_rs1_vld;
output  [5 :0]  decd_dp_rs2_idx;
output          decd_dp_rs2_vld;
output  [5 :0]  decd_dp_rs3_idx;
output          decd_dp_rs3_vld;
output          decd_dp_split;
output  [4 :0]  decd_dp_sub_func;
output  [5 :0]  decd_gpr_dep_rs1;
output  [5 :0]  decd_gpr_dep_rs2;
output          decd_gpr_ldi_vld;
output          decd_gpr_rd_vld;
output  [5 :0]  decd_gpr_rs1;
output          decd_gpr_rs1_vld;
output  [5 :0]  decd_gpr_rs2;
output          decd_gpr_rs2_vld;
output  [5 :0]  decd_gpr_rs3;
output          decd_gpr_rs3_vld;
output          decd_gpr_sti_vld;
output          decd_hs_ipop_vld;
output          decd_hs_ipush_vld;
output  [4 :0]  decd_split_dst_idx;
output  [6 :0]  decd_split_opcode;
output          decd_split_req;
output  [4 :0]  decd_split_rs1_idx;
output  [4 :0]  decd_split_rs2_idx;
output          decd_split_rs2_vld;
output          idu_had_id_chgflw_inst;

// &Regs; @28
reg     [4 :0]  decd_atm_func;
reg             decd_dst_vld;
reg     [4 :0]  decd_func;
reg             decd_ill_expt16;
reg             decd_ill_expt32;
reg             decd_rs2_imm_vld;
reg     [5 :0]  decd_sel;
reg     [4 :0]  decd_sub_func;
reg     [4 :0]  rd_16;
reg     [4 :0]  rs1_16;
reg             rs1_update_16;
reg     [4 :0]  rs2_16;
reg             rs2_update_16;
reg     [4 :0]  sys_sub_func;

// &Wires; @29
wire    [31:0]  addsl_imm;
wire            addsl_imm_vld;
wire            atm_aqrl;
wire            auipc_imm_vld;
wire    [31:0]  btype_imm;
wire            btype_imm_vld;
wire    [31:0]  cbtype_imm;
wire            cbtype_imm_vld;
wire    [31:0]  ciatype_imm;
wire            ciatype_imm_vld;
wire    [31:0]  ciltype_imm;
wire            ciltype_imm_vld;
wire    [31:0]  cistype_imm;
wire            cistype_imm_vld;
wire    [31:0]  citype_imm;
wire            citype_imm_vld;
wire    [31:0]  ciwtype_imm;
wire            ciwtype_imm_vld;
wire    [31:0]  cjtype_imm;
wire            cjtype_imm_vld;
wire    [31:0]  cltype_imm;
wire            cltype_imm_vld;
wire            cp0_yy_cskyisaee;
wire            cp0_yy_mach_mode;
wire    [31:0]  csstype_imm;
wire            csstype_imm_vld;
wire    [31:0]  decd_ag_imm;
wire            decd_ag_imm_vld;
wire            decd_bju_chgflw_inst;
wire    [4 :0]  decd_csri_rs1;
wire            decd_csri_vld;
wire            decd_ctrl_bju_use_pc;
wire    [5 :0]  decd_ctrl_dst_idx;
wire            decd_ctrl_dst_vld;
wire    [4 :0]  decd_ctrl_id_func;
wire            decd_ctrl_ill_expt;
wire            decd_ctrl_inst_32bit;
wire            decd_ctrl_sti_vld;
wire            decd_ctrl_str_vld;
wire    [5 :0]  decd_ctrl_unit_sel;
wire    [31:0]  decd_dp_ag_imm;
wire            decd_dp_ag_imm_vld;
wire    [4 :0]  decd_dp_csri_rs1;
wire            decd_dp_csri_vld;
wire            decd_dp_ex_st_rs2_vld;
wire    [4 :0]  decd_dp_func;
wire    [31:0]  decd_dp_imm;
wire            decd_dp_imm_vld;
wire            decd_dp_lsr_vld;
wire            decd_dp_lsu_sel;
wire            decd_dp_mul_high_sel;
wire    [5 :0]  decd_dp_rs1_idx;
wire            decd_dp_rs1_vld;
wire    [5 :0]  decd_dp_rs2_idx;
wire            decd_dp_rs2_vld;
wire    [5 :0]  decd_dp_rs3_idx;
wire            decd_dp_rs3_vld;
wire            decd_dp_split;
wire    [4 :0]  decd_dp_sub_func;
wire    [2 :0]  decd_func3;
wire    [5 :0]  decd_func7;
wire    [5 :0]  decd_gpr_dep_rs1;
wire    [5 :0]  decd_gpr_dep_rs2;
wire            decd_gpr_ldi_vld;
wire            decd_gpr_rd_vld;
wire    [5 :0]  decd_gpr_rs1;
wire            decd_gpr_rs1_vld;
wire    [5 :0]  decd_gpr_rs2;
wire            decd_gpr_rs2_vld;
wire    [5 :0]  decd_gpr_rs3;
wire            decd_gpr_rs3_vld;
wire            decd_gpr_sti_vld;
wire            decd_hs_ipop_vld;
wire            decd_hs_ipush_vld;
wire            decd_ill_expt;
wire    [31:0]  decd_imm;
wire    [31:0]  decd_inst;
wire            decd_inst_32bit;
wire            decd_ldi_vld;
wire            decd_mul_high_sel;
wire    [6 :0]  decd_op;
wire    [4 :0]  decd_rd;
wire    [4 :0]  decd_rs1;
wire    [4 :0]  decd_rs2;
wire    [5 :0]  decd_rs3;
wire            decd_rs3_upd_dp;
wire            decd_rs3_update;
wire    [4 :0]  decd_split_dst_idx;
wire    [6 :0]  decd_split_opcode;
wire            decd_split_req;
wire    [4 :0]  decd_split_rs1_idx;
wire    [4 :0]  decd_split_rs2_idx;
wire            decd_split_rs2_vld;
wire            decd_sti_vld;
wire            decd_str_vld;
wire    [31:0]  dp_decd_rs2_aft_fwd;
wire    [31:0]  ext_imm;
wire            ext_imm_vld;
wire            fdecd_decd_fp_inst_vld;
wire            fdecd_decd_ill_expt;
wire    [31:0]  fdecd_decd_imm;
wire            fdecd_decd_imm_vld;
wire            fdecd_decd_rs1_int_vld;
wire            had_idu_id_inst_bkpt_hit;
wire            hs_decd_dp_vld;
wire            hs_decd_dst_vld;
wire    [4 :0]  hs_decd_func;
wire    [31:0]  hs_decd_imm;
wire            hs_decd_imm_vld;
wire    [5 :0]  hs_decd_rd;
wire    [5 :0]  hs_decd_rs1;
wire            hs_decd_rs1_vld;
wire    [5 :0]  hs_decd_rs2;
wire            hs_decd_rs2_imm_vld;
wire            hs_decd_rs2_vld;
wire    [5 :0]  hs_decd_sel;
wire            hs_decd_split;
wire    [4 :0]  hs_decd_sub_func;
wire            hs_sel;
wire            idu_had_id_chgflw_inst;
wire            ifu_idu_id_expt_vld;
wire    [31:0]  ifu_idu_id_inst;
wire    [31:0]  itype_imm;
wire            itype_imm_vld;
wire            jalr_imm_vld;
wire    [31:0]  jtype_imm;
wire            jtype_imm_vld;
wire            load_imm_vld;
wire    [31:0]  lsi_imm;
wire            lsi_imm_vld;
wire    [31:0]  lsr_imm;
wire            lsr_imm_vld;
wire    [4 :0]  rd_32;
wire    [4 :0]  rs1_32;
wire            rs1_update;
wire            rs1_update_32;
wire    [4 :0]  rs2_32;
wire            rs2_update;
wire            rs2_update_32;
wire            rs2_update_encry_ext;
wire            rs2_update_mcu_ext;
wire            rtu_yy_xx_dbgon;
wire    [31:0]  split_decd_ag_imm;
wire            split_decd_ag_imm_vld;
wire            split_decd_dp_sel;
wire    [5 :0]  split_decd_dst_idx;
wire            split_decd_dst_vld;
wire    [4 :0]  split_decd_func;
wire    [5 :0]  split_decd_rs1_idx;
wire            split_decd_rs1_vld;
wire    [5 :0]  split_decd_rs2_idx;
wire    [31:0]  split_decd_rs2_imm;
wire            split_decd_rs2_imm_vld;
wire            split_decd_rs2_vld;
wire    [5 :0]  split_decd_sel;
wire            split_decd_split;
wire    [4 :0]  split_decd_sub_func;
wire            split_req;
wire            split_sel;
wire            split_sel_dp;
wire            split_sel_pre;
wire    [31:0]  stype_imm;
wire            stype_imm_vld;
wire    [31:0]  uitype_imm;
wire            uitype_imm_vld;
wire    [31:0]  utype_imm;
wire            utype_imm_vld;







parameter SEL_WIDTH       = 6;
parameter FUNC_WIDTH      = 5;
parameter SUB_FUNC_WIDTH  = 5;


parameter ALU = 6'b000001;
parameter MUL = 6'b000010;
parameter DIV = 6'b000100;
parameter BJU = 6'b001000;
parameter LSU = 6'b010000;
parameter CP0 = 6'b100000;



parameter ADDER  = 5'b00001;
parameter SHIFT  = 5'b00010;
parameter LOGIC  = 5'b00100;
parameter PACK   = 5'b01000;
parameter BITOP  = 5'b10000;


parameter ADDSL  = 5'b10001;
parameter ADD    = 5'b00001;
parameter SUB    = 5'b00000;
parameter SLT    = 5'b10010;
parameter LTU    = 5'b00010;
parameter MIN    = 5'b10110;
parameter MINU   = 5'b00110;
parameter MAX    = 5'b11110;
parameter MAXU   = 5'b01110;

parameter AND    = 5'b00001;
parameter OR     = 5'b00010;
parameter XOR    = 5'b00100;
parameter ANDN   = 5'b01001;
parameter ORN    = 5'b01010;
parameter XORN   = 5'b01100;

parameter SLL    = 5'b00001;
parameter SRL    = 5'b00010;
parameter SRA    = 5'b00100;
parameter SRRI   = 5'b01000;
parameter EXT    = 5'b10001;
parameter EXTU   = 5'b10000;

parameter PACKL  = 5'b00001;
parameter PACKH  = 5'b00010;
parameter PACKHL = 5'b00100;
parameter MVEQZ  = 5'b01000;
parameter MVNEZ  = 5'b10000;

parameter FF0    = 5'b10001;
parameter FF1    = 5'b10000;
parameter TST    = 5'b00100;
parameter TSTNBZ = 5'b01000;
parameter REV    = 5'b00010;



parameter MULOP  = 5'b00000;
parameter MULADD = 5'b00001;
parameter MULSUB = 5'b00010;


parameter MULT   = 5'b00111;
parameter MULH   = 5'b00011;
parameter MULHSU = 5'b00001;
parameter MULHU  = 5'b00000;
parameter MULA   = 5'b00111;
parameter MULAH  = 5'b10111;
parameter MULS   = 5'b00111;
parameter MULSH  = 5'b10111;



parameter DIVOP  = 5'b00000;


parameter DIVS   = 5'b00001;
parameter DIVU   = 5'b00010;
parameter REMS   = 5'b00100;
parameter REMU   = 5'b01000;



parameter UCOND  = 5'b00001;
parameter COND   = 5'b00010;
parameter AUIOP  = 5'b00100;


parameter JAL    = 5'b00010;
parameter JALR   = 5'b00100;


parameter BEQ    = 5'b00100;
parameter BNE    = 5'b01100;
parameter BLT    = 5'b10010;
parameter BGE    = 5'b11010;
parameter BLTU   = 5'b00010;
parameter BGEU   = 5'b01010;


parameter AUIPC  = 5'b00000;



parameter UBYTE  = 5'b00000;
parameter UHALF  = 5'b00001;
parameter UWORD  = 5'b00010;
parameter BYTE   = 5'b00100;
parameter HALF   = 5'b00101;
parameter WORD   = 5'b00110;
parameter UBYTEB = 5'b01000;
parameter UBYTEA = 5'b11000;
parameter UHALFB = 5'b01001;
parameter UHALFA = 5'b11001;
parameter BYTEB  = 5'b01100;
parameter BYTEA  = 5'b11100;
parameter HALFB  = 5'b01101;
parameter HALFA  = 5'b11101;
parameter WORDB  = 5'b01110;
parameter WORDA  = 5'b11110;
parameter DBWD   = 5'b00111;
parameter ATOM   = 5'b00110;
parameter DCAOPS = 5'b00000;


parameter LDU    = 5'b00000;
parameter LD     = 5'b00000;
parameter ST     = 5'b00001;
parameter LR     = 5'b10010;
parameter SC     = 5'b10011;
parameter AMO    = 5'b10100;
parameter DIPA   = 5'b01001;
parameter DCPA   = 5'b01010;
parameter DCIPA  = 5'b01011;
parameter DPA    = 3'b010;



parameter CSR    = 5'b00001;
parameter FNC    = 5'b00010;
parameter SYS    = 5'b00100;


parameter CSRRW  = 5'b00001;
parameter CSRRS  = 5'b00010;
parameter CSRRC  = 5'b00100;
parameter CSRR   = 5'b01000;


parameter FENCE  = 5'b00001;
parameter FENCI  = 5'b00010;
parameter SYNC   = 5'b00100;
parameter SYNCI  = 5'b01000;


parameter ECALL  = 5'b00001;
parameter EBREK  = 5'b00010;
parameter MRET   = 5'b00100;
parameter WFI    = 5'b01000;
parameter CAOPS  = 5'b10000;







assign decd_inst[31:0] = ifu_idu_id_inst[31:0];
assign decd_inst_32bit = decd_inst[1] && decd_inst[0];
assign decd_op[6:0]    = {decd_inst[6:5], decd_inst_32bit ?
                          decd_inst[4:2] : decd_inst[15:13], decd_inst[1:0]};
assign decd_func3[2:0] = decd_inst_32bit ? decd_inst[14:12] : decd_inst[12:10];
assign decd_func7[5:0] = {decd_inst[31:27], decd_inst[25]};









// &CombBeg; @220
always @( decd_atm_func[4:0]
       or decd_op[6:0]
       or decd_inst[11:2]
       or rs2_32[4:0]
       or decd_inst[26]
       or decd_func3[2:0]
       or sys_sub_func[4:0]
       or decd_inst[19:15]
       or decd_func7[5:0])
begin


  decd_sel[SEL_WIDTH-1:0]           = {SEL_WIDTH{1'b0}};
  decd_func[FUNC_WIDTH-1:0]         = {FUNC_WIDTH{1'b0}};
  decd_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'b0}};
  decd_rs2_imm_vld                  = 1'b0;
  decd_dst_vld                      = 1'b0;
  casez({decd_func7[5:0], decd_func3[2:0], decd_op[6:0]})




    16'b???????????00001: // C.ADDI C.NOP
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????01001: // C.LI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????01101: // C.ADDI16SP C.LUI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????00000: // C.ADDI4SPN;
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0????10010: // C.MV; C.JR ALU Unit selected only rs2 != x0
    begin
      decd_sel[SEL_WIDTH-1:0]           = decd_inst[6:2] == 5'b0 ? BJU : ALU;
      decd_func[FUNC_WIDTH-1:0]         = decd_inst[6:2] == 5'b0 ? UCOND : ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[6:2] == 5'b0 ? JALR : ADD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = decd_inst[6:2] != 5'b0;
    end
    16'b??????1????10010: // C.ADD; C.JALR ALU Unit selected only rs2 != x0
    begin
      decd_sel[SEL_WIDTH-1:0]           = decd_inst[6:2] == 5'b0
                                        ? decd_inst[11:7] == 5'b0 ? CP0 : BJU : ALU;
      decd_func[FUNC_WIDTH-1:0]         = decd_inst[6:2] == 5'b0
                                        ? decd_inst[11:7] == 5'b0 ? SYS : UCOND : ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[6:2] == 5'b0
                                        ? decd_inst[11:7] == 5'b0 ? EBREK : JALR : ADD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0110010001: // C.SUB
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SUB;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???00000110011: // ADD
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0000010011: // ADDI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????????0110111: // LUI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?1????0000110011: // SUB
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SUB;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0100010011: // SLTI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SLT;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????00100110011: // SLT
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SLT;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????00110110011: // SLTU
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LTU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0110010011: // SLTIU
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LTU;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end


    16'b???????????00010: // C.SLLI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SLL;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????00??10001: // C.SRLI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRL;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????01??10001: // C.SRAI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRA;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0010010011: // SLLI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SLL;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????00010110011: // SLL
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SLL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0????1010010011: // SRLI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRL;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???01010110011: // SRL
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?1????1010010011: // SRAI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRA;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?1????1010110011: // SRA
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRA;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end


    16'b???????10??10001: // C.ANDI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = AND;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????111110001: // C.AND
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = AND;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????111010001: // C.OR
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = OR;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????110110001: // C.XOR
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = XOR;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1110010011: // ANDI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = AND;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1100010011: // ORI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = OR;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1000010011: // XORI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = XOR;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????01110110011: // AND
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = AND;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????01100110011: // OR
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = OR;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????01000110011: // XOR
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = LOGIC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = XOR;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end




    16'b?0???10000110011: // MULT
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULT;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???10010110011: // MULH
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULH;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???10100110011: // MULHSU
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULHSU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???10110110011: // MULHU
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULHU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end




    16'b?0???11000110011: // DIVS
    begin
      decd_sel[SEL_WIDTH-1:0]           = DIV;
      decd_func[FUNC_WIDTH-1:0]         = DIVOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = DIVS;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???11010110011: // DIVU
    begin
      decd_sel[SEL_WIDTH-1:0]           = DIV;
      decd_func[FUNC_WIDTH-1:0]         = DIVOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = DIVU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???11100110011: // REMS
    begin
      decd_sel[SEL_WIDTH-1:0]           = DIV;
      decd_func[FUNC_WIDTH-1:0]         = DIVOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = REMS;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?0???11110110011: // REMU
    begin
      decd_sel[SEL_WIDTH-1:0]           = DIV;
      decd_func[FUNC_WIDTH-1:0]         = DIVOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = REMU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end




    16'b???????????00101: // C.JAL
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = UCOND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = JAL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????10101: // C.J
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = UCOND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = JAL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b???????????11001: // C.BEQZ
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BEQ;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b0;
    end
    16'b???????????11101: // C.BNEQ
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BNE;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b0;
    end
    16'b?????????0010111: // AUIPC
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = AUIOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = AUIPC;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????????1101111: // JAL
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = UCOND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = JAL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b?????????1100111: // JALR
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = UCOND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = JALR;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0001100011: // BEQ
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BEQ;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0011100011: // BNE
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BNE;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????1001100011: // BLT
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BLT;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????1011100011: // BGE
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BGE;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????1101100011: // BLTU
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BLTU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????1111100011: // BGEU
    begin
      decd_sel[SEL_WIDTH-1:0]           = BJU;
      decd_func[FUNC_WIDTH-1:0]         = COND;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = BGEU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end




    16'b???????????01000: // C.LW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????11000: // C.SW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b???????????01010: // C.LWSP
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b???????????11010: // C.SWSP
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0000000011: // LB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0010000011: // LH
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0100000011: // LW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1000000011: // LBU
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UBYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1010000011: // LHU
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UHALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0000100011: // SB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0010100011: // SH
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0100100011: // SW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0100101111: // LR.W/SC.W/AMO
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_atm_func[SUB_FUNC_WIDTH-1:0];
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end




    16'b??????0011110011: // CSRRW
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = CSRRW;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0101110011: // CSRRS
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[19:15] == 5'b0 ? CSRR : CSRRS;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0111110011: // CSRRC
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[19:15] == 5'b0 ? CSRR : CSRRC;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1011110011: // CSRRWI
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = CSRRW;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1101110011: // CSRRSI
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[19:15] == 5'b0 ? CSRR : CSRRS;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????1111110011: // CSRRCI
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = CSR;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[19:15] == 5'b0 ? CSRR : CSRRC;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0000001111: // FENCE
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = FNC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = FENCE;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0010001111: // FENCE.I
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = FNC;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = FENCI;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b??????0001110011: // ECALL EBREAK MRET WFI
    begin
      decd_sel[SEL_WIDTH-1:0]           = CP0;
      decd_func[FUNC_WIDTH-1:0]         = SYS;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = sys_sub_func[SUB_FUNC_WIDTH-1:0];
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end



    16'b?????10000001011: // LSU Cache OPs
    begin
      case(rs2_32[4:0])
        5'b01010: // DCACHE.IPA
        begin
          decd_sel[SEL_WIDTH-1:0]           = LSU;
          decd_func[FUNC_WIDTH-1:0]         = DCAOPS;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = DIPA;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        5'b01001: // DCACHE.CPA
        begin
          decd_sel[SEL_WIDTH-1:0]           = LSU;
          decd_func[FUNC_WIDTH-1:0]         = DCAOPS;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = DCPA;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        5'b01011: // DCACHE.CIPA
        begin
          decd_sel[SEL_WIDTH-1:0]           = LSU;
          decd_func[FUNC_WIDTH-1:0]         = DCAOPS;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = DCIPA;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        default: // Cache Ops
        begin
          decd_sel[SEL_WIDTH-1:0]           = CP0;
          decd_func[FUNC_WIDTH-1:0]         = SYS;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = CAOPS;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
      endcase
    end
    16'b?????00000001011: // CP0 Cache OPs
    begin
      case(rs2_32[4:1])
        4'b0010: // IPUSH IPOP
        begin
          decd_sel[SEL_WIDTH-1:0]           = ALU;
          decd_func[FUNC_WIDTH-1:0]         = ADDER;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        4'b1100: // SYNC SYNC.S
        begin
          decd_sel[SEL_WIDTH-1:0]           = CP0;
          decd_func[FUNC_WIDTH-1:0]         = FNC;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = SYNC;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        4'b1101: // SYNC.I SYNC.IS
        begin
          decd_sel[SEL_WIDTH-1:0]           = CP0;
          decd_func[FUNC_WIDTH-1:0]         = FNC;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = SYNCI;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
        default: // Cache Ops
        begin
          decd_sel[SEL_WIDTH-1:0]           = CP0;
          decd_func[FUNC_WIDTH-1:0]         = SYS;
          decd_sub_func[SUB_FUNC_WIDTH-1:0] = CAOPS;
          decd_rs2_imm_vld                  = 1'b1;
          decd_dst_vld                      = 1'b0;
        end
      endcase
    end







    16'b00000?0010001011: // ADDSL
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = ADDER;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADDSL;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b0001000010001011: // SRRI
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = SRRI;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b100?000010001011: // TSTNBZ/FF0
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = BITOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[26] ? FF0 : TSTNBZ;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b1???010010001011: // FF1/REV
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = BITOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = decd_inst[26] ? FF1 : REV;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b1???1?0010001011: // TST
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = BITOP;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = TST;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b01???00010001011: // MVEQZ
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = PACK;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MVEQZ;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b01???10010001011: // MVNEZ
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = PACK;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MVNEZ;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0100001011: //EXT
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = EXT;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end
    16'b??????0110001011: //EXTU
    begin
      decd_sel[SEL_WIDTH-1:0]           = ALU;
      decd_func[FUNC_WIDTH-1:0]         = SHIFT;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = EXTU;
      decd_rs2_imm_vld                  = 1'b1;
      decd_dst_vld                      = 1'b1;
    end




    16'b001?000010001011: //MULA
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULADD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULA;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b001?010010001011: //MULS
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULSUB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULS;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b001?100010001011: //MULAH
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULADD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULAH;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b001?110010001011: //MULSH
    begin
      decd_sel[SEL_WIDTH-1:0]           = MUL;
      decd_func[FUNC_WIDTH-1:0]         = MULSUB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = MULSH;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end




    16'b00000?1000001011: //LRB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00100?1000001011: //LRH
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b01000?1000001011: //LRW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10000?1000001011: //LRBU
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UBYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10100?1000001011: //LRHU
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UHALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00011?1000001011: //LBIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTEA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00001?1000001011: //LBIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTEB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00111?1000001011: //LHIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALFA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00101?1000001011: //LHIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALFB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b01011?1000001011: //LWIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORDA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b01001?1000001011: //LWIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORDB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10011?1000001011: //LBUIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UBYTEA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10001?1000001011: //LBUIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UBYTEB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10111?1000001011: //LHUIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UHALFA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b10101?1000001011: //LHUIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = UHALFB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = LDU;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b1;
    end
    16'b00000?1010001011: //SRB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTE;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b00100?1010001011: //SRH
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALF;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b01000?1010001011: //SRW
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORD;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b00011?1010001011: //SBIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTEA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b00001?1010001011: //SBIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = BYTEB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b00111?1010001011: //SHIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALFA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b00101?1010001011: //SHIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = HALFB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b01011?1010001011: //SWIA
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORDA;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    16'b01001?1010001011: //SWIB
    begin
      decd_sel[SEL_WIDTH-1:0]           = LSU;
      decd_func[FUNC_WIDTH-1:0]         = WORDB;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
    default:
    begin
      decd_sel[SEL_WIDTH-1:0]           = {SEL_WIDTH{1'b0}};
      decd_func[FUNC_WIDTH-1:0]         = {FUNC_WIDTH{1'bx}};
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'bx}};
      decd_rs2_imm_vld                  = 1'b0;
      decd_dst_vld                      = 1'b0;
    end
  endcase
// &CombEnd; @1411
end
















// &CombBeg; @1428
always @( decd_inst[31:27])
begin
casez(decd_inst[31:27])
  5'b00010: decd_atm_func[SUB_FUNC_WIDTH-1:0] = LR;
  5'b00011: decd_atm_func[SUB_FUNC_WIDTH-1:0] = SC;
  default:  decd_atm_func[SUB_FUNC_WIDTH-1:0] = AMO;
endcase
// &CombEnd; @1434
end

// &CombBeg; @1436
always @( decd_inst[31:20])
begin
casez(decd_inst[31:20])
  12'b??00?????000: sys_sub_func[SUB_FUNC_WIDTH-1:0] = ECALL;
  12'b??00?????001: sys_sub_func[SUB_FUNC_WIDTH-1:0] = EBREK;
  12'b??11?????010: sys_sub_func[SUB_FUNC_WIDTH-1:0] = MRET;
  12'b??01?????101: sys_sub_func[SUB_FUNC_WIDTH-1:0] = WFI;
  default         : sys_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'bx}};
endcase
// &CombEnd; @1444
end





// &CombBeg; @1450
always @( decd_inst[15:0])
begin
  casez({decd_inst[15:13], decd_inst[1:0]})

    5'b01001: // C.LI
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0]   = 5'h0;
    end
    5'b01101: // C.ADDI16SP; note: C.LUI included
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0] = decd_inst[11:7] == 5'h2 ? 5'h2 : 5'h0;
    end
    5'b00000, // C.ADDI4SPN
    5'b?1010: // C.LWSP C.SWSP
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0] = 5'b00010;
    end
    5'b?1000, // C.LW C.SW
    5'b11?01, // C.BEQZ C.BNEZ
    5'b10001: // C.SRLI C.SRAI C.ANDI C.AND C.OR C.XOR C.SUB
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0] = {2'b01, decd_inst[9:7]};
    end
    5'b00001, // C.ADDI
    5'b00010: // C.SLLI
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0] = decd_inst[11:7];
    end
    5'b10010: // C.JR C.JALR C.ADD; C.MOV included
    begin
      rs1_update_16 = 1'b1;
      rs1_16[4:0] = decd_inst[6:2] != 5'b0 && !decd_inst[12]
                  ? 5'b0 : decd_inst[11:7];
    end
    default:
    begin
      rs1_update_16 = 1'b0;
      rs1_16[4:0] = 5'b0;
    end
  endcase
// &CombEnd; @1506
end

// &CombBeg; @1508
always @( decd_inst[15:13]
       or decd_inst[6:0])
begin
  casez({decd_inst[15:13], decd_inst[1:0]})

    5'b11010, // C.SWSP
    5'b10010: // C.MV C.ADD; note: C.JR and C.JALR included
    begin
      rs2_update_16 = 1'b1;
      rs2_16[4:0] = decd_inst[6:2];
    end
    5'b11000: // C.SW
    begin
      rs2_update_16 = 1'b1;
      rs2_16[4:0] = {2'b01, decd_inst[4:2]};
    end
    5'b10001: // C.AND C.OR C.XOR C.SUB C.SRLI C.SRAI C.ANDI
    begin
      rs2_update_16 = 1'b1;
      rs2_16[4:0] = {2'b01, decd_inst[4:2]};
    end
    default:
    begin
      rs2_update_16 = 1'b0;
      rs2_16[4:0] = 5'b0;
    end
    endcase
// &CombEnd; @1533
end

// &CombBeg; @1535
always @( decd_inst[15:13]
       or decd_inst[11:0])
begin
  casez({decd_inst[15:13], decd_inst[1:0]})

    5'b01010, // C.LWSP
    5'b01001, // C.LI
    5'b01101, // C.LUI C.ADDI16SP
    5'b00001, // C.ADDI
    5'b00010: // C.SLLI
      rd_16[4:0] = decd_inst[11:7];
    5'b10010: // C.MV C.ADD; C.JALR; note: C.JR included
      rd_16[4:0] = decd_inst[6:2] == 5'b0 ? 5'b1 : decd_inst[11:7];
    5'b00101: // C.JAL
      rd_16[4:0] = 5'b1;
    5'b10001: // C.AND C.OR C.XOR C.SUB C.SRLI C.SRAI C.ANDI
      rd_16[4:0] = {2'b01, decd_inst[9:7]};
    5'b01000, // C.LW
    5'b00000: // C.ADDI4SPN
      rd_16[4:0] = {2'b01, decd_inst[4:2]};
    default :
      rd_16[4:0] = {2'b01, decd_inst[9:7]};
  endcase
// &CombEnd; @1556
end

assign rs1_32[4:0]   = {5{!utype_imm_vld}} & decd_inst[19:15];
assign rs2_32[4:0]   = decd_inst[24:20];
assign rd_32[4:0]    = decd_inst[11:7];
assign decd_rs1[4:0] = decd_inst_32bit ? rs1_32[4:0]     : rs1_16[4:0];
assign decd_rs2[4:0] = decd_inst_32bit ? rs2_32[4:0]     : rs2_16[4:0];
assign decd_rd[4:0]  = decd_inst_32bit ? decd_inst[11:7] : rd_16[4:0];


assign decd_csri_vld      = decd_sel[5] && decd_func[0] && decd_inst[14];
assign decd_csri_rs1[4:0] = decd_inst[19:15];





assign load_imm_vld    = decd_inst[6:0] == 7'b0000011;
assign itype_imm_vld   = decd_inst[6:0] == 7'b0010011 ||
                         decd_inst[6:0] == 7'b1110011 && !decd_inst[14];
assign jalr_imm_vld    = decd_inst[6:0] == 7'b1100111;
assign itype_imm[31:0] = {{21{decd_inst[31]}}, decd_inst[30:20]};

assign stype_imm_vld   = decd_inst[6:0] == 7'b0100011;
assign stype_imm[31:0] = {{21{decd_inst[31]}}, decd_inst[30:25], decd_inst[11:7]};


assign btype_imm_vld   = decd_inst[6:0] == 7'b1100011;
assign btype_imm[31:0] = {{20{decd_inst[31]}}, decd_inst[7], decd_inst[30:25],
                         decd_inst[11:8], 1'b0};

assign utype_imm_vld   = decd_inst[6:0] == 7'b0110111;
assign auipc_imm_vld   = decd_inst[6:0] == 7'b0010111;
assign utype_imm[31:0] = {decd_inst[31:12], 12'b0};

assign jtype_imm_vld   = decd_inst[6:0] == 7'b1101111;
assign jtype_imm[31:0] = {{12{decd_inst[31]}}, decd_inst[19:12], decd_inst[20],
                         decd_inst[30:21], 1'b0};

assign uitype_imm_vld   = decd_inst[6:0] == 7'b1110011
                       || decd_inst[6:0] == 7'b0001011 && decd_func3[2:1] != 2'b01;
assign uitype_imm[31:0] = {20'b0, decd_inst[31:20]};



assign citype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b01001 ||
                          {decd_inst[15:13], decd_inst[1:0]} == 5'b00001 ||
                          {decd_inst[15:13], decd_inst[1:0]} == 5'b00010 ||
                          {decd_inst[15:13], decd_inst[1:0]} == 5'b10001
                          && decd_inst[11:10] != 2'b11;
assign citype_imm[31:0] = {{27{decd_inst[12]}}, decd_inst[6:2]};

assign cistype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b01010;
assign cistype_imm[31:0] = {24'b0, decd_inst[3:2], decd_inst[12], decd_inst[6:4],
                            2'b0};

assign ciltype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b01101 &&
                            decd_inst[11:7] != 5'b10;
assign ciltype_imm[31:0] = {{15{decd_inst[12]}}, decd_inst[6:2], 12'b0};

assign ciatype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b01101 &&
                            decd_inst[11:7] == 5'b10;
assign ciatype_imm[31:0] = {{23{decd_inst[12]}}, decd_inst[4:3], decd_inst[5],
                            decd_inst[2], decd_inst[6], 4'b0};

assign ciwtype_imm_vld   = !decd_inst_32bit && {decd_inst[15:13], decd_inst[1:0]}
                           == 5'b00000;
assign ciwtype_imm[31:0] = {22'b0, decd_inst[10:7], decd_inst[12:11], decd_inst[5],
                            decd_inst[6], 2'b0};


assign cltype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b01000 ||
                          {decd_inst[15:13], decd_inst[1:0]} == 5'b11000;
assign cltype_imm[31:0] = {25'b0, decd_inst[5], decd_inst[12:10], decd_inst[6],
                           2'b0};


assign csstype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b11010;
assign csstype_imm[31:0] = {24'b0, decd_inst[8:7], decd_inst[12:9], 2'b0};


assign cbtype_imm_vld   = {decd_inst[15:13], decd_inst[1:0]} == 5'b11001 ||
                          {decd_inst[15:13], decd_inst[1:0]} == 5'b11101;
assign cbtype_imm[31:0] = {{24{decd_inst[12]}}, decd_inst[6:5], decd_inst[2],
                           decd_inst[11:10], decd_inst[4:3], 1'b0};


assign cjtype_imm_vld   = {decd_inst[14:13], decd_inst[1:0]} == 4'b0101;
assign cjtype_imm[31:0] = {{21{decd_inst[12]}}, decd_inst[8], decd_inst[10:9],
                           decd_inst[6], decd_inst[7], decd_inst[2], decd_inst[11],
                           decd_inst[5:3], 1'b0};


assign addsl_imm[31:0] = {30'b0, decd_inst[26:25]};


assign ext_imm[31:0]   = {22'b0, decd_inst[30:26], decd_inst[24:20]};


assign lsi_imm[31:0]   = {32{decd_inst[26:25] == 2'b00}} & {{27{decd_inst[24]}}, decd_inst[24:20]}
                       | {32{decd_inst[26:25] == 2'b01}} & {{26{decd_inst[24]}}, decd_inst[24:20], 1'b0}
                       | {32{decd_inst[26:25] == 2'b10}} & {{25{decd_inst[24]}}, decd_inst[24:20], 2'b0}
                       | {32{decd_inst[26:25] == 2'b11}} & {{24{decd_inst[24]}}, decd_inst[24:20], 3'b0};


assign lsr_imm[31:0]   = {32{decd_inst[26:25] == 2'b00}} & {dp_decd_rs2_aft_fwd[31:0]}
                       | {32{decd_inst[26:25] == 2'b01}} & {dp_decd_rs2_aft_fwd[30:0], 1'b0}
                       | {32{decd_inst[26:25] == 2'b10}} & {dp_decd_rs2_aft_fwd[29:0], 2'b0}
                       | {32{decd_inst[26:25] == 2'b11}} & {dp_decd_rs2_aft_fwd[28:0], 3'b0};


assign decd_ag_imm_vld   = decd_sel[3]
                        || decd_sel[4]
                        || (fdecd_decd_fp_inst_vld ? fdecd_decd_ill_expt : decd_ill_expt)
                        || fdecd_decd_imm_vld
                        || addsl_imm_vld
                        || lsi_imm_vld
                        || lsr_imm_vld
                        || decd_sel[5];
assign decd_ag_imm[31:0] = {32{cbtype_imm_vld}} &  cbtype_imm[31:0] |
                           {32{ btype_imm_vld}} &   btype_imm[31:0] |
                          {32{  load_imm_vld}}  &   itype_imm[31:0] |
                          {32{ stype_imm_vld}}  &   stype_imm[31:0] |
                          {32{cistype_imm_vld}} & cistype_imm[31:0] |
                          {32{ cltype_imm_vld}} &  cltype_imm[31:0] |
                          {32{csstype_imm_vld}} & csstype_imm[31:0] |
                          {32{fdecd_decd_imm_vld}} & fdecd_decd_imm[31:0] |
                          {32{  addsl_imm_vld}} &   addsl_imm[31:0] |
                          {32{  lsi_imm_vld}}   &     lsi_imm[31:0] |
                          {32{  lsr_imm_vld}}   &     lsr_imm[31:0] |
                          {32{  auipc_imm_vld}} &   utype_imm[31:0] |
                          {32{   jalr_imm_vld}} &   itype_imm[31:0] |
                          {32{  jtype_imm_vld}} &   jtype_imm[31:0] |
                          {32{ cjtype_imm_vld}} &  cjtype_imm[31:0] ;
assign decd_imm[31:0]   = {32{  itype_imm_vld}} &   itype_imm[31:0] |
                          {32{  utype_imm_vld}} &   utype_imm[31:0] |
                          {32{  ext_imm_vld}}   &     ext_imm[31:0] |
                          {32{ uitype_imm_vld}} &  uitype_imm[31:0] |
                          {32{ citype_imm_vld}} &  citype_imm[31:0] |
                          {32{ciltype_imm_vld}} & ciltype_imm[31:0] |
                          {32{ciatype_imm_vld}} & ciatype_imm[31:0] |
                          {32{ciwtype_imm_vld}} & ciwtype_imm[31:0];






// &CombBeg; @1704
always @( citype_imm[5:0]
       or decd_inst[11:2]
       or ciatype_imm[9:4]
       or decd_op[4:0]
       or decd_func3[2:0]
       or ciwtype_imm[9:2]
       or rd_16[4:0]
       or ciltype_imm[17:12])
begin
  casez({decd_func3[2:0], decd_op[4:0]})

    8'b?0?10001:  // C.SRLI C.SRAI
    begin
      decd_ill_expt16 = citype_imm[5];

    end
    8'b???00000:  // C.ADDI4SPN
    begin
      decd_ill_expt16 = ciwtype_imm[9:2] == 8'b0;

    end
    8'b???01010:  // C.LWSP
    begin
      decd_ill_expt16 = rd_16[4:0] == 5'b0 && citype_imm[5:0] == 6'b0;
    end
    8'b???00010:  // C.SLLI C.SLLI64
    begin
      decd_ill_expt16 = citype_imm[5];
    end
    8'b???01101:  // C.LUI C.ADDI16SP
    begin
      decd_ill_expt16 = rd_16[4:0] != 5'b10 && ciltype_imm[17:12] == 6'b0
                     || rd_16[4:0] == 5'b10 && ciatype_imm[9:4] == 6'b0;
    end
    8'b0??10010:  // C.JR C.MV
    begin
      decd_ill_expt16 = decd_inst[6:2] == 5'b0 && decd_inst[11:7] == 5'b0;
    end
    8'b???11010,  // C.SWSP
    8'b???00001,  // C.ADDI C.NOP
    8'b???01001,  // C.LI
    8'b1??10010,  // C.JALR C.MV C.ADD C.EBREAK
    8'b???01000,  // C.LW
    8'b???11000,  // C.SW
    8'b???10101,  // C.J
    8'b???00101,  // C.JAL
    8'b???11001,  // C.BEQZ
    8'b???11101,  // C.BNEZ
    8'b?1010001,  // C.ANDI
    8'b?1110001:  // C.AND C.OR C.XOR C.SUB
    begin
      decd_ill_expt16 = 1'b0;      //initial invalid instruction exception
    end
    default:begin                //invalid instruction
      decd_ill_expt16 = 1'b1;      //invalid instruction exception
    end
  endcase
// &CombEnd; @1753
end


// &CombBeg; @1756
always @( rtu_yy_xx_dbgon
       or decd_inst[31:20]
       or cp0_yy_cskyisaee
       or decd_inst[14:2]
       or cp0_yy_mach_mode)
begin
  casez({decd_inst[31:25], decd_inst[14:12], decd_inst[6:2]})

    15'b010000000001100,  // SUB
    15'b010000010101100,  // SRA
    15'b000000????01100,  // R-Type

    15'b????????0?00000,  //
    15'b???????01000000,  // I-Type Load

    15'b000000000100100,  // SLLI
    15'b0?0000010100100,  // SRLI SRAI
    15'b????????1100100,  // I-Type
    15'b?????????000100,  // I-Type

    15'b???????00011001,  // JALR

    15'b?????????111100,  //
    15'b????????1011100,  // CSR Type

    15'b???????00?01000,  //
    15'b???????01001000,  // S-Type

    15'b???????00?11000,  //
    15'b???????1??11000,  // B-Type

    15'b??????????01101,  // LUI

    15'b??????????00101,  // AUIPC

    15'b??????????11011,  // J-Type

    15'b???????00?00011:  // FENCE FENCE.I
    begin
      decd_ill_expt32 = 1'b0; // initial invalid instruction exception
    end
    15'b000000?00000010:  // Cache Ops
    begin
      decd_ill_expt32 = decd_inst[11:7] != 5'b0
                     || decd_inst[24:20] == 5'b0
                     || !cp0_yy_cskyisaee // initial invalid instruction exception
                     || !(decd_inst[25] == 1'b0 && decd_inst[24:23] == 2'b11)
                       && !cp0_yy_mach_mode && !rtu_yy_xx_dbgon; // Only sync inst can execution in U-mode.
    end
    15'b???????01?01011:  // RV32A
    begin
      decd_ill_expt32 = !(decd_inst[31:29] == 3'b0 || decd_inst[28:27] == 2'b0);
    end
    15'b000000000011100:  // ECALL EBREAK
    begin
      decd_ill_expt32 = decd_inst[24:21] != 4'b0;
    end
    15'b001100000011100:  // MRET
    begin
      decd_ill_expt32 = decd_inst[24:20] != 5'b00010;
    end
    15'b000100000011100:  // WFI
    begin
      decd_ill_expt32 = decd_inst[24:20] != 5'b00101;
    end
    15'b10000??00100010:  // TSTNBZ/REV/FF0/FF1
    begin
      decd_ill_expt32 = decd_inst[24:20] != 5'b0 || !cp0_yy_cskyisaee;
    end
    15'b0??????10100010:  // SRB/SRH/SRW/SBI/SHI/SWI
    begin
      decd_ill_expt32 = decd_inst[28:27] == 2'b10 || decd_inst[30:29] == 2'b11
                        || !cp0_yy_cskyisaee;
    end
    15'b100010000100010,  // TST
    15'b010000?00100010,  // MVEQZ/MVNEZ
    15'b0010?0?00100010,  // MULA/MULS/MULAH/MULSH
    15'b0?????001?00010,  // EXT/EXTU
    15'b?0??1??10000010,  // LBI/LHI/LBUI/LHUI
    15'b010?1??10000010,  // LWI
    15'b?0?00??10000010,  // LRB/LRH/LRBU/LRHU
    15'b01000??10000010,  // LRW
    15'b00000??00100010,  // ADDSL
    15'b000100000100010:  // SRRI
    begin
      decd_ill_expt32 = !cp0_yy_cskyisaee;
    end
    default:
    begin
      decd_ill_expt32 = 1'b1; // all other insts are illegal
    end
  endcase
// &CombEnd; @1851
end

assign rs1_update_32 = decd_inst_32bit &&


                       decd_op[6:2] != 5'b00101 && // AUIPC
                       decd_op[6:2] != 5'b11011;   // JAL
assign rs2_update_encry_ext = 1'b0;

assign rs2_update_mcu_ext =  decd_op[6:2] == 5'b00010 &&
                            ((decd_func3[2:0] == 3'b001 && decd_func7[5] == 1'b0  && decd_func7[2:1] != 2'b10) ||
                             (decd_func3[2:0] == 3'b100 && decd_func7[1] == 1'b0) ||
                             (decd_func3[2:0] == 3'b101 && decd_func7[1] == 1'b0));

assign addsl_imm_vld = decd_sel[SEL_WIDTH-1:0]           == ALU
                    && decd_func[FUNC_WIDTH-1:0]         == ADDER
                    && decd_sub_func[SUB_FUNC_WIDTH-1:0] == ADDSL;

assign decd_mul_high_sel  = decd_sel[SEL_WIDTH-1:0] == MUL && !decd_sub_func[4];

assign decd_rs3_update = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b001
                     && (decd_func7[5:2] == 4'b0010  // MULA MULS
                      || decd_func7[5:1] == 5'b01000) // MOV C
                      || decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b101; // str
assign decd_rs3_upd_dp = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b001
                      || decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b101; // str
assign decd_rs3[5:0] = {1'b0, decd_inst[11:7]};

assign decd_str_vld = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b101 && !decd_func7[1]; // str

assign ext_imm_vld = decd_op[6:0] == 7'b0001011 && decd_func3[2:1] == 2'b01;

assign decd_ldi_vld = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b100 && decd_func7[1]; // ldi
assign decd_sti_vld = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b101 && decd_func7[1]; // sti
assign lsi_imm_vld  = decd_op[6:0] == 7'b0001011 && decd_func3[2:1] == 2'b10  && decd_func7[1]; // lsi
assign lsr_imm_vld  = decd_op[6:0] == 7'b0001011 && decd_func3[2:1] == 2'b10  && !decd_func7[1]; // lsr

assign rs2_update_32 = decd_inst_32bit && (
                       decd_op[6:2] == 5'b01100 || // R-Type
                       decd_op[6:2] == 5'b01000 || // S-Type
                       decd_op[6:2] == 5'b11000 || // B-Type
                       decd_op[6:2] == 5'b01011 ||
                       rs2_update_encry_ext     ||
                       rs2_update_mcu_ext);


assign rs1_update    = rs1_update_32 || rs1_update_16;
assign rs2_update    = rs2_update_32 || rs2_update_16;



assign decd_ill_expt = decd_inst_32bit ? decd_ill_expt32
                                       : decd_ill_expt16;







assign decd_gpr_rs1[5:0] = hs_sel ? hs_decd_rs1[5:0] : split_sel ? split_decd_rs1_idx[5:0] : {1'b0, {5{!fdecd_decd_fp_inst_vld || fdecd_decd_rs1_int_vld}} & decd_rs1[4:0]};
assign decd_gpr_rs2[5:0] = hs_sel ? hs_decd_rs2[5:0] : split_sel ? split_decd_rs2_idx[5:0] : {1'b0, decd_rs2[4:0]};
assign decd_gpr_dep_rs1[5:0] = hs_sel ? hs_decd_rs1[5:0] : split_sel ? split_decd_rs1_idx[5:0] : {1'b0, decd_rs1[4:0]};
assign decd_gpr_dep_rs2[5:0] = hs_sel ? hs_decd_rs2[5:0] : split_sel ? split_decd_rs2_idx[5:0] : {1'b0, decd_rs2[4:0]};
assign decd_gpr_rs2_vld  = hs_sel ? hs_decd_rs2_vld : split_sel ? split_decd_rs2_vld : rs2_update;
assign decd_gpr_rs1_vld  = hs_sel ? hs_decd_rs1_vld : split_sel ? split_decd_rs1_vld : rs1_update;
assign decd_gpr_rd_vld   = hs_sel ? hs_decd_dst_vld : split_sel ? split_decd_dst_vld : decd_dst_vld;
assign decd_gpr_rs3_vld  = !hs_sel && decd_rs3_update;
assign decd_gpr_rs3[5:0] = {6{decd_rs3_upd_dp}} & decd_rs3[5:0];
assign decd_gpr_ldi_vld  = !hs_sel && decd_ldi_vld;
assign decd_gpr_sti_vld  = !hs_sel && decd_sti_vld;


assign decd_ctrl_unit_sel[SEL_WIDTH-1:0] = hs_sel ? hs_decd_sel[SEL_WIDTH-1:0] : split_sel ? split_decd_sel[SEL_WIDTH-1:0] : decd_sel[SEL_WIDTH-1:0];
assign decd_ctrl_dst_vld                 = hs_sel ? hs_decd_dst_vld : split_sel ? split_decd_dst_vld : decd_dst_vld;
assign decd_ctrl_ill_expt                = !hs_sel && decd_ill_expt;
assign decd_ctrl_dst_idx[5:0]            = hs_sel ? hs_decd_rd[5:0] : split_sel ? split_decd_dst_idx[5:0] : {1'b0, decd_rd[4:0]};

assign decd_ctrl_inst_32bit              = hs_sel ? 1'b1 : decd_inst_32bit;
assign decd_ctrl_id_func[FUNC_WIDTH-1:0] = hs_sel ? hs_decd_func[FUNC_WIDTH-1:0] : split_sel ? split_decd_func[FUNC_WIDTH-1:0] : decd_func[FUNC_WIDTH-1:0];
assign decd_ctrl_bju_use_pc              = (decd_func[FUNC_WIDTH-1:0] == COND
                                         || decd_func[FUNC_WIDTH-1:0] == AUIOP
                                         || decd_func[FUNC_WIDTH-1:0] == UCOND && decd_sub_func[SUB_FUNC_WIDTH-1:0] == JAL)
                                         && decd_sel[3] && !hs_sel;
assign decd_bju_chgflw_inst              = (decd_func[FUNC_WIDTH-1:0] == COND
                                         || decd_func[FUNC_WIDTH-1:0] == UCOND)
                                         && decd_sel[3] && !hs_sel;
assign decd_ctrl_sti_vld                 = decd_sti_vld && !hs_sel;
assign decd_ctrl_str_vld                 = decd_str_vld && !hs_sel;



assign decd_dp_func[FUNC_WIDTH-1:0]         = hs_sel ? hs_decd_func[FUNC_WIDTH-1:0] : split_sel ? split_decd_func[FUNC_WIDTH-1:0] : decd_func[FUNC_WIDTH-1:0];
assign decd_dp_sub_func[SUB_FUNC_WIDTH-1:0] = hs_sel ? hs_decd_sub_func[SUB_FUNC_WIDTH-1:0] : split_sel ? split_decd_sub_func[SUB_FUNC_WIDTH-1:0] : decd_sub_func[SUB_FUNC_WIDTH-1:0];
assign decd_dp_imm_vld                      = hs_sel ? hs_decd_rs2_imm_vld : split_sel ? split_decd_rs2_imm_vld : decd_rs2_imm_vld;
assign decd_dp_imm[31:0]                    = hs_sel ? hs_decd_imm[31:0] : split_sel ? split_decd_rs2_imm[31:0] : decd_imm[31:0];
assign decd_dp_ag_imm_vld                   = hs_sel ? hs_decd_imm_vld : split_sel ? split_decd_ag_imm_vld : decd_ag_imm_vld;
assign decd_dp_ag_imm[31:0]                 = hs_sel ? hs_decd_imm[31:0] : split_sel
                                            ? split_decd_ag_imm[31:0]
                                            : ((fdecd_decd_fp_inst_vld ? fdecd_decd_ill_expt : decd_ill_expt)
                                           ||  decd_sel[5] // CP0

                                                          ? decd_inst[31:0]
                                                          : decd_ag_imm[31:0]);
assign decd_dp_rs1_idx[5:0]                 = hs_sel ? hs_decd_rs1[5:0] : split_sel_dp ? split_decd_rs1_idx[5:0] : {1'b0, decd_rs1[4:0]};
assign decd_dp_rs2_idx[5:0]                 = hs_sel ? hs_decd_rs2[5:0] : split_sel_dp ? split_decd_rs2_idx[5:0] : {1'b0, decd_rs2[4:0]};

assign decd_dp_rs1_vld                      = hs_sel ? hs_decd_rs1_vld : split_sel ? split_decd_rs1_vld : rs1_update;
assign fdecd_decd_fp_inst_vld               = 1'b0;
assign fdecd_decd_rs1_int_vld               = 1'b0;
assign fdecd_decd_ill_expt                  = 1'b0;
assign fdecd_decd_imm_vld                   = 1'b0;
assign fdecd_decd_imm[31:0]                 = 32'b0;
assign decd_dp_rs2_vld                      = hs_sel ? hs_decd_rs2_vld : split_sel ? split_decd_rs2_vld : rs2_update;


assign decd_dp_csri_vld                     = decd_csri_vld && !hs_sel;
assign decd_dp_split                        = hs_sel ? hs_decd_split : split_sel ? split_decd_split : 1'b0;
assign decd_dp_csri_rs1[4:0]                = decd_csri_rs1[4:0];
assign decd_dp_mul_high_sel                 = decd_mul_high_sel && !hs_sel;
assign decd_dp_lsu_sel                      = hs_sel ? (hs_decd_sel[SEL_WIDTH-1:0] == LSU) : (decd_sel[SEL_WIDTH-1:0] == LSU);
assign decd_dp_rs3_vld                      = decd_rs3_update && !hs_sel;
assign decd_dp_rs3_idx[5:0]                 = {6{decd_rs3_upd_dp}} & decd_rs3[5:0];

assign decd_dp_lsr_vld                      = lsr_imm_vld && !hs_sel;
assign decd_dp_ex_st_rs2_vld                = (decd_str_vld || decd_sti_vld) && !hs_sel;



assign atm_aqrl = |decd_inst[26:25];

assign split_sel_pre = decd_sel[4] &          //LSU
                      decd_sub_func[4] &     //amo inst
                     (decd_sub_func[2] | decd_sub_func[1] & atm_aqrl);
assign split_req    = split_sel_pre & !decd_ill_expt;
assign split_sel_dp = split_decd_dp_sel;
assign split_sel     = split_decd_dp_sel;

assign decd_split_req = split_req && !hs_sel;
assign decd_split_opcode[6:0]  = decd_inst[31:25];
assign decd_split_rs2_vld      = rs2_update;
assign decd_split_rs2_idx[4:0] = rs2_32[4:0];
assign decd_split_rs1_idx[4:0] = rs1_32[4:0];
assign decd_split_dst_idx[4:0] = rd_32[4:0];

assign decd_hs_ipush_vld = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b0
                        && decd_inst[31:25] == 7'b0 && decd_inst[24:20] == 5'b00100
                        && decd_inst[19:15] == 5'b0 && decd_inst[11:7] == 5'b0
                        && cp0_yy_cskyisaee && (cp0_yy_mach_mode || rtu_yy_xx_dbgon)
                        && !had_idu_id_inst_bkpt_hit && !ifu_idu_id_expt_vld;
assign decd_hs_ipop_vld  = decd_op[6:0] == 7'b0001011 && decd_func3[2:0] == 3'b0
                        && decd_inst[31:25] == 7'b0 && decd_inst[24:20] == 5'b00101
                        && decd_inst[19:15] == 5'b0 && decd_inst[11:7] == 5'b0
                        && cp0_yy_cskyisaee && (cp0_yy_mach_mode || rtu_yy_xx_dbgon)
                        && !had_idu_id_inst_bkpt_hit && !ifu_idu_id_expt_vld;
assign hs_sel = hs_decd_dp_vld;

assign idu_had_id_chgflw_inst = decd_bju_chgflw_inst;

// &ModuleEnd; @2044
endmodule
























// &ModuleBeg; @23
module pa_idu_dp(
  cp0_idu_mcause,
  cp0_idu_mepc,
  cp0_idu_sp_use_scratch,
  cp0_idu_sp_wdata,
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_dp_ex1_bju_sel,
  ctrl_dp_ex1_div_sel,
  ctrl_dp_ex1_dst_preg,
  ctrl_dp_ex1_dst_vld,
  ctrl_dp_ex1_inst_vld,
  ctrl_dp_ex1_lsu_sel,
  ctrl_dp_ex1_rs1_dep,
  ctrl_dp_ex1_rs2_dep,
  ctrl_dp_ex1_st_sel,
  ctrl_dp_pipe_down,
  ctrl_dp_pipe_down_gate,
  ctrl_dp_wbbr_en,
  ctrl_dp_wbbr_rs2_use_zero,
  decd_dp_ag_imm,
  decd_dp_ag_imm_vld,
  decd_dp_csri_rs1,
  decd_dp_csri_vld,
  decd_dp_ex_st_rs2_vld,
  decd_dp_func,
  decd_dp_imm,
  decd_dp_imm_vld,
  decd_dp_lsr_vld,
  decd_dp_lsu_sel,
  decd_dp_mul_high_sel,
  decd_dp_rs1_idx,
  decd_dp_rs1_vld,
  decd_dp_rs2_idx,
  decd_dp_rs2_vld,
  decd_dp_rs3_idx,
  decd_dp_rs3_vld,
  decd_dp_split,
  decd_dp_sub_func,
  dp_ctrl_ex1_ex_st_rs2_vld,
  dp_ctrl_ex1_st_vld,
  dp_ctrl_rs1_dep_ex1_dst,
  dp_ctrl_rs1_fwd_lsu,
  dp_ctrl_rs1_stall_upd,
  dp_ctrl_rs2_dep_ex1_dst,
  dp_ctrl_rs2_fwd_lsu,
  dp_ctrl_rs2_stall_upd,
  dp_ctrl_rs3_dep_ex1_dst,
  dp_ctrl_rs3_fwd_lsu,
  dp_ctrl_rs3_stall_upd,
  dp_ctrl_rs_dep_ex1,
  dp_decd_rs2_aft_fwd,
  dp_gpr_rs1_fwd,
  dp_gpr_rs1_fwd_div,
  dp_gpr_rs1_fwd_lsu,
  dp_gpr_rs2_fwd,
  dp_gpr_rs2_fwd_div,
  dp_gpr_rs2_fwd_lsu,
  dp_gpr_rs3_fwd,
  dp_gpr_rs3_fwd_div,
  dp_gpr_rs3_fwd_lsu,
  forever_cpuclk,
  gpr_dp_rs1,
  gpr_dp_rs2,
  gpr_dp_rs3,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  hd_dp_rs2_sel,
  hs_dp_ipop_int_mask,
  hs_dp_ipop_tail,
  hs_dp_ipush_spec_fail,
  hs_dp_mie_en,
  hs_dp_rs2_mcause,
  hs_dp_rs2_mepc,
  idu_cp0_ex1_func,
  idu_cp0_ex1_opcode,
  idu_cp0_ex1_rs1,
  idu_cp0_ex1_rs2,
  idu_cp0_ex1_sub_func,
  idu_ifu_tail_vld,
  idu_iu_ex1_ag_imm,
  idu_iu_ex1_func,
  idu_iu_ex1_mul_high_sel,
  idu_iu_ex1_split,
  idu_iu_ex1_src0,
  idu_iu_ex1_src0_reg,
  idu_iu_ex1_src1,
  idu_iu_ex1_src2,
  idu_iu_ex1_sub_func,
  idu_lsu_ex1_ag_imm,
  idu_lsu_ex1_base,
  idu_lsu_ex1_base_wb,
  idu_lsu_ex1_data,
  idu_lsu_ex1_func,
  idu_lsu_ex1_mls,
  idu_lsu_ex1_offset_sel,
  idu_lsu_ex1_sign_extend,
  idu_lsu_ex1_size,
  idu_lsu_ex1_src1_reg,
  idu_rtu_ex1_ipop_int_mask,
  idu_rtu_ex1_ipush_mie_en,
  idu_rtu_ex1_ipush_spec_fail,
  idu_rtu_ex1_tail_int_vld,
  ifu_idu_id_warm_up,
  iu_idu_ex1_src1_update_value,
  lsu_idu_ex1_src1_update_en,
  lsu_idu_ex1_src1_update_en_gate,
  lsu_idu_update_addr,
  lsu_idu_update_en,
  lsu_idu_update_en_gate,
  lsu_idu_update_offset,
  pad_yy_gate_clk_en_b,
  rtu_idu_ex1_fwd_data,
  rtu_idu_ex1_fwd_vld,
  rtu_idu_ex2_lsu_fwd_data,
  rtu_idu_ex2_lsu_fwd_preg,
  rtu_idu_ex2_lsu_fwd_vld,
  rtu_idu_ex2_rbus_fwd_data,
  rtu_idu_ex2_rbus_fwd_preg,
  rtu_idu_ex2_rbus_fwd_vld
);

// &Ports; @24
input   [31:0]  cp0_idu_mcause;
input   [31:0]  cp0_idu_mepc;
input           cp0_idu_sp_use_scratch;
input   [31:0]  cp0_idu_sp_wdata;
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_dp_ex1_bju_sel;
input           ctrl_dp_ex1_div_sel;
input   [5 :0]  ctrl_dp_ex1_dst_preg;
input           ctrl_dp_ex1_dst_vld;
input           ctrl_dp_ex1_inst_vld;
input           ctrl_dp_ex1_lsu_sel;
input           ctrl_dp_ex1_rs1_dep;
input           ctrl_dp_ex1_rs2_dep;
input           ctrl_dp_ex1_st_sel;
input           ctrl_dp_pipe_down;
input           ctrl_dp_pipe_down_gate;
input           ctrl_dp_wbbr_en;
input           ctrl_dp_wbbr_rs2_use_zero;
input   [31:0]  decd_dp_ag_imm;
input           decd_dp_ag_imm_vld;
input   [4 :0]  decd_dp_csri_rs1;
input           decd_dp_csri_vld;
input           decd_dp_ex_st_rs2_vld;
input   [4 :0]  decd_dp_func;
input   [31:0]  decd_dp_imm;
input           decd_dp_imm_vld;
input           decd_dp_lsr_vld;
input           decd_dp_lsu_sel;
input           decd_dp_mul_high_sel;
input   [5 :0]  decd_dp_rs1_idx;
input           decd_dp_rs1_vld;
input   [5 :0]  decd_dp_rs2_idx;
input           decd_dp_rs2_vld;
input   [5 :0]  decd_dp_rs3_idx;
input           decd_dp_rs3_vld;
input           decd_dp_split;
input   [4 :0]  decd_dp_sub_func;
input           forever_cpuclk;
input   [31:0]  gpr_dp_rs1;
input   [31:0]  gpr_dp_rs2;
input   [31:0]  gpr_dp_rs3;
input   [31:0]  had_idu_wbbr_data;
input           had_idu_wbbr_vld;
input           hd_dp_rs2_sel;
input           hs_dp_ipop_int_mask;
input           hs_dp_ipop_tail;
input           hs_dp_ipush_spec_fail;
input           hs_dp_mie_en;
input           hs_dp_rs2_mcause;
input           hs_dp_rs2_mepc;
input           ifu_idu_id_warm_up;
input   [31:0]  iu_idu_ex1_src1_update_value;
input           lsu_idu_ex1_src1_update_en;
input           lsu_idu_ex1_src1_update_en_gate;
input   [31:0]  lsu_idu_update_addr;
input           lsu_idu_update_en;
input           lsu_idu_update_en_gate;
input   [31:0]  lsu_idu_update_offset;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_idu_ex1_fwd_data;
input           rtu_idu_ex1_fwd_vld;
input   [31:0]  rtu_idu_ex2_lsu_fwd_data;
input   [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
input           rtu_idu_ex2_lsu_fwd_vld;
input   [31:0]  rtu_idu_ex2_rbus_fwd_data;
input   [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
input           rtu_idu_ex2_rbus_fwd_vld;
output          dp_ctrl_ex1_ex_st_rs2_vld;
output          dp_ctrl_ex1_st_vld;
output          dp_ctrl_rs1_dep_ex1_dst;
output          dp_ctrl_rs1_fwd_lsu;
output          dp_ctrl_rs1_stall_upd;
output          dp_ctrl_rs2_dep_ex1_dst;
output          dp_ctrl_rs2_fwd_lsu;
output          dp_ctrl_rs2_stall_upd;
output          dp_ctrl_rs3_dep_ex1_dst;
output          dp_ctrl_rs3_fwd_lsu;
output          dp_ctrl_rs3_stall_upd;
output          dp_ctrl_rs_dep_ex1;
output  [31:0]  dp_decd_rs2_aft_fwd;
output          dp_gpr_rs1_fwd;
output          dp_gpr_rs1_fwd_div;
output          dp_gpr_rs1_fwd_lsu;
output          dp_gpr_rs2_fwd;
output          dp_gpr_rs2_fwd_div;
output          dp_gpr_rs2_fwd_lsu;
output          dp_gpr_rs3_fwd;
output          dp_gpr_rs3_fwd_div;
output          dp_gpr_rs3_fwd_lsu;
output  [4 :0]  idu_cp0_ex1_func;
output  [31:0]  idu_cp0_ex1_opcode;
output  [31:0]  idu_cp0_ex1_rs1;
output  [11:0]  idu_cp0_ex1_rs2;
output  [4 :0]  idu_cp0_ex1_sub_func;
output          idu_ifu_tail_vld;
output  [31:0]  idu_iu_ex1_ag_imm;
output  [4 :0]  idu_iu_ex1_func;
output          idu_iu_ex1_mul_high_sel;
output          idu_iu_ex1_split;
output  [31:0]  idu_iu_ex1_src0;
output  [5 :0]  idu_iu_ex1_src0_reg;
output  [31:0]  idu_iu_ex1_src1;
output  [31:0]  idu_iu_ex1_src2;
output  [4 :0]  idu_iu_ex1_sub_func;
output  [31:0]  idu_lsu_ex1_ag_imm;
output  [31:0]  idu_lsu_ex1_base;
output          idu_lsu_ex1_base_wb;
output  [31:0]  idu_lsu_ex1_data;
output  [3 :0]  idu_lsu_ex1_func;
output          idu_lsu_ex1_mls;
output          idu_lsu_ex1_offset_sel;
output          idu_lsu_ex1_sign_extend;
output  [1 :0]  idu_lsu_ex1_size;
output  [5 :0]  idu_lsu_ex1_src1_reg;
output          idu_rtu_ex1_ipop_int_mask;
output          idu_rtu_ex1_ipush_mie_en;
output          idu_rtu_ex1_ipush_spec_fail;
output          idu_rtu_ex1_tail_int_vld;

// &Regs; @25
reg     [31:0]  dp_ex1_ag_imm;
reg             dp_ex1_ex_st_rs2_vld;
reg     [4 :0]  dp_ex1_func;
reg             dp_ex1_ipop_int_mask;
reg             dp_ex1_ipop_tail;
reg             dp_ex1_ipush_spec_fail;
reg             dp_ex1_mie_en;
reg             dp_ex1_mul_high_sel;
reg             dp_ex1_offset_sel;
reg             dp_ex1_rs2_mcause;
reg             dp_ex1_rs2_mepc;
reg             dp_ex1_split;
reg     [31:0]  dp_ex1_src0;
reg     [5 :0]  dp_ex1_src0_reg;
reg     [31:0]  dp_ex1_src1;
reg     [5 :0]  dp_ex1_src1_reg;
reg     [31:0]  dp_ex1_src2;
reg     [5 :0]  dp_ex1_src2_reg;
reg             dp_ex1_src2_sel;
reg     [4 :0]  dp_ex1_sub_func;

// &Wires; @26
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_dp_ex1_bju_sel;
wire            ctrl_dp_ex1_div_sel;
wire    [5 :0]  ctrl_dp_ex1_dst_preg;
wire            ctrl_dp_ex1_dst_vld;
wire            ctrl_dp_ex1_inst_vld;
wire            ctrl_dp_ex1_lsu_sel;
wire            ctrl_dp_ex1_rs1_dep;
wire            ctrl_dp_ex1_rs2_dep;
wire            ctrl_dp_ex1_st_sel;
wire            ctrl_dp_pipe_down;
wire            ctrl_dp_pipe_down_gate;
wire            ctrl_dp_wbbr_en;
wire            ctrl_dp_wbbr_rs2_use_zero;
wire    [31:0]  decd_dp_ag_imm;
wire            decd_dp_ag_imm_vld;
wire    [4 :0]  decd_dp_csri_rs1;
wire            decd_dp_csri_vld;
wire            decd_dp_ex_st_rs2_vld;
wire    [4 :0]  decd_dp_func;
wire    [31:0]  decd_dp_imm;
wire            decd_dp_imm_vld;
wire            decd_dp_lsr_vld;
wire            decd_dp_lsu_sel;
wire            decd_dp_mul_high_sel;
wire    [5 :0]  decd_dp_rs1_idx;
wire            decd_dp_rs1_vld;
wire    [5 :0]  decd_dp_rs2_idx;
wire            decd_dp_rs2_vld;
wire    [5 :0]  decd_dp_rs3_idx;
wire            decd_dp_rs3_vld;
wire            decd_dp_split;
wire    [4 :0]  decd_dp_sub_func;
wire            dp_cpuclk;
wire            dp_ctrl_ex1_ex_st_rs2_vld;
wire            dp_ctrl_ex1_st_vld;
wire            dp_ctrl_rs1_dep_ex1_dst;
wire            dp_ctrl_rs1_fwd_lsu;
wire            dp_ctrl_rs1_stall_upd;
wire            dp_ctrl_rs2_dep_ex1_dst;
wire            dp_ctrl_rs2_fwd_lsu;
wire            dp_ctrl_rs2_stall_upd;
wire            dp_ctrl_rs3_dep_ex1_dst;
wire            dp_ctrl_rs3_fwd_lsu;
wire            dp_ctrl_rs3_stall_upd;
wire            dp_ctrl_rs_dep_ex1;
wire    [31:0]  dp_decd_rs2_aft_fwd;
wire    [31:0]  dp_ex1_st_int_wdata;
wire            dp_gpr_rs1_fwd;
wire            dp_gpr_rs1_fwd_div;
wire            dp_gpr_rs1_fwd_lsu;
wire            dp_gpr_rs2_fwd;
wire            dp_gpr_rs2_fwd_div;
wire            dp_gpr_rs2_fwd_lsu;
wire            dp_gpr_rs3_fwd;
wire            dp_gpr_rs3_fwd_div;
wire            dp_gpr_rs3_fwd_lsu;
wire            dp_icg_en;
wire    [31:0]  dp_id_fin_rs1;
wire    [31:0]  dp_id_fin_rs2;
wire    [31:0]  dp_id_fin_rs3;
wire            dp_imm_cpuclk;
wire            dp_imm_icg_en;
wire    [31:0]  dp_rs1_aft_fwd_no_lsu;
wire    [31:0]  dp_rs1_aft_imm;
wire    [31:0]  dp_rs1_aft_wbbr;
wire            dp_rs1_cpuclk;
wire            dp_rs1_dep_ex1;
wire            dp_rs1_dep_ex1_lsinc;
wire            dp_rs1_fwd_ex1;
wire            dp_rs1_fwd_ex1_lsinc;
wire            dp_rs1_fwd_ex2_lsu;
wire            dp_rs1_fwd_ex2_rbus;
wire            dp_rs1_icg_en;
wire            dp_rs1_stall_upd;
wire            dp_rs1_stall_upd_lsu;
wire    [31:0]  dp_rs2_aft_fwd_no_lsu;
wire    [31:0]  dp_rs2_aft_imm;
wire    [31:0]  dp_rs2_aft_wbbr;
wire            dp_rs2_cpuclk;
wire            dp_rs2_dep_ex1;
wire            dp_rs2_dep_ex1_lsinc;
wire            dp_rs2_fwd_ex1;
wire            dp_rs2_fwd_ex1_lsinc;
wire            dp_rs2_fwd_ex2_lsu;
wire            dp_rs2_fwd_ex2_rbus;
wire            dp_rs2_icg_en;
wire            dp_rs2_stall_upd;
wire            dp_rs2_stall_upd_lsu;
wire    [31:0]  dp_rs3_aft_fwd_no_lsu;
wire            dp_rs3_cpuclk;
wire            dp_rs3_dep_ex1;
wire            dp_rs3_dep_ex1_lsinc;
wire            dp_rs3_fwd_ex1;
wire            dp_rs3_fwd_ex1_lsinc;
wire            dp_rs3_fwd_ex2_lsu;
wire            dp_rs3_fwd_ex2_rbus;
wire            dp_rs3_icg_en;
wire            dp_rs3_stall_upd;
wire    [31:0]  dp_rs_upd_data;
wire            fdecd_dp_rs1_int_vld;
wire    [5 :0]  fdecd_dp_rs2_idx;
wire            fdecd_dp_rs2_vld;
wire            forever_cpuclk;
wire    [31:0]  gpr_dp_rs1;
wire    [31:0]  gpr_dp_rs2;
wire    [31:0]  gpr_dp_rs3;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire            hd_dp_rs2_sel;
wire            hs_dp_ipop_int_mask;
wire            hs_dp_ipop_tail;
wire            hs_dp_ipush_spec_fail;
wire            hs_dp_mie_en;
wire            hs_dp_rs2_mcause;
wire            hs_dp_rs2_mepc;
wire    [4 :0]  idu_cp0_ex1_func;
wire    [31:0]  idu_cp0_ex1_opcode;
wire    [31:0]  idu_cp0_ex1_rs1;
wire    [11:0]  idu_cp0_ex1_rs2;
wire    [4 :0]  idu_cp0_ex1_sub_func;
wire            idu_ifu_tail_vld;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_mul_high_sel;
wire            idu_iu_ex1_split;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire    [31:0]  idu_lsu_ex1_ag_imm;
wire    [31:0]  idu_lsu_ex1_base;
wire            idu_lsu_ex1_base_wb;
wire    [31:0]  idu_lsu_ex1_data;
wire    [3 :0]  idu_lsu_ex1_func;
wire            idu_lsu_ex1_mls;
wire            idu_lsu_ex1_offset_sel;
wire            idu_lsu_ex1_sign_extend;
wire    [1 :0]  idu_lsu_ex1_size;
wire    [5 :0]  idu_lsu_ex1_src1_reg;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_rtu_ex1_ipush_spec_fail;
wire            idu_rtu_ex1_tail_int_vld;
wire            ifu_idu_id_warm_up;
wire    [31:0]  iu_idu_ex1_src1_update_value;
wire            lsu_idu_ex1_src1_update_en;
wire            lsu_idu_ex1_src1_update_en_gate;
wire    [31:0]  lsu_idu_update_addr;
wire            lsu_idu_update_en;
wire            lsu_idu_update_en_gate;
wire    [31:0]  lsu_idu_update_offset;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  rtu_idu_ex1_fwd_data;
wire            rtu_idu_ex1_fwd_vld;
wire    [31:0]  rtu_idu_ex2_lsu_fwd_data;
wire    [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
wire            rtu_idu_ex2_lsu_fwd_vld;
wire    [31:0]  rtu_idu_ex2_rbus_fwd_data;
wire    [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
wire            rtu_idu_ex2_rbus_fwd_vld;


parameter FUNC_WIDTH      = 5;
parameter SUB_FUNC_WIDTH  = 5;












assign dp_icg_en = ctrl_dp_pipe_down_gate
                || ifu_idu_id_warm_up;
// &Instance("gated_clk_cell", "x_idu_dp_icg_cell"); @44
gated_clk_cell  x_idu_dp_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dp_cpuclk           ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (dp_icg_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @45
//          .external_en (1'b0), @46
//          .global_en   (cp0_yy_clk_en), @47
//          .module_en   (1'b0), @48
//          .local_en    (dp_icg_en), @49
//          .clk_out     (dp_cpuclk)); @50

assign dp_rs1_icg_en = ctrl_dp_pipe_down_gate && decd_dp_rs1_vld
                    || ifu_idu_id_warm_up
                    || ctrl_dp_ex1_rs1_dep
                    || lsu_idu_update_en_gate;
// &Instance("gated_clk_cell", "x_idu_dp_rs1_icg_cell"); @56
gated_clk_cell  x_idu_dp_rs1_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dp_rs1_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (dp_rs1_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @57
//          .external_en (1'b0), @58
//          .global_en   (cp0_yy_clk_en), @59
//          .module_en   (1'b0), @60
//          .local_en    (dp_rs1_icg_en), @61
//          .clk_out     (dp_rs1_cpuclk)); @62

assign dp_rs2_icg_en = ctrl_dp_pipe_down_gate && (decd_dp_rs2_vld || decd_dp_imm_vld)
                    || ifu_idu_id_warm_up
                    || ctrl_dp_ex1_rs2_dep
                    || lsu_idu_ex1_src1_update_en_gate;
// &Instance("gated_clk_cell", "x_idu_dp_rs2_icg_cell"); @68
gated_clk_cell  x_idu_dp_rs2_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dp_rs2_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (dp_rs2_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @69
//          .external_en (1'b0), @70
//          .global_en   (cp0_yy_clk_en), @71
//          .module_en   (1'b0), @72
//          .local_en    (dp_rs2_icg_en), @73
//          .clk_out     (dp_rs2_cpuclk)); @74

assign dp_rs3_icg_en = ctrl_dp_pipe_down_gate && decd_dp_rs3_vld
                    || ifu_idu_id_warm_up
                    || ctrl_dp_ex1_rs2_dep;
// &Instance("gated_clk_cell", "x_idu_dp_rs3_icg_cell"); @79
gated_clk_cell  x_idu_dp_rs3_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dp_rs3_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (dp_rs3_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @80
//          .external_en (1'b0), @81
//          .global_en   (cp0_yy_clk_en), @82
//          .module_en   (1'b0), @83
//          .local_en    (dp_rs3_icg_en), @84
//          .clk_out     (dp_rs3_cpuclk)); @85

assign dp_imm_icg_en = ctrl_dp_pipe_down_gate && decd_dp_ag_imm_vld
                    || ifu_idu_id_warm_up
                    || lsu_idu_update_en_gate;
// &Instance("gated_clk_cell", "x_idu_dp_imm_icg_cell"); @90
gated_clk_cell  x_idu_dp_imm_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dp_imm_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (dp_imm_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @91
//          .external_en (1'b0), @92
//          .global_en   (cp0_yy_clk_en), @93
//          .module_en   (1'b0), @94
//          .local_en    (dp_imm_icg_en), @95
//          .clk_out     (dp_imm_cpuclk)); @96











assign dp_rs1_dep_ex1 = decd_dp_rs1_idx[5:0] == ctrl_dp_ex1_dst_preg[5:0]
                     && ctrl_dp_ex1_dst_preg[5:0] != 6'b0
                     && ctrl_dp_ex1_dst_vld
                     && !(ctrl_dp_ex1_lsu_sel && dp_ex1_func[3])
                     && (decd_dp_rs1_vld || fdecd_dp_rs1_int_vld);
assign dp_rs1_fwd_ex1 = dp_rs1_dep_ex1 && rtu_idu_ex1_fwd_vld || dp_rs1_fwd_ex1_lsinc;

assign dp_rs2_dep_ex1 = decd_dp_rs2_idx[5:0] == ctrl_dp_ex1_dst_preg[5:0]
                     && ctrl_dp_ex1_dst_preg[5:0] != 6'b0
                     && ctrl_dp_ex1_dst_vld
                     && !(ctrl_dp_ex1_lsu_sel && dp_ex1_func[3])
                     && decd_dp_rs2_vld;
assign dp_rs2_fwd_ex1 = dp_rs2_dep_ex1 && rtu_idu_ex1_fwd_vld || dp_rs2_fwd_ex1_lsinc;

assign dp_rs3_dep_ex1 = decd_dp_rs3_idx[5:0] == ctrl_dp_ex1_dst_preg[5:0]
                     && ctrl_dp_ex1_dst_preg[5:0] != 6'b0
                     && ctrl_dp_ex1_dst_vld
                     && !(ctrl_dp_ex1_lsu_sel && dp_ex1_func[3])
                     && decd_dp_rs3_vld;
assign dp_rs3_fwd_ex1 = dp_rs3_dep_ex1 && rtu_idu_ex1_fwd_vld || dp_rs3_fwd_ex1_lsinc;


assign dp_rs1_dep_ex1_lsinc = decd_dp_rs1_idx[5:0] == dp_ex1_src0_reg[5:0]
                     && dp_ex1_src0_reg[5:0] != 6'b0
                     && ctrl_dp_ex1_lsu_sel && dp_ex1_func[3]
                     && (decd_dp_rs1_vld || fdecd_dp_rs1_int_vld);
assign dp_rs1_fwd_ex1_lsinc = dp_rs1_dep_ex1_lsinc && rtu_idu_ex1_fwd_vld;

assign dp_rs2_dep_ex1_lsinc = decd_dp_rs2_idx[5:0] == dp_ex1_src0_reg[5:0]
                     && dp_ex1_src0_reg[5:0] != 6'b0
                     && ctrl_dp_ex1_lsu_sel && dp_ex1_func[3]
                     && decd_dp_rs2_vld;
assign dp_rs2_fwd_ex1_lsinc = dp_rs2_dep_ex1_lsinc && rtu_idu_ex1_fwd_vld;

assign dp_rs3_dep_ex1_lsinc = decd_dp_rs3_idx[5:0] == dp_ex1_src0_reg[5:0]
                     && dp_ex1_src0_reg[5:0] != 6'b0
                     && ctrl_dp_ex1_lsu_sel && dp_ex1_func[3]
                     && decd_dp_rs3_vld;
assign dp_rs3_fwd_ex1_lsinc = dp_rs3_dep_ex1_lsinc && rtu_idu_ex1_fwd_vld;


assign dp_rs1_fwd_ex2_lsu = decd_dp_rs1_idx[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                         && decd_dp_rs1_idx[5:0] != 6'b0
                         && rtu_idu_ex2_lsu_fwd_vld
                         && !(dp_rs1_dep_ex1 || dp_rs1_dep_ex1_lsinc)
                         && (decd_dp_rs1_vld || fdecd_dp_rs1_int_vld);
assign dp_rs2_fwd_ex2_lsu = decd_dp_rs2_idx[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                          && decd_dp_rs2_idx[5:0] != 6'b0
                          && rtu_idu_ex2_lsu_fwd_vld
                          && !(dp_rs2_dep_ex1 || dp_rs2_dep_ex1_lsinc || decd_dp_lsr_vld)
                          && decd_dp_rs2_vld;
assign dp_rs3_fwd_ex2_lsu = decd_dp_rs3_idx[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                          && decd_dp_rs3_idx[5:0] != 6'b0
                          && rtu_idu_ex2_lsu_fwd_vld
                          && !(dp_rs3_dep_ex1 || dp_rs3_fwd_ex1_lsinc)
                          && decd_dp_rs3_vld;


assign dp_rs1_fwd_ex2_rbus = decd_dp_rs1_idx[5:0] == rtu_idu_ex2_rbus_fwd_preg[5:0]
                          && decd_dp_rs1_idx[5:0] != 6'b0
                          && rtu_idu_ex2_rbus_fwd_vld
                          && !(dp_rs1_dep_ex1 || dp_rs1_dep_ex1_lsinc)
                          && (decd_dp_rs1_vld || fdecd_dp_rs1_int_vld);
assign dp_rs2_fwd_ex2_rbus = decd_dp_rs2_idx[5:0] == rtu_idu_ex2_rbus_fwd_preg[5:0]
                          && decd_dp_rs2_idx[5:0] != 6'b0
                          && rtu_idu_ex2_rbus_fwd_vld
                          && !(dp_rs2_dep_ex1 || dp_rs2_dep_ex1_lsinc)
                          && decd_dp_rs2_vld;
assign dp_rs3_fwd_ex2_rbus = decd_dp_rs3_idx[5:0] == rtu_idu_ex2_rbus_fwd_preg[5:0]
                          && decd_dp_rs3_idx[5:0] != 6'b0
                          && rtu_idu_ex2_rbus_fwd_vld
                          && !(dp_rs3_dep_ex1 || dp_rs3_dep_ex1_lsinc)
                          && decd_dp_rs3_vld;

assign dp_rs1_aft_fwd_no_lsu[31:0] = dp_rs1_fwd_ex1 ? rtu_idu_ex1_fwd_data[31:0]
                                   : dp_rs1_fwd_ex2_rbus ? rtu_idu_ex2_rbus_fwd_data[31:0]
                                   : gpr_dp_rs1[31:0];
assign dp_rs2_aft_fwd_no_lsu[31:0] = dp_rs2_fwd_ex1 ? rtu_idu_ex1_fwd_data[31:0]
                                   : dp_rs2_fwd_ex2_rbus ? rtu_idu_ex2_rbus_fwd_data[31:0]
                                   : gpr_dp_rs2[31:0];
assign dp_rs3_aft_fwd_no_lsu[31:0] = dp_rs3_fwd_ex1 ? rtu_idu_ex1_fwd_data[31:0]
                                   : dp_rs3_fwd_ex2_rbus ? rtu_idu_ex2_rbus_fwd_data[31:0]
                                   : gpr_dp_rs3[31:0];


assign dp_rs1_aft_wbbr[31:0] = had_idu_wbbr_vld && ctrl_dp_wbbr_en
                                                ? had_idu_wbbr_data[31:0]
                                                : dp_rs1_aft_fwd_no_lsu[31:0];
assign dp_rs2_aft_wbbr[31:0] = had_idu_wbbr_vld ? ctrl_dp_wbbr_rs2_use_zero ? 32'b0
                                                : had_idu_wbbr_data[31:0]
                                                : dp_rs2_aft_fwd_no_lsu[31:0];


assign dp_rs1_aft_imm[31:0] = cp0_idu_sp_use_scratch ? cp0_idu_sp_wdata[31:0] : decd_dp_csri_vld ? {27'b0, decd_dp_csri_rs1[4:0]}
                                       : dp_rs1_aft_wbbr[31:0];
assign dp_rs2_aft_imm[31:0] = decd_dp_imm_vld ? decd_dp_imm[31:0]
                                              : dp_rs2_aft_wbbr[31:0];

assign dp_id_fin_rs1[31:0] = dp_rs1_fwd_ex2_lsu && !dp_rs1_fwd_ex1
                          && !had_idu_wbbr_vld && !decd_dp_csri_vld
                           ? rtu_idu_ex2_lsu_fwd_data[31:0]
                           : dp_rs1_aft_imm[31:0];

assign dp_id_fin_rs2[31:0] = dp_rs2_fwd_ex2_lsu && !dp_rs2_fwd_ex1
                          && !had_idu_wbbr_vld && !decd_dp_imm_vld
                           ? rtu_idu_ex2_lsu_fwd_data[31:0]
                           : dp_rs2_aft_imm[31:0];

assign dp_id_fin_rs3[31:0] = dp_rs3_fwd_ex2_lsu && !dp_rs3_fwd_ex1
                           ? rtu_idu_ex2_lsu_fwd_data[31:0]
                           : dp_rs3_aft_fwd_no_lsu[31:0];


assign dp_rs1_stall_upd_lsu = dp_ex1_src0_reg[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                      && dp_ex1_src0_reg[5:0] != 6'b0
                      && rtu_idu_ex2_lsu_fwd_vld;
assign dp_rs1_stall_upd = dp_rs1_stall_upd_lsu && ctrl_dp_ex1_bju_sel;// || dp_rs1_stall_upd_rbus;
assign dp_rs2_stall_upd_lsu = dp_ex1_src1_reg[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                      && dp_ex1_src1_reg[5:0] != 6'b0
                      && (ctrl_dp_ex1_bju_sel || ctrl_dp_ex1_st_sel && !dp_ex1_ex_st_rs2_vld)
                      && rtu_idu_ex2_lsu_fwd_vld;
assign dp_rs3_stall_upd = dp_ex1_src2_reg[5:0] == rtu_idu_ex2_lsu_fwd_preg[5:0]
                      && dp_ex1_src2_reg[5:0] != 6'b0
                      && (ctrl_dp_ex1_st_sel && dp_ex1_ex_st_rs2_vld)
                      && rtu_idu_ex2_lsu_fwd_vld;
assign dp_rs2_stall_upd = dp_rs2_stall_upd_lsu;// || dp_rs2_stall_upd_rbus;
assign dp_rs_upd_data[31:0] = rtu_idu_ex2_lsu_fwd_data[31:0];






always @ (posedge dp_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
  begin
    dp_ex1_func[FUNC_WIDTH-1:0]         <= decd_dp_func[FUNC_WIDTH-1:0];
    dp_ex1_sub_func[SUB_FUNC_WIDTH-1:0] <= decd_dp_sub_func[SUB_FUNC_WIDTH-1:0];
    dp_ex1_src0_reg[5:0]                <= decd_dp_rs1_idx[5:0];
    dp_ex1_src1_reg[5:0]                <= decd_dp_ex_st_rs2_vld ? decd_dp_rs3_idx[5:0] : fdecd_dp_rs2_vld ? fdecd_dp_rs2_idx[5:0] : ({6{decd_dp_rs2_vld}}
                                         & decd_dp_rs2_idx[5:0]);
    dp_ex1_src2_reg[5:0]                <= decd_dp_rs3_idx[5:0];
    dp_ex1_split                        <= decd_dp_split;
    dp_ex1_ipop_tail                    <= hs_dp_ipop_tail;
    dp_ex1_mie_en                       <= hs_dp_mie_en;
    dp_ex1_ipop_int_mask                <= hs_dp_ipop_int_mask;
    dp_ex1_ex_st_rs2_vld                <= decd_dp_ex_st_rs2_vld;
  end
  else
  begin
    dp_ex1_func[FUNC_WIDTH-1:0]         <= dp_ex1_func[FUNC_WIDTH-1:0];
    dp_ex1_sub_func[SUB_FUNC_WIDTH-1:0] <= dp_ex1_sub_func[SUB_FUNC_WIDTH-1:0];
    dp_ex1_src0_reg[5:0]                <= dp_ex1_src0_reg[5:0];
    dp_ex1_src1_reg[5:0]                <= dp_ex1_src1_reg[5:0];
    dp_ex1_src2_reg[5:0]                <= dp_ex1_src2_reg[5:0];
    dp_ex1_split                        <= dp_ex1_split;
    dp_ex1_mie_en                       <= dp_ex1_mie_en;
    dp_ex1_ipop_int_mask                <= dp_ex1_ipop_int_mask;
    dp_ex1_ex_st_rs2_vld                <= dp_ex1_ex_st_rs2_vld;
  end
end

always @ (posedge dp_rs1_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
    dp_ex1_src0[31:0] <= dp_id_fin_rs1[31:0];
  else if(dp_rs1_stall_upd)
    dp_ex1_src0[31:0] <= dp_rs_upd_data[31:0];
  else if(lsu_idu_update_en)
    dp_ex1_src0[31:0] <= lsu_idu_update_addr[31:0];
end

always @ (posedge dp_rs2_cpuclk)
begin

  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
    dp_ex1_src1[31:0] <= dp_id_fin_rs2[31:0];
  else if(dp_rs2_stall_upd)
    dp_ex1_src1[31:0] <= dp_rs_upd_data[31:0];
  else if(lsu_idu_ex1_src1_update_en)
    dp_ex1_src1[31:0] <= iu_idu_ex1_src1_update_value[31:0];
  else
    dp_ex1_src1[31:0] <= dp_ex1_src1[31:0];
end

always @ (posedge dp_rs3_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
    dp_ex1_src2[31:0] <= dp_id_fin_rs3[31:0];
  else if(dp_rs3_stall_upd)
    dp_ex1_src2[31:0] <= dp_rs_upd_data[31:0];
  else
    dp_ex1_src2[31:0] <= dp_ex1_src2[31:0];
end

always @ (posedge dp_imm_cpuclk)
begin
  if(ctrl_dp_pipe_down && decd_dp_ag_imm_vld || ifu_idu_id_warm_up)
  begin
    dp_ex1_ag_imm[31:0] <= decd_dp_ag_imm[31:0];
  end
  else if(lsu_idu_update_en)
  begin
    dp_ex1_ag_imm[31:0] <= lsu_idu_update_offset[31:0];
  end
  else
  begin
    dp_ex1_ag_imm[31:0] <= dp_ex1_ag_imm[31:0];
  end
end

always @ (posedge dp_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
    dp_ex1_mul_high_sel <= decd_dp_mul_high_sel;
  else
    dp_ex1_mul_high_sel <= dp_ex1_mul_high_sel;
end

always @ (posedge dp_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
  begin
    dp_ex1_src2_sel   <= decd_dp_rs3_vld && decd_dp_lsu_sel;
  end
  else
  begin
    dp_ex1_src2_sel   <= dp_ex1_src2_sel;
  end
end

always @ (posedge dp_imm_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
  begin
    dp_ex1_offset_sel <= decd_dp_lsu_sel && !decd_dp_func[4];
  end
  else if(lsu_idu_update_en)
  begin
    dp_ex1_offset_sel <= 1'b1;
  end
  else
  begin
    dp_ex1_offset_sel <= dp_ex1_offset_sel;
  end
end

always @ (posedge dp_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    dp_ex1_ipush_spec_fail <= 1'b0;
  end
  else if(ctrl_dp_pipe_down)
  begin
    dp_ex1_ipush_spec_fail <= hs_dp_ipush_spec_fail;
  end
  else
  begin
    dp_ex1_ipush_spec_fail <= dp_ex1_ipush_spec_fail;
  end
end

always @ (posedge dp_cpuclk)
begin
  if(ctrl_dp_pipe_down || ifu_idu_id_warm_up)
  begin
    dp_ex1_rs2_mepc   <= hs_dp_rs2_mepc && hd_dp_rs2_sel;
    dp_ex1_rs2_mcause <= hs_dp_rs2_mcause && hd_dp_rs2_sel;
  end
  else
  begin
    dp_ex1_rs2_mepc   <= dp_ex1_rs2_mepc;
    dp_ex1_rs2_mcause <= dp_ex1_rs2_mcause;
  end
end
assign dp_ex1_st_int_wdata[31:0] = dp_ex1_rs2_mepc ? cp0_idu_mepc[31:0] : dp_ex1_rs2_mcause ? cp0_idu_mcause[31:0]
                                 : dp_ex1_src2_sel ? dp_ex1_src2[31:0] : dp_ex1_src1[31:0];















assign dp_ctrl_rs1_dep_ex1_dst = dp_rs1_dep_ex1;

assign dp_ctrl_rs2_dep_ex1_dst = dp_rs2_dep_ex1;
assign dp_ctrl_rs3_dep_ex1_dst = dp_rs3_dep_ex1;

assign dp_ctrl_rs_dep_ex1      = dp_rs1_dep_ex1 || dp_rs2_dep_ex1 || dp_rs3_dep_ex1;


assign dp_ctrl_rs1_fwd_lsu   = dp_rs1_fwd_ex2_lsu;
assign dp_ctrl_rs2_fwd_lsu   = dp_rs2_fwd_ex2_lsu;
assign dp_ctrl_rs3_fwd_lsu   = dp_rs3_fwd_ex2_lsu;
assign dp_gpr_rs1_fwd       = dp_rs1_fwd_ex1 || dp_rs1_fwd_ex2_rbus || dp_rs1_fwd_ex2_lsu;
assign dp_gpr_rs2_fwd       = dp_rs2_fwd_ex1 || dp_rs2_fwd_ex2_rbus || dp_rs2_fwd_ex2_lsu;
assign dp_gpr_rs3_fwd       = dp_rs3_fwd_ex1 || dp_rs3_fwd_ex2_rbus || dp_rs3_fwd_ex2_lsu;
assign dp_gpr_rs1_fwd_lsu   = dp_rs1_fwd_ex2_lsu;
assign dp_gpr_rs2_fwd_lsu   = dp_rs2_fwd_ex2_lsu;
assign dp_gpr_rs3_fwd_lsu   = dp_rs3_fwd_ex2_lsu;
assign dp_gpr_rs1_fwd_div   = dp_rs1_fwd_ex2_rbus || dp_rs1_fwd_ex1 && ctrl_dp_ex1_div_sel;
assign dp_gpr_rs2_fwd_div   = dp_rs2_fwd_ex2_rbus || dp_rs2_fwd_ex1 && ctrl_dp_ex1_div_sel;
assign dp_gpr_rs3_fwd_div   = dp_rs3_fwd_ex2_rbus || dp_rs3_fwd_ex1 && ctrl_dp_ex1_div_sel;
assign dp_ctrl_rs1_stall_upd = dp_rs1_stall_upd;
assign dp_ctrl_rs2_stall_upd = dp_rs2_stall_upd;
assign dp_ctrl_rs3_stall_upd = dp_rs3_stall_upd;
assign dp_ctrl_ex1_ex_st_rs2_vld = dp_ex1_ex_st_rs2_vld;
assign dp_ctrl_ex1_st_vld    = dp_ex1_sub_func[0];

assign dp_decd_rs2_aft_fwd[31:0] = dp_rs2_aft_fwd_no_lsu[31:0];


assign idu_iu_ex1_func[FUNC_WIDTH-1:0]         = dp_ex1_func[FUNC_WIDTH-1:0];
assign idu_iu_ex1_sub_func[SUB_FUNC_WIDTH-1:0] = dp_ex1_sub_func[SUB_FUNC_WIDTH-1:0];
assign idu_iu_ex1_src0[31:0]                   = dp_ex1_src0[31:0];
assign idu_iu_ex1_src1[31:0]                   = dp_ex1_src1[31:0];
assign idu_iu_ex1_src2[31:0]                   = dp_ex1_src2[31:0];
assign idu_iu_ex1_ag_imm[31:0]                 = dp_ex1_ag_imm[31:0];
assign idu_iu_ex1_split                        = dp_ex1_split;
assign idu_iu_ex1_src0_reg[5:0]                = dp_ex1_src0_reg[5:0];
assign idu_iu_ex1_mul_high_sel                 = dp_ex1_mul_high_sel;

assign fdecd_dp_rs1_int_vld                    = 1'b0;
assign fdecd_dp_rs2_vld                        = 1'b0;
assign fdecd_dp_rs2_idx[5:0]                   = 6'b0;


assign idu_cp0_ex1_func[FUNC_WIDTH-1:0]         = dp_ex1_func[FUNC_WIDTH-1:0];
assign idu_cp0_ex1_sub_func[SUB_FUNC_WIDTH-1:0] = dp_ex1_sub_func[SUB_FUNC_WIDTH-1:0];
assign idu_cp0_ex1_rs1[31:0]                   = dp_ex1_src0[31:0];
assign idu_cp0_ex1_rs2[11:0]                   = dp_ex1_src1[11:0];
assign idu_cp0_ex1_opcode[31:0]                = dp_ex1_ag_imm[31:0];



assign idu_lsu_ex1_func[3:0]     = dp_ex1_sub_func[3:0];
assign idu_lsu_ex1_size[1:0]     = dp_ex1_func[1:0];
assign idu_lsu_ex1_src1_reg[5:0] = dp_ex1_src1_reg[5:0];
assign idu_lsu_ex1_sign_extend   = dp_ex1_func[2];
assign idu_lsu_ex1_base[31:0]    = dp_ex1_src0[31:0];
assign idu_lsu_ex1_ag_imm[31:0]  = dp_ex1_ag_imm[31:0];
assign idu_lsu_ex1_base_wb       = dp_ex1_func[3];
assign idu_lsu_ex1_offset_sel    = dp_ex1_offset_sel;
assign idu_lsu_ex1_mls           = 1'b0;

assign idu_lsu_ex1_data[31:0]    = dp_ex1_st_int_wdata[31:0];



assign idu_ifu_tail_vld = ctrl_dp_ex1_inst_vld && dp_ex1_ipop_tail || hs_dp_ipop_tail;


assign idu_rtu_ex1_ipush_spec_fail = dp_ex1_ipush_spec_fail;
assign idu_rtu_ex1_tail_int_vld    = dp_ex1_ipop_tail;
assign idu_rtu_ex1_ipush_mie_en     = dp_ex1_mie_en;
assign idu_rtu_ex1_ipop_int_mask   = dp_ex1_ipop_int_mask;

// &ModuleEnd; @491
endmodule
























// &ModuleBeg; @23
module pa_idu_gpr(
  cp0_idu_sp_wdata,
  cp0_idu_sp_wen,
  cp0_idu_sp_wen_gate,
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_gpr_div_inst,
  ctrl_gpr_id_dst_vld,
  ctrl_gpr_id_wr_idx,
  ctrl_gpr_ld_inst,
  ctrl_gpr_wr_issue,
  decd_gpr_dep_rs1,
  decd_gpr_dep_rs2,
  decd_gpr_ldi_vld,
  decd_gpr_rd_vld,
  decd_gpr_rs1,
  decd_gpr_rs1_vld,
  decd_gpr_rs2,
  decd_gpr_rs2_vld,
  decd_gpr_rs3,
  decd_gpr_rs3_vld,
  decd_gpr_sti_vld,
  dp_gpr_rs1_fwd,
  dp_gpr_rs1_fwd_div,
  dp_gpr_rs1_fwd_lsu,
  dp_gpr_rs2_fwd,
  dp_gpr_rs2_fwd_div,
  dp_gpr_rs2_fwd_lsu,
  dp_gpr_rs3_fwd,
  dp_gpr_rs3_fwd_div,
  dp_gpr_rs3_fwd_lsu,
  forever_cpuclk,
  gpr_ctrl_rd_busy,
  gpr_ctrl_rd_busy_div,
  gpr_ctrl_rd_busy_lsu,
  gpr_ctrl_rs1_busy,
  gpr_ctrl_rs1_busy_div,
  gpr_ctrl_rs1_busy_lsu,
  gpr_ctrl_rs1_busy_lsu2,
  gpr_ctrl_rs2_busy,
  gpr_ctrl_rs2_busy_div,
  gpr_ctrl_rs2_busy_lsu,
  gpr_ctrl_rs2_busy_lsu2,
  gpr_ctrl_rs3_busy,
  gpr_ctrl_rs3_busy_div,
  gpr_ctrl_rs3_busy_lsu,
  gpr_ctrl_rs3_busy_lsu2,
  gpr_dp_rs1,
  gpr_dp_rs2,
  gpr_dp_rs3,
  gpr_hs_sp_busy,
  gpr_hs_sp_wb,
  hs_gpr_wb_mask,
  hs_gpr_wr_mask,
  idu_cp0_ipop_data,
  idu_cp0_mcause_wen,
  idu_cp0_mepc_wen,
  idu_cp0_sp_reg,
  idu_ifu_x1,
  pad_yy_gate_clk_en_b,
  rtu_idu_wb_lsu_data,
  rtu_idu_wb_lsu_preg,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_rbus_data,
  rtu_idu_wb_rbus_preg,
  rtu_idu_wb_rbus_vld,
  rtu_idu_wb_warm_up,
  rtu_yy_xx_flush
);

// &Ports; @24
input   [31:0]  cp0_idu_sp_wdata;
input           cp0_idu_sp_wen;
input           cp0_idu_sp_wen_gate;
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_gpr_div_inst;
input           ctrl_gpr_id_dst_vld;
input   [5 :0]  ctrl_gpr_id_wr_idx;
input           ctrl_gpr_ld_inst;
input           ctrl_gpr_wr_issue;
input   [5 :0]  decd_gpr_dep_rs1;
input   [5 :0]  decd_gpr_dep_rs2;
input           decd_gpr_ldi_vld;
input           decd_gpr_rd_vld;
input   [5 :0]  decd_gpr_rs1;
input           decd_gpr_rs1_vld;
input   [5 :0]  decd_gpr_rs2;
input           decd_gpr_rs2_vld;
input   [5 :0]  decd_gpr_rs3;
input           decd_gpr_rs3_vld;
input           decd_gpr_sti_vld;
input           dp_gpr_rs1_fwd;
input           dp_gpr_rs1_fwd_div;
input           dp_gpr_rs1_fwd_lsu;
input           dp_gpr_rs2_fwd;
input           dp_gpr_rs2_fwd_div;
input           dp_gpr_rs2_fwd_lsu;
input           dp_gpr_rs3_fwd;
input           dp_gpr_rs3_fwd_div;
input           dp_gpr_rs3_fwd_lsu;
input           forever_cpuclk;
input           hs_gpr_wb_mask;
input           hs_gpr_wr_mask;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_idu_wb_lsu_data;
input   [5 :0]  rtu_idu_wb_lsu_preg;
input           rtu_idu_wb_lsu_vld;
input   [31:0]  rtu_idu_wb_rbus_data;
input   [5 :0]  rtu_idu_wb_rbus_preg;
input           rtu_idu_wb_rbus_vld;
input           rtu_idu_wb_warm_up;
input           rtu_yy_xx_flush;
output          gpr_ctrl_rd_busy;
output          gpr_ctrl_rd_busy_div;
output          gpr_ctrl_rd_busy_lsu;
output          gpr_ctrl_rs1_busy;
output          gpr_ctrl_rs1_busy_div;
output          gpr_ctrl_rs1_busy_lsu;
output          gpr_ctrl_rs1_busy_lsu2;
output          gpr_ctrl_rs2_busy;
output          gpr_ctrl_rs2_busy_div;
output          gpr_ctrl_rs2_busy_lsu;
output          gpr_ctrl_rs2_busy_lsu2;
output          gpr_ctrl_rs3_busy;
output          gpr_ctrl_rs3_busy_div;
output          gpr_ctrl_rs3_busy_lsu;
output          gpr_ctrl_rs3_busy_lsu2;
output  [31:0]  gpr_dp_rs1;
output  [31:0]  gpr_dp_rs2;
output  [31:0]  gpr_dp_rs3;
output          gpr_hs_sp_busy;
output          gpr_hs_sp_wb;
output  [31:0]  idu_cp0_ipop_data;
output          idu_cp0_mcause_wen;
output          idu_cp0_mepc_wen;
output  [31:0]  idu_cp0_sp_reg;
output  [31:0]  idu_ifu_x1;

// &Regs; @25
reg     [2 :0]  gpr_rd_busy_st;
reg     [31:0]  gpr_read_data1;
reg     [31:0]  gpr_read_data2;
reg     [31:0]  gpr_read_data3;
reg     [2 :0]  gpr_rs1_busy_st;
reg     [2 :0]  gpr_rs2_busy_st;
reg     [2 :0]  gpr_rs3_busy_st;
reg     [31:0]  reg_issue0;
reg     [31:0]  reg_issue1;
reg     [31:0]  reg_sel0;
reg     [31:0]  reg_sel1;

// &Wires; @26
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_gpr_div_inst;
wire            ctrl_gpr_id_dst_vld;
wire    [5 :0]  ctrl_gpr_id_wr_idx;
wire            ctrl_gpr_ld_inst;
wire            ctrl_gpr_wr_issue;
wire    [5 :0]  decd_gpr_dep_rs1;
wire    [5 :0]  decd_gpr_dep_rs2;
wire            decd_gpr_ldi_vld;
wire            decd_gpr_rd_vld;
wire    [5 :0]  decd_gpr_rs1;
wire            decd_gpr_rs1_vld;
wire    [5 :0]  decd_gpr_rs2;
wire            decd_gpr_rs2_vld;
wire    [5 :0]  decd_gpr_rs3;
wire            decd_gpr_rs3_vld;
wire            decd_gpr_sti_vld;
wire            dp_gpr_rs1_fwd;
wire            dp_gpr_rs1_fwd_div;
wire            dp_gpr_rs1_fwd_lsu;
wire            dp_gpr_rs2_fwd;
wire            dp_gpr_rs2_fwd_div;
wire            dp_gpr_rs2_fwd_lsu;
wire            dp_gpr_rs3_fwd;
wire            dp_gpr_rs3_fwd_div;
wire            dp_gpr_rs3_fwd_lsu;
wire            forever_cpuclk;
wire            gpr_ctrl_rd_busy;
wire            gpr_ctrl_rd_busy_div;
wire            gpr_ctrl_rd_busy_lsu;
wire            gpr_ctrl_rs1_busy;
wire            gpr_ctrl_rs1_busy_div;
wire            gpr_ctrl_rs1_busy_lsu;
wire            gpr_ctrl_rs1_busy_lsu2;
wire            gpr_ctrl_rs2_busy;
wire            gpr_ctrl_rs2_busy_div;
wire            gpr_ctrl_rs2_busy_lsu;
wire            gpr_ctrl_rs2_busy_lsu2;
wire            gpr_ctrl_rs3_busy;
wire            gpr_ctrl_rs3_busy_div;
wire            gpr_ctrl_rs3_busy_lsu;
wire            gpr_ctrl_rs3_busy_lsu2;
wire    [31:0]  gpr_dp_rs1;
wire    [31:0]  gpr_dp_rs2;
wire    [31:0]  gpr_dp_rs3;
wire            gpr_hs_sp_busy;
wire            gpr_hs_sp_wb;
wire            gpr_rd_busy;
wire            gpr_rd_busy_div;
wire            gpr_rd_busy_lsu;
wire            gpr_rd_hit_wb_lsu;
wire            gpr_rd_hit_wb_rbus;
wire    [31:0]  gpr_read_data1_after_hint;
wire    [31:0]  gpr_read_data2_after_hint;
wire            gpr_rs1_busy;
wire            gpr_rs1_busy_div;
wire            gpr_rs1_busy_lsu;
wire            gpr_rs1_dep_wb;
wire            gpr_rs1_dep_wb_lsu;
wire            gpr_rs1_dep_wb_rbus;
wire            gpr_rs1_inc_wr;
wire            gpr_rs2_busy;
wire            gpr_rs2_busy_div;
wire            gpr_rs2_busy_lsu;
wire            gpr_rs2_dep_wb;
wire            gpr_rs2_dep_wb_lsu;
wire            gpr_rs2_dep_wb_rbus;
wire            gpr_rs3_busy;
wire            gpr_rs3_busy_div;
wire            gpr_rs3_busy_lsu;
wire            gpr_rs3_dep_wb;
wire            gpr_rs3_dep_wb_lsu;
wire            gpr_rs3_dep_wb_rbus;
wire            gpr_sync_rst_b;
wire            gpr_wb_sp;
wire    [4 :0]  gpr_wr_idx1;
wire    [31:0]  hint_read_data1;
wire    [31:0]  hint_read_data2;
wire            hs_gpr_wb_mask;
wire            hs_gpr_wr_mask;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire    [31:0]  idu_ifu_x1;
wire            pad_yy_gate_clk_en_b;
wire    [2 :0]  reg_busy_st_1;
wire    [2 :0]  reg_busy_st_10;
wire    [2 :0]  reg_busy_st_11;
wire    [2 :0]  reg_busy_st_12;
wire    [2 :0]  reg_busy_st_13;
wire    [2 :0]  reg_busy_st_14;
wire    [2 :0]  reg_busy_st_15;
wire    [2 :0]  reg_busy_st_16;
wire    [2 :0]  reg_busy_st_17;
wire    [2 :0]  reg_busy_st_18;
wire    [2 :0]  reg_busy_st_19;
wire    [2 :0]  reg_busy_st_2;
wire    [2 :0]  reg_busy_st_20;
wire    [2 :0]  reg_busy_st_21;
wire    [2 :0]  reg_busy_st_22;
wire    [2 :0]  reg_busy_st_23;
wire    [2 :0]  reg_busy_st_24;
wire    [2 :0]  reg_busy_st_25;
wire    [2 :0]  reg_busy_st_26;
wire    [2 :0]  reg_busy_st_27;
wire    [2 :0]  reg_busy_st_28;
wire    [2 :0]  reg_busy_st_29;
wire    [2 :0]  reg_busy_st_3;
wire    [2 :0]  reg_busy_st_30;
wire    [2 :0]  reg_busy_st_31;
wire    [2 :0]  reg_busy_st_32;
wire    [2 :0]  reg_busy_st_33;
wire    [2 :0]  reg_busy_st_4;
wire    [2 :0]  reg_busy_st_5;
wire    [2 :0]  reg_busy_st_6;
wire    [2 :0]  reg_busy_st_7;
wire    [2 :0]  reg_busy_st_8;
wire    [2 :0]  reg_busy_st_9;
wire    [31:0]  reg_dout_1;
wire    [31:0]  reg_dout_10;
wire    [31:0]  reg_dout_11;
wire    [31:0]  reg_dout_12;
wire    [31:0]  reg_dout_13;
wire    [31:0]  reg_dout_14;
wire    [31:0]  reg_dout_15;
wire    [31:0]  reg_dout_16;
wire    [31:0]  reg_dout_17;
wire    [31:0]  reg_dout_18;
wire    [31:0]  reg_dout_19;
wire    [31:0]  reg_dout_2;
wire    [31:0]  reg_dout_20;
wire    [31:0]  reg_dout_21;
wire    [31:0]  reg_dout_22;
wire    [31:0]  reg_dout_23;
wire    [31:0]  reg_dout_24;
wire    [31:0]  reg_dout_25;
wire    [31:0]  reg_dout_26;
wire    [31:0]  reg_dout_27;
wire    [31:0]  reg_dout_28;
wire    [31:0]  reg_dout_29;
wire    [31:0]  reg_dout_3;
wire    [31:0]  reg_dout_30;
wire    [31:0]  reg_dout_31;
wire    [31:0]  reg_dout_32;
wire    [31:0]  reg_dout_33;
wire    [31:0]  reg_dout_4;
wire    [31:0]  reg_dout_5;
wire    [31:0]  reg_dout_6;
wire    [31:0]  reg_dout_7;
wire    [31:0]  reg_dout_8;
wire    [31:0]  reg_dout_9;
wire            reg_high_clk_en;
wire            reg_high_cpuclk;
wire    [1 :0]  reg_hint_is0;
wire    [1 :0]  reg_hint_sel0;
wire    [1 :0]  reg_hint_sel1;
wire    [4 :0]  reg_issue0_sel;
wire    [33:0]  reg_write_en0;
wire    [33:0]  reg_write_en1;
wire    [33:0]  reg_write_en_gate0;
wire    [33:0]  reg_write_en_gate1;
wire            reg_write_en_high0;
wire            reg_write_en_high1;
wire    [1 :0]  reg_write_en_hint0;
wire    [1 :0]  reg_write_en_hint1;
wire            reg_write_en_sp;
wire            reg_write_en_sp_gate;
wire    [33:0]  reg_write_is0;
wire    [33:0]  reg_write_is1;
wire    [33:0]  reg_write_is_gate0;
wire    [33:0]  reg_write_is_gate1;
wire            reg_write_is_high0;
wire            reg_write_is_high1;
wire    [31:0]  rtu_idu_wb_lsu_data;
wire    [5 :0]  rtu_idu_wb_lsu_preg;
wire            rtu_idu_wb_lsu_vld;
wire    [31:0]  rtu_idu_wb_rbus_data;
wire    [5 :0]  rtu_idu_wb_rbus_preg;
wire            rtu_idu_wb_rbus_vld;
wire            rtu_idu_wb_warm_up;
wire            rtu_yy_xx_flush;
wire    [31:0]  write_data0;
wire    [31:0]  write_data1;
wire    [31:0]  write_data_sp;
wire    [5 :0]  write_index0;
wire    [4 :0]  write_index0_sel;
wire    [5 :0]  write_index1;








assign reg_write_is_high0 = ctrl_gpr_id_dst_vld && ctrl_gpr_id_wr_idx[4] && !decd_gpr_sti_vld && !hs_gpr_wr_mask;
assign reg_write_is_high1 = ctrl_gpr_id_dst_vld && ctrl_gpr_id_wr_idx[4] && (decd_gpr_ldi_vld || decd_gpr_sti_vld);
assign reg_write_en_high0 = rtu_idu_wb_rbus_vld & write_index0[4];
assign reg_write_en_high1 = rtu_idu_wb_lsu_vld & write_index1[4];
assign reg_high_clk_en = reg_write_is_high0 || reg_write_is_high1
                      || reg_write_en_high0 || reg_write_en_high1
                      || rtu_yy_xx_flush;
// &Instance("gated_clk_cell", "x_reg_high_gated_clk"); @41
gated_clk_cell  x_reg_high_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_high_cpuclk     ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_high_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @42
//          .external_en (1'b0), @43
//          .global_en   (cp0_yy_clk_en), @44
//          .module_en   (1'b0), @45
//          .local_en    (reg_high_clk_en), @46
//          .clk_out     (reg_high_cpuclk)); @47




// &ConnRule(s/_x$/[1]/); @52
// &ConnRule(s/_y$/_1/); @53
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_1"); @54
pa_idu_reg32  x_pa_idu_reg32_1 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_1        ),
  .reg_dout_y            (reg_dout_1           ),
  .reg_write_en0_x       (reg_write_en0[1]     ),
  .reg_write_en1_x       (reg_write_en1[1]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[1]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[1]),
  .reg_write_is0_x       (reg_write_is0[1]     ),
  .reg_write_is1_x       (reg_write_is1[1]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[1]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[1]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[2]/); @56
// &ConnRule(s/_y$/_2/); @57
// &Instance("pa_idu_reg_sp", "x_pa_idu_reg32_2"); @58
pa_idu_reg_sp  x_pa_idu_reg32_2 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_2        ),
  .reg_dout_y            (reg_dout_2           ),
  .reg_write_en0_x       (reg_write_en0[2]     ),
  .reg_write_en1_x       (reg_write_en1[2]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[2]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[2]),
  .reg_write_en_sp       (reg_write_en_sp      ),
  .reg_write_en_sp_gate  (reg_write_en_sp_gate ),
  .reg_write_is0_x       (reg_write_is0[2]     ),
  .reg_write_is1_x       (reg_write_is1[2]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[2]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[2]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          ),
  .write_data_sp         (write_data_sp        )
);


// &ConnRule(s/_x$/[3]/); @60
// &ConnRule(s/_y$/_3/); @61
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_3"); @62
pa_idu_reg32  x_pa_idu_reg32_3 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_3        ),
  .reg_dout_y            (reg_dout_3           ),
  .reg_write_en0_x       (reg_write_en0[3]     ),
  .reg_write_en1_x       (reg_write_en1[3]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[3]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[3]),
  .reg_write_is0_x       (reg_write_is0[3]     ),
  .reg_write_is1_x       (reg_write_is1[3]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[3]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[3]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[4]/); @64
// &ConnRule(s/_y$/_4/); @65
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_4"); @66
pa_idu_reg32  x_pa_idu_reg32_4 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_4        ),
  .reg_dout_y            (reg_dout_4           ),
  .reg_write_en0_x       (reg_write_en0[4]     ),
  .reg_write_en1_x       (reg_write_en1[4]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[4]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[4]),
  .reg_write_is0_x       (reg_write_is0[4]     ),
  .reg_write_is1_x       (reg_write_is1[4]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[4]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[4]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[5]/); @68
// &ConnRule(s/_y$/_5/); @69
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_5"); @70
pa_idu_reg32  x_pa_idu_reg32_5 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_5        ),
  .reg_dout_y            (reg_dout_5           ),
  .reg_write_en0_x       (reg_write_en0[5]     ),
  .reg_write_en1_x       (reg_write_en1[5]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[5]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[5]),
  .reg_write_is0_x       (reg_write_is0[5]     ),
  .reg_write_is1_x       (reg_write_is1[5]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[5]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[5]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[6]/); @72
// &ConnRule(s/_y$/_6/); @73
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_6"); @74
pa_idu_reg32  x_pa_idu_reg32_6 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_6        ),
  .reg_dout_y            (reg_dout_6           ),
  .reg_write_en0_x       (reg_write_en0[6]     ),
  .reg_write_en1_x       (reg_write_en1[6]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[6]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[6]),
  .reg_write_is0_x       (reg_write_is0[6]     ),
  .reg_write_is1_x       (reg_write_is1[6]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[6]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[6]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[7]/); @76
// &ConnRule(s/_y$/_7/); @77
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_7"); @78
pa_idu_reg32  x_pa_idu_reg32_7 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_7        ),
  .reg_dout_y            (reg_dout_7           ),
  .reg_write_en0_x       (reg_write_en0[7]     ),
  .reg_write_en1_x       (reg_write_en1[7]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[7]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[7]),
  .reg_write_is0_x       (reg_write_is0[7]     ),
  .reg_write_is1_x       (reg_write_is1[7]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[7]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[7]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[8]/); @80
// &ConnRule(s/_y$/_8/); @81
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_8"); @82
pa_idu_reg32  x_pa_idu_reg32_8 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_8        ),
  .reg_dout_y            (reg_dout_8           ),
  .reg_write_en0_x       (reg_write_en0[8]     ),
  .reg_write_en1_x       (reg_write_en1[8]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[8]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[8]),
  .reg_write_is0_x       (reg_write_is0[8]     ),
  .reg_write_is1_x       (reg_write_is1[8]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[8]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[8]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[9]/); @84
// &ConnRule(s/_y$/_9/); @85
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_9"); @86
pa_idu_reg32  x_pa_idu_reg32_9 (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .ctrl_gpr_div_inst     (ctrl_gpr_div_inst    ),
  .ctrl_gpr_ld_inst      (ctrl_gpr_ld_inst     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .reg_busy_st_y         (reg_busy_st_9        ),
  .reg_dout_y            (reg_dout_9           ),
  .reg_write_en0_x       (reg_write_en0[9]     ),
  .reg_write_en1_x       (reg_write_en1[9]     ),
  .reg_write_en_gate0_x  (reg_write_en_gate0[9]),
  .reg_write_en_gate1_x  (reg_write_en_gate1[9]),
  .reg_write_is0_x       (reg_write_is0[9]     ),
  .reg_write_is1_x       (reg_write_is1[9]     ),
  .reg_write_is_gate0_x  (reg_write_is_gate0[9]),
  .reg_write_is_gate1_x  (reg_write_is_gate1[9]),
  .rtu_idu_wb_lsu_vld    (rtu_idu_wb_lsu_vld   ),
  .rtu_idu_wb_warm_up    (rtu_idu_wb_warm_up   ),
  .rtu_yy_xx_flush       (rtu_yy_xx_flush      ),
  .write_data0           (write_data0          ),
  .write_data1           (write_data1          )
);


// &ConnRule(s/_x$/[10]/); @88
// &ConnRule(s/_y$/_10/); @89
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_10"); @90
pa_idu_reg32  x_pa_idu_reg32_10 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_10        ),
  .reg_dout_y             (reg_dout_10           ),
  .reg_write_en0_x        (reg_write_en0[10]     ),
  .reg_write_en1_x        (reg_write_en1[10]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[10]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[10]),
  .reg_write_is0_x        (reg_write_is0[10]     ),
  .reg_write_is1_x        (reg_write_is1[10]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[10]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[10]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[11]/); @92
// &ConnRule(s/_y$/_11/); @93
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_11"); @94
pa_idu_reg32  x_pa_idu_reg32_11 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_11        ),
  .reg_dout_y             (reg_dout_11           ),
  .reg_write_en0_x        (reg_write_en0[11]     ),
  .reg_write_en1_x        (reg_write_en1[11]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[11]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[11]),
  .reg_write_is0_x        (reg_write_is0[11]     ),
  .reg_write_is1_x        (reg_write_is1[11]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[11]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[11]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[12]/); @96
// &ConnRule(s/_y$/_12/); @97
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_12"); @98
pa_idu_reg32  x_pa_idu_reg32_12 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_12        ),
  .reg_dout_y             (reg_dout_12           ),
  .reg_write_en0_x        (reg_write_en0[12]     ),
  .reg_write_en1_x        (reg_write_en1[12]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[12]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[12]),
  .reg_write_is0_x        (reg_write_is0[12]     ),
  .reg_write_is1_x        (reg_write_is1[12]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[12]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[12]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[13]/); @100
// &ConnRule(s/_y$/_13/); @101
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_13"); @102
pa_idu_reg32  x_pa_idu_reg32_13 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_13        ),
  .reg_dout_y             (reg_dout_13           ),
  .reg_write_en0_x        (reg_write_en0[13]     ),
  .reg_write_en1_x        (reg_write_en1[13]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[13]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[13]),
  .reg_write_is0_x        (reg_write_is0[13]     ),
  .reg_write_is1_x        (reg_write_is1[13]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[13]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[13]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[14]/); @104
// &ConnRule(s/_y$/_14/); @105
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_14"); @106
pa_idu_reg32  x_pa_idu_reg32_14 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_14        ),
  .reg_dout_y             (reg_dout_14           ),
  .reg_write_en0_x        (reg_write_en0[14]     ),
  .reg_write_en1_x        (reg_write_en1[14]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[14]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[14]),
  .reg_write_is0_x        (reg_write_is0[14]     ),
  .reg_write_is1_x        (reg_write_is1[14]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[14]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[14]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[15]/); @108
// &ConnRule(s/_y$/_15/); @109
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_15"); @110
pa_idu_reg32  x_pa_idu_reg32_15 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_15        ),
  .reg_dout_y             (reg_dout_15           ),
  .reg_write_en0_x        (reg_write_en0[15]     ),
  .reg_write_en1_x        (reg_write_en1[15]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[15]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[15]),
  .reg_write_is0_x        (reg_write_is0[15]     ),
  .reg_write_is1_x        (reg_write_is1[15]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[15]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[15]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[16]/); @112
// &ConnRule(s/_y$/_16/); @113
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_16"); @114
pa_idu_reg32  x_pa_idu_reg32_16 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_16        ),
  .reg_dout_y             (reg_dout_16           ),
  .reg_write_en0_x        (reg_write_en0[16]     ),
  .reg_write_en1_x        (reg_write_en1[16]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[16]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[16]),
  .reg_write_is0_x        (reg_write_is0[16]     ),
  .reg_write_is1_x        (reg_write_is1[16]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[16]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[16]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[17]/); @116
// &ConnRule(s/_y$/_17/); @117
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_17"); @118
pa_idu_reg32_high  x_pa_idu_reg32_high_17 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_17      ),
  .reg_dout_y           (reg_dout_17         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[17]   ),
  .reg_write_en1_x      (reg_write_en1[17]   ),
  .reg_write_is0_x      (reg_write_is0[17]   ),
  .reg_write_is1_x      (reg_write_is1[17]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[18]/); @120
// &ConnRule(s/_y$/_18/); @121
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_18"); @122
pa_idu_reg32_high  x_pa_idu_reg32_high_18 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_18      ),
  .reg_dout_y           (reg_dout_18         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[18]   ),
  .reg_write_en1_x      (reg_write_en1[18]   ),
  .reg_write_is0_x      (reg_write_is0[18]   ),
  .reg_write_is1_x      (reg_write_is1[18]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[19]/); @124
// &ConnRule(s/_y$/_19/); @125
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_19"); @126
pa_idu_reg32_high  x_pa_idu_reg32_high_19 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_19      ),
  .reg_dout_y           (reg_dout_19         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[19]   ),
  .reg_write_en1_x      (reg_write_en1[19]   ),
  .reg_write_is0_x      (reg_write_is0[19]   ),
  .reg_write_is1_x      (reg_write_is1[19]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[20]/); @128
// &ConnRule(s/_y$/_20/); @129
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_20"); @130
pa_idu_reg32_high  x_pa_idu_reg32_high_20 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_20      ),
  .reg_dout_y           (reg_dout_20         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[20]   ),
  .reg_write_en1_x      (reg_write_en1[20]   ),
  .reg_write_is0_x      (reg_write_is0[20]   ),
  .reg_write_is1_x      (reg_write_is1[20]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[21]/); @132
// &ConnRule(s/_y$/_21/); @133
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_21"); @134
pa_idu_reg32_high  x_pa_idu_reg32_high_21 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_21      ),
  .reg_dout_y           (reg_dout_21         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[21]   ),
  .reg_write_en1_x      (reg_write_en1[21]   ),
  .reg_write_is0_x      (reg_write_is0[21]   ),
  .reg_write_is1_x      (reg_write_is1[21]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[22]/); @136
// &ConnRule(s/_y$/_22/); @137
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_22"); @138
pa_idu_reg32_high  x_pa_idu_reg32_high_22 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_22      ),
  .reg_dout_y           (reg_dout_22         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[22]   ),
  .reg_write_en1_x      (reg_write_en1[22]   ),
  .reg_write_is0_x      (reg_write_is0[22]   ),
  .reg_write_is1_x      (reg_write_is1[22]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[23]/); @140
// &ConnRule(s/_y$/_23/); @141
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_23"); @142
pa_idu_reg32_high  x_pa_idu_reg32_high_23 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_23      ),
  .reg_dout_y           (reg_dout_23         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[23]   ),
  .reg_write_en1_x      (reg_write_en1[23]   ),
  .reg_write_is0_x      (reg_write_is0[23]   ),
  .reg_write_is1_x      (reg_write_is1[23]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[24]/); @144
// &ConnRule(s/_y$/_24/); @145
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_24"); @146
pa_idu_reg32_high  x_pa_idu_reg32_high_24 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_24      ),
  .reg_dout_y           (reg_dout_24         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[24]   ),
  .reg_write_en1_x      (reg_write_en1[24]   ),
  .reg_write_is0_x      (reg_write_is0[24]   ),
  .reg_write_is1_x      (reg_write_is1[24]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[25]/); @148
// &ConnRule(s/_y$/_25/); @149
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_25"); @150
pa_idu_reg32_high  x_pa_idu_reg32_high_25 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_25      ),
  .reg_dout_y           (reg_dout_25         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[25]   ),
  .reg_write_en1_x      (reg_write_en1[25]   ),
  .reg_write_is0_x      (reg_write_is0[25]   ),
  .reg_write_is1_x      (reg_write_is1[25]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[26]/); @152
// &ConnRule(s/_y$/_26/); @153
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_26"); @154
pa_idu_reg32_high  x_pa_idu_reg32_high_26 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_26      ),
  .reg_dout_y           (reg_dout_26         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[26]   ),
  .reg_write_en1_x      (reg_write_en1[26]   ),
  .reg_write_is0_x      (reg_write_is0[26]   ),
  .reg_write_is1_x      (reg_write_is1[26]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[27]/); @156
// &ConnRule(s/_y$/_27/); @157
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_27"); @158
pa_idu_reg32_high  x_pa_idu_reg32_high_27 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_27      ),
  .reg_dout_y           (reg_dout_27         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[27]   ),
  .reg_write_en1_x      (reg_write_en1[27]   ),
  .reg_write_is0_x      (reg_write_is0[27]   ),
  .reg_write_is1_x      (reg_write_is1[27]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[28]/); @160
// &ConnRule(s/_y$/_28/); @161
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_28"); @162
pa_idu_reg32_high  x_pa_idu_reg32_high_28 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_28      ),
  .reg_dout_y           (reg_dout_28         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[28]   ),
  .reg_write_en1_x      (reg_write_en1[28]   ),
  .reg_write_is0_x      (reg_write_is0[28]   ),
  .reg_write_is1_x      (reg_write_is1[28]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[29]/); @164
// &ConnRule(s/_y$/_29/); @165
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_29"); @166
pa_idu_reg32_high  x_pa_idu_reg32_high_29 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_29      ),
  .reg_dout_y           (reg_dout_29         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[29]   ),
  .reg_write_en1_x      (reg_write_en1[29]   ),
  .reg_write_is0_x      (reg_write_is0[29]   ),
  .reg_write_is1_x      (reg_write_is1[29]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[30]/); @168
// &ConnRule(s/_y$/_30/); @169
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_30"); @170
pa_idu_reg32_high  x_pa_idu_reg32_high_30 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_30      ),
  .reg_dout_y           (reg_dout_30         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[30]   ),
  .reg_write_en1_x      (reg_write_en1[30]   ),
  .reg_write_is0_x      (reg_write_is0[30]   ),
  .reg_write_is1_x      (reg_write_is1[30]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[31]/); @172
// &ConnRule(s/_y$/_31/); @173
// &Instance("pa_idu_reg32_high", "x_pa_idu_reg32_high_31"); @174
pa_idu_reg32_high  x_pa_idu_reg32_high_31 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .ctrl_gpr_div_inst    (ctrl_gpr_div_inst   ),
  .ctrl_gpr_ld_inst     (ctrl_gpr_ld_inst    ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .reg_busy_st_y        (reg_busy_st_31      ),
  .reg_dout_y           (reg_dout_31         ),
  .reg_high_cpuclk      (reg_high_cpuclk     ),
  .reg_write_en0_x      (reg_write_en0[31]   ),
  .reg_write_en1_x      (reg_write_en1[31]   ),
  .reg_write_is0_x      (reg_write_is0[31]   ),
  .reg_write_is1_x      (reg_write_is1[31]   ),
  .rtu_idu_wb_lsu_vld   (rtu_idu_wb_lsu_vld  ),
  .rtu_idu_wb_warm_up   (rtu_idu_wb_warm_up  ),
  .rtu_yy_xx_flush      (rtu_yy_xx_flush     ),
  .write_data0          (write_data0         ),
  .write_data1          (write_data1         )
);


// &ConnRule(s/_x$/[32]/); @176
// &ConnRule(s/_y$/_32/); @177
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_hint_0"); @178
pa_idu_reg32  x_pa_idu_reg32_hint_0 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_32        ),
  .reg_dout_y             (reg_dout_32           ),
  .reg_write_en0_x        (reg_write_en0[32]     ),
  .reg_write_en1_x        (reg_write_en1[32]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[32]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[32]),
  .reg_write_is0_x        (reg_write_is0[32]     ),
  .reg_write_is1_x        (reg_write_is1[32]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[32]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[32]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);


// &ConnRule(s/_x$/[33]/); @180
// &ConnRule(s/_y$/_33/); @181
// &Instance("pa_idu_reg32", "x_pa_idu_reg32_hint_1"); @182
pa_idu_reg32  x_pa_idu_reg32_hint_1 (
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .reg_busy_st_y          (reg_busy_st_33        ),
  .reg_dout_y             (reg_dout_33           ),
  .reg_write_en0_x        (reg_write_en0[33]     ),
  .reg_write_en1_x        (reg_write_en1[33]     ),
  .reg_write_en_gate0_x   (reg_write_en_gate0[33]),
  .reg_write_en_gate1_x   (reg_write_en_gate1[33]),
  .reg_write_is0_x        (reg_write_is0[33]     ),
  .reg_write_is1_x        (reg_write_is1[33]     ),
  .reg_write_is_gate0_x   (reg_write_is_gate0[33]),
  .reg_write_is_gate1_x   (reg_write_is_gate1[33]),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .write_data0            (write_data0           ),
  .write_data1            (write_data1           )
);





assign gpr_sync_rst_b = 1'b1;
assign write_index0[5:0] = rtu_idu_wb_rbus_preg[5:0];
assign write_data0[31:0] = {32{gpr_sync_rst_b}} & rtu_idu_wb_rbus_data[31:0];


assign write_index0_sel[4:0] = rtu_idu_wb_rbus_preg[4:0] & {5{rtu_idu_wb_rbus_vld}};
// &CombBeg; @193
always @( write_index0_sel[4:0])
begin
  reg_sel0[31:0] = 32'b0;
  case(write_index0_sel[4:0])
    5'h00 : reg_sel0[0]  = 1'b1;
    5'h01 : reg_sel0[1]  = 1'b1;
    5'h02 : reg_sel0[2]  = 1'b1;
    5'h03 : reg_sel0[3]  = 1'b1;
    5'h04 : reg_sel0[4]  = 1'b1;
    5'h05 : reg_sel0[5]  = 1'b1;
    5'h06 : reg_sel0[6]  = 1'b1;
    5'h07 : reg_sel0[7]  = 1'b1;
    5'h08 : reg_sel0[8]  = 1'b1;
    5'h09 : reg_sel0[9]  = 1'b1;
    5'h0a : reg_sel0[10] = 1'b1;
    5'h0b : reg_sel0[11] = 1'b1;
    5'h0c : reg_sel0[12] = 1'b1;
    5'h0d : reg_sel0[13] = 1'b1;
    5'h0e : reg_sel0[14] = 1'b1;
    5'h0f : reg_sel0[15] = 1'b1;
    5'h10 : reg_sel0[16] = 1'b1;
    5'h11 : reg_sel0[17] = 1'b1;
    5'h12 : reg_sel0[18] = 1'b1;
    5'h13 : reg_sel0[19] = 1'b1;
    5'h14 : reg_sel0[20] = 1'b1;
    5'h15 : reg_sel0[21] = 1'b1;
    5'h16 : reg_sel0[22] = 1'b1;
    5'h17 : reg_sel0[23] = 1'b1;
    5'h18 : reg_sel0[24] = 1'b1;
    5'h19 : reg_sel0[25] = 1'b1;
    5'h1a : reg_sel0[26] = 1'b1;
    5'h1b : reg_sel0[27] = 1'b1;
    5'h1c : reg_sel0[28] = 1'b1;
    5'h1d : reg_sel0[29] = 1'b1;
    5'h1e : reg_sel0[30] = 1'b1;
    5'h1f : reg_sel0[31] = 1'b1;
  endcase
// &CombEnd; @229
end

assign reg_hint_sel0[1:0]     = {2{rtu_idu_wb_rbus_preg[5]}} & (2'b1 << write_index0[0]);
assign reg_write_en_hint0[1:0] = reg_hint_sel0[1:0] & {2{rtu_idu_wb_rbus_vld & gpr_sync_rst_b}};

assign reg_write_en0[31:0] = reg_sel0[31:0] & {32{rtu_idu_wb_rbus_vld & !write_index0[5]}}
                          & {32{gpr_sync_rst_b}};
assign reg_write_en0[32] = reg_write_en_hint0[0];
assign reg_write_en0[33] = reg_write_en_hint0[1];
assign reg_write_en_gate0[33:0] = reg_write_en0[33:0];

assign write_index1[5:0] = rtu_idu_wb_lsu_preg[5:0];
assign write_data1[31:0] = {32{gpr_sync_rst_b}} & rtu_idu_wb_lsu_data[31:0];


// &CombBeg; @244
always @( write_index1[4:0])
begin
  reg_sel1[31:0] = 32'b0;
  case(write_index1[4:0])
    5'h00 : reg_sel1[0]  = 1'b1;
    5'h01 : reg_sel1[1]  = 1'b1;
    5'h02 : reg_sel1[2]  = 1'b1;
    5'h03 : reg_sel1[3]  = 1'b1;
    5'h04 : reg_sel1[4]  = 1'b1;
    5'h05 : reg_sel1[5]  = 1'b1;
    5'h06 : reg_sel1[6]  = 1'b1;
    5'h07 : reg_sel1[7]  = 1'b1;
    5'h08 : reg_sel1[8]  = 1'b1;
    5'h09 : reg_sel1[9]  = 1'b1;
    5'h0a : reg_sel1[10] = 1'b1;
    5'h0b : reg_sel1[11] = 1'b1;
    5'h0c : reg_sel1[12] = 1'b1;
    5'h0d : reg_sel1[13] = 1'b1;
    5'h0e : reg_sel1[14] = 1'b1;
    5'h0f : reg_sel1[15] = 1'b1;
    5'h10 : reg_sel1[16] = 1'b1;
    5'h11 : reg_sel1[17] = 1'b1;
    5'h12 : reg_sel1[18] = 1'b1;
    5'h13 : reg_sel1[19] = 1'b1;
    5'h14 : reg_sel1[20] = 1'b1;
    5'h15 : reg_sel1[21] = 1'b1;
    5'h16 : reg_sel1[22] = 1'b1;
    5'h17 : reg_sel1[23] = 1'b1;
    5'h18 : reg_sel1[24] = 1'b1;
    5'h19 : reg_sel1[25] = 1'b1;
    5'h1a : reg_sel1[26] = 1'b1;
    5'h1b : reg_sel1[27] = 1'b1;
    5'h1c : reg_sel1[28] = 1'b1;
    5'h1d : reg_sel1[29] = 1'b1;
    5'h1e : reg_sel1[30] = 1'b1;
    5'h1f : reg_sel1[31] = 1'b1;
  endcase
// &CombEnd; @280
end

assign reg_hint_sel1[1:0]     = {2{rtu_idu_wb_lsu_preg[5]}} & (2'b1 << write_index1[0]);
assign reg_write_en_hint1[1:0] = reg_hint_sel1[1:0] & {2{rtu_idu_wb_lsu_vld & gpr_sync_rst_b}};

assign reg_write_en1[31:0] = reg_sel1[31:0] & {32{rtu_idu_wb_lsu_vld & !write_index1[5]}}
                          & {32{gpr_sync_rst_b}};
assign reg_write_en1[32] = reg_write_en_hint1[0] && !hs_gpr_wb_mask;
assign reg_write_en1[33] = reg_write_en_hint1[1] && !hs_gpr_wb_mask;
assign reg_write_en_gate1[33:0] = reg_write_en1[33:0];


assign reg_write_en_sp = cp0_idu_sp_wen;
assign reg_write_en_sp_gate = cp0_idu_sp_wen_gate;
assign write_data_sp[31:0] = cp0_idu_sp_wdata[31:0];

assign gpr_wb_sp = reg_write_en0[2] || reg_write_en1[2];



assign reg_issue0_sel[4:0] = ctrl_gpr_id_wr_idx[4:0] & {5{ctrl_gpr_id_dst_vld}};
// &CombBeg; @301
always @( reg_issue0_sel[4:0])
begin
  reg_issue0[31:0] = 32'b0;
  case(reg_issue0_sel[4:0])
    5'h00 : reg_issue0[0]  = 1'b1;
    5'h01 : reg_issue0[1]  = 1'b1;
    5'h02 : reg_issue0[2]  = 1'b1;
    5'h03 : reg_issue0[3]  = 1'b1;
    5'h04 : reg_issue0[4]  = 1'b1;
    5'h05 : reg_issue0[5]  = 1'b1;
    5'h06 : reg_issue0[6]  = 1'b1;
    5'h07 : reg_issue0[7]  = 1'b1;
    5'h08 : reg_issue0[8]  = 1'b1;
    5'h09 : reg_issue0[9]  = 1'b1;
    5'h0a : reg_issue0[10] = 1'b1;
    5'h0b : reg_issue0[11] = 1'b1;
    5'h0c : reg_issue0[12] = 1'b1;
    5'h0d : reg_issue0[13] = 1'b1;
    5'h0e : reg_issue0[14] = 1'b1;
    5'h0f : reg_issue0[15] = 1'b1;
    5'h10 : reg_issue0[16] = 1'b1;
    5'h11 : reg_issue0[17] = 1'b1;
    5'h12 : reg_issue0[18] = 1'b1;
    5'h13 : reg_issue0[19] = 1'b1;
    5'h14 : reg_issue0[20] = 1'b1;
    5'h15 : reg_issue0[21] = 1'b1;
    5'h16 : reg_issue0[22] = 1'b1;
    5'h17 : reg_issue0[23] = 1'b1;
    5'h18 : reg_issue0[24] = 1'b1;
    5'h19 : reg_issue0[25] = 1'b1;
    5'h1a : reg_issue0[26] = 1'b1;
    5'h1b : reg_issue0[27] = 1'b1;
    5'h1c : reg_issue0[28] = 1'b1;
    5'h1d : reg_issue0[29] = 1'b1;
    5'h1e : reg_issue0[30] = 1'b1;
    5'h1f : reg_issue0[31] = 1'b1;
  endcase
// &CombEnd; @337
end

assign reg_write_is0[31:0]  = {32{ctrl_gpr_wr_issue && !ctrl_gpr_id_wr_idx[5] && !decd_gpr_sti_vld && !hs_gpr_wr_mask}}
                           & reg_issue0[31:0];
assign reg_hint_is0[1:0]    = {2{ctrl_gpr_id_wr_idx[5]}} & (2'b1 << ctrl_gpr_id_wr_idx[0]);
assign reg_write_is0[33:32] = {2{ctrl_gpr_wr_issue && !hs_gpr_wr_mask}} & reg_hint_is0[1:0];

assign reg_write_is_gate0[31:0]  = {32{ctrl_gpr_id_dst_vld && !ctrl_gpr_id_wr_idx[5] && !decd_gpr_sti_vld && !hs_gpr_wr_mask}}
                                 & reg_issue0[31:0];
assign reg_write_is_gate0[33:32] = {2{ctrl_gpr_id_dst_vld && !hs_gpr_wr_mask}} & reg_hint_is0[1:0];



assign gpr_wr_idx1[4:0] = decd_gpr_rs1[4:0] & {5{decd_gpr_ldi_vld || decd_gpr_sti_vld}};
// &CombBeg; @351
always @( gpr_wr_idx1[4:0])
begin
  reg_issue1[31:0] = 32'b0;
  case(gpr_wr_idx1[4:0])
    5'h00 : reg_issue1[0]  = 1'b1;
    5'h01 : reg_issue1[1]  = 1'b1;
    5'h02 : reg_issue1[2]  = 1'b1;
    5'h03 : reg_issue1[3]  = 1'b1;
    5'h04 : reg_issue1[4]  = 1'b1;
    5'h05 : reg_issue1[5]  = 1'b1;
    5'h06 : reg_issue1[6]  = 1'b1;
    5'h07 : reg_issue1[7]  = 1'b1;
    5'h08 : reg_issue1[8]  = 1'b1;
    5'h09 : reg_issue1[9]  = 1'b1;
    5'h0a : reg_issue1[10] = 1'b1;
    5'h0b : reg_issue1[11] = 1'b1;
    5'h0c : reg_issue1[12] = 1'b1;
    5'h0d : reg_issue1[13] = 1'b1;
    5'h0e : reg_issue1[14] = 1'b1;
    5'h0f : reg_issue1[15] = 1'b1;
    5'h10 : reg_issue1[16] = 1'b1;
    5'h11 : reg_issue1[17] = 1'b1;
    5'h12 : reg_issue1[18] = 1'b1;
    5'h13 : reg_issue1[19] = 1'b1;
    5'h14 : reg_issue1[20] = 1'b1;
    5'h15 : reg_issue1[21] = 1'b1;
    5'h16 : reg_issue1[22] = 1'b1;
    5'h17 : reg_issue1[23] = 1'b1;
    5'h18 : reg_issue1[24] = 1'b1;
    5'h19 : reg_issue1[25] = 1'b1;
    5'h1a : reg_issue1[26] = 1'b1;
    5'h1b : reg_issue1[27] = 1'b1;
    5'h1c : reg_issue1[28] = 1'b1;
    5'h1d : reg_issue1[29] = 1'b1;
    5'h1e : reg_issue1[30] = 1'b1;
    5'h1f : reg_issue1[31] = 1'b1;
  endcase
// &CombEnd; @387
end

assign reg_write_is1[31:0]  = {32{ctrl_gpr_wr_issue && (decd_gpr_ldi_vld || decd_gpr_sti_vld)}} & reg_issue1[31:0];
assign reg_write_is1[33:32] = 2'b0;

assign reg_write_is_gate1[31:0]  = {32{ctrl_gpr_id_dst_vld && (decd_gpr_ldi_vld || decd_gpr_sti_vld)}} & reg_issue1[31:0];
assign reg_write_is_gate1[33:32] = 2'b0;





// &CombBeg; @399
always @( reg_dout_4[31:0]
       or reg_dout_7[31:0]
       or reg_dout_3[31:0]
       or reg_dout_30[31:0]
       or reg_dout_5[31:0]
       or reg_dout_20[31:0]
       or reg_dout_22[31:0]
       or reg_dout_8[31:0]
       or reg_dout_28[31:0]
       or reg_dout_27[31:0]
       or reg_dout_12[31:0]
       or reg_dout_23[31:0]
       or reg_dout_19[31:0]
       or reg_dout_15[31:0]
       or reg_dout_2[31:0]
       or reg_dout_6[31:0]
       or reg_dout_1[31:0]
       or reg_dout_10[31:0]
       or reg_dout_26[31:0]
       or reg_dout_11[31:0]
       or reg_dout_18[31:0]
       or reg_dout_17[31:0]
       or reg_dout_25[31:0]
       or decd_gpr_rs1[4:0]
       or reg_dout_24[31:0]
       or reg_dout_31[31:0]
       or reg_dout_16[31:0]
       or reg_dout_21[31:0]
       or reg_dout_14[31:0]
       or reg_dout_29[31:0]
       or reg_dout_9[31:0]
       or reg_dout_13[31:0])
begin
  case(decd_gpr_rs1[4:0])
    5'h00   : gpr_read_data1[31:0] = 32'b0;
    5'h01   : gpr_read_data1[31:0] = reg_dout_1[31:0];
    5'h02   : gpr_read_data1[31:0] = reg_dout_2[31:0];
    5'h03   : gpr_read_data1[31:0] = reg_dout_3[31:0];
    5'h04   : gpr_read_data1[31:0] = reg_dout_4[31:0];
    5'h05   : gpr_read_data1[31:0] = reg_dout_5[31:0];
    5'h06   : gpr_read_data1[31:0] = reg_dout_6[31:0];
    5'h07   : gpr_read_data1[31:0] = reg_dout_7[31:0];
    5'h08   : gpr_read_data1[31:0] = reg_dout_8[31:0];
    5'h09   : gpr_read_data1[31:0] = reg_dout_9[31:0];
    5'h0a   : gpr_read_data1[31:0] = reg_dout_10[31:0];
    5'h0b   : gpr_read_data1[31:0] = reg_dout_11[31:0];
    5'h0c   : gpr_read_data1[31:0] = reg_dout_12[31:0];
    5'h0d   : gpr_read_data1[31:0] = reg_dout_13[31:0];
    5'h0e   : gpr_read_data1[31:0] = reg_dout_14[31:0];
    5'h0f   : gpr_read_data1[31:0] = reg_dout_15[31:0];
    5'h10   : gpr_read_data1[31:0] = reg_dout_16[31:0];
    5'h11   : gpr_read_data1[31:0] = reg_dout_17[31:0];
    5'h12   : gpr_read_data1[31:0] = reg_dout_18[31:0];
    5'h13   : gpr_read_data1[31:0] = reg_dout_19[31:0];
    5'h14   : gpr_read_data1[31:0] = reg_dout_20[31:0];
    5'h15   : gpr_read_data1[31:0] = reg_dout_21[31:0];
    5'h16   : gpr_read_data1[31:0] = reg_dout_22[31:0];
    5'h17   : gpr_read_data1[31:0] = reg_dout_23[31:0];
    5'h18   : gpr_read_data1[31:0] = reg_dout_24[31:0];
    5'h19   : gpr_read_data1[31:0] = reg_dout_25[31:0];
    5'h1a   : gpr_read_data1[31:0] = reg_dout_26[31:0];
    5'h1b   : gpr_read_data1[31:0] = reg_dout_27[31:0];
    5'h1c   : gpr_read_data1[31:0] = reg_dout_28[31:0];
    5'h1d   : gpr_read_data1[31:0] = reg_dout_29[31:0];
    5'h1e   : gpr_read_data1[31:0] = reg_dout_30[31:0];
    5'h1f   : gpr_read_data1[31:0] = reg_dout_31[31:0];
    default : gpr_read_data1[31:0] = 32'bx;
  endcase
// &CombEnd; @435
end

assign hint_read_data1[31:0] = decd_gpr_rs1[0] ? reg_dout_33[31:0] : reg_dout_32[31:0];

assign gpr_read_data1_after_hint[31:0] = decd_gpr_rs1[5] ? hint_read_data1[31:0] : gpr_read_data1[31:0];


// &CombBeg; @442
always @( reg_dout_4[31:0]
       or reg_dout_7[31:0]
       or reg_dout_3[31:0]
       or reg_dout_30[31:0]
       or reg_dout_5[31:0]
       or decd_gpr_rs2[4:0]
       or reg_dout_20[31:0]
       or reg_dout_22[31:0]
       or reg_dout_8[31:0]
       or reg_dout_28[31:0]
       or reg_dout_27[31:0]
       or reg_dout_12[31:0]
       or reg_dout_23[31:0]
       or reg_dout_19[31:0]
       or reg_dout_15[31:0]
       or reg_dout_2[31:0]
       or reg_dout_6[31:0]
       or reg_dout_1[31:0]
       or reg_dout_10[31:0]
       or reg_dout_26[31:0]
       or reg_dout_11[31:0]
       or reg_dout_18[31:0]
       or reg_dout_17[31:0]
       or reg_dout_25[31:0]
       or reg_dout_24[31:0]
       or reg_dout_31[31:0]
       or reg_dout_21[31:0]
       or reg_dout_16[31:0]
       or reg_dout_14[31:0]
       or reg_dout_29[31:0]
       or reg_dout_9[31:0]
       or reg_dout_13[31:0])
begin
  case(decd_gpr_rs2[4:0])
    5'h00   : gpr_read_data2[31:0] = 32'b0;
    5'h01   : gpr_read_data2[31:0] = reg_dout_1[31:0];
    5'h02   : gpr_read_data2[31:0] = reg_dout_2[31:0];
    5'h03   : gpr_read_data2[31:0] = reg_dout_3[31:0];
    5'h04   : gpr_read_data2[31:0] = reg_dout_4[31:0];
    5'h05   : gpr_read_data2[31:0] = reg_dout_5[31:0];
    5'h06   : gpr_read_data2[31:0] = reg_dout_6[31:0];
    5'h07   : gpr_read_data2[31:0] = reg_dout_7[31:0];
    5'h08   : gpr_read_data2[31:0] = reg_dout_8[31:0];
    5'h09   : gpr_read_data2[31:0] = reg_dout_9[31:0];
    5'h0a   : gpr_read_data2[31:0] = reg_dout_10[31:0];
    5'h0b   : gpr_read_data2[31:0] = reg_dout_11[31:0];
    5'h0c   : gpr_read_data2[31:0] = reg_dout_12[31:0];
    5'h0d   : gpr_read_data2[31:0] = reg_dout_13[31:0];
    5'h0e   : gpr_read_data2[31:0] = reg_dout_14[31:0];
    5'h0f   : gpr_read_data2[31:0] = reg_dout_15[31:0];
    5'h10   : gpr_read_data2[31:0] = reg_dout_16[31:0];
    5'h11   : gpr_read_data2[31:0] = reg_dout_17[31:0];
    5'h12   : gpr_read_data2[31:0] = reg_dout_18[31:0];
    5'h13   : gpr_read_data2[31:0] = reg_dout_19[31:0];
    5'h14   : gpr_read_data2[31:0] = reg_dout_20[31:0];
    5'h15   : gpr_read_data2[31:0] = reg_dout_21[31:0];
    5'h16   : gpr_read_data2[31:0] = reg_dout_22[31:0];
    5'h17   : gpr_read_data2[31:0] = reg_dout_23[31:0];
    5'h18   : gpr_read_data2[31:0] = reg_dout_24[31:0];
    5'h19   : gpr_read_data2[31:0] = reg_dout_25[31:0];
    5'h1a   : gpr_read_data2[31:0] = reg_dout_26[31:0];
    5'h1b   : gpr_read_data2[31:0] = reg_dout_27[31:0];
    5'h1c   : gpr_read_data2[31:0] = reg_dout_28[31:0];
    5'h1d   : gpr_read_data2[31:0] = reg_dout_29[31:0];
    5'h1e   : gpr_read_data2[31:0] = reg_dout_30[31:0];
    5'h1f   : gpr_read_data2[31:0] = reg_dout_31[31:0];
    default : gpr_read_data2[31:0] = 32'bx;
  endcase
// &CombEnd; @478
end

assign hint_read_data2[31:0] = decd_gpr_rs2[0] ? reg_dout_33[31:0] : reg_dout_32[31:0];

assign gpr_read_data2_after_hint[31:0] = decd_gpr_rs2[5] ? hint_read_data2[31:0] : gpr_read_data2[31:0];


// &CombBeg; @485
always @( reg_dout_4[31:0]
       or reg_dout_7[31:0]
       or reg_dout_3[31:0]
       or reg_dout_30[31:0]
       or reg_dout_5[31:0]
       or reg_dout_20[31:0]
       or reg_dout_22[31:0]
       or reg_dout_8[31:0]
       or reg_dout_28[31:0]
       or reg_dout_27[31:0]
       or reg_dout_12[31:0]
       or reg_dout_23[31:0]
       or reg_dout_19[31:0]
       or reg_dout_15[31:0]
       or reg_dout_2[31:0]
       or reg_dout_6[31:0]
       or reg_dout_1[31:0]
       or reg_dout_10[31:0]
       or reg_dout_26[31:0]
       or decd_gpr_rs3[4:0]
       or reg_dout_11[31:0]
       or reg_dout_18[31:0]
       or reg_dout_17[31:0]
       or reg_dout_25[31:0]
       or reg_dout_24[31:0]
       or reg_dout_31[31:0]
       or reg_dout_21[31:0]
       or reg_dout_16[31:0]
       or reg_dout_14[31:0]
       or reg_dout_29[31:0]
       or reg_dout_9[31:0]
       or reg_dout_13[31:0])
begin
  case(decd_gpr_rs3[4:0])
    5'h00   : gpr_read_data3[31:0] = 32'b0;
    5'h01   : gpr_read_data3[31:0] = reg_dout_1[31:0];
    5'h02   : gpr_read_data3[31:0] = reg_dout_2[31:0];
    5'h03   : gpr_read_data3[31:0] = reg_dout_3[31:0];
    5'h04   : gpr_read_data3[31:0] = reg_dout_4[31:0];
    5'h05   : gpr_read_data3[31:0] = reg_dout_5[31:0];
    5'h06   : gpr_read_data3[31:0] = reg_dout_6[31:0];
    5'h07   : gpr_read_data3[31:0] = reg_dout_7[31:0];
    5'h08   : gpr_read_data3[31:0] = reg_dout_8[31:0];
    5'h09   : gpr_read_data3[31:0] = reg_dout_9[31:0];
    5'h0a   : gpr_read_data3[31:0] = reg_dout_10[31:0];
    5'h0b   : gpr_read_data3[31:0] = reg_dout_11[31:0];
    5'h0c   : gpr_read_data3[31:0] = reg_dout_12[31:0];
    5'h0d   : gpr_read_data3[31:0] = reg_dout_13[31:0];
    5'h0e   : gpr_read_data3[31:0] = reg_dout_14[31:0];
    5'h0f   : gpr_read_data3[31:0] = reg_dout_15[31:0];
    5'h10   : gpr_read_data3[31:0] = reg_dout_16[31:0];
    5'h11   : gpr_read_data3[31:0] = reg_dout_17[31:0];
    5'h12   : gpr_read_data3[31:0] = reg_dout_18[31:0];
    5'h13   : gpr_read_data3[31:0] = reg_dout_19[31:0];
    5'h14   : gpr_read_data3[31:0] = reg_dout_20[31:0];
    5'h15   : gpr_read_data3[31:0] = reg_dout_21[31:0];
    5'h16   : gpr_read_data3[31:0] = reg_dout_22[31:0];
    5'h17   : gpr_read_data3[31:0] = reg_dout_23[31:0];
    5'h18   : gpr_read_data3[31:0] = reg_dout_24[31:0];
    5'h19   : gpr_read_data3[31:0] = reg_dout_25[31:0];
    5'h1a   : gpr_read_data3[31:0] = reg_dout_26[31:0];
    5'h1b   : gpr_read_data3[31:0] = reg_dout_27[31:0];
    5'h1c   : gpr_read_data3[31:0] = reg_dout_28[31:0];
    5'h1d   : gpr_read_data3[31:0] = reg_dout_29[31:0];
    5'h1e   : gpr_read_data3[31:0] = reg_dout_30[31:0];
    5'h1f   : gpr_read_data3[31:0] = reg_dout_31[31:0];
    default : gpr_read_data3[31:0] = 32'bx;
  endcase
// &CombEnd; @521
end

assign gpr_rs1_dep_wb_lsu = decd_gpr_rs1[5:0] == write_index1[5:0]
                     && decd_gpr_rs1[5:0] != 6'b0
                     && rtu_idu_wb_lsu_vld;
assign gpr_rs2_dep_wb_lsu = decd_gpr_rs2[5:0] == write_index1[5:0]
                     && decd_gpr_rs2[5:0] != 6'b0
                     && rtu_idu_wb_lsu_vld;
assign gpr_rs3_dep_wb_lsu = decd_gpr_rs3[5:0] == write_index1[5:0]
                     && decd_gpr_rs3[5:0] != 6'b0
                     && rtu_idu_wb_lsu_vld;

assign gpr_rs1_dep_wb_rbus = decd_gpr_rs1[5:0] == rtu_idu_wb_rbus_preg[5:0]
                          && decd_gpr_rs1[5:0] != 6'b0
                          && rtu_idu_wb_rbus_vld;
assign gpr_rs2_dep_wb_rbus = decd_gpr_rs2[5:0] == rtu_idu_wb_rbus_preg[5:0]
                          && decd_gpr_rs2[5:0] != 6'b0
                          && rtu_idu_wb_rbus_vld;
assign gpr_rs3_dep_wb_rbus = decd_gpr_rs3[5:0] == rtu_idu_wb_rbus_preg[5:0]
                          && decd_gpr_rs3[5:0] != 6'b0
                          && rtu_idu_wb_rbus_vld;

assign gpr_rs1_dep_wb = gpr_rs1_dep_wb_lsu || gpr_rs1_dep_wb_rbus;
assign gpr_rs2_dep_wb = gpr_rs2_dep_wb_lsu || gpr_rs2_dep_wb_rbus;
assign gpr_rs3_dep_wb = gpr_rs3_dep_wb_lsu || gpr_rs3_dep_wb_rbus;





parameter IDLE      = 3'b000;
parameter BUSY1     = 3'b001;
parameter BUSY_LSU1 = 3'b010;
parameter BUSY_DIV1 = 3'b011;
parameter BUSY2     = 3'b100;
parameter BUSY_LSU2 = 3'b110;
parameter BUSY_DIV2 = 3'b111;

// &CombBeg; @559
always @( reg_busy_st_19[2:0]
       or reg_busy_st_31[2:0]
       or reg_busy_st_9[2:0]
       or decd_gpr_dep_rs1[5:0]
       or reg_busy_st_21[2:0]
       or reg_busy_st_14[2:0]
       or reg_busy_st_16[2:0]
       or reg_busy_st_33[2:0]
       or reg_busy_st_25[2:0]
       or reg_busy_st_15[2:0]
       or reg_busy_st_26[2:0]
       or reg_busy_st_20[2:0]
       or reg_busy_st_17[2:0]
       or reg_busy_st_1[2:0]
       or reg_busy_st_32[2:0]
       or reg_busy_st_18[2:0]
       or reg_busy_st_5[2:0]
       or reg_busy_st_22[2:0]
       or reg_busy_st_27[2:0]
       or reg_busy_st_29[2:0]
       or reg_busy_st_13[2:0]
       or reg_busy_st_24[2:0]
       or reg_busy_st_23[2:0]
       or reg_busy_st_2[2:0]
       or reg_busy_st_30[2:0]
       or reg_busy_st_7[2:0]
       or reg_busy_st_6[2:0]
       or reg_busy_st_28[2:0]
       or reg_busy_st_10[2:0]
       or reg_busy_st_11[2:0]
       or reg_busy_st_3[2:0]
       or reg_busy_st_4[2:0]
       or reg_busy_st_8[2:0]
       or reg_busy_st_12[2:0])
begin
case(decd_gpr_dep_rs1[5:0])
    6'h00   : gpr_rs1_busy_st[2:0] = 3'b0;
    6'h01   : gpr_rs1_busy_st[2:0] = reg_busy_st_1[2:0];
    6'h02   : gpr_rs1_busy_st[2:0] = reg_busy_st_2[2:0];
    6'h03   : gpr_rs1_busy_st[2:0] = reg_busy_st_3[2:0];
    6'h04   : gpr_rs1_busy_st[2:0] = reg_busy_st_4[2:0];
    6'h05   : gpr_rs1_busy_st[2:0] = reg_busy_st_5[2:0];
    6'h06   : gpr_rs1_busy_st[2:0] = reg_busy_st_6[2:0];
    6'h07   : gpr_rs1_busy_st[2:0] = reg_busy_st_7[2:0];
    6'h08   : gpr_rs1_busy_st[2:0] = reg_busy_st_8[2:0];
    6'h09   : gpr_rs1_busy_st[2:0] = reg_busy_st_9[2:0];
    6'h0a   : gpr_rs1_busy_st[2:0] = reg_busy_st_10[2:0];
    6'h0b   : gpr_rs1_busy_st[2:0] = reg_busy_st_11[2:0];
    6'h0c   : gpr_rs1_busy_st[2:0] = reg_busy_st_12[2:0];
    6'h0d   : gpr_rs1_busy_st[2:0] = reg_busy_st_13[2:0];
    6'h0e   : gpr_rs1_busy_st[2:0] = reg_busy_st_14[2:0];
    6'h0f   : gpr_rs1_busy_st[2:0] = reg_busy_st_15[2:0];
    6'h10   : gpr_rs1_busy_st[2:0] = reg_busy_st_16[2:0];
    6'h11   : gpr_rs1_busy_st[2:0] = reg_busy_st_17[2:0];
    6'h12   : gpr_rs1_busy_st[2:0] = reg_busy_st_18[2:0];
    6'h13   : gpr_rs1_busy_st[2:0] = reg_busy_st_19[2:0];
    6'h14   : gpr_rs1_busy_st[2:0] = reg_busy_st_20[2:0];
    6'h15   : gpr_rs1_busy_st[2:0] = reg_busy_st_21[2:0];
    6'h16   : gpr_rs1_busy_st[2:0] = reg_busy_st_22[2:0];
    6'h17   : gpr_rs1_busy_st[2:0] = reg_busy_st_23[2:0];
    6'h18   : gpr_rs1_busy_st[2:0] = reg_busy_st_24[2:0];
    6'h19   : gpr_rs1_busy_st[2:0] = reg_busy_st_25[2:0];
    6'h1a   : gpr_rs1_busy_st[2:0] = reg_busy_st_26[2:0];
    6'h1b   : gpr_rs1_busy_st[2:0] = reg_busy_st_27[2:0];
    6'h1c   : gpr_rs1_busy_st[2:0] = reg_busy_st_28[2:0];
    6'h1d   : gpr_rs1_busy_st[2:0] = reg_busy_st_29[2:0];
    6'h1e   : gpr_rs1_busy_st[2:0] = reg_busy_st_30[2:0];
    6'h1f   : gpr_rs1_busy_st[2:0] = reg_busy_st_31[2:0];
    6'h20   : gpr_rs1_busy_st[2:0] = reg_busy_st_32[2:0];
    6'h21   : gpr_rs1_busy_st[2:0] = reg_busy_st_33[2:0];
    default : gpr_rs1_busy_st[2:0] = 3'bx;
endcase
// &CombEnd; @597
end

// &CombBeg; @599
always @( reg_busy_st_19[2:0]
       or reg_busy_st_31[2:0]
       or reg_busy_st_9[2:0]
       or reg_busy_st_21[2:0]
       or decd_gpr_dep_rs2[5:0]
       or reg_busy_st_14[2:0]
       or reg_busy_st_16[2:0]
       or reg_busy_st_33[2:0]
       or reg_busy_st_25[2:0]
       or reg_busy_st_15[2:0]
       or reg_busy_st_26[2:0]
       or reg_busy_st_20[2:0]
       or reg_busy_st_17[2:0]
       or reg_busy_st_1[2:0]
       or reg_busy_st_32[2:0]
       or reg_busy_st_18[2:0]
       or reg_busy_st_5[2:0]
       or reg_busy_st_22[2:0]
       or reg_busy_st_27[2:0]
       or reg_busy_st_29[2:0]
       or reg_busy_st_13[2:0]
       or reg_busy_st_24[2:0]
       or reg_busy_st_23[2:0]
       or reg_busy_st_2[2:0]
       or reg_busy_st_30[2:0]
       or reg_busy_st_7[2:0]
       or reg_busy_st_6[2:0]
       or reg_busy_st_28[2:0]
       or reg_busy_st_10[2:0]
       or reg_busy_st_11[2:0]
       or reg_busy_st_3[2:0]
       or reg_busy_st_4[2:0]
       or reg_busy_st_8[2:0]
       or reg_busy_st_12[2:0])
begin
case(decd_gpr_dep_rs2[5:0])
    6'h00   : gpr_rs2_busy_st[2:0] = 3'b0;
    6'h01   : gpr_rs2_busy_st[2:0] = reg_busy_st_1[2:0];
    6'h02   : gpr_rs2_busy_st[2:0] = reg_busy_st_2[2:0];
    6'h03   : gpr_rs2_busy_st[2:0] = reg_busy_st_3[2:0];
    6'h04   : gpr_rs2_busy_st[2:0] = reg_busy_st_4[2:0];
    6'h05   : gpr_rs2_busy_st[2:0] = reg_busy_st_5[2:0];
    6'h06   : gpr_rs2_busy_st[2:0] = reg_busy_st_6[2:0];
    6'h07   : gpr_rs2_busy_st[2:0] = reg_busy_st_7[2:0];
    6'h08   : gpr_rs2_busy_st[2:0] = reg_busy_st_8[2:0];
    6'h09   : gpr_rs2_busy_st[2:0] = reg_busy_st_9[2:0];
    6'h0a   : gpr_rs2_busy_st[2:0] = reg_busy_st_10[2:0];
    6'h0b   : gpr_rs2_busy_st[2:0] = reg_busy_st_11[2:0];
    6'h0c   : gpr_rs2_busy_st[2:0] = reg_busy_st_12[2:0];
    6'h0d   : gpr_rs2_busy_st[2:0] = reg_busy_st_13[2:0];
    6'h0e   : gpr_rs2_busy_st[2:0] = reg_busy_st_14[2:0];
    6'h0f   : gpr_rs2_busy_st[2:0] = reg_busy_st_15[2:0];
    6'h10   : gpr_rs2_busy_st[2:0] = reg_busy_st_16[2:0];
    6'h11   : gpr_rs2_busy_st[2:0] = reg_busy_st_17[2:0];
    6'h12   : gpr_rs2_busy_st[2:0] = reg_busy_st_18[2:0];
    6'h13   : gpr_rs2_busy_st[2:0] = reg_busy_st_19[2:0];
    6'h14   : gpr_rs2_busy_st[2:0] = reg_busy_st_20[2:0];
    6'h15   : gpr_rs2_busy_st[2:0] = reg_busy_st_21[2:0];
    6'h16   : gpr_rs2_busy_st[2:0] = reg_busy_st_22[2:0];
    6'h17   : gpr_rs2_busy_st[2:0] = reg_busy_st_23[2:0];
    6'h18   : gpr_rs2_busy_st[2:0] = reg_busy_st_24[2:0];
    6'h19   : gpr_rs2_busy_st[2:0] = reg_busy_st_25[2:0];
    6'h1a   : gpr_rs2_busy_st[2:0] = reg_busy_st_26[2:0];
    6'h1b   : gpr_rs2_busy_st[2:0] = reg_busy_st_27[2:0];
    6'h1c   : gpr_rs2_busy_st[2:0] = reg_busy_st_28[2:0];
    6'h1d   : gpr_rs2_busy_st[2:0] = reg_busy_st_29[2:0];
    6'h1e   : gpr_rs2_busy_st[2:0] = reg_busy_st_30[2:0];
    6'h1f   : gpr_rs2_busy_st[2:0] = reg_busy_st_31[2:0];
    6'h20   : gpr_rs2_busy_st[2:0] = reg_busy_st_32[2:0];
    6'h21   : gpr_rs2_busy_st[2:0] = reg_busy_st_33[2:0];
    default : gpr_rs2_busy_st[2:0] = 3'bx;
endcase
// &CombEnd; @637
end

// &CombBeg; @639
always @( reg_busy_st_19[2:0]
       or reg_busy_st_31[2:0]
       or reg_busy_st_9[2:0]
       or reg_busy_st_21[2:0]
       or decd_gpr_rs3[5:0]
       or reg_busy_st_14[2:0]
       or reg_busy_st_16[2:0]
       or reg_busy_st_33[2:0]
       or reg_busy_st_25[2:0]
       or reg_busy_st_15[2:0]
       or reg_busy_st_26[2:0]
       or reg_busy_st_20[2:0]
       or reg_busy_st_17[2:0]
       or reg_busy_st_1[2:0]
       or reg_busy_st_32[2:0]
       or reg_busy_st_18[2:0]
       or reg_busy_st_5[2:0]
       or reg_busy_st_22[2:0]
       or reg_busy_st_27[2:0]
       or reg_busy_st_29[2:0]
       or reg_busy_st_13[2:0]
       or reg_busy_st_24[2:0]
       or reg_busy_st_23[2:0]
       or reg_busy_st_2[2:0]
       or reg_busy_st_30[2:0]
       or reg_busy_st_7[2:0]
       or reg_busy_st_6[2:0]
       or reg_busy_st_28[2:0]
       or reg_busy_st_10[2:0]
       or reg_busy_st_11[2:0]
       or reg_busy_st_3[2:0]
       or reg_busy_st_4[2:0]
       or reg_busy_st_8[2:0]
       or reg_busy_st_12[2:0])
begin
case(decd_gpr_rs3[5:0])
    6'h00   : gpr_rs3_busy_st[2:0] = 3'b0;
    6'h01   : gpr_rs3_busy_st[2:0] = reg_busy_st_1[2:0];
    6'h02   : gpr_rs3_busy_st[2:0] = reg_busy_st_2[2:0];
    6'h03   : gpr_rs3_busy_st[2:0] = reg_busy_st_3[2:0];
    6'h04   : gpr_rs3_busy_st[2:0] = reg_busy_st_4[2:0];
    6'h05   : gpr_rs3_busy_st[2:0] = reg_busy_st_5[2:0];
    6'h06   : gpr_rs3_busy_st[2:0] = reg_busy_st_6[2:0];
    6'h07   : gpr_rs3_busy_st[2:0] = reg_busy_st_7[2:0];
    6'h08   : gpr_rs3_busy_st[2:0] = reg_busy_st_8[2:0];
    6'h09   : gpr_rs3_busy_st[2:0] = reg_busy_st_9[2:0];
    6'h0a   : gpr_rs3_busy_st[2:0] = reg_busy_st_10[2:0];
    6'h0b   : gpr_rs3_busy_st[2:0] = reg_busy_st_11[2:0];
    6'h0c   : gpr_rs3_busy_st[2:0] = reg_busy_st_12[2:0];
    6'h0d   : gpr_rs3_busy_st[2:0] = reg_busy_st_13[2:0];
    6'h0e   : gpr_rs3_busy_st[2:0] = reg_busy_st_14[2:0];
    6'h0f   : gpr_rs3_busy_st[2:0] = reg_busy_st_15[2:0];
    6'h10   : gpr_rs3_busy_st[2:0] = reg_busy_st_16[2:0];
    6'h11   : gpr_rs3_busy_st[2:0] = reg_busy_st_17[2:0];
    6'h12   : gpr_rs3_busy_st[2:0] = reg_busy_st_18[2:0];
    6'h13   : gpr_rs3_busy_st[2:0] = reg_busy_st_19[2:0];
    6'h14   : gpr_rs3_busy_st[2:0] = reg_busy_st_20[2:0];
    6'h15   : gpr_rs3_busy_st[2:0] = reg_busy_st_21[2:0];
    6'h16   : gpr_rs3_busy_st[2:0] = reg_busy_st_22[2:0];
    6'h17   : gpr_rs3_busy_st[2:0] = reg_busy_st_23[2:0];
    6'h18   : gpr_rs3_busy_st[2:0] = reg_busy_st_24[2:0];
    6'h19   : gpr_rs3_busy_st[2:0] = reg_busy_st_25[2:0];
    6'h1a   : gpr_rs3_busy_st[2:0] = reg_busy_st_26[2:0];
    6'h1b   : gpr_rs3_busy_st[2:0] = reg_busy_st_27[2:0];
    6'h1c   : gpr_rs3_busy_st[2:0] = reg_busy_st_28[2:0];
    6'h1d   : gpr_rs3_busy_st[2:0] = reg_busy_st_29[2:0];
    6'h1e   : gpr_rs3_busy_st[2:0] = reg_busy_st_30[2:0];
    6'h1f   : gpr_rs3_busy_st[2:0] = reg_busy_st_31[2:0];
    6'h20   : gpr_rs3_busy_st[2:0] = reg_busy_st_32[2:0];
    6'h21   : gpr_rs3_busy_st[2:0] = reg_busy_st_33[2:0];
    default : gpr_rs3_busy_st[2:0] = 3'bx;
endcase
// &CombEnd; @677
end

// &CombBeg; @679
always @( reg_busy_st_19[2:0]
       or reg_busy_st_31[2:0]
       or reg_busy_st_9[2:0]
       or reg_busy_st_21[2:0]
       or reg_busy_st_16[2:0]
       or reg_busy_st_14[2:0]
       or reg_busy_st_33[2:0]
       or reg_busy_st_25[2:0]
       or ctrl_gpr_id_wr_idx[5:0]
       or reg_busy_st_15[2:0]
       or reg_busy_st_26[2:0]
       or reg_busy_st_20[2:0]
       or reg_busy_st_17[2:0]
       or reg_busy_st_1[2:0]
       or reg_busy_st_32[2:0]
       or reg_busy_st_18[2:0]
       or reg_busy_st_5[2:0]
       or reg_busy_st_22[2:0]
       or reg_busy_st_27[2:0]
       or reg_busy_st_29[2:0]
       or reg_busy_st_13[2:0]
       or reg_busy_st_24[2:0]
       or reg_busy_st_23[2:0]
       or reg_busy_st_2[2:0]
       or reg_busy_st_30[2:0]
       or reg_busy_st_7[2:0]
       or reg_busy_st_6[2:0]
       or reg_busy_st_28[2:0]
       or reg_busy_st_10[2:0]
       or reg_busy_st_11[2:0]
       or reg_busy_st_3[2:0]
       or reg_busy_st_4[2:0]
       or reg_busy_st_8[2:0]
       or reg_busy_st_12[2:0])
begin
case(ctrl_gpr_id_wr_idx[5:0])
    6'h00   : gpr_rd_busy_st[2:0] = 3'b0;
    6'h01   : gpr_rd_busy_st[2:0] = reg_busy_st_1[2:0];
    6'h02   : gpr_rd_busy_st[2:0] = reg_busy_st_2[2:0];
    6'h03   : gpr_rd_busy_st[2:0] = reg_busy_st_3[2:0];
    6'h04   : gpr_rd_busy_st[2:0] = reg_busy_st_4[2:0];
    6'h05   : gpr_rd_busy_st[2:0] = reg_busy_st_5[2:0];
    6'h06   : gpr_rd_busy_st[2:0] = reg_busy_st_6[2:0];
    6'h07   : gpr_rd_busy_st[2:0] = reg_busy_st_7[2:0];
    6'h08   : gpr_rd_busy_st[2:0] = reg_busy_st_8[2:0];
    6'h09   : gpr_rd_busy_st[2:0] = reg_busy_st_9[2:0];
    6'h0a   : gpr_rd_busy_st[2:0] = reg_busy_st_10[2:0];
    6'h0b   : gpr_rd_busy_st[2:0] = reg_busy_st_11[2:0];
    6'h0c   : gpr_rd_busy_st[2:0] = reg_busy_st_12[2:0];
    6'h0d   : gpr_rd_busy_st[2:0] = reg_busy_st_13[2:0];
    6'h0e   : gpr_rd_busy_st[2:0] = reg_busy_st_14[2:0];
    6'h0f   : gpr_rd_busy_st[2:0] = reg_busy_st_15[2:0];
    6'h10   : gpr_rd_busy_st[2:0] = reg_busy_st_16[2:0];
    6'h11   : gpr_rd_busy_st[2:0] = reg_busy_st_17[2:0];
    6'h12   : gpr_rd_busy_st[2:0] = reg_busy_st_18[2:0];
    6'h13   : gpr_rd_busy_st[2:0] = reg_busy_st_19[2:0];
    6'h14   : gpr_rd_busy_st[2:0] = reg_busy_st_20[2:0];
    6'h15   : gpr_rd_busy_st[2:0] = reg_busy_st_21[2:0];
    6'h16   : gpr_rd_busy_st[2:0] = reg_busy_st_22[2:0];
    6'h17   : gpr_rd_busy_st[2:0] = reg_busy_st_23[2:0];
    6'h18   : gpr_rd_busy_st[2:0] = reg_busy_st_24[2:0];
    6'h19   : gpr_rd_busy_st[2:0] = reg_busy_st_25[2:0];
    6'h1a   : gpr_rd_busy_st[2:0] = reg_busy_st_26[2:0];
    6'h1b   : gpr_rd_busy_st[2:0] = reg_busy_st_27[2:0];
    6'h1c   : gpr_rd_busy_st[2:0] = reg_busy_st_28[2:0];
    6'h1d   : gpr_rd_busy_st[2:0] = reg_busy_st_29[2:0];
    6'h1e   : gpr_rd_busy_st[2:0] = reg_busy_st_30[2:0];
    6'h1f   : gpr_rd_busy_st[2:0] = reg_busy_st_31[2:0];
    6'h20   : gpr_rd_busy_st[2:0] = reg_busy_st_32[2:0];
    6'h21   : gpr_rd_busy_st[2:0] = reg_busy_st_33[2:0];
    default : gpr_rd_busy_st[2:0] = 3'bx;
endcase
// &CombEnd; @717
end

assign gpr_rs1_inc_wr   = decd_gpr_ldi_vld || decd_gpr_sti_vld;

assign gpr_rd_hit_wb_lsu = ctrl_gpr_id_wr_idx[5:0] == write_index1[5:0]
                       && ctrl_gpr_id_wr_idx[5:0] != 6'b0
                       && rtu_idu_wb_lsu_vld;
assign gpr_rd_hit_wb_rbus = ctrl_gpr_id_wr_idx[5:0] == write_index0[5:0]
                       && ctrl_gpr_id_wr_idx[5:0] != 6'b0
                       && rtu_idu_wb_rbus_vld;

assign gpr_rs1_busy = gpr_rs1_busy_st[2:0] == BUSY1 && !gpr_rs1_dep_wb && !dp_gpr_rs1_fwd
                   || gpr_rs1_busy_st[2:0] == BUSY2 && !gpr_rs1_dep_wb && !dp_gpr_rs1_fwd;
assign gpr_rs2_busy = gpr_rs2_busy_st[2:0] == BUSY1 && !gpr_rs2_dep_wb && !dp_gpr_rs2_fwd
                   || gpr_rs2_busy_st[2:0] == BUSY2 && !gpr_rs2_dep_wb && !dp_gpr_rs2_fwd;
assign gpr_rs3_busy = gpr_rs3_busy_st[2:0] == BUSY1 && !gpr_rs3_dep_wb && !dp_gpr_rs3_fwd
                   || gpr_rs3_busy_st[2:0] == BUSY2 && !gpr_rs3_dep_wb && !dp_gpr_rs3_fwd;
assign gpr_rd_busy  = gpr_rd_busy_st[2:0] == BUSY2 && !gpr_rd_hit_wb_rbus
                   || gpr_rs1_busy_st[2:0] == BUSY2 && gpr_rs1_inc_wr && !gpr_rs1_dep_wb_rbus;

assign gpr_rs1_busy_lsu = gpr_rs1_busy_st[2:0] == BUSY_LSU1 && !gpr_rs1_dep_wb && !dp_gpr_rs1_fwd_lsu
                       || gpr_rs1_busy_st[2:0] == BUSY_LSU2 && !(gpr_rs1_dep_wb && dp_gpr_rs1_fwd_lsu);
assign gpr_rs2_busy_lsu = gpr_rs2_busy_st[2:0] == BUSY_LSU1 && !gpr_rs2_dep_wb && !dp_gpr_rs2_fwd_lsu
                       || gpr_rs2_busy_st[2:0] == BUSY_LSU2 && !(gpr_rs2_dep_wb && dp_gpr_rs2_fwd_lsu);
assign gpr_rs3_busy_lsu = gpr_rs3_busy_st[2:0] == BUSY_LSU1 && !gpr_rs3_dep_wb && !dp_gpr_rs3_fwd_lsu
                       || gpr_rs3_busy_st[2:0] == BUSY_LSU2 && !(gpr_rs3_dep_wb && dp_gpr_rs3_fwd_lsu);
assign gpr_rd_busy_lsu  = gpr_rd_busy_st[2:0] == BUSY_LSU1 && !ctrl_gpr_ld_inst && !gpr_rd_hit_wb_lsu
                       || gpr_rd_busy_st[2:0] == BUSY_LSU2 && !(ctrl_gpr_ld_inst && gpr_rd_hit_wb_lsu)
                       || gpr_rs1_busy_st[2:0] == BUSY_LSU1 && gpr_rs1_inc_wr && !gpr_rs1_dep_wb_lsu
                       || gpr_rs1_busy_st[2:0] == BUSY_LSU2 && gpr_rs1_inc_wr;

assign gpr_rs1_busy_div = gpr_rs1_busy_st[2:0] == BUSY_DIV1 && !gpr_rs1_dep_wb && !dp_gpr_rs1_fwd_div
                       || gpr_rs1_busy_st[2:0] == BUSY_DIV2 && !(gpr_rs1_dep_wb && dp_gpr_rs1_fwd_div);
assign gpr_rs2_busy_div = gpr_rs2_busy_st[2:0] == BUSY_DIV1 && !gpr_rs2_dep_wb && !dp_gpr_rs2_fwd_div
                       || gpr_rs2_busy_st[2:0] == BUSY_DIV2 && !(gpr_rs2_dep_wb && dp_gpr_rs2_fwd_div);
assign gpr_rs3_busy_div = gpr_rs3_busy_st[2:0] == BUSY_DIV1 && !gpr_rs3_dep_wb && !dp_gpr_rs3_fwd_div
                       || gpr_rs3_busy_st[2:0] == BUSY_DIV2 && !(gpr_rs3_dep_wb && dp_gpr_rs3_fwd_div);
assign gpr_rd_busy_div  = gpr_rd_busy_st[2:0] == BUSY_DIV1 && !gpr_rd_hit_wb_rbus
                       || gpr_rd_busy_st[2:0] == BUSY_DIV2
                       || gpr_rs1_busy_st[2:0] == BUSY_DIV1 && gpr_rs1_inc_wr && !gpr_rs1_dep_wb_rbus
                       || gpr_rs1_busy_st[2:0] == BUSY_DIV2;




assign gpr_dp_rs1[31:0] = gpr_read_data1_after_hint[31:0];
assign gpr_dp_rs2[31:0] = gpr_read_data2_after_hint[31:0];
assign gpr_dp_rs3[31:0] = gpr_read_data3[31:0];

assign gpr_ctrl_rs1_busy     = gpr_rs1_busy && decd_gpr_rs1_vld;
assign gpr_ctrl_rs2_busy     = gpr_rs2_busy && decd_gpr_rs2_vld;
assign gpr_ctrl_rs3_busy     = gpr_rs3_busy && decd_gpr_rs3_vld;
assign gpr_ctrl_rd_busy      = gpr_rd_busy && (decd_gpr_rd_vld || decd_gpr_sti_vld);
assign gpr_ctrl_rs1_busy_lsu = gpr_rs1_busy_lsu && decd_gpr_rs1_vld;
assign gpr_ctrl_rs2_busy_lsu = gpr_rs2_busy_lsu && decd_gpr_rs2_vld;
assign gpr_ctrl_rs3_busy_lsu = gpr_rs3_busy_lsu && decd_gpr_rs3_vld;
assign gpr_ctrl_rd_busy_lsu  = gpr_rd_busy_lsu && (decd_gpr_rd_vld || decd_gpr_sti_vld);
assign gpr_ctrl_rs1_busy_div = gpr_rs1_busy_div && decd_gpr_rs1_vld;
assign gpr_ctrl_rs2_busy_div = gpr_rs2_busy_div && decd_gpr_rs2_vld;
assign gpr_ctrl_rs3_busy_div = gpr_rs3_busy_div && decd_gpr_rs3_vld;
assign gpr_ctrl_rd_busy_div  = gpr_rd_busy_div && (decd_gpr_rd_vld || decd_gpr_sti_vld);
assign gpr_ctrl_rs1_busy_lsu2 = gpr_rs1_busy_st[2:0] == BUSY_LSU2 && !gpr_rs1_dep_wb_lsu;
assign gpr_ctrl_rs2_busy_lsu2 = gpr_rs2_busy_st[2:0] == BUSY_LSU2 && !gpr_rs2_dep_wb_lsu;
assign gpr_ctrl_rs3_busy_lsu2 = gpr_rs3_busy_st[2:0] == BUSY_LSU2 && !gpr_rs3_dep_wb_lsu;

assign gpr_hs_sp_wb          = gpr_wb_sp;
assign gpr_hs_sp_busy        = {reg_busy_st_2[2:0]} != IDLE
                            && (reg_busy_st_2[2] || !gpr_wb_sp);

assign idu_ifu_x1[31:0]      = reg_dout_1[31:0];

assign idu_cp0_sp_reg[31:0]  = gpr_wb_sp ? reg_write_en1[2] ? rtu_idu_wb_lsu_data[31:0] : rtu_idu_wb_rbus_data[31:0]
                             : reg_dout_2[31:0];

assign idu_cp0_mepc_wen        = reg_write_en_hint1[0] && hs_gpr_wb_mask;
assign idu_cp0_mcause_wen      = reg_write_en_hint1[1] && hs_gpr_wb_mask;
assign idu_cp0_ipop_data[31:0] = rtu_idu_wb_lsu_data[31:0];

// &ModuleEnd; @795
endmodule
























// &ModuleBeg; @23
module pa_idu_hs(
  cp0_idu_spec_push_en,
  cp0_idu_swap_sp_en,
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_hs_be_idle,
  ctrl_hs_no_op,
  ctrl_hs_stall,
  decd_hs_ipop_vld,
  decd_hs_ipush_vld,
  forever_cpuclk,
  gpr_hs_sp_busy,
  gpr_hs_sp_wb,
  hd_dp_rs2_sel,
  hs_ctrl_cancel,
  hs_ctrl_inst_vld,
  hs_ctrl_spec_ipush,
  hs_ctrl_stall,
  hs_decd_dp_vld,
  hs_decd_dst_vld,
  hs_decd_func,
  hs_decd_imm,
  hs_decd_imm_vld,
  hs_decd_rd,
  hs_decd_rs1,
  hs_decd_rs1_vld,
  hs_decd_rs2,
  hs_decd_rs2_imm_vld,
  hs_decd_rs2_vld,
  hs_decd_sel,
  hs_decd_split,
  hs_decd_sub_func,
  hs_dp_ipop_int_mask,
  hs_dp_ipop_tail,
  hs_dp_ipush_spec_fail,
  hs_dp_mie_en,
  hs_dp_rs2_mcause,
  hs_dp_rs2_mepc,
  hs_gpr_wb_mask,
  hs_gpr_wr_mask,
  idu_cp0_sp_swap_pending,
  idu_cp0_sp_swap_req,
  idu_cp0_sp_swap_req_gate,
  idu_iu_tail_fail,
  idu_iu_tail_fail_gate,
  idu_rtu_ipush_spec,
  idu_rtu_tail_fail,
  idu_yy_xx_tail_ack,
  ifu_idu_chgflw_flush,
  ifu_idu_id_inst_vld,
  pad_yy_gate_clk_en_b,
  rtu_idu_id_cancel,
  rtu_idu_id_tail_int_vld,
  rtu_idu_int_vld_raw,
  rtu_idu_late_flush,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_flush
);

// &Ports; @24
input           cp0_idu_spec_push_en;
input           cp0_idu_swap_sp_en;
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_hs_be_idle;
input           ctrl_hs_no_op;
input           ctrl_hs_stall;
input           decd_hs_ipop_vld;
input           decd_hs_ipush_vld;
input           forever_cpuclk;
input           gpr_hs_sp_busy;
input           gpr_hs_sp_wb;
input           ifu_idu_chgflw_flush;
input           ifu_idu_id_inst_vld;
input           pad_yy_gate_clk_en_b;
input           rtu_idu_id_cancel;
input           rtu_idu_id_tail_int_vld;
input           rtu_idu_int_vld_raw;
input           rtu_idu_late_flush;
input           rtu_yy_xx_expt_int;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_flush;
output          hd_dp_rs2_sel;
output          hs_ctrl_cancel;
output          hs_ctrl_inst_vld;
output          hs_ctrl_spec_ipush;
output          hs_ctrl_stall;
output          hs_decd_dp_vld;
output          hs_decd_dst_vld;
output  [4 :0]  hs_decd_func;
output  [31:0]  hs_decd_imm;
output          hs_decd_imm_vld;
output  [5 :0]  hs_decd_rd;
output  [5 :0]  hs_decd_rs1;
output          hs_decd_rs1_vld;
output  [5 :0]  hs_decd_rs2;
output          hs_decd_rs2_imm_vld;
output          hs_decd_rs2_vld;
output  [5 :0]  hs_decd_sel;
output          hs_decd_split;
output  [4 :0]  hs_decd_sub_func;
output          hs_dp_ipop_int_mask;
output          hs_dp_ipop_tail;
output          hs_dp_ipush_spec_fail;
output          hs_dp_mie_en;
output          hs_dp_rs2_mcause;
output          hs_dp_rs2_mepc;
output          hs_gpr_wb_mask;
output          hs_gpr_wr_mask;
output          idu_cp0_sp_swap_pending;
output          idu_cp0_sp_swap_req;
output          idu_cp0_sp_swap_req_gate;
output          idu_iu_tail_fail;
output          idu_iu_tail_fail_gate;
output          idu_rtu_ipush_spec;
output          idu_rtu_tail_fail;
output          idu_yy_xx_tail_ack;

// &Regs; @25
reg             hs_speed_up_en;
reg     [2 :0]  ipop_cur_st;
reg     [2 :0]  ipop_nxt_st;
reg             ipop_split_ag_imm_vld;
reg             ipop_split_dst_vld;
reg     [4 :0]  ipop_split_func;
reg     [31:0]  ipop_split_imm;
reg     [5 :0]  ipop_split_sel;
reg     [4 :0]  ipop_split_sub_func;
reg     [2 :0]  ipush_cur_st;
reg     [2 :0]  ipush_nxt_st;
reg             ipush_spec_flag;
reg             ipush_split_ag_imm_vld;
reg             ipush_split_dst_vld;
reg     [4 :0]  ipush_split_func;
reg     [31:0]  ipush_split_imm_pos;
reg     [5 :0]  ipush_split_sel;
reg     [4 :0]  ipush_split_sub_func;
reg             sp_wb_pending;
reg     [3 :0]  stack_cnt;

// &Wires; @26
wire            cnt_inc_vld;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_hs_be_idle;
wire            ctrl_hs_no_op;
wire            ctrl_hs_stall;
wire            decd_hs_ipop_vld;
wire            decd_hs_ipush_vld;
wire            forever_cpuclk;
wire            gpr_hs_sp_busy;
wire            gpr_hs_sp_wb;
wire            hd_dp_rs2_sel;
wire            hs_cpuclk;
wire            hs_ctrl_cancel;
wire            hs_ctrl_inst_vld;
wire            hs_ctrl_spec_ipush;
wire            hs_ctrl_stall;
wire            hs_decd_dp_vld;
wire            hs_decd_dst_vld;
wire    [4 :0]  hs_decd_func;
wire    [31:0]  hs_decd_imm;
wire            hs_decd_imm_vld;
wire    [5 :0]  hs_decd_rd;
wire    [5 :0]  hs_decd_rs1;
wire            hs_decd_rs1_vld;
wire    [5 :0]  hs_decd_rs2;
wire            hs_decd_rs2_imm_vld;
wire            hs_decd_rs2_vld;
wire    [5 :0]  hs_decd_sel;
wire            hs_decd_split;
wire    [4 :0]  hs_decd_sub_func;
wire            hs_dp_ipop_int_mask;
wire            hs_dp_ipop_tail;
wire            hs_dp_ipush_spec_fail;
wire            hs_dp_mie_en;
wire            hs_dp_rs2_mcause;
wire            hs_dp_rs2_mepc;
wire            hs_gpr_wb_mask;
wire            hs_gpr_wr_mask;
wire            hs_icg_en;
wire            hs_id_inst_vld;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_iu_tail_fail;
wire            idu_iu_tail_fail_gate;
wire            idu_rtu_ipush_spec;
wire            idu_rtu_tail_fail;
wire            idu_yy_xx_tail_ack;
wire            ifu_idu_chgflw_flush;
wire            ifu_idu_id_inst_vld;
wire            ipop_addsp_st;
wire            ipop_idle_st;
wire            ipop_inst_vld;
wire            ipop_ldepc_st;
wire    [31:0]  ipop_ldgpr_imm;
wire            ipop_ldgpr_st;
wire            ipop_ldmce_st;
wire            ipop_req_vld;
wire            ipop_rs2_imm_vld;
wire            ipop_rte_st;
wire            ipop_split_first;
wire            ipop_split_inst_vld;
wire            ipop_split_last;
wire    [5 :0]  ipop_split_ld_rd;
wire    [5 :0]  ipop_split_rd;
wire    [5 :0]  ipop_split_rs1;
wire            ipop_split_rs1_vld;
wire            ipop_split_stall;
wire            ipop_stall_relax;
wire            ipop_tail_fail;
wire            ipop_tail_hs;
wire            ipop_tail_st;
wire            ipop_tail_vld;
wire            ipush_check_fail;
wire            ipush_check_pass;
wire            ipush_check_ready;
wire            ipush_idle_st;
wire            ipush_inst_vld;
wire            ipush_mcause_rs2_vld;
wire            ipush_mepc_rs2_vld;
wire            ipush_req_vld;
wire            ipush_rs2_imm_vld;
wire            ipush_spec_clr;
wire            ipush_spec_vld;
wire    [31:0]  ipush_split_imm;
wire            ipush_split_inst_vld;
wire            ipush_split_last;
wire    [5 :0]  ipush_split_rd;
wire    [5 :0]  ipush_split_rs1;
wire            ipush_split_rs1_vld;
wire    [5 :0]  ipush_split_rs2;
wire            ipush_split_rs2_vld;
wire            ipush_split_stall;
wire            ipush_stall_relax;
wire            ipush_stepc_st;
wire    [31:0]  ipush_stgpr_imm;
wire            ipush_stgpr_st;
wire            ipush_stmce_st;
wire            ipush_subsp_st;
wire            pad_yy_gate_clk_en_b;
wire            rtu_idu_id_cancel;
wire            rtu_idu_id_tail_int_vld;
wire            rtu_idu_int_vld_raw;
wire            rtu_idu_late_flush;
wire            rtu_yy_xx_expt_int;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_flush;
wire            stack_cnt_done;
wire            stack_cnt_gpra;
wire            stack_cnt_gprb;
wire            stack_cnt_gprc;
wire            stack_cnt_gprd;
















assign hs_icg_en = ipush_req_vld || !ipush_idle_st
                || ipop_req_vld  || !ipop_idle_st
                || sp_wb_pending
                || hs_speed_up_en;

// &Instance("gated_clk_cell", "x_idu_hs_icg_cell"); @47
gated_clk_cell  x_idu_hs_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (hs_cpuclk           ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (hs_icg_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @48
//          .external_en (1'b0), @49
//          .global_en   (cp0_yy_clk_en), @50
//          .module_en   (1'b0), @51
//          .local_en    (hs_icg_en), @52
//          .clk_out     (hs_cpuclk) @53
//         ); @54









parameter IPUSH_IDLE = 3'b000;
parameter ST_MEPC    = 3'b001;
parameter ST_MCAUSE  = 3'b010;
parameter ST_GPR     = 3'b011;
parameter SUB_SP     = 3'b111;

always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipush_cur_st[2:0] <= IPUSH_IDLE;
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || ifu_idu_chgflw_flush)
    ipush_cur_st[2:0] <= IPUSH_IDLE;
  else if(!ctrl_hs_stall || rtu_idu_int_vld_raw)
    ipush_cur_st[2:0] <= ipush_nxt_st[2:0];
end

assign hs_id_inst_vld = ifu_idu_id_inst_vld && !rtu_idu_id_cancel;
assign ipush_inst_vld = rtu_idu_int_vld_raw && cp0_idu_spec_push_en && (ipop_idle_st || rtu_yy_xx_expt_vld)
                     || hs_id_inst_vld && decd_hs_ipush_vld && ipop_idle_st;
assign ipush_req_vld  = ipush_inst_vld && !hs_speed_up_en;

assign ipush_check_ready = hs_id_inst_vld;
assign ipush_check_pass  = hs_id_inst_vld &&  decd_hs_ipush_vld
                        && (ipush_stgpr_st || ipush_subsp_st);
assign ipush_check_fail  = hs_id_inst_vld && !decd_hs_ipush_vld && ipush_spec_flag
                        && (ipush_stgpr_st || ipush_subsp_st);

// &CombBeg; @91
always @( ctrl_hs_no_op
       or ipush_check_fail
       or ipush_check_ready
       or ipush_inst_vld
       or ipush_spec_flag
       or ipush_cur_st[2:0]
       or stack_cnt_done)
begin
case(ipush_cur_st[2:0])
  IPUSH_IDLE:
  begin
    if(ipush_inst_vld)
      ipush_nxt_st[2:0] = ST_MEPC;
    else
      ipush_nxt_st[2:0] = IPUSH_IDLE;
  end
  ST_MEPC:
  begin
    if(ctrl_hs_no_op)
      ipush_nxt_st[2:0] = ST_MCAUSE;
    else
      ipush_nxt_st[2:0] = ST_MEPC;
  end
  ST_MCAUSE:
  begin
    ipush_nxt_st[2:0] = ST_GPR;
  end
  ST_GPR:
  begin
    if(ipush_check_fail)
      ipush_nxt_st[2:0] = IPUSH_IDLE;
    else if(stack_cnt_done)
      ipush_nxt_st[2:0] = SUB_SP;
    else
      ipush_nxt_st[2:0] = ST_GPR;
  end
  SUB_SP:
  begin
    if(ipush_spec_flag)
      if(ipush_check_ready)
        ipush_nxt_st[2:0] = IPUSH_IDLE;
      else
        ipush_nxt_st[2:0] = SUB_SP;
    else
      ipush_nxt_st[2:0] = IPUSH_IDLE;
  end
  default:
  begin
    ipush_nxt_st[2:0] = IPUSH_IDLE;
  end
endcase
// &CombEnd; @135
end


assign ipush_idle_st  = ipush_cur_st[2:0] == IPUSH_IDLE;
assign ipush_stepc_st = ipush_cur_st[2:0] == ST_MEPC;
assign ipush_stmce_st = ipush_cur_st[2:0] == ST_MCAUSE;
assign ipush_stgpr_st = ipush_cur_st[2:0] == ST_GPR;
assign ipush_subsp_st = ipush_cur_st[2:0] == SUB_SP;




assign ipush_spec_vld = rtu_idu_int_vld_raw && cp0_idu_spec_push_en && (ipop_idle_st || rtu_yy_xx_expt_vld);
assign ipush_spec_clr = (ipush_check_fail || ipush_subsp_st && ipush_check_ready) && !ctrl_hs_stall;

always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipush_spec_flag <= 1'b0;
  else if(ipush_spec_vld)
    ipush_spec_flag <= 1'b1;
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || ifu_idu_chgflw_flush)
    ipush_spec_flag <= 1'b0;
  else if(ipush_spec_clr)
    ipush_spec_flag <= 1'b0;
  else
    ipush_spec_flag <= ipush_spec_flag;
end


always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    sp_wb_pending <= 1'b0;
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || ifu_idu_chgflw_flush)
    sp_wb_pending <= 1'b0;
  else if(rtu_yy_xx_expt_vld && rtu_yy_xx_expt_int && cp0_idu_swap_sp_en)
    sp_wb_pending <= gpr_hs_sp_busy;
  else if(sp_wb_pending && gpr_hs_sp_wb)
    sp_wb_pending <= 1'b0;
  else
    sp_wb_pending <= sp_wb_pending;
end





assign ipop_tail_hs  = ipop_tail_st && hs_id_inst_vld && decd_hs_ipush_vld;

always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    hs_speed_up_en <= 1'b0;
  else if(rtu_yy_xx_flush || rtu_idu_int_vld_raw || ifu_idu_chgflw_flush)
    hs_speed_up_en <= 1'b0;


  else if(hs_speed_up_en && !ctrl_hs_stall)
    hs_speed_up_en <= 1'b0;
  else
    hs_speed_up_en <= hs_speed_up_en;
end




assign cnt_inc_vld = ipush_stgpr_st || ipop_ldgpr_st;
always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    stack_cnt[3:0] <= 4'b0;
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || rtu_yy_xx_expt_vld || ifu_idu_chgflw_flush)
    stack_cnt[3:0] <= 4'b0;
  else if(ipush_check_fail)
    stack_cnt[3:0] <= 4'b0;
  else if(ipop_tail_fail)
    stack_cnt[3:0] <= 4'b0;
  else if(cnt_inc_vld && !ctrl_hs_stall)
    stack_cnt[3:0] <= stack_cnt[3:0] + 4'b1;
  else
    stack_cnt[3:0] <= stack_cnt[3:0];
end

assign stack_cnt_done = stack_cnt[3:0] == 4'hf;

assign stack_cnt_gpra = stack_cnt[3:0] == 4'h0;  // X1
assign stack_cnt_gprb = stack_cnt[3:2] == 2'b00 && stack_cnt[1:0] != 2'b0; // X5~X7
assign stack_cnt_gprc = stack_cnt[3:2] == 2'b01  // X10~X13
                     || stack_cnt[3:2] == 2'b10; // X14~X17
assign stack_cnt_gprd = stack_cnt[3:2] == 2'b11; // X28~X31






parameter IPOP_IDLE = 3'b000;
parameter LD_GPR    = 3'b001;
parameter LD_MCAUSE = 3'b010;
parameter LD_MEPC   = 3'b011;
parameter ADD_SP    = 3'b100;
parameter IPOP_RTE  = 3'b110;
parameter IPOP_TAIL = 3'b111;

always@(posedge hs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipop_cur_st[2:0] <= IPOP_IDLE;
  else if(rtu_yy_xx_flush && !rtu_idu_late_flush || rtu_yy_xx_expt_vld || ifu_idu_chgflw_flush)
    ipop_cur_st[2:0] <= IPOP_IDLE;
  else if(!ctrl_hs_stall)
    ipop_cur_st[2:0] <= ipop_nxt_st[2:0];
end

assign ipop_inst_vld = hs_id_inst_vld && decd_hs_ipop_vld && (ipush_idle_st || ipush_check_fail);
assign ipop_req_vld  = ipop_inst_vld && !hs_speed_up_en;
assign ipop_tail_vld = rtu_idu_id_tail_int_vld && cp0_idu_spec_push_en;

// &CombBeg; @254
always @( ipop_cur_st[2:0]
       or decd_hs_ipush_vld
       or ipop_tail_vld
       or hs_id_inst_vld
       or ipop_req_vld
       or stack_cnt_done)
begin
case(ipop_cur_st[2:0])
  IPOP_IDLE:
  begin
    if(ipop_req_vld)
      if(ipop_tail_vld)
        ipop_nxt_st[2:0] = IPOP_TAIL;
      else
        ipop_nxt_st[2:0] = LD_GPR;
    else
      ipop_nxt_st[2:0] = IPOP_IDLE;
  end
  LD_GPR:
  begin
    if(stack_cnt_done)
      ipop_nxt_st[2:0] = LD_MCAUSE;
    else
      ipop_nxt_st[2:0] = LD_GPR;
  end
  LD_MCAUSE:
  begin
    ipop_nxt_st[2:0] = LD_MEPC;
  end
  LD_MEPC:
  begin
    ipop_nxt_st[2:0] = ADD_SP;
  end
  ADD_SP:
  begin
    ipop_nxt_st[2:0] = IPOP_RTE;
  end
  IPOP_RTE:
  begin
    ipop_nxt_st[2:0] = IPOP_IDLE;
  end
  IPOP_TAIL:
  begin
    if(hs_id_inst_vld)
      if(decd_hs_ipush_vld)
        ipop_nxt_st[2:0] = IPOP_IDLE;
      else
        ipop_nxt_st[2:0] = LD_GPR;
    else
      ipop_nxt_st[2:0] = IPOP_TAIL;
  end
  default:
  begin
    ipop_nxt_st[2:0] = IPOP_IDLE;
  end
endcase
// &CombEnd; @304
end


assign ipop_idle_st  = ipop_cur_st[2:0] == IPOP_IDLE;
assign ipop_ldgpr_st = ipop_cur_st[2:0] == LD_GPR;
assign ipop_ldmce_st = ipop_cur_st[2:0] == LD_MCAUSE;
assign ipop_ldepc_st = ipop_cur_st[2:0] == LD_MEPC;
assign ipop_addsp_st = ipop_cur_st[2:0] == ADD_SP;
assign ipop_rte_st   = ipop_cur_st[2:0] == IPOP_RTE;
assign ipop_tail_st  = ipop_cur_st[2:0] == IPOP_TAIL;


assign ipop_tail_fail  = ipop_tail_st && hs_id_inst_vld && !decd_hs_ipush_vld;







parameter SEL_WIDTH       = 6;
parameter FUNC_WIDTH      = 5;
parameter SUB_FUNC_WIDTH  = 5;


parameter ALU = 6'b000001;
parameter LSU = 6'b010000;
parameter CP0 = 6'b100000;



parameter ADDER  = 5'b00001;


parameter ADD    = 5'b00001;
parameter SUB    = 5'b00000;



parameter WORD   = 5'b00010;


parameter LD     = 5'b00000;
parameter ST     = 5'b00001;



parameter SYS    = 5'b00100;


parameter MRET   = 5'b00100;



// &CombBeg; @358
always @( ipush_stgpr_imm[31:0]
       or hs_speed_up_en
       or ipush_cur_st[2:0])
begin
case(ipush_cur_st[2:0])
  ST_MEPC:
  begin
    ipush_split_sel[SEL_WIDTH-1:0]           = hs_speed_up_en ? ALU : LSU;
    ipush_split_func[FUNC_WIDTH-1:0]         = hs_speed_up_en ? ADDER : WORD;
    ipush_split_sub_func[SUB_FUNC_WIDTH-1:0] = hs_speed_up_en ? ADD : ST;
    ipush_split_ag_imm_vld                   = 1'b1;
    ipush_split_dst_vld                      = 1'b0;
    ipush_split_imm_pos[31:0]                = 32'h4;
  end
  ST_MCAUSE:
  begin
    ipush_split_sel[SEL_WIDTH-1:0]           = LSU;
    ipush_split_func[FUNC_WIDTH-1:0]         = WORD;
    ipush_split_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
    ipush_split_ag_imm_vld                   = 1'b1;
    ipush_split_dst_vld                      = 1'b0;
    ipush_split_imm_pos[31:0]                = 32'h8;
  end
  ST_GPR:
  begin
    ipush_split_sel[SEL_WIDTH-1:0]           = LSU;
    ipush_split_func[FUNC_WIDTH-1:0]         = WORD;
    ipush_split_sub_func[SUB_FUNC_WIDTH-1:0] = ST;
    ipush_split_ag_imm_vld                   = 1'b1;
    ipush_split_dst_vld                      = 1'b0;
    ipush_split_imm_pos[31:0]                = ipush_stgpr_imm[31:0];
  end
  SUB_SP:
  begin
    ipush_split_sel[SEL_WIDTH-1:0]           = ALU;
    ipush_split_func[FUNC_WIDTH-1:0]         = ADDER;
    ipush_split_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
    ipush_split_ag_imm_vld                   = 1'b0;
    ipush_split_dst_vld                      = 1'b1;
    ipush_split_imm_pos[31:0]                = 32'h48;
  end
  default:
  begin
    ipush_split_sel[SEL_WIDTH-1:0]           = {SEL_WIDTH{1'b0}};
    ipush_split_func[FUNC_WIDTH-1:0]         = {FUNC_WIDTH{1'b0}};
    ipush_split_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'b0}};
    ipush_split_ag_imm_vld                   = 1'b0;
    ipush_split_dst_vld                      = 1'b0;
    ipush_split_imm_pos[31:0]                = 32'h0;
  end
endcase
// &CombEnd; @406
end



assign ipush_split_rs1_vld  = !ipush_idle_st;
assign ipush_split_rs1[5:0] = 6'h2;


assign ipush_split_rs2_vld  = ipush_stgpr_st;
assign ipush_mepc_rs2_vld   = ipush_stepc_st;
assign ipush_mcause_rs2_vld = ipush_stmce_st;
assign ipush_split_rs2[5:0] = {6{stack_cnt_gpra}} & 6'd1
                            | {6{stack_cnt_gprb}} & ({2'b0, stack_cnt[3:0]} + 6'd4)
                            | {6{stack_cnt_gprc}} & ({2'b0, stack_cnt[3:0]} + 6'd6)
                            | {6{stack_cnt_gprd}} & ({2'b0, stack_cnt[3:0]} + 6'd16);


assign ipush_rs2_imm_vld     = ipush_subsp_st;
assign ipush_stgpr_imm[31:0] = {25'b0, {1'b0, stack_cnt[3:0]} + 5'b11, 2'b0};
assign ipush_split_imm[31:0] = ~ipush_split_imm_pos[31:0] + 1'b1;


assign ipush_split_rd[5:0]  = 6'h2;


assign ipush_split_inst_vld = ipush_stepc_st && ctrl_hs_no_op
                           || ipush_stmce_st
                           || ipush_stgpr_st
                           || ipush_subsp_st && ipush_spec_flag && ipush_check_pass
                           || ipush_subsp_st && !ipush_spec_flag;


assign ipush_stall_relax = //ipush_stgpr_st && ipush_spec_flag && ipush_check_fail
                           ipush_subsp_st && ipush_spec_flag && ipush_check_pass;
assign ipush_split_stall = !ipush_idle_st && !ipush_stall_relax;



assign ipush_split_last  = ipush_subsp_st;







// &CombBeg; @452
always @( ipop_cur_st[2:0]
       or ipop_ldgpr_imm[31:0])
begin
case(ipop_cur_st[2:0])
  LD_GPR:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = LSU;
    ipop_split_func[FUNC_WIDTH-1:0]         = WORD;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
    ipop_split_ag_imm_vld                   = 1'b1;
    ipop_split_dst_vld                      = 1'b1;
    ipop_split_imm[31:0]                    = ipop_ldgpr_imm[31:0];
  end
  LD_MCAUSE:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = LSU;
    ipop_split_func[FUNC_WIDTH-1:0]         = WORD;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
    ipop_split_ag_imm_vld                   = 1'b1;
    ipop_split_dst_vld                      = 1'b1;
    ipop_split_imm[31:0]                    = 32'h40;
  end
  LD_MEPC:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = LSU;
    ipop_split_func[FUNC_WIDTH-1:0]         = WORD;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = LD;
    ipop_split_ag_imm_vld                   = 1'b1;
    ipop_split_dst_vld                      = 1'b1;
    ipop_split_imm[31:0]                    = 32'h44;
  end
  ADD_SP:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = ALU;
    ipop_split_func[FUNC_WIDTH-1:0]         = ADDER;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
    ipop_split_ag_imm_vld                   = 1'b0;
    ipop_split_dst_vld                      = 1'b1;
    ipop_split_imm[31:0]                    = 32'h48;
  end
  IPOP_RTE:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = CP0;
    ipop_split_func[FUNC_WIDTH-1:0]         = SYS;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = MRET;
    ipop_split_ag_imm_vld                   = 1'b0;
    ipop_split_dst_vld                      = 1'b0;
    ipop_split_imm[31:0]                    = 32'h0;
  end
  IPOP_TAIL:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = ALU;
    ipop_split_func[FUNC_WIDTH-1:0]         = ADDER;
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
    ipop_split_ag_imm_vld                   = 1'b0;
    ipop_split_dst_vld                      = 1'b0;
    ipop_split_imm[31:0]                    = 32'h0;
  end
  default:
  begin
    ipop_split_sel[SEL_WIDTH-1:0]           = {SEL_WIDTH{1'b0}};
    ipop_split_func[FUNC_WIDTH-1:0]         = {FUNC_WIDTH{1'b0}};
    ipop_split_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'b0}};
    ipop_split_ag_imm_vld                   = 1'b0;
    ipop_split_dst_vld                      = 1'b0;
    ipop_split_imm[31:0]                    = 32'h0;
  end
endcase
// &CombEnd; @518
end


assign ipop_split_rs1_vld  = 1'b1;
assign ipop_split_rs1[5:0] = 6'h2;


assign ipop_rs2_imm_vld = ipop_addsp_st;
assign ipop_ldgpr_imm[31:0] = {26'h0, 4'hf-stack_cnt[3:0], 2'b0};





assign ipop_split_ld_rd[5:0] = {6{stack_cnt_gpra}} & 6'd1
                             | {6{stack_cnt_gprb}} & ({2'b0, stack_cnt[3:0]} + 6'd4)
                             | {6{stack_cnt_gprc}} & ({2'b0, stack_cnt[3:0]} + 6'd6)
                             | {6{stack_cnt_gprd}} & ({2'b0, stack_cnt[3:0]} + 6'd16);
assign ipop_split_rd[5:0] = ipop_addsp_st ? 6'd2  : ipop_ldepc_st ? 6'h20
                          : ipop_ldmce_st ? 6'h21 : ipop_split_ld_rd[5:0];


assign ipop_split_inst_vld = ipop_ldgpr_st
                          || ipop_ldepc_st
                          || ipop_ldmce_st
                          || ipop_addsp_st
                          || ipop_rte_st;


assign ipop_stall_relax = ipop_idle_st && ipop_tail_vld
                       || ipop_tail_hs;
assign ipop_split_stall = !ipop_idle_st && !ipop_stall_relax;


assign ipop_split_first = ipop_idle_st && ipop_req_vld;
assign ipop_split_last  = ipop_rte_st && ctrl_hs_be_idle;





assign hs_decd_dp_vld = !ipush_idle_st // && !ipush_check_fail
                     || !ipop_idle_st;
assign hs_decd_sel[SEL_WIDTH-1:0]  = ipush_split_sel[SEL_WIDTH-1:0] | ipop_split_sel[SEL_WIDTH-1:0];
assign hs_decd_func[FUNC_WIDTH-1:0] = ipush_split_func[FUNC_WIDTH-1:0]
                                    | ipop_split_func[FUNC_WIDTH-1:0];
assign hs_decd_sub_func[SUB_FUNC_WIDTH-1:0] = ipush_split_sub_func[SUB_FUNC_WIDTH-1:0]
                                            | ipop_split_sub_func[SUB_FUNC_WIDTH-1:0];

assign hs_decd_rs1_vld    = ipush_split_rs1_vld || ipop_split_rs1_vld;
assign hs_decd_rs1[5:0]   = ipush_split_rs1[5:0] | ipop_split_rs1[5:0];

assign hs_decd_rs2_vld    = ipush_split_rs2_vld;
assign hs_decd_rs2[5:0]   = ipush_split_rs2[5:0];

assign hs_decd_rs2_imm_vld = ipush_rs2_imm_vld || ipop_rs2_imm_vld;
assign hs_decd_imm_vld     = ipush_split_ag_imm_vld || ipop_split_ag_imm_vld;
assign hs_decd_imm[31:0]   = ipop_split_imm[31:0] | ipush_split_imm[31:0];

assign hs_decd_dst_vld    = ipush_split_dst_vld || ipop_split_dst_vld;
assign hs_decd_rd[5:0]    = ipush_subsp_st ? ipush_split_rd[5:0] : ipop_split_rd[5:0];
assign hs_decd_split      = !(ipush_split_last || ipop_split_last || ipop_tail_hs);


assign hs_ctrl_inst_vld   = ipush_split_inst_vld || ipop_split_inst_vld;
assign hs_ctrl_stall      = ipush_split_stall || ipop_split_stall;
assign hs_ctrl_spec_ipush = rtu_idu_int_vld_raw && cp0_idu_spec_push_en && ctrl_hs_no_op
                         && !hs_speed_up_en;
assign hs_ctrl_cancel     = ipush_idle_st && ipush_req_vld
                         || ipush_stepc_st && !ctrl_hs_no_op
                         || ipush_check_fail
                         || ipop_split_first && !ipop_tail_vld
                         || ipop_tail_fail;

assign hd_dp_rs2_sel      = !ipush_idle_st;
assign hs_dp_rs2_mepc     = ipush_mepc_rs2_vld;
assign hs_dp_rs2_mcause   = ipush_mcause_rs2_vld;
assign hs_dp_ipush_spec_fail = ipush_check_fail;
assign hs_dp_ipop_tail    = ipop_split_first && ipop_tail_vld && !ctrl_hs_stall;
assign hs_dp_mie_en       = ipush_subsp_st && ipush_spec_flag && ipush_check_pass
                         || ipush_subsp_st && !ipush_spec_flag;
assign hs_dp_ipop_int_mask = ipop_ldgpr_st || ipop_split_first && ipop_tail_vld;


assign hs_gpr_wr_mask     = ipop_ldmce_st || ipop_ldepc_st;
assign hs_gpr_wb_mask     = !ipop_idle_st;






assign idu_cp0_sp_swap_pending = sp_wb_pending;
assign idu_cp0_sp_swap_req     = rtu_yy_xx_expt_vld && rtu_yy_xx_expt_int && cp0_idu_swap_sp_en && !gpr_hs_sp_busy
                              || sp_wb_pending && gpr_hs_sp_wb;
assign idu_cp0_sp_swap_req_gate = rtu_idu_int_vld_raw && cp0_idu_swap_sp_en && !gpr_hs_sp_busy
                              || sp_wb_pending && gpr_hs_sp_wb;
assign idu_yy_xx_tail_ack      = ipop_tail_hs;


assign idu_rtu_ipush_spec      = ipush_spec_flag;
assign idu_rtu_tail_fail       = ipop_tail_fail;


assign idu_iu_tail_fail       = ipop_tail_fail;
assign idu_iu_tail_fail_gate  = ipop_tail_st && ifu_idu_id_inst_vld;

// &ModuleEnd; @629
endmodule
























// &ModuleBeg; @23
module pa_idu_reg32(
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_gpr_div_inst,
  ctrl_gpr_ld_inst,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  reg_busy_st_y,
  reg_dout_y,
  reg_write_en0_x,
  reg_write_en1_x,
  reg_write_en_gate0_x,
  reg_write_en_gate1_x,
  reg_write_is0_x,
  reg_write_is1_x,
  reg_write_is_gate0_x,
  reg_write_is_gate1_x,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_warm_up,
  rtu_yy_xx_flush,
  write_data0,
  write_data1
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_gpr_div_inst;
input           ctrl_gpr_ld_inst;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input           reg_write_en0_x;
input           reg_write_en1_x;
input           reg_write_en_gate0_x;
input           reg_write_en_gate1_x;
input           reg_write_is0_x;
input           reg_write_is1_x;
input           reg_write_is_gate0_x;
input           reg_write_is_gate1_x;
input           rtu_idu_wb_lsu_vld;
input           rtu_idu_wb_warm_up;
input           rtu_yy_xx_flush;
input   [31:0]  write_data0;
input   [31:0]  write_data1;
output  [2 :0]  reg_busy_st_y;
output  [31:0]  reg_dout_y;

// &Regs; @25
reg     [2 :0]  reg_cur_st;
reg     [31:0]  reg_dout;
reg     [2 :0]  reg_nxt_st;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_gpr_div_inst;
wire            ctrl_gpr_ld_inst;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;
wire    [2 :0]  reg_busy_st_y;
wire            reg_clk_en;
wire            reg_cpuclk;
wire    [31:0]  reg_dout_y;
wire            reg_sm_clk_en;
wire            reg_sm_cpuclk;
wire            reg_write_en0_x;
wire            reg_write_en1_x;
wire            reg_write_en_gate0_x;
wire            reg_write_en_gate1_x;
wire            reg_write_is0_x;
wire            reg_write_is1_x;
wire            reg_write_is_gate0_x;
wire            reg_write_is_gate1_x;
wire            rtu_idu_wb_lsu_vld;
wire            rtu_idu_wb_warm_up;
wire            rtu_yy_xx_flush;
wire    [31:0]  write_data0;
wire    [31:0]  write_data1;
wire    [31:0]  write_in_data;
wire            write_in_en;
wire            write_is_div_en;
wire            write_is_en;
wire            write_is_ld_en;





assign reg_clk_en = reg_write_en_gate0_x || reg_write_en_gate1_x || rtu_idu_wb_warm_up;
// &Instance("gated_clk_cell", "x_reg_gated_clk"); @32
gated_clk_cell  x_reg_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @33
//          .external_en (1'b0), @34
//          .global_en   (cp0_yy_clk_en), @35
//          .module_en   (1'b0), @36
//          .local_en    (reg_clk_en), @37
//          .clk_out     (reg_cpuclk)); @38

assign reg_sm_clk_en = reg_write_is_gate0_x || reg_write_is_gate1_x
                    || write_in_en || rtu_yy_xx_flush;
// &Instance("gated_clk_cell", "x_reg_sm_gated_clk"); @42
gated_clk_cell  x_reg_sm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_sm_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_sm_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @43
//          .external_en (1'b0), @44
//          .global_en   (cp0_yy_clk_en), @45
//          .module_en   (1'b0), @46
//          .local_en    (reg_sm_clk_en), @47
//          .clk_out     (reg_sm_cpuclk)); @48




assign write_in_en = reg_write_en0_x || reg_write_en1_x || rtu_idu_wb_warm_up;
assign write_is_en = reg_write_is0_x || reg_write_is1_x;
assign write_in_data[31:0] = reg_write_en1_x ? write_data1[31:0]
                           : reg_write_en0_x || rtu_idu_wb_warm_up ? write_data0[31:0]
                           : reg_dout[31:0];

assign write_is_ld_en  = reg_write_is0_x && ctrl_gpr_ld_inst;
assign write_is_div_en = write_is_en && ctrl_gpr_div_inst;

always @(posedge reg_cpuclk)
begin
  reg_dout[31:0] <= write_in_data[31:0];
end

parameter IDLE      = 3'b000;
parameter BUSY1     = 3'b001;
parameter BUSY_LSU1 = 3'b010;
parameter BUSY_DIV1 = 3'b011;
parameter BUSY2     = 3'b100;
parameter BUSY_LSU2 = 3'b110;
parameter BUSY_DIV2 = 3'b111;

always @(posedge reg_sm_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    reg_cur_st[2:0] <= IDLE;
  else if(rtu_yy_xx_flush)
    reg_cur_st[2:0] <= IDLE;
  else
    reg_cur_st[2:0] <= reg_nxt_st[2:0];
end

// &CombBeg; @85
always @( reg_cur_st[2:0]
       or write_is_div_en
       or write_in_en
       or write_is_en
       or rtu_idu_wb_lsu_vld
       or write_is_ld_en
       or ctrl_gpr_div_inst)
begin
case(reg_cur_st[2:0])
  IDLE:
  begin
    if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU1;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV1;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = IDLE;
  end
  BUSY1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY2;
    else
      reg_nxt_st[2:0] = BUSY1;
  end
  BUSY_LSU1:
  begin
    if(write_in_en && rtu_idu_wb_lsu_vld)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_ld_en)
      reg_nxt_st[2:0] = BUSY_LSU2;
    else
      reg_nxt_st[2:0] = BUSY_LSU1;
  end
  BUSY_DIV1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else
      reg_nxt_st[2:0] = BUSY_DIV1;
  end
  BUSY2:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU2;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV2;
        else
          reg_nxt_st[2:0] = BUSY2;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = BUSY2;
  end
  BUSY_DIV2:
  begin
    if(write_in_en)
      if(write_is_div_en)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY_DIV1;
    else
      reg_nxt_st[2:0] = BUSY_DIV2;
  end
  BUSY_LSU2:
  begin
    if(write_in_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else
        reg_nxt_st[2:0] = BUSY_LSU1;
    else
      reg_nxt_st[2:0] = BUSY_LSU2;
  end
  default:
  begin
    reg_nxt_st[2:0] = IDLE;
  end
endcase
// &CombEnd; @193
end


assign reg_busy_st_y[2:0] = reg_cur_st[2:0];
assign reg_dout_y[31:0]   = write_in_data[31:0];

// &ModuleEnd; @199
endmodule
























// &ModuleBeg; @23
module pa_idu_reg32_high(
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_gpr_div_inst,
  ctrl_gpr_ld_inst,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  reg_busy_st_y,
  reg_dout_y,
  reg_high_cpuclk,
  reg_write_en0_x,
  reg_write_en1_x,
  reg_write_is0_x,
  reg_write_is1_x,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_warm_up,
  rtu_yy_xx_flush,
  write_data0,
  write_data1
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_gpr_div_inst;
input           ctrl_gpr_ld_inst;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input           reg_high_cpuclk;
input           reg_write_en0_x;
input           reg_write_en1_x;
input           reg_write_is0_x;
input           reg_write_is1_x;
input           rtu_idu_wb_lsu_vld;
input           rtu_idu_wb_warm_up;
input           rtu_yy_xx_flush;
input   [31:0]  write_data0;
input   [31:0]  write_data1;
output  [2 :0]  reg_busy_st_y;
output  [31:0]  reg_dout_y;

// &Regs; @25
reg     [2 :0]  reg_cur_st;
reg     [31:0]  reg_dout;
reg     [2 :0]  reg_nxt_st;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_gpr_div_inst;
wire            ctrl_gpr_ld_inst;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;
wire    [2 :0]  reg_busy_st_y;
wire            reg_clk_en;
wire            reg_cpuclk;
wire    [31:0]  reg_dout_y;
wire            reg_high_cpuclk;
wire            reg_write_en0_x;
wire            reg_write_en1_x;
wire            reg_write_is0_x;
wire            reg_write_is1_x;
wire            rtu_idu_wb_lsu_vld;
wire            rtu_idu_wb_warm_up;
wire            rtu_yy_xx_flush;
wire    [31:0]  write_data0;
wire    [31:0]  write_data1;
wire    [31:0]  write_in_data;
wire            write_in_en;
wire            write_is_div_en;
wire            write_is_en;
wire            write_is_ld_en;





assign reg_clk_en = write_in_en;
// &Instance("gated_clk_cell", "x_reg_gated_clk"); @32
gated_clk_cell  x_reg_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @33
//          .external_en (1'b0), @34
//          .global_en   (cp0_yy_clk_en), @35
//          .module_en   (1'b0), @36
//          .local_en    (reg_clk_en), @37
//          .clk_out     (reg_cpuclk)); @38














assign write_in_en = reg_write_en0_x || reg_write_en1_x || rtu_idu_wb_warm_up;
assign write_is_en = reg_write_is0_x || reg_write_is1_x;
assign write_in_data[31:0] = reg_write_en1_x ? write_data1[31:0]
                           : reg_write_en0_x || rtu_idu_wb_warm_up ? write_data0[31:0]
                           : reg_dout[31:0];

assign write_is_ld_en  = reg_write_is0_x && ctrl_gpr_ld_inst;
assign write_is_div_en = write_is_en && ctrl_gpr_div_inst;

always @(posedge reg_cpuclk)
begin
  reg_dout[31:0] <= write_in_data[31:0];
end

parameter IDLE      = 3'b000;
parameter BUSY1     = 3'b001;
parameter BUSY_LSU1 = 3'b010;
parameter BUSY_DIV1 = 3'b011;
parameter BUSY2     = 3'b100;
parameter BUSY_LSU2 = 3'b110;
parameter BUSY_DIV2 = 3'b111;

always @(posedge reg_high_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    reg_cur_st[2:0] <= IDLE;
  else if(rtu_yy_xx_flush)
    reg_cur_st[2:0] <= IDLE;
  else
    reg_cur_st[2:0] <= reg_nxt_st[2:0];
end

// &CombBeg; @85
always @( reg_cur_st[2:0]
       or write_is_div_en
       or write_in_en
       or write_is_en
       or rtu_idu_wb_lsu_vld
       or write_is_ld_en
       or ctrl_gpr_div_inst)
begin
case(reg_cur_st[2:0])
  IDLE:
  begin
    if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU1;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV1;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = IDLE;
  end
  BUSY1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY2;
    else
      reg_nxt_st[2:0] = BUSY1;
  end
  BUSY_LSU1:
  begin
    if(write_in_en && rtu_idu_wb_lsu_vld)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_ld_en)
      reg_nxt_st[2:0] = BUSY_LSU2;
    else
      reg_nxt_st[2:0] = BUSY_LSU1;
  end
  BUSY_DIV1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else
      reg_nxt_st[2:0] = BUSY_DIV1;
  end
  BUSY2:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU2;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV2;
        else
          reg_nxt_st[2:0] = BUSY2;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = BUSY2;
  end
  BUSY_DIV2:
  begin
    if(write_in_en)
      if(write_is_div_en)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY_DIV1;
    else
      reg_nxt_st[2:0] = BUSY_DIV2;
  end
  BUSY_LSU2:
  begin
    if(write_in_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else
        reg_nxt_st[2:0] = BUSY_LSU1;
    else
      reg_nxt_st[2:0] = BUSY_LSU2;
  end
  default:
  begin
    reg_nxt_st[2:0] = IDLE;
  end
endcase
// &CombEnd; @193
end


assign reg_busy_st_y[2:0] = reg_cur_st[2:0];
assign reg_dout_y[31:0]   = write_in_data[31:0];

// &ModuleEnd; @199
endmodule
























// &ModuleBeg; @23
module pa_idu_reg_sp(
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_gpr_div_inst,
  ctrl_gpr_ld_inst,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  reg_busy_st_y,
  reg_dout_y,
  reg_write_en0_x,
  reg_write_en1_x,
  reg_write_en_gate0_x,
  reg_write_en_gate1_x,
  reg_write_en_sp,
  reg_write_en_sp_gate,
  reg_write_is0_x,
  reg_write_is1_x,
  reg_write_is_gate0_x,
  reg_write_is_gate1_x,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_warm_up,
  rtu_yy_xx_flush,
  write_data0,
  write_data1,
  write_data_sp
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_gpr_div_inst;
input           ctrl_gpr_ld_inst;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input           reg_write_en0_x;
input           reg_write_en1_x;
input           reg_write_en_gate0_x;
input           reg_write_en_gate1_x;
input           reg_write_en_sp;
input           reg_write_en_sp_gate;
input           reg_write_is0_x;
input           reg_write_is1_x;
input           reg_write_is_gate0_x;
input           reg_write_is_gate1_x;
input           rtu_idu_wb_lsu_vld;
input           rtu_idu_wb_warm_up;
input           rtu_yy_xx_flush;
input   [31:0]  write_data0;
input   [31:0]  write_data1;
input   [31:0]  write_data_sp;
output  [2 :0]  reg_busy_st_y;
output  [31:0]  reg_dout_y;

// &Regs; @25
reg     [2 :0]  reg_cur_st;
reg     [31:0]  reg_dout;
reg     [2 :0]  reg_nxt_st;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_gpr_div_inst;
wire            ctrl_gpr_ld_inst;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;
wire    [2 :0]  reg_busy_st_y;
wire            reg_clk_en;
wire            reg_cpuclk;
wire    [31:0]  reg_dout_y;
wire            reg_sm_clk_en;
wire            reg_sm_cpuclk;
wire            reg_write_en0_x;
wire            reg_write_en1_x;
wire            reg_write_en_gate0_x;
wire            reg_write_en_gate1_x;
wire            reg_write_en_sp;
wire            reg_write_en_sp_gate;
wire            reg_write_is0_x;
wire            reg_write_is1_x;
wire            reg_write_is_gate0_x;
wire            reg_write_is_gate1_x;
wire            rtu_idu_wb_lsu_vld;
wire            rtu_idu_wb_warm_up;
wire            rtu_yy_xx_flush;
wire    [31:0]  write_data0;
wire    [31:0]  write_data1;
wire    [31:0]  write_data_sp;
wire    [31:0]  write_in_data;
wire            write_in_en;
wire    [31:0]  write_in_sp_data;
wire            write_is_div_en;
wire            write_is_en;
wire            write_is_ld_en;





assign reg_clk_en = reg_write_en_gate0_x || reg_write_en_gate1_x || reg_write_en_sp_gate || rtu_idu_wb_warm_up;
// &Instance("gated_clk_cell", "x_reg_gated_clk"); @32
gated_clk_cell  x_reg_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @33
//          .external_en (1'b0), @34
//          .global_en   (cp0_yy_clk_en), @35
//          .module_en   (1'b0), @36
//          .local_en    (reg_clk_en), @37
//          .clk_out     (reg_cpuclk)); @38

assign reg_sm_clk_en = reg_write_is_gate0_x || reg_write_is_gate1_x
                    || write_in_en || rtu_yy_xx_flush;
// &Instance("gated_clk_cell", "x_reg_sm_gated_clk"); @42
gated_clk_cell  x_reg_sm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (reg_sm_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (reg_sm_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @43
//          .external_en (1'b0), @44
//          .global_en   (cp0_yy_clk_en), @45
//          .module_en   (1'b0), @46
//          .local_en    (reg_sm_clk_en), @47
//          .clk_out     (reg_sm_cpuclk)); @48




assign write_in_en = reg_write_en0_x || reg_write_en1_x || reg_write_en_sp || rtu_idu_wb_warm_up;
assign write_is_en = reg_write_is0_x || reg_write_is1_x;
assign write_in_data[31:0] = reg_write_en1_x ? write_data1[31:0]
                           : reg_write_en0_x || rtu_idu_wb_warm_up ? write_data0[31:0]
                           : reg_dout[31:0];
assign write_in_sp_data[31:0] = reg_write_en_sp ? write_data_sp[31:0] : write_in_data[31:0];

assign write_is_ld_en  = reg_write_is0_x && ctrl_gpr_ld_inst;
assign write_is_div_en = write_is_en && ctrl_gpr_div_inst;

always @(posedge reg_cpuclk)
begin
  reg_dout[31:0] <= write_in_sp_data[31:0];
end

parameter IDLE      = 3'b000;
parameter BUSY1     = 3'b001;
parameter BUSY_LSU1 = 3'b010;
parameter BUSY_DIV1 = 3'b011;
parameter BUSY2     = 3'b100;
parameter BUSY_LSU2 = 3'b110;
parameter BUSY_DIV2 = 3'b111;

always @(posedge reg_sm_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    reg_cur_st[2:0] <= IDLE;
  else if(rtu_yy_xx_flush)
    reg_cur_st[2:0] <= IDLE;
  else
    reg_cur_st[2:0] <= reg_nxt_st[2:0];
end

// &CombBeg; @86
always @( reg_cur_st[2:0]
       or write_is_div_en
       or write_in_en
       or write_is_en
       or rtu_idu_wb_lsu_vld
       or write_is_ld_en
       or ctrl_gpr_div_inst)
begin
case(reg_cur_st[2:0])
  IDLE:
  begin
    if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU1;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV1;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = IDLE;
  end
  BUSY1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else if(ctrl_gpr_div_inst)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY2;
    else
      reg_nxt_st[2:0] = BUSY1;
  end
  BUSY_LSU1:
  begin
    if(write_in_en && rtu_idu_wb_lsu_vld)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else if(write_is_ld_en)
      reg_nxt_st[2:0] = BUSY_LSU2;
    else
      reg_nxt_st[2:0] = BUSY_LSU1;
  end
  BUSY_DIV1:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU1;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV1;
        else
          reg_nxt_st[2:0] = BUSY1;
      else
        reg_nxt_st[2:0] = IDLE;
    else
      reg_nxt_st[2:0] = BUSY_DIV1;
  end
  BUSY2:
  begin
    if(write_in_en)
      if(write_is_en)
        if(write_is_ld_en)
          reg_nxt_st[2:0] = BUSY_LSU2;
        else if(ctrl_gpr_div_inst)
          reg_nxt_st[2:0] = BUSY_DIV2;
        else
          reg_nxt_st[2:0] = BUSY2;
      else
        reg_nxt_st[2:0] = BUSY1;
    else
      reg_nxt_st[2:0] = BUSY2;
  end
  BUSY_DIV2:
  begin
    if(write_in_en)
      if(write_is_div_en)
        reg_nxt_st[2:0] = BUSY_DIV2;
      else
        reg_nxt_st[2:0] = BUSY_DIV1;
    else
      reg_nxt_st[2:0] = BUSY_DIV2;
  end
  BUSY_LSU2:
  begin
    if(write_in_en)
      if(write_is_ld_en)
        reg_nxt_st[2:0] = BUSY_LSU2;
      else
        reg_nxt_st[2:0] = BUSY_LSU1;
    else
      reg_nxt_st[2:0] = BUSY_LSU2;
  end
  default:
  begin
    reg_nxt_st[2:0] = IDLE;
  end
endcase
// &CombEnd; @194
end


assign reg_busy_st_y[2:0] = reg_cur_st[2:0];
assign reg_dout_y[31:0]   = write_in_data[31:0];

// &ModuleEnd; @200
endmodule
























// &ModuleBeg; @23
module pa_idu_split(
  cpurst_b,
  ctrl_split_stall,
  decd_split_dst_idx,
  decd_split_opcode,
  decd_split_req,
  decd_split_rs1_idx,
  decd_split_rs2_idx,
  decd_split_rs2_vld,
  idu_misc_cpuclk,
  ifu_idu_chgflw_flush,
  ifu_idu_id_inst_vld,
  rtu_yy_xx_flush,
  split_ctrl_cancel,
  split_ctrl_icg_en,
  split_ctrl_stall,
  split_decd_ag_imm,
  split_decd_ag_imm_vld,
  split_decd_dp_sel,
  split_decd_dst_idx,
  split_decd_dst_vld,
  split_decd_func,
  split_decd_rs1_idx,
  split_decd_rs1_vld,
  split_decd_rs2_idx,
  split_decd_rs2_imm,
  split_decd_rs2_imm_vld,
  split_decd_rs2_vld,
  split_decd_sel,
  split_decd_split,
  split_decd_sub_func,
  split_top_cur_st
);

// &Ports; @24
input           cpurst_b;
input           ctrl_split_stall;
input   [4 :0]  decd_split_dst_idx;
input   [6 :0]  decd_split_opcode;
input           decd_split_req;
input   [4 :0]  decd_split_rs1_idx;
input   [4 :0]  decd_split_rs2_idx;
input           decd_split_rs2_vld;
input           idu_misc_cpuclk;
input           ifu_idu_chgflw_flush;
input           ifu_idu_id_inst_vld;
input           rtu_yy_xx_flush;
output          split_ctrl_cancel;
output          split_ctrl_icg_en;
output          split_ctrl_stall;
output  [31:0]  split_decd_ag_imm;
output          split_decd_ag_imm_vld;
output          split_decd_dp_sel;
output  [5 :0]  split_decd_dst_idx;
output          split_decd_dst_vld;
output  [4 :0]  split_decd_func;
output  [5 :0]  split_decd_rs1_idx;
output          split_decd_rs1_vld;
output  [5 :0]  split_decd_rs2_idx;
output  [31:0]  split_decd_rs2_imm;
output          split_decd_rs2_imm_vld;
output          split_decd_rs2_vld;
output  [5 :0]  split_decd_sel;
output          split_decd_split;
output  [4 :0]  split_decd_sub_func;
output  [2 :0]  split_top_cur_st;

// &Regs; @25
reg     [4 :0]  amo_alu_func;
reg     [4 :0]  amo_alu_sub_func;
reg     [2 :0]  split_cur_state;
reg     [5 :0]  split_decd_dst_idx;
reg             split_decd_dst_vld;
reg     [4 :0]  split_decd_func;
reg             split_decd_rs2_imm_vld;
reg             split_decd_rs2_vld;
reg     [5 :0]  split_decd_sel;
reg     [4 :0]  split_decd_sub_func;
reg     [2 :0]  split_next_state;

// &Wires; @26
wire            amo_inst;
wire            amoswap;
wire            atm_aq;
wire            atm_rl;
wire            cpurst_b;
wire            ctrl_split_stall;
wire    [4 :0]  decd_split_dst_idx;
wire    [6 :0]  decd_split_opcode;
wire            decd_split_req;
wire    [4 :0]  decd_split_rs1_idx;
wire    [4 :0]  decd_split_rs2_idx;
wire            decd_split_rs2_vld;
wire            idu_misc_cpuclk;
wire            ifu_idu_chgflw_flush;
wire            ifu_idu_id_inst_vld;
wire            lr_inst;
wire            rtu_yy_xx_flush;
wire            sc_inst;
wire            split_ctrl_cancel;
wire            split_ctrl_icg_en;
wire            split_ctrl_stall;
wire    [31:0]  split_decd_ag_imm;
wire            split_decd_ag_imm_vld;
wire            split_decd_dp_sel;
wire    [5 :0]  split_decd_rs1_idx;
wire            split_decd_rs1_vld;
wire    [5 :0]  split_decd_rs2_idx;
wire    [31:0]  split_decd_rs2_imm;
wire            split_decd_split;
wire            split_req_vld;
wire    [2 :0]  split_top_cur_st;










parameter IDLE    = 3'b111;
parameter FENCE_1 = 3'b000;
parameter LLSC    = 3'b001;
parameter AMO_LD  = 3'b010;
parameter AMO_ALU = 3'b011;
parameter AMO_ST  = 3'b100;
parameter AMO_MOV = 3'b101;
parameter FENCE_2 = 3'b110;

always @ (posedge idu_misc_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    split_cur_state[2:0] <= IDLE;
  else if (rtu_yy_xx_flush | ifu_idu_chgflw_flush)
    split_cur_state[2:0] <= IDLE;
  else if (!ctrl_split_stall)
    split_cur_state[2:0] <= split_next_state[2:0];
  else
    split_cur_state[2:0] <= split_cur_state[2:0];
end

assign split_req_vld = ifu_idu_id_inst_vld & decd_split_req;

// &CombBeg; @59
always @( split_req_vld
       or atm_aq
       or amo_inst
       or split_cur_state)
begin
  case(split_cur_state)
    IDLE: begin
      if (split_req_vld)
        split_next_state = FENCE_1;
      else
        split_next_state = IDLE;
    end
    FENCE_1: begin
      split_next_state = amo_inst ? AMO_LD : LLSC;
    end
    LLSC: begin
      if (atm_aq)
        split_next_state = FENCE_2;
      else
        split_next_state = IDLE;
    end
    AMO_LD:  split_next_state = AMO_ALU;
    AMO_ALU: split_next_state = AMO_ST;
    AMO_ST:  split_next_state = AMO_MOV;
    AMO_MOV: begin
      if (atm_aq)
        split_next_state = FENCE_2;
      else
        split_next_state = IDLE;
    end
    FENCE_2: split_next_state = IDLE;
    default: split_next_state = IDLE;
  endcase
// &CombEnd; @88
end

// &Force("output","split_ctrl_stall"); @90

assign split_ctrl_stall = (split_cur_state == IDLE) & split_req_vld |
                          (split_cur_state == FENCE_1) |
                          (split_cur_state == LLSC) & atm_aq |
                          (split_cur_state == AMO_LD) |
                          (split_cur_state == AMO_ALU) |
                          (split_cur_state == AMO_ST) |
                          (split_cur_state == AMO_MOV) & atm_aq;

assign split_decd_split = split_ctrl_stall;
assign split_ctrl_cancel = (split_cur_state == IDLE) & split_req_vld;
assign split_decd_dp_sel = !(split_cur_state == IDLE);






parameter SEL_WIDTH       = 6;
parameter FUNC_WIDTH      = 5;
parameter SUB_FUNC_WIDTH  = 5;


parameter ALU = 6'b000001;
parameter LSU = 6'b010000;
parameter CP0 = 6'b100000;



parameter ADDER  = 5'b00001;
parameter LOGIC  = 5'b00100;

parameter ADD    = 5'b00001;
parameter SUB    = 5'b00000;
parameter SLT    = 5'b10010;
parameter LTU    = 5'b00010;
parameter MIN    = 5'b10110;
parameter MINU   = 5'b00110;
parameter MAX    = 5'b11110;
parameter MAXU   = 5'b01110;

parameter AND    = 5'b00001;
parameter OR     = 5'b00010;
parameter XOR    = 5'b00100;


parameter WORD   = 5'b00010;


parameter FNC    = 5'b00010;

parameter FENCE  = 5'b00001;

// &Force("output", "split_decd_sel"); @144
// &CombBeg; @145
always @( amo_alu_func[4:0]
       or atm_rl
       or decd_split_opcode[4:2]
       or decd_split_rs2_vld
       or split_cur_state
       or amoswap
       or decd_split_dst_idx[4:0]
       or amo_alu_sub_func[4:0])
begin
  case(split_cur_state)
  FENCE_1: begin
           split_decd_sel[SEL_WIDTH-1:0]           = atm_rl ? CP0 : ALU;
           split_decd_func[FUNC_WIDTH-1:0]         = atm_rl ? FNC : ADDER;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = atm_rl ? FENCE: ADD;
           split_decd_rs2_imm_vld                  = atm_rl ? 1'b0 : 1'b1;
           split_decd_dst_vld                      = atm_rl ? 1'b0 : 1'b1;
           split_decd_dst_idx[5:0]                 = {1'b0,5'b0};
           split_decd_rs2_vld                      = 1'b0;
           end
  LLSC:    begin
           split_decd_sel[SEL_WIDTH-1:0]           = LSU;
           split_decd_func[FUNC_WIDTH-1:0]         = WORD;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = {1'b0,1'b0,decd_split_opcode[4:2]};
           split_decd_rs2_imm_vld                  = 1'b0;
           split_decd_dst_vld                      = 1'b1;
           split_decd_dst_idx[5:0]                 = {1'b0,decd_split_dst_idx[4:0]};
           split_decd_rs2_vld                      = decd_split_rs2_vld;
           end
  AMO_LD:  begin
           split_decd_sel[SEL_WIDTH-1:0]           = LSU;
           split_decd_func[FUNC_WIDTH-1:0]         = WORD;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = {1'b0,1'b0,3'b100};
           split_decd_rs2_imm_vld                  = 1'b0;
           split_decd_dst_vld                      = 1'b1;
           split_decd_dst_idx[5:0]                 = {1'b1,5'b0};
           split_decd_rs2_vld                      = 1'b0;
           end
  AMO_ALU: begin
           split_decd_sel[SEL_WIDTH-1:0]           = ALU;
           split_decd_func[FUNC_WIDTH-1:0]         = amo_alu_func[FUNC_WIDTH-1:0];
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = amo_alu_sub_func[SUB_FUNC_WIDTH-1:0];
           split_decd_rs2_imm_vld                  = amoswap;
           split_decd_dst_vld                      = 1'b1;
           split_decd_dst_idx[5:0]                 = {1'b1,5'b1};
           split_decd_rs2_vld                      = !amoswap;
           end
  AMO_ST:  begin
           split_decd_sel[SEL_WIDTH-1:0]           = LSU;
           split_decd_func[FUNC_WIDTH-1:0]         = WORD;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = {1'b0,1'b0,3'b101};
           split_decd_rs2_imm_vld                  = 1'b0;
           split_decd_dst_vld                      = 1'b0;
           split_decd_dst_idx[5:0]                 = {1'b0,decd_split_dst_idx[4:0]};
           split_decd_rs2_vld                      = 1'b1;
           end
  AMO_MOV: begin
           split_decd_sel[SEL_WIDTH-1:0]           = ALU;
           split_decd_func[FUNC_WIDTH-1:0]         = ADDER;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = ADD;
           split_decd_rs2_imm_vld                  = 1'b1;
           split_decd_dst_vld                      = 1'b1;
           split_decd_dst_idx[5:0]                 = {1'b0,decd_split_dst_idx[4:0]};
           split_decd_rs2_vld                      = 1'b0;
           end
  FENCE_2: begin
           split_decd_sel[SEL_WIDTH-1:0]           = CP0;
           split_decd_func[FUNC_WIDTH-1:0]         = FNC;
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = FENCE;
           split_decd_rs2_imm_vld                  = 1'b0;
           split_decd_dst_vld                      = 1'b0;
           split_decd_dst_idx[5:0]                 = {1'b0,decd_split_dst_idx[4:0]};
           split_decd_rs2_vld                      = 1'b0;
           end
  default: begin
           split_decd_sel[SEL_WIDTH-1:0]           = {SEL_WIDTH{1'bx}};
           split_decd_func[FUNC_WIDTH-1:0]         = {FUNC_WIDTH{1'bx}};
           split_decd_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'bx}};
           split_decd_rs2_imm_vld                  = 1'b0;
           split_decd_dst_vld                      = 1'b0;
           split_decd_dst_idx[5:0]                 = {1'b0,decd_split_dst_idx[4:0]};
           split_decd_rs2_vld                      = 1'b0;
           end
  endcase
// &CombEnd; @220
end

assign split_decd_rs2_imm[31:0]= 32'b0;

assign split_decd_rs2_idx[5:0] = (split_cur_state == AMO_ST)
                               ? {1'b1,5'b1}
                               : ((split_cur_state == AMO_ALU)
                                        ? {1'b1, 5'b0}
                                        : {1'b0, decd_split_rs2_idx[4:0]});

assign split_decd_rs1_vld      = 1'b1;
assign split_decd_rs1_idx[5:0] = (split_cur_state == AMO_ALU)
                               ? {1'b0, decd_split_rs2_idx[4:0]}
                               : ((split_cur_state == AMO_MOV)
                                       ? {1'b1, 5'b0}
                                       : {1'b0, decd_split_rs1_idx[4:0]});

assign split_decd_ag_imm_vld   = split_decd_sel[4] |
                                 split_decd_sel[5];
assign split_decd_ag_imm[31:0] = 32'b0;

assign atm_aq  = decd_split_opcode[1];
assign atm_rl  = decd_split_opcode[0];
assign amoswap = decd_split_opcode[6:2] == 5'b00001;
assign lr_inst = decd_split_opcode[6:2] == 5'b00010;
assign sc_inst = decd_split_opcode[6:2] == 5'b00011;
assign amo_inst= !(lr_inst | sc_inst);

// &CombBeg; @248
always @( decd_split_opcode[6:2])
begin
  case(decd_split_opcode[6:2])
    5'b00001: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = ADD; end
    5'b00000: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = ADD; end
    5'b00100: begin amo_alu_func[FUNC_WIDTH-1:0] = LOGIC; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = XOR; end
    5'b01100: begin amo_alu_func[FUNC_WIDTH-1:0] = LOGIC; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = AND; end
    5'b01000: begin amo_alu_func[FUNC_WIDTH-1:0] = LOGIC; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = OR;  end
    5'b10000: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = MIN; end
    5'b10100: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = MAX; end
    5'b11000: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = MINU;end
    5'b11100: begin amo_alu_func[FUNC_WIDTH-1:0] = ADDER; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = MAXU;end
    default : begin amo_alu_func[FUNC_WIDTH-1:0] = {FUNC_WIDTH{1'bx}}; amo_alu_sub_func[SUB_FUNC_WIDTH-1:0] = {SUB_FUNC_WIDTH{1'bx}}; end
  endcase
// &CombEnd; @261
end


assign split_ctrl_icg_en = split_cur_state[2:0] != IDLE || split_req_vld;
assign split_top_cur_st[2:0] = split_cur_state[2:0];

// &ModuleEnd; @267
endmodule

























// &ModuleBeg; @23
module pa_idu_top(
  cp0_idu_mcause,
  cp0_idu_mepc,
  cp0_idu_sp_use_scratch,
  cp0_idu_sp_wdata,
  cp0_idu_sp_wen,
  cp0_idu_sp_wen_gate,
  cp0_idu_spec_push_en,
  cp0_idu_swap_sp_en,
  cp0_yy_clk_en,
  cp0_yy_cskyisaee,
  cp0_yy_mach_mode,
  cpurst_b,
  forever_cpuclk,
  had_idu_id_inst_bkpt,
  had_idu_id_inst_bkpt_brir,
  had_idu_id_inst_bkpt_hit,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  idu_cp0_ex1_dst_idx,
  idu_cp0_ex1_dst_vld,
  idu_cp0_ex1_expt_type,
  idu_cp0_ex1_expt_vld,
  idu_cp0_ex1_func,
  idu_cp0_ex1_inst_bkpt,
  idu_cp0_ex1_opcode,
  idu_cp0_ex1_rs1,
  idu_cp0_ex1_rs2,
  idu_cp0_ex1_sel,
  idu_cp0_ex1_sub_func,
  idu_cp0_ipop_data,
  idu_cp0_mcause_wen,
  idu_cp0_mepc_wen,
  idu_cp0_sp_reg,
  idu_cp0_sp_swap_pending,
  idu_cp0_sp_swap_req,
  idu_cp0_sp_swap_req_gate,
  idu_had_id_chgflw_inst,
  idu_had_id_inst_bkpt,
  idu_had_no_op,
  idu_ifu_id_stall,
  idu_ifu_tail_vld,
  idu_ifu_x1,
  idu_iu_ex1_ag_imm,
  idu_iu_ex1_alu_sel,
  idu_iu_ex1_bht_pred,
  idu_iu_ex1_bju_depd_lsu_src0,
  idu_iu_ex1_bju_depd_lsu_src1,
  idu_iu_ex1_bju_sel,
  idu_iu_ex1_bju_use_pc,
  idu_iu_ex1_div_sel,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_func,
  idu_iu_ex1_inst_len,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_mul_high_sel,
  idu_iu_ex1_mul_sel,
  idu_iu_ex1_split,
  idu_iu_ex1_src0,
  idu_iu_ex1_src0_reg,
  idu_iu_ex1_src1,
  idu_iu_ex1_src2,
  idu_iu_ex1_sub_func,
  idu_iu_ex1_wb_vld,
  idu_iu_tail_fail,
  idu_iu_tail_fail_gate,
  idu_lsu_ex1_ag_imm,
  idu_lsu_ex1_base,
  idu_lsu_ex1_base_sel,
  idu_lsu_ex1_base_wb,
  idu_lsu_ex1_data,
  idu_lsu_ex1_dest_reg,
  idu_lsu_ex1_dest_vld,
  idu_lsu_ex1_fls,
  idu_lsu_ex1_func,
  idu_lsu_ex1_mls,
  idu_lsu_ex1_offset_sel,
  idu_lsu_ex1_sel,
  idu_lsu_ex1_sign_extend,
  idu_lsu_ex1_size,
  idu_lsu_ex1_src1_depd,
  idu_lsu_ex1_src1_reg,
  idu_rtu_ex1_dst_vld,
  idu_rtu_ex1_inst_vld,
  idu_rtu_ex1_ipop_int_mask,
  idu_rtu_ex1_ipush_mie_en,
  idu_rtu_ex1_ipush_spec_fail,
  idu_rtu_ex1_lsu_sel,
  idu_rtu_ex1_tail_int_vld,
  idu_rtu_ipush_spec,
  idu_rtu_tail_fail,
  idu_xx_ex1_warm_up,
  idu_yy_xx_tail_ack,
  ifu_idu_chgflw_flush,
  ifu_idu_id_expt_vld,
  ifu_idu_id_inst,
  ifu_idu_id_inst_bkpt,
  ifu_idu_id_inst_vld,
  ifu_idu_id_pred_taken,
  ifu_idu_id_warm_up,
  ifu_xx_warm_up_clk,
  iu_idu_ex1_src1_update_value,
  iu_xx_no_op,
  lsu_idu_ex1_src1_update_en,
  lsu_idu_ex1_src1_update_en_gate,
  lsu_idu_update_addr,
  lsu_idu_update_en,
  lsu_idu_update_en_gate,
  lsu_idu_update_offset,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  rtu_idu_ex1_fwd_data,
  rtu_idu_ex1_fwd_vld,
  rtu_idu_ex1_stall,
  rtu_idu_ex2_lsu_fwd_data,
  rtu_idu_ex2_lsu_fwd_preg,
  rtu_idu_ex2_lsu_fwd_vld,
  rtu_idu_ex2_rbus_fwd_data,
  rtu_idu_ex2_rbus_fwd_preg,
  rtu_idu_ex2_rbus_fwd_vld,
  rtu_idu_id_cancel,
  rtu_idu_id_stall,
  rtu_idu_id_tail_int_vld,
  rtu_idu_int_vld_raw,
  rtu_idu_late_flush,
  rtu_idu_wb_lsu_data,
  rtu_idu_wb_lsu_preg,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_rbus_data,
  rtu_idu_wb_rbus_preg,
  rtu_idu_wb_rbus_vld,
  rtu_idu_wb_warm_up,
  rtu_xx_no_op,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_flush
);

// &Ports; @24
input   [31:0]  cp0_idu_mcause;
input   [31:0]  cp0_idu_mepc;
input           cp0_idu_sp_use_scratch;
input   [31:0]  cp0_idu_sp_wdata;
input           cp0_idu_sp_wen;
input           cp0_idu_sp_wen_gate;
input           cp0_idu_spec_push_en;
input           cp0_idu_swap_sp_en;
input           cp0_yy_clk_en;
input           cp0_yy_cskyisaee;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           forever_cpuclk;
input   [8 :0]  had_idu_id_inst_bkpt;
input           had_idu_id_inst_bkpt_brir;
input           had_idu_id_inst_bkpt_hit;
input   [31:0]  had_idu_wbbr_data;
input           had_idu_wbbr_vld;
input           ifu_idu_chgflw_flush;
input           ifu_idu_id_expt_vld;
input   [31:0]  ifu_idu_id_inst;
input   [8 :0]  ifu_idu_id_inst_bkpt;
input           ifu_idu_id_inst_vld;
input   [1 :0]  ifu_idu_id_pred_taken;
input           ifu_idu_id_warm_up;
input           ifu_xx_warm_up_clk;
input   [31:0]  iu_idu_ex1_src1_update_value;
input           iu_xx_no_op;
input           lsu_idu_ex1_src1_update_en;
input           lsu_idu_ex1_src1_update_en_gate;
input   [31:0]  lsu_idu_update_addr;
input           lsu_idu_update_en;
input           lsu_idu_update_en_gate;
input   [31:0]  lsu_idu_update_offset;
input           lsu_xx_no_op;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_idu_ex1_fwd_data;
input           rtu_idu_ex1_fwd_vld;
input           rtu_idu_ex1_stall;
input   [31:0]  rtu_idu_ex2_lsu_fwd_data;
input   [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
input           rtu_idu_ex2_lsu_fwd_vld;
input   [31:0]  rtu_idu_ex2_rbus_fwd_data;
input   [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
input           rtu_idu_ex2_rbus_fwd_vld;
input           rtu_idu_id_cancel;
input           rtu_idu_id_stall;
input           rtu_idu_id_tail_int_vld;
input           rtu_idu_int_vld_raw;
input           rtu_idu_late_flush;
input   [31:0]  rtu_idu_wb_lsu_data;
input   [5 :0]  rtu_idu_wb_lsu_preg;
input           rtu_idu_wb_lsu_vld;
input   [31:0]  rtu_idu_wb_rbus_data;
input   [5 :0]  rtu_idu_wb_rbus_preg;
input           rtu_idu_wb_rbus_vld;
input           rtu_idu_wb_warm_up;
input           rtu_xx_no_op;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_flush;
output  [5 :0]  idu_cp0_ex1_dst_idx;
output          idu_cp0_ex1_dst_vld;
output          idu_cp0_ex1_expt_type;
output          idu_cp0_ex1_expt_vld;
output  [4 :0]  idu_cp0_ex1_func;
output  [8 :0]  idu_cp0_ex1_inst_bkpt;
output  [31:0]  idu_cp0_ex1_opcode;
output  [31:0]  idu_cp0_ex1_rs1;
output  [11:0]  idu_cp0_ex1_rs2;
output          idu_cp0_ex1_sel;
output  [4 :0]  idu_cp0_ex1_sub_func;
output  [31:0]  idu_cp0_ipop_data;
output          idu_cp0_mcause_wen;
output          idu_cp0_mepc_wen;
output  [31:0]  idu_cp0_sp_reg;
output          idu_cp0_sp_swap_pending;
output          idu_cp0_sp_swap_req;
output          idu_cp0_sp_swap_req_gate;
output          idu_had_id_chgflw_inst;
output  [8 :0]  idu_had_id_inst_bkpt;
output          idu_had_no_op;
output          idu_ifu_id_stall;
output          idu_ifu_tail_vld;
output  [31:0]  idu_ifu_x1;
output  [31:0]  idu_iu_ex1_ag_imm;
output          idu_iu_ex1_alu_sel;
output  [1 :0]  idu_iu_ex1_bht_pred;
output          idu_iu_ex1_bju_depd_lsu_src0;
output          idu_iu_ex1_bju_depd_lsu_src1;
output          idu_iu_ex1_bju_sel;
output          idu_iu_ex1_bju_use_pc;
output          idu_iu_ex1_div_sel;
output  [5 :0]  idu_iu_ex1_dst_preg;
output  [4 :0]  idu_iu_ex1_func;
output          idu_iu_ex1_inst_len;
output          idu_iu_ex1_inst_vld;
output          idu_iu_ex1_mul_high_sel;
output          idu_iu_ex1_mul_sel;
output          idu_iu_ex1_split;
output  [31:0]  idu_iu_ex1_src0;
output  [5 :0]  idu_iu_ex1_src0_reg;
output  [31:0]  idu_iu_ex1_src1;
output  [31:0]  idu_iu_ex1_src2;
output  [4 :0]  idu_iu_ex1_sub_func;
output          idu_iu_ex1_wb_vld;
output          idu_iu_tail_fail;
output          idu_iu_tail_fail_gate;
output  [31:0]  idu_lsu_ex1_ag_imm;
output  [31:0]  idu_lsu_ex1_base;
output          idu_lsu_ex1_base_sel;
output          idu_lsu_ex1_base_wb;
output  [31:0]  idu_lsu_ex1_data;
output  [5 :0]  idu_lsu_ex1_dest_reg;
output          idu_lsu_ex1_dest_vld;
output          idu_lsu_ex1_fls;
output  [3 :0]  idu_lsu_ex1_func;
output          idu_lsu_ex1_mls;
output          idu_lsu_ex1_offset_sel;
output          idu_lsu_ex1_sel;
output          idu_lsu_ex1_sign_extend;
output  [1 :0]  idu_lsu_ex1_size;
output          idu_lsu_ex1_src1_depd;
output  [5 :0]  idu_lsu_ex1_src1_reg;
output          idu_rtu_ex1_dst_vld;
output          idu_rtu_ex1_inst_vld;
output          idu_rtu_ex1_ipop_int_mask;
output          idu_rtu_ex1_ipush_mie_en;
output          idu_rtu_ex1_ipush_spec_fail;
output          idu_rtu_ex1_lsu_sel;
output          idu_rtu_ex1_tail_int_vld;
output          idu_rtu_ipush_spec;
output          idu_rtu_tail_fail;
output          idu_xx_ex1_warm_up;
output          idu_yy_xx_tail_ack;

// &Regs; @25

// &Wires; @26
wire    [31:0]  cp0_idu_mcause;
wire    [31:0]  cp0_idu_mepc;
wire            cp0_idu_sp_use_scratch;
wire    [31:0]  cp0_idu_sp_wdata;
wire            cp0_idu_sp_wen;
wire            cp0_idu_sp_wen_gate;
wire            cp0_idu_spec_push_en;
wire            cp0_idu_swap_sp_en;
wire            cp0_yy_clk_en;
wire            cp0_yy_cskyisaee;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            ctrl_dp_ex1_bju_sel;
wire            ctrl_dp_ex1_div_sel;
wire    [5 :0]  ctrl_dp_ex1_dst_preg;
wire            ctrl_dp_ex1_dst_vld;
wire            ctrl_dp_ex1_inst_vld;
wire            ctrl_dp_ex1_lsu_sel;
wire            ctrl_dp_ex1_rs1_dep;
wire            ctrl_dp_ex1_rs2_dep;
wire            ctrl_dp_ex1_st_sel;
wire            ctrl_dp_pipe_down;
wire            ctrl_dp_pipe_down_gate;
wire            ctrl_dp_wbbr_en;
wire            ctrl_dp_wbbr_rs2_use_zero;
wire            ctrl_gpr_div_inst;
wire            ctrl_gpr_id_dst_vld;
wire    [5 :0]  ctrl_gpr_id_wr_idx;
wire            ctrl_gpr_ld_inst;
wire            ctrl_gpr_wr_issue;
wire            ctrl_hs_be_idle;
wire            ctrl_hs_no_op;
wire            ctrl_hs_stall;
wire            ctrl_split_stall;
wire            ctrl_top_bju_dep1_vld;
wire            ctrl_top_bju_dep2_vld;
wire            ctrl_top_cp0_stall;
wire            ctrl_top_div_stall;
wire            ctrl_top_ex1_fp_vld;
wire    [5 :0]  ctrl_top_ex1_sel;
wire            ctrl_top_ex1_stall;
wire            ctrl_top_ex1_vld;
wire            ctrl_top_id_cancel;
wire            ctrl_top_id_inst_vld;
wire            ctrl_top_id_stall;
wire            ctrl_top_ld_stall;
wire            ctrl_top_norm_stall;
wire            ctrl_top_st_dep_vld;
wire            decd_ctrl_bju_use_pc;
wire    [5 :0]  decd_ctrl_dst_idx;
wire            decd_ctrl_dst_vld;
wire    [4 :0]  decd_ctrl_id_func;
wire            decd_ctrl_ill_expt;
wire            decd_ctrl_inst_32bit;
wire            decd_ctrl_sti_vld;
wire            decd_ctrl_str_vld;
wire    [5 :0]  decd_ctrl_unit_sel;
wire    [31:0]  decd_dp_ag_imm;
wire            decd_dp_ag_imm_vld;
wire    [4 :0]  decd_dp_csri_rs1;
wire            decd_dp_csri_vld;
wire            decd_dp_ex_st_rs2_vld;
wire    [4 :0]  decd_dp_func;
wire    [31:0]  decd_dp_imm;
wire            decd_dp_imm_vld;
wire            decd_dp_lsr_vld;
wire            decd_dp_lsu_sel;
wire            decd_dp_mul_high_sel;
wire    [5 :0]  decd_dp_rs1_idx;
wire            decd_dp_rs1_vld;
wire    [5 :0]  decd_dp_rs2_idx;
wire            decd_dp_rs2_vld;
wire    [5 :0]  decd_dp_rs3_idx;
wire            decd_dp_rs3_vld;
wire            decd_dp_split;
wire    [4 :0]  decd_dp_sub_func;
wire    [5 :0]  decd_gpr_dep_rs1;
wire    [5 :0]  decd_gpr_dep_rs2;
wire            decd_gpr_ldi_vld;
wire            decd_gpr_rd_vld;
wire    [5 :0]  decd_gpr_rs1;
wire            decd_gpr_rs1_vld;
wire    [5 :0]  decd_gpr_rs2;
wire            decd_gpr_rs2_vld;
wire    [5 :0]  decd_gpr_rs3;
wire            decd_gpr_rs3_vld;
wire            decd_gpr_sti_vld;
wire            decd_hs_ipop_vld;
wire            decd_hs_ipush_vld;
wire    [4 :0]  decd_split_dst_idx;
wire    [6 :0]  decd_split_opcode;
wire            decd_split_req;
wire    [4 :0]  decd_split_rs1_idx;
wire    [4 :0]  decd_split_rs2_idx;
wire            decd_split_rs2_vld;
wire            dp_ctrl_ex1_ex_st_rs2_vld;
wire            dp_ctrl_ex1_st_vld;
wire            dp_ctrl_rs1_dep_ex1_dst;
wire            dp_ctrl_rs1_fwd_lsu;
wire            dp_ctrl_rs1_stall_upd;
wire            dp_ctrl_rs2_dep_ex1_dst;
wire            dp_ctrl_rs2_fwd_lsu;
wire            dp_ctrl_rs2_stall_upd;
wire            dp_ctrl_rs3_dep_ex1_dst;
wire            dp_ctrl_rs3_fwd_lsu;
wire            dp_ctrl_rs3_stall_upd;
wire            dp_ctrl_rs_dep_ex1;
wire    [31:0]  dp_decd_rs2_aft_fwd;
wire            dp_gpr_rs1_fwd;
wire            dp_gpr_rs1_fwd_div;
wire            dp_gpr_rs1_fwd_lsu;
wire            dp_gpr_rs2_fwd;
wire            dp_gpr_rs2_fwd_div;
wire            dp_gpr_rs2_fwd_lsu;
wire            dp_gpr_rs3_fwd;
wire            dp_gpr_rs3_fwd_div;
wire            dp_gpr_rs3_fwd_lsu;
wire            forever_cpuclk;
wire    [31:0]  fpr_top_reg_busy;
wire    [31:0]  fpr_top_reg_busy_div;
wire    [31:0]  fpr_top_reg_busy_lsu;
wire            gpr_ctrl_rd_busy;
wire            gpr_ctrl_rd_busy_div;
wire            gpr_ctrl_rd_busy_lsu;
wire            gpr_ctrl_rs1_busy;
wire            gpr_ctrl_rs1_busy_div;
wire            gpr_ctrl_rs1_busy_lsu;
wire            gpr_ctrl_rs1_busy_lsu2;
wire            gpr_ctrl_rs2_busy;
wire            gpr_ctrl_rs2_busy_div;
wire            gpr_ctrl_rs2_busy_lsu;
wire            gpr_ctrl_rs2_busy_lsu2;
wire            gpr_ctrl_rs3_busy;
wire            gpr_ctrl_rs3_busy_div;
wire            gpr_ctrl_rs3_busy_lsu;
wire            gpr_ctrl_rs3_busy_lsu2;
wire    [31:0]  gpr_dp_rs1;
wire    [31:0]  gpr_dp_rs2;
wire    [31:0]  gpr_dp_rs3;
wire            gpr_hs_sp_busy;
wire            gpr_hs_sp_wb;
wire    [8 :0]  had_idu_id_inst_bkpt;
wire            had_idu_id_inst_bkpt_brir;
wire            had_idu_id_inst_bkpt_hit;
wire    [31:0]  had_idu_wbbr_data;
wire            had_idu_wbbr_vld;
wire            hd_dp_rs2_sel;
wire            hs_ctrl_cancel;
wire            hs_ctrl_inst_vld;
wire            hs_ctrl_spec_ipush;
wire            hs_ctrl_stall;
wire            hs_decd_dp_vld;
wire            hs_decd_dst_vld;
wire    [4 :0]  hs_decd_func;
wire    [31:0]  hs_decd_imm;
wire            hs_decd_imm_vld;
wire    [5 :0]  hs_decd_rd;
wire    [5 :0]  hs_decd_rs1;
wire            hs_decd_rs1_vld;
wire    [5 :0]  hs_decd_rs2;
wire            hs_decd_rs2_imm_vld;
wire            hs_decd_rs2_vld;
wire    [5 :0]  hs_decd_sel;
wire            hs_decd_split;
wire    [4 :0]  hs_decd_sub_func;
wire            hs_dp_ipop_int_mask;
wire            hs_dp_ipop_tail;
wire            hs_dp_ipush_spec_fail;
wire            hs_dp_mie_en;
wire            hs_dp_rs2_mcause;
wire            hs_dp_rs2_mepc;
wire            hs_gpr_wb_mask;
wire            hs_gpr_wr_mask;
wire    [5 :0]  idu_cp0_ex1_dst_idx;
wire            idu_cp0_ex1_dst_vld;
wire            idu_cp0_ex1_expt_type;
wire            idu_cp0_ex1_expt_vld;
wire    [4 :0]  idu_cp0_ex1_func;
wire    [8 :0]  idu_cp0_ex1_inst_bkpt;
wire    [31:0]  idu_cp0_ex1_opcode;
wire    [31:0]  idu_cp0_ex1_rs1;
wire    [11:0]  idu_cp0_ex1_rs2;
wire            idu_cp0_ex1_sel;
wire    [4 :0]  idu_cp0_ex1_sub_func;
wire    [31:0]  idu_cp0_ipop_data;
wire            idu_cp0_mcause_wen;
wire            idu_cp0_mepc_wen;
wire    [31:0]  idu_cp0_sp_reg;
wire            idu_cp0_sp_swap_pending;
wire            idu_cp0_sp_swap_req;
wire            idu_cp0_sp_swap_req_gate;
wire            idu_had_id_chgflw_inst;
wire    [8 :0]  idu_had_id_inst_bkpt;
wire            idu_had_no_op;
wire            idu_ifu_id_stall;
wire            idu_ifu_tail_vld;
wire    [31:0]  idu_ifu_x1;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire            idu_iu_ex1_alu_sel;
wire    [1 :0]  idu_iu_ex1_bht_pred;
wire            idu_iu_ex1_bju_depd_lsu_src0;
wire            idu_iu_ex1_bju_depd_lsu_src1;
wire            idu_iu_ex1_bju_sel;
wire            idu_iu_ex1_bju_use_pc;
wire            idu_iu_ex1_div_sel;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_len;
wire            idu_iu_ex1_inst_vld;
wire            idu_iu_ex1_mul_high_sel;
wire            idu_iu_ex1_mul_sel;
wire            idu_iu_ex1_split;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_iu_ex1_wb_vld;
wire            idu_iu_tail_fail;
wire            idu_iu_tail_fail_gate;
wire    [31:0]  idu_lsu_ex1_ag_imm;
wire    [31:0]  idu_lsu_ex1_base;
wire            idu_lsu_ex1_base_sel;
wire            idu_lsu_ex1_base_wb;
wire    [31:0]  idu_lsu_ex1_data;
wire    [5 :0]  idu_lsu_ex1_dest_reg;
wire            idu_lsu_ex1_dest_vld;
wire            idu_lsu_ex1_fls;
wire    [3 :0]  idu_lsu_ex1_func;
wire            idu_lsu_ex1_mls;
wire            idu_lsu_ex1_offset_sel;
wire            idu_lsu_ex1_sel;
wire            idu_lsu_ex1_sign_extend;
wire    [1 :0]  idu_lsu_ex1_size;
wire            idu_lsu_ex1_src1_depd;
wire    [5 :0]  idu_lsu_ex1_src1_reg;
wire            idu_misc_cpuclk;
wire            idu_rtu_ex1_dst_vld;
wire            idu_rtu_ex1_inst_vld;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_rtu_ex1_ipush_spec_fail;
wire            idu_rtu_ex1_lsu_sel;
wire            idu_rtu_ex1_tail_int_vld;
wire            idu_rtu_ipush_spec;
wire            idu_rtu_tail_fail;
wire            idu_xx_ex1_warm_up;
wire            idu_yy_xx_tail_ack;
wire            ifu_idu_chgflw_flush;
wire            ifu_idu_id_expt_vld;
wire    [31:0]  ifu_idu_id_inst;
wire    [8 :0]  ifu_idu_id_inst_bkpt;
wire            ifu_idu_id_inst_vld;
wire    [1 :0]  ifu_idu_id_pred_taken;
wire            ifu_idu_id_warm_up;
wire            ifu_xx_warm_up_clk;
wire    [31:0]  iu_idu_ex1_src1_update_value;
wire            iu_xx_no_op;
wire            lsu_idu_ex1_src1_update_en;
wire            lsu_idu_ex1_src1_update_en_gate;
wire    [31:0]  lsu_idu_update_addr;
wire            lsu_idu_update_en;
wire            lsu_idu_update_en_gate;
wire    [31:0]  lsu_idu_update_offset;
wire            lsu_xx_no_op;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  rtu_idu_ex1_fwd_data;
wire            rtu_idu_ex1_fwd_vld;
wire            rtu_idu_ex1_stall;
wire    [31:0]  rtu_idu_ex2_lsu_fwd_data;
wire    [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
wire            rtu_idu_ex2_lsu_fwd_vld;
wire    [31:0]  rtu_idu_ex2_rbus_fwd_data;
wire    [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
wire            rtu_idu_ex2_rbus_fwd_vld;
wire            rtu_idu_id_cancel;
wire            rtu_idu_id_stall;
wire            rtu_idu_id_tail_int_vld;
wire            rtu_idu_int_vld_raw;
wire            rtu_idu_late_flush;
wire    [31:0]  rtu_idu_wb_lsu_data;
wire    [5 :0]  rtu_idu_wb_lsu_preg;
wire            rtu_idu_wb_lsu_vld;
wire    [31:0]  rtu_idu_wb_rbus_data;
wire    [5 :0]  rtu_idu_wb_rbus_preg;
wire            rtu_idu_wb_rbus_vld;
wire            rtu_idu_wb_warm_up;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_flush;
wire            split_ctrl_cancel;
wire            split_ctrl_icg_en;
wire            split_ctrl_stall;
wire    [31:0]  split_decd_ag_imm;
wire            split_decd_ag_imm_vld;
wire            split_decd_dp_sel;
wire    [5 :0]  split_decd_dst_idx;
wire            split_decd_dst_vld;
wire    [4 :0]  split_decd_func;
wire    [5 :0]  split_decd_rs1_idx;
wire            split_decd_rs1_vld;
wire    [5 :0]  split_decd_rs2_idx;
wire    [31:0]  split_decd_rs2_imm;
wire            split_decd_rs2_imm_vld;
wire            split_decd_rs2_vld;
wire    [5 :0]  split_decd_sel;
wire            split_decd_split;
wire    [4 :0]  split_decd_sub_func;
wire    [2 :0]  split_top_cur_st;
wire    [21:0]  top_debug_info;
wire    [95:0]  top_fpr_debug_info;



// &Instance("pa_idu_decd"); @29
pa_idu_decd  x_pa_idu_decd (
  .cp0_yy_cskyisaee         (cp0_yy_cskyisaee        ),
  .cp0_yy_mach_mode         (cp0_yy_mach_mode        ),
  .decd_ctrl_bju_use_pc     (decd_ctrl_bju_use_pc    ),
  .decd_ctrl_dst_idx        (decd_ctrl_dst_idx       ),
  .decd_ctrl_dst_vld        (decd_ctrl_dst_vld       ),
  .decd_ctrl_id_func        (decd_ctrl_id_func       ),
  .decd_ctrl_ill_expt       (decd_ctrl_ill_expt      ),
  .decd_ctrl_inst_32bit     (decd_ctrl_inst_32bit    ),
  .decd_ctrl_sti_vld        (decd_ctrl_sti_vld       ),
  .decd_ctrl_str_vld        (decd_ctrl_str_vld       ),
  .decd_ctrl_unit_sel       (decd_ctrl_unit_sel      ),
  .decd_dp_ag_imm           (decd_dp_ag_imm          ),
  .decd_dp_ag_imm_vld       (decd_dp_ag_imm_vld      ),
  .decd_dp_csri_rs1         (decd_dp_csri_rs1        ),
  .decd_dp_csri_vld         (decd_dp_csri_vld        ),
  .decd_dp_ex_st_rs2_vld    (decd_dp_ex_st_rs2_vld   ),
  .decd_dp_func             (decd_dp_func            ),
  .decd_dp_imm              (decd_dp_imm             ),
  .decd_dp_imm_vld          (decd_dp_imm_vld         ),
  .decd_dp_lsr_vld          (decd_dp_lsr_vld         ),
  .decd_dp_lsu_sel          (decd_dp_lsu_sel         ),
  .decd_dp_mul_high_sel     (decd_dp_mul_high_sel    ),
  .decd_dp_rs1_idx          (decd_dp_rs1_idx         ),
  .decd_dp_rs1_vld          (decd_dp_rs1_vld         ),
  .decd_dp_rs2_idx          (decd_dp_rs2_idx         ),
  .decd_dp_rs2_vld          (decd_dp_rs2_vld         ),
  .decd_dp_rs3_idx          (decd_dp_rs3_idx         ),
  .decd_dp_rs3_vld          (decd_dp_rs3_vld         ),
  .decd_dp_split            (decd_dp_split           ),
  .decd_dp_sub_func         (decd_dp_sub_func        ),
  .decd_gpr_dep_rs1         (decd_gpr_dep_rs1        ),
  .decd_gpr_dep_rs2         (decd_gpr_dep_rs2        ),
  .decd_gpr_ldi_vld         (decd_gpr_ldi_vld        ),
  .decd_gpr_rd_vld          (decd_gpr_rd_vld         ),
  .decd_gpr_rs1             (decd_gpr_rs1            ),
  .decd_gpr_rs1_vld         (decd_gpr_rs1_vld        ),
  .decd_gpr_rs2             (decd_gpr_rs2            ),
  .decd_gpr_rs2_vld         (decd_gpr_rs2_vld        ),
  .decd_gpr_rs3             (decd_gpr_rs3            ),
  .decd_gpr_rs3_vld         (decd_gpr_rs3_vld        ),
  .decd_gpr_sti_vld         (decd_gpr_sti_vld        ),
  .decd_hs_ipop_vld         (decd_hs_ipop_vld        ),
  .decd_hs_ipush_vld        (decd_hs_ipush_vld       ),
  .decd_split_dst_idx       (decd_split_dst_idx      ),
  .decd_split_opcode        (decd_split_opcode       ),
  .decd_split_req           (decd_split_req          ),
  .decd_split_rs1_idx       (decd_split_rs1_idx      ),
  .decd_split_rs2_idx       (decd_split_rs2_idx      ),
  .decd_split_rs2_vld       (decd_split_rs2_vld      ),
  .dp_decd_rs2_aft_fwd      (dp_decd_rs2_aft_fwd     ),
  .had_idu_id_inst_bkpt_hit (had_idu_id_inst_bkpt_hit),
  .hs_decd_dp_vld           (hs_decd_dp_vld          ),
  .hs_decd_dst_vld          (hs_decd_dst_vld         ),
  .hs_decd_func             (hs_decd_func            ),
  .hs_decd_imm              (hs_decd_imm             ),
  .hs_decd_imm_vld          (hs_decd_imm_vld         ),
  .hs_decd_rd               (hs_decd_rd              ),
  .hs_decd_rs1              (hs_decd_rs1             ),
  .hs_decd_rs1_vld          (hs_decd_rs1_vld         ),
  .hs_decd_rs2              (hs_decd_rs2             ),
  .hs_decd_rs2_imm_vld      (hs_decd_rs2_imm_vld     ),
  .hs_decd_rs2_vld          (hs_decd_rs2_vld         ),
  .hs_decd_sel              (hs_decd_sel             ),
  .hs_decd_split            (hs_decd_split           ),
  .hs_decd_sub_func         (hs_decd_sub_func        ),
  .idu_had_id_chgflw_inst   (idu_had_id_chgflw_inst  ),
  .ifu_idu_id_expt_vld      (ifu_idu_id_expt_vld     ),
  .ifu_idu_id_inst          (ifu_idu_id_inst         ),
  .rtu_yy_xx_dbgon          (rtu_yy_xx_dbgon         ),
  .split_decd_ag_imm        (split_decd_ag_imm       ),
  .split_decd_ag_imm_vld    (split_decd_ag_imm_vld   ),
  .split_decd_dp_sel        (split_decd_dp_sel       ),
  .split_decd_dst_idx       (split_decd_dst_idx      ),
  .split_decd_dst_vld       (split_decd_dst_vld      ),
  .split_decd_func          (split_decd_func         ),
  .split_decd_rs1_idx       (split_decd_rs1_idx      ),
  .split_decd_rs1_vld       (split_decd_rs1_vld      ),
  .split_decd_rs2_idx       (split_decd_rs2_idx      ),
  .split_decd_rs2_imm       (split_decd_rs2_imm      ),
  .split_decd_rs2_imm_vld   (split_decd_rs2_imm_vld  ),
  .split_decd_rs2_vld       (split_decd_rs2_vld      ),
  .split_decd_sel           (split_decd_sel          ),
  .split_decd_split         (split_decd_split        ),
  .split_decd_sub_func      (split_decd_sub_func     )
);



// &Instance("pa_idu_gpr"); @32
pa_idu_gpr  x_pa_idu_gpr (
  .cp0_idu_sp_wdata       (cp0_idu_sp_wdata      ),
  .cp0_idu_sp_wen         (cp0_idu_sp_wen        ),
  .cp0_idu_sp_wen_gate    (cp0_idu_sp_wen_gate   ),
  .cp0_yy_clk_en          (cp0_yy_clk_en         ),
  .cpurst_b               (cpurst_b              ),
  .ctrl_gpr_div_inst      (ctrl_gpr_div_inst     ),
  .ctrl_gpr_id_dst_vld    (ctrl_gpr_id_dst_vld   ),
  .ctrl_gpr_id_wr_idx     (ctrl_gpr_id_wr_idx    ),
  .ctrl_gpr_ld_inst       (ctrl_gpr_ld_inst      ),
  .ctrl_gpr_wr_issue      (ctrl_gpr_wr_issue     ),
  .decd_gpr_dep_rs1       (decd_gpr_dep_rs1      ),
  .decd_gpr_dep_rs2       (decd_gpr_dep_rs2      ),
  .decd_gpr_ldi_vld       (decd_gpr_ldi_vld      ),
  .decd_gpr_rd_vld        (decd_gpr_rd_vld       ),
  .decd_gpr_rs1           (decd_gpr_rs1          ),
  .decd_gpr_rs1_vld       (decd_gpr_rs1_vld      ),
  .decd_gpr_rs2           (decd_gpr_rs2          ),
  .decd_gpr_rs2_vld       (decd_gpr_rs2_vld      ),
  .decd_gpr_rs3           (decd_gpr_rs3          ),
  .decd_gpr_rs3_vld       (decd_gpr_rs3_vld      ),
  .decd_gpr_sti_vld       (decd_gpr_sti_vld      ),
  .dp_gpr_rs1_fwd         (dp_gpr_rs1_fwd        ),
  .dp_gpr_rs1_fwd_div     (dp_gpr_rs1_fwd_div    ),
  .dp_gpr_rs1_fwd_lsu     (dp_gpr_rs1_fwd_lsu    ),
  .dp_gpr_rs2_fwd         (dp_gpr_rs2_fwd        ),
  .dp_gpr_rs2_fwd_div     (dp_gpr_rs2_fwd_div    ),
  .dp_gpr_rs2_fwd_lsu     (dp_gpr_rs2_fwd_lsu    ),
  .dp_gpr_rs3_fwd         (dp_gpr_rs3_fwd        ),
  .dp_gpr_rs3_fwd_div     (dp_gpr_rs3_fwd_div    ),
  .dp_gpr_rs3_fwd_lsu     (dp_gpr_rs3_fwd_lsu    ),
  .forever_cpuclk         (forever_cpuclk        ),
  .gpr_ctrl_rd_busy       (gpr_ctrl_rd_busy      ),
  .gpr_ctrl_rd_busy_div   (gpr_ctrl_rd_busy_div  ),
  .gpr_ctrl_rd_busy_lsu   (gpr_ctrl_rd_busy_lsu  ),
  .gpr_ctrl_rs1_busy      (gpr_ctrl_rs1_busy     ),
  .gpr_ctrl_rs1_busy_div  (gpr_ctrl_rs1_busy_div ),
  .gpr_ctrl_rs1_busy_lsu  (gpr_ctrl_rs1_busy_lsu ),
  .gpr_ctrl_rs1_busy_lsu2 (gpr_ctrl_rs1_busy_lsu2),
  .gpr_ctrl_rs2_busy      (gpr_ctrl_rs2_busy     ),
  .gpr_ctrl_rs2_busy_div  (gpr_ctrl_rs2_busy_div ),
  .gpr_ctrl_rs2_busy_lsu  (gpr_ctrl_rs2_busy_lsu ),
  .gpr_ctrl_rs2_busy_lsu2 (gpr_ctrl_rs2_busy_lsu2),
  .gpr_ctrl_rs3_busy      (gpr_ctrl_rs3_busy     ),
  .gpr_ctrl_rs3_busy_div  (gpr_ctrl_rs3_busy_div ),
  .gpr_ctrl_rs3_busy_lsu  (gpr_ctrl_rs3_busy_lsu ),
  .gpr_ctrl_rs3_busy_lsu2 (gpr_ctrl_rs3_busy_lsu2),
  .gpr_dp_rs1             (gpr_dp_rs1            ),
  .gpr_dp_rs2             (gpr_dp_rs2            ),
  .gpr_dp_rs3             (gpr_dp_rs3            ),
  .gpr_hs_sp_busy         (gpr_hs_sp_busy        ),
  .gpr_hs_sp_wb           (gpr_hs_sp_wb          ),
  .hs_gpr_wb_mask         (hs_gpr_wb_mask        ),
  .hs_gpr_wr_mask         (hs_gpr_wr_mask        ),
  .idu_cp0_ipop_data      (idu_cp0_ipop_data     ),
  .idu_cp0_mcause_wen     (idu_cp0_mcause_wen    ),
  .idu_cp0_mepc_wen       (idu_cp0_mepc_wen      ),
  .idu_cp0_sp_reg         (idu_cp0_sp_reg        ),
  .idu_ifu_x1             (idu_ifu_x1            ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .rtu_idu_wb_lsu_data    (rtu_idu_wb_lsu_data   ),
  .rtu_idu_wb_lsu_preg    (rtu_idu_wb_lsu_preg   ),
  .rtu_idu_wb_lsu_vld     (rtu_idu_wb_lsu_vld    ),
  .rtu_idu_wb_rbus_data   (rtu_idu_wb_rbus_data  ),
  .rtu_idu_wb_rbus_preg   (rtu_idu_wb_rbus_preg  ),
  .rtu_idu_wb_rbus_vld    (rtu_idu_wb_rbus_vld   ),
  .rtu_idu_wb_warm_up     (rtu_idu_wb_warm_up    ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       )
);



// &Instance("pa_idu_ctrl"); @35
pa_idu_ctrl  x_pa_idu_ctrl (
  .cp0_yy_clk_en                (cp0_yy_clk_en               ),
  .cpurst_b                     (cpurst_b                    ),
  .ctrl_dp_ex1_bju_sel          (ctrl_dp_ex1_bju_sel         ),
  .ctrl_dp_ex1_div_sel          (ctrl_dp_ex1_div_sel         ),
  .ctrl_dp_ex1_dst_preg         (ctrl_dp_ex1_dst_preg        ),
  .ctrl_dp_ex1_dst_vld          (ctrl_dp_ex1_dst_vld         ),
  .ctrl_dp_ex1_inst_vld         (ctrl_dp_ex1_inst_vld        ),
  .ctrl_dp_ex1_lsu_sel          (ctrl_dp_ex1_lsu_sel         ),
  .ctrl_dp_ex1_rs1_dep          (ctrl_dp_ex1_rs1_dep         ),
  .ctrl_dp_ex1_rs2_dep          (ctrl_dp_ex1_rs2_dep         ),
  .ctrl_dp_ex1_st_sel           (ctrl_dp_ex1_st_sel          ),
  .ctrl_dp_pipe_down            (ctrl_dp_pipe_down           ),
  .ctrl_dp_pipe_down_gate       (ctrl_dp_pipe_down_gate      ),
  .ctrl_dp_wbbr_en              (ctrl_dp_wbbr_en             ),
  .ctrl_dp_wbbr_rs2_use_zero    (ctrl_dp_wbbr_rs2_use_zero   ),
  .ctrl_gpr_div_inst            (ctrl_gpr_div_inst           ),
  .ctrl_gpr_id_dst_vld          (ctrl_gpr_id_dst_vld         ),
  .ctrl_gpr_id_wr_idx           (ctrl_gpr_id_wr_idx          ),
  .ctrl_gpr_ld_inst             (ctrl_gpr_ld_inst            ),
  .ctrl_gpr_wr_issue            (ctrl_gpr_wr_issue           ),
  .ctrl_hs_be_idle              (ctrl_hs_be_idle             ),
  .ctrl_hs_no_op                (ctrl_hs_no_op               ),
  .ctrl_hs_stall                (ctrl_hs_stall               ),
  .ctrl_split_stall             (ctrl_split_stall            ),
  .ctrl_top_bju_dep1_vld        (ctrl_top_bju_dep1_vld       ),
  .ctrl_top_bju_dep2_vld        (ctrl_top_bju_dep2_vld       ),
  .ctrl_top_cp0_stall           (ctrl_top_cp0_stall          ),
  .ctrl_top_div_stall           (ctrl_top_div_stall          ),
  .ctrl_top_ex1_fp_vld          (ctrl_top_ex1_fp_vld         ),
  .ctrl_top_ex1_sel             (ctrl_top_ex1_sel            ),
  .ctrl_top_ex1_stall           (ctrl_top_ex1_stall          ),
  .ctrl_top_ex1_vld             (ctrl_top_ex1_vld            ),
  .ctrl_top_id_cancel           (ctrl_top_id_cancel          ),
  .ctrl_top_id_inst_vld         (ctrl_top_id_inst_vld        ),
  .ctrl_top_id_stall            (ctrl_top_id_stall           ),
  .ctrl_top_ld_stall            (ctrl_top_ld_stall           ),
  .ctrl_top_norm_stall          (ctrl_top_norm_stall         ),
  .ctrl_top_st_dep_vld          (ctrl_top_st_dep_vld         ),
  .decd_ctrl_bju_use_pc         (decd_ctrl_bju_use_pc        ),
  .decd_ctrl_dst_idx            (decd_ctrl_dst_idx           ),
  .decd_ctrl_dst_vld            (decd_ctrl_dst_vld           ),
  .decd_ctrl_id_func            (decd_ctrl_id_func           ),
  .decd_ctrl_ill_expt           (decd_ctrl_ill_expt          ),
  .decd_ctrl_inst_32bit         (decd_ctrl_inst_32bit        ),
  .decd_ctrl_sti_vld            (decd_ctrl_sti_vld           ),
  .decd_ctrl_str_vld            (decd_ctrl_str_vld           ),
  .decd_ctrl_unit_sel           (decd_ctrl_unit_sel          ),
  .dp_ctrl_ex1_ex_st_rs2_vld    (dp_ctrl_ex1_ex_st_rs2_vld   ),
  .dp_ctrl_ex1_st_vld           (dp_ctrl_ex1_st_vld          ),
  .dp_ctrl_rs1_dep_ex1_dst      (dp_ctrl_rs1_dep_ex1_dst     ),
  .dp_ctrl_rs1_fwd_lsu          (dp_ctrl_rs1_fwd_lsu         ),
  .dp_ctrl_rs1_stall_upd        (dp_ctrl_rs1_stall_upd       ),
  .dp_ctrl_rs2_dep_ex1_dst      (dp_ctrl_rs2_dep_ex1_dst     ),
  .dp_ctrl_rs2_fwd_lsu          (dp_ctrl_rs2_fwd_lsu         ),
  .dp_ctrl_rs2_stall_upd        (dp_ctrl_rs2_stall_upd       ),
  .dp_ctrl_rs3_dep_ex1_dst      (dp_ctrl_rs3_dep_ex1_dst     ),
  .dp_ctrl_rs3_fwd_lsu          (dp_ctrl_rs3_fwd_lsu         ),
  .dp_ctrl_rs3_stall_upd        (dp_ctrl_rs3_stall_upd       ),
  .dp_ctrl_rs_dep_ex1           (dp_ctrl_rs_dep_ex1          ),
  .forever_cpuclk               (forever_cpuclk              ),
  .gpr_ctrl_rd_busy             (gpr_ctrl_rd_busy            ),
  .gpr_ctrl_rd_busy_div         (gpr_ctrl_rd_busy_div        ),
  .gpr_ctrl_rd_busy_lsu         (gpr_ctrl_rd_busy_lsu        ),
  .gpr_ctrl_rs1_busy            (gpr_ctrl_rs1_busy           ),
  .gpr_ctrl_rs1_busy_div        (gpr_ctrl_rs1_busy_div       ),
  .gpr_ctrl_rs1_busy_lsu        (gpr_ctrl_rs1_busy_lsu       ),
  .gpr_ctrl_rs1_busy_lsu2       (gpr_ctrl_rs1_busy_lsu2      ),
  .gpr_ctrl_rs2_busy            (gpr_ctrl_rs2_busy           ),
  .gpr_ctrl_rs2_busy_div        (gpr_ctrl_rs2_busy_div       ),
  .gpr_ctrl_rs2_busy_lsu        (gpr_ctrl_rs2_busy_lsu       ),
  .gpr_ctrl_rs2_busy_lsu2       (gpr_ctrl_rs2_busy_lsu2      ),
  .gpr_ctrl_rs3_busy            (gpr_ctrl_rs3_busy           ),
  .gpr_ctrl_rs3_busy_div        (gpr_ctrl_rs3_busy_div       ),
  .gpr_ctrl_rs3_busy_lsu        (gpr_ctrl_rs3_busy_lsu       ),
  .gpr_ctrl_rs3_busy_lsu2       (gpr_ctrl_rs3_busy_lsu2      ),
  .had_idu_id_inst_bkpt         (had_idu_id_inst_bkpt        ),
  .had_idu_id_inst_bkpt_brir    (had_idu_id_inst_bkpt_brir   ),
  .had_idu_id_inst_bkpt_hit     (had_idu_id_inst_bkpt_hit    ),
  .hs_ctrl_cancel               (hs_ctrl_cancel              ),
  .hs_ctrl_inst_vld             (hs_ctrl_inst_vld            ),
  .hs_ctrl_spec_ipush           (hs_ctrl_spec_ipush          ),
  .hs_ctrl_stall                (hs_ctrl_stall               ),
  .idu_cp0_ex1_dst_idx          (idu_cp0_ex1_dst_idx         ),
  .idu_cp0_ex1_dst_vld          (idu_cp0_ex1_dst_vld         ),
  .idu_cp0_ex1_expt_type        (idu_cp0_ex1_expt_type       ),
  .idu_cp0_ex1_expt_vld         (idu_cp0_ex1_expt_vld        ),
  .idu_cp0_ex1_inst_bkpt        (idu_cp0_ex1_inst_bkpt       ),
  .idu_cp0_ex1_sel              (idu_cp0_ex1_sel             ),
  .idu_had_id_inst_bkpt         (idu_had_id_inst_bkpt        ),
  .idu_had_no_op                (idu_had_no_op               ),
  .idu_ifu_id_stall             (idu_ifu_id_stall            ),
  .idu_iu_ex1_alu_sel           (idu_iu_ex1_alu_sel          ),
  .idu_iu_ex1_bht_pred          (idu_iu_ex1_bht_pred         ),
  .idu_iu_ex1_bju_depd_lsu_src0 (idu_iu_ex1_bju_depd_lsu_src0),
  .idu_iu_ex1_bju_depd_lsu_src1 (idu_iu_ex1_bju_depd_lsu_src1),
  .idu_iu_ex1_bju_sel           (idu_iu_ex1_bju_sel          ),
  .idu_iu_ex1_bju_use_pc        (idu_iu_ex1_bju_use_pc       ),
  .idu_iu_ex1_div_sel           (idu_iu_ex1_div_sel          ),
  .idu_iu_ex1_dst_preg          (idu_iu_ex1_dst_preg         ),
  .idu_iu_ex1_inst_len          (idu_iu_ex1_inst_len         ),
  .idu_iu_ex1_inst_vld          (idu_iu_ex1_inst_vld         ),
  .idu_iu_ex1_mul_sel           (idu_iu_ex1_mul_sel          ),
  .idu_iu_ex1_wb_vld            (idu_iu_ex1_wb_vld           ),
  .idu_lsu_ex1_base_sel         (idu_lsu_ex1_base_sel        ),
  .idu_lsu_ex1_dest_reg         (idu_lsu_ex1_dest_reg        ),
  .idu_lsu_ex1_dest_vld         (idu_lsu_ex1_dest_vld        ),
  .idu_lsu_ex1_fls              (idu_lsu_ex1_fls             ),
  .idu_lsu_ex1_sel              (idu_lsu_ex1_sel             ),
  .idu_lsu_ex1_src1_depd        (idu_lsu_ex1_src1_depd       ),
  .idu_misc_cpuclk              (idu_misc_cpuclk             ),
  .idu_rtu_ex1_dst_vld          (idu_rtu_ex1_dst_vld         ),
  .idu_rtu_ex1_inst_vld         (idu_rtu_ex1_inst_vld        ),
  .idu_rtu_ex1_lsu_sel          (idu_rtu_ex1_lsu_sel         ),
  .idu_xx_ex1_warm_up           (idu_xx_ex1_warm_up          ),
  .ifu_idu_chgflw_flush         (ifu_idu_chgflw_flush        ),
  .ifu_idu_id_expt_vld          (ifu_idu_id_expt_vld         ),
  .ifu_idu_id_inst_bkpt         (ifu_idu_id_inst_bkpt        ),
  .ifu_idu_id_inst_vld          (ifu_idu_id_inst_vld         ),
  .ifu_idu_id_pred_taken        (ifu_idu_id_pred_taken       ),
  .ifu_idu_id_warm_up           (ifu_idu_id_warm_up          ),
  .ifu_xx_warm_up_clk           (ifu_xx_warm_up_clk          ),
  .iu_xx_no_op                  (iu_xx_no_op                 ),
  .lsu_xx_no_op                 (lsu_xx_no_op                ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        ),
  .rtu_idu_ex1_stall            (rtu_idu_ex1_stall           ),
  .rtu_idu_id_cancel            (rtu_idu_id_cancel           ),
  .rtu_idu_id_stall             (rtu_idu_id_stall            ),
  .rtu_idu_late_flush           (rtu_idu_late_flush          ),
  .rtu_xx_no_op                 (rtu_xx_no_op                ),
  .rtu_yy_xx_flush              (rtu_yy_xx_flush             ),
  .split_ctrl_cancel            (split_ctrl_cancel           ),
  .split_ctrl_icg_en            (split_ctrl_icg_en           ),
  .split_ctrl_stall             (split_ctrl_stall            )
);



// &Instance("pa_idu_dp"); @38
pa_idu_dp  x_pa_idu_dp (
  .cp0_idu_mcause                  (cp0_idu_mcause                 ),
  .cp0_idu_mepc                    (cp0_idu_mepc                   ),
  .cp0_idu_sp_use_scratch          (cp0_idu_sp_use_scratch         ),
  .cp0_idu_sp_wdata                (cp0_idu_sp_wdata               ),
  .cp0_yy_clk_en                   (cp0_yy_clk_en                  ),
  .cpurst_b                        (cpurst_b                       ),
  .ctrl_dp_ex1_bju_sel             (ctrl_dp_ex1_bju_sel            ),
  .ctrl_dp_ex1_div_sel             (ctrl_dp_ex1_div_sel            ),
  .ctrl_dp_ex1_dst_preg            (ctrl_dp_ex1_dst_preg           ),
  .ctrl_dp_ex1_dst_vld             (ctrl_dp_ex1_dst_vld            ),
  .ctrl_dp_ex1_inst_vld            (ctrl_dp_ex1_inst_vld           ),
  .ctrl_dp_ex1_lsu_sel             (ctrl_dp_ex1_lsu_sel            ),
  .ctrl_dp_ex1_rs1_dep             (ctrl_dp_ex1_rs1_dep            ),
  .ctrl_dp_ex1_rs2_dep             (ctrl_dp_ex1_rs2_dep            ),
  .ctrl_dp_ex1_st_sel              (ctrl_dp_ex1_st_sel             ),
  .ctrl_dp_pipe_down               (ctrl_dp_pipe_down              ),
  .ctrl_dp_pipe_down_gate          (ctrl_dp_pipe_down_gate         ),
  .ctrl_dp_wbbr_en                 (ctrl_dp_wbbr_en                ),
  .ctrl_dp_wbbr_rs2_use_zero       (ctrl_dp_wbbr_rs2_use_zero      ),
  .decd_dp_ag_imm                  (decd_dp_ag_imm                 ),
  .decd_dp_ag_imm_vld              (decd_dp_ag_imm_vld             ),
  .decd_dp_csri_rs1                (decd_dp_csri_rs1               ),
  .decd_dp_csri_vld                (decd_dp_csri_vld               ),
  .decd_dp_ex_st_rs2_vld           (decd_dp_ex_st_rs2_vld          ),
  .decd_dp_func                    (decd_dp_func                   ),
  .decd_dp_imm                     (decd_dp_imm                    ),
  .decd_dp_imm_vld                 (decd_dp_imm_vld                ),
  .decd_dp_lsr_vld                 (decd_dp_lsr_vld                ),
  .decd_dp_lsu_sel                 (decd_dp_lsu_sel                ),
  .decd_dp_mul_high_sel            (decd_dp_mul_high_sel           ),
  .decd_dp_rs1_idx                 (decd_dp_rs1_idx                ),
  .decd_dp_rs1_vld                 (decd_dp_rs1_vld                ),
  .decd_dp_rs2_idx                 (decd_dp_rs2_idx                ),
  .decd_dp_rs2_vld                 (decd_dp_rs2_vld                ),
  .decd_dp_rs3_idx                 (decd_dp_rs3_idx                ),
  .decd_dp_rs3_vld                 (decd_dp_rs3_vld                ),
  .decd_dp_split                   (decd_dp_split                  ),
  .decd_dp_sub_func                (decd_dp_sub_func               ),
  .dp_ctrl_ex1_ex_st_rs2_vld       (dp_ctrl_ex1_ex_st_rs2_vld      ),
  .dp_ctrl_ex1_st_vld              (dp_ctrl_ex1_st_vld             ),
  .dp_ctrl_rs1_dep_ex1_dst         (dp_ctrl_rs1_dep_ex1_dst        ),
  .dp_ctrl_rs1_fwd_lsu             (dp_ctrl_rs1_fwd_lsu            ),
  .dp_ctrl_rs1_stall_upd           (dp_ctrl_rs1_stall_upd          ),
  .dp_ctrl_rs2_dep_ex1_dst         (dp_ctrl_rs2_dep_ex1_dst        ),
  .dp_ctrl_rs2_fwd_lsu             (dp_ctrl_rs2_fwd_lsu            ),
  .dp_ctrl_rs2_stall_upd           (dp_ctrl_rs2_stall_upd          ),
  .dp_ctrl_rs3_dep_ex1_dst         (dp_ctrl_rs3_dep_ex1_dst        ),
  .dp_ctrl_rs3_fwd_lsu             (dp_ctrl_rs3_fwd_lsu            ),
  .dp_ctrl_rs3_stall_upd           (dp_ctrl_rs3_stall_upd          ),
  .dp_ctrl_rs_dep_ex1              (dp_ctrl_rs_dep_ex1             ),
  .dp_decd_rs2_aft_fwd             (dp_decd_rs2_aft_fwd            ),
  .dp_gpr_rs1_fwd                  (dp_gpr_rs1_fwd                 ),
  .dp_gpr_rs1_fwd_div              (dp_gpr_rs1_fwd_div             ),
  .dp_gpr_rs1_fwd_lsu              (dp_gpr_rs1_fwd_lsu             ),
  .dp_gpr_rs2_fwd                  (dp_gpr_rs2_fwd                 ),
  .dp_gpr_rs2_fwd_div              (dp_gpr_rs2_fwd_div             ),
  .dp_gpr_rs2_fwd_lsu              (dp_gpr_rs2_fwd_lsu             ),
  .dp_gpr_rs3_fwd                  (dp_gpr_rs3_fwd                 ),
  .dp_gpr_rs3_fwd_div              (dp_gpr_rs3_fwd_div             ),
  .dp_gpr_rs3_fwd_lsu              (dp_gpr_rs3_fwd_lsu             ),
  .forever_cpuclk                  (forever_cpuclk                 ),
  .gpr_dp_rs1                      (gpr_dp_rs1                     ),
  .gpr_dp_rs2                      (gpr_dp_rs2                     ),
  .gpr_dp_rs3                      (gpr_dp_rs3                     ),
  .had_idu_wbbr_data               (had_idu_wbbr_data              ),
  .had_idu_wbbr_vld                (had_idu_wbbr_vld               ),
  .hd_dp_rs2_sel                   (hd_dp_rs2_sel                  ),
  .hs_dp_ipop_int_mask             (hs_dp_ipop_int_mask            ),
  .hs_dp_ipop_tail                 (hs_dp_ipop_tail                ),
  .hs_dp_ipush_spec_fail           (hs_dp_ipush_spec_fail          ),
  .hs_dp_mie_en                    (hs_dp_mie_en                   ),
  .hs_dp_rs2_mcause                (hs_dp_rs2_mcause               ),
  .hs_dp_rs2_mepc                  (hs_dp_rs2_mepc                 ),
  .idu_cp0_ex1_func                (idu_cp0_ex1_func               ),
  .idu_cp0_ex1_opcode              (idu_cp0_ex1_opcode             ),
  .idu_cp0_ex1_rs1                 (idu_cp0_ex1_rs1                ),
  .idu_cp0_ex1_rs2                 (idu_cp0_ex1_rs2                ),
  .idu_cp0_ex1_sub_func            (idu_cp0_ex1_sub_func           ),
  .idu_ifu_tail_vld                (idu_ifu_tail_vld               ),
  .idu_iu_ex1_ag_imm               (idu_iu_ex1_ag_imm              ),
  .idu_iu_ex1_func                 (idu_iu_ex1_func                ),
  .idu_iu_ex1_mul_high_sel         (idu_iu_ex1_mul_high_sel        ),
  .idu_iu_ex1_split                (idu_iu_ex1_split               ),
  .idu_iu_ex1_src0                 (idu_iu_ex1_src0                ),
  .idu_iu_ex1_src0_reg             (idu_iu_ex1_src0_reg            ),
  .idu_iu_ex1_src1                 (idu_iu_ex1_src1                ),
  .idu_iu_ex1_src2                 (idu_iu_ex1_src2                ),
  .idu_iu_ex1_sub_func             (idu_iu_ex1_sub_func            ),
  .idu_lsu_ex1_ag_imm              (idu_lsu_ex1_ag_imm             ),
  .idu_lsu_ex1_base                (idu_lsu_ex1_base               ),
  .idu_lsu_ex1_base_wb             (idu_lsu_ex1_base_wb            ),
  .idu_lsu_ex1_data                (idu_lsu_ex1_data               ),
  .idu_lsu_ex1_func                (idu_lsu_ex1_func               ),
  .idu_lsu_ex1_mls                 (idu_lsu_ex1_mls                ),
  .idu_lsu_ex1_offset_sel          (idu_lsu_ex1_offset_sel         ),
  .idu_lsu_ex1_sign_extend         (idu_lsu_ex1_sign_extend        ),
  .idu_lsu_ex1_size                (idu_lsu_ex1_size               ),
  .idu_lsu_ex1_src1_reg            (idu_lsu_ex1_src1_reg           ),
  .idu_rtu_ex1_ipop_int_mask       (idu_rtu_ex1_ipop_int_mask      ),
  .idu_rtu_ex1_ipush_mie_en        (idu_rtu_ex1_ipush_mie_en       ),
  .idu_rtu_ex1_ipush_spec_fail     (idu_rtu_ex1_ipush_spec_fail    ),
  .idu_rtu_ex1_tail_int_vld        (idu_rtu_ex1_tail_int_vld       ),
  .ifu_idu_id_warm_up              (ifu_idu_id_warm_up             ),
  .iu_idu_ex1_src1_update_value    (iu_idu_ex1_src1_update_value   ),
  .lsu_idu_ex1_src1_update_en      (lsu_idu_ex1_src1_update_en     ),
  .lsu_idu_ex1_src1_update_en_gate (lsu_idu_ex1_src1_update_en_gate),
  .lsu_idu_update_addr             (lsu_idu_update_addr            ),
  .lsu_idu_update_en               (lsu_idu_update_en              ),
  .lsu_idu_update_en_gate          (lsu_idu_update_en_gate         ),
  .lsu_idu_update_offset           (lsu_idu_update_offset          ),
  .pad_yy_gate_clk_en_b            (pad_yy_gate_clk_en_b           ),
  .rtu_idu_ex1_fwd_data            (rtu_idu_ex1_fwd_data           ),
  .rtu_idu_ex1_fwd_vld             (rtu_idu_ex1_fwd_vld            ),
  .rtu_idu_ex2_lsu_fwd_data        (rtu_idu_ex2_lsu_fwd_data       ),
  .rtu_idu_ex2_lsu_fwd_preg        (rtu_idu_ex2_lsu_fwd_preg       ),
  .rtu_idu_ex2_lsu_fwd_vld         (rtu_idu_ex2_lsu_fwd_vld        ),
  .rtu_idu_ex2_rbus_fwd_data       (rtu_idu_ex2_rbus_fwd_data      ),
  .rtu_idu_ex2_rbus_fwd_preg       (rtu_idu_ex2_rbus_fwd_preg      ),
  .rtu_idu_ex2_rbus_fwd_vld        (rtu_idu_ex2_rbus_fwd_vld       )
);



// &Instance("pa_idu_split"); @41
pa_idu_split  x_pa_idu_split (
  .cpurst_b               (cpurst_b              ),
  .ctrl_split_stall       (ctrl_split_stall      ),
  .decd_split_dst_idx     (decd_split_dst_idx    ),
  .decd_split_opcode      (decd_split_opcode     ),
  .decd_split_req         (decd_split_req        ),
  .decd_split_rs1_idx     (decd_split_rs1_idx    ),
  .decd_split_rs2_idx     (decd_split_rs2_idx    ),
  .decd_split_rs2_vld     (decd_split_rs2_vld    ),
  .idu_misc_cpuclk        (idu_misc_cpuclk       ),
  .ifu_idu_chgflw_flush   (ifu_idu_chgflw_flush  ),
  .ifu_idu_id_inst_vld    (ifu_idu_id_inst_vld   ),
  .rtu_yy_xx_flush        (rtu_yy_xx_flush       ),
  .split_ctrl_cancel      (split_ctrl_cancel     ),
  .split_ctrl_icg_en      (split_ctrl_icg_en     ),
  .split_ctrl_stall       (split_ctrl_stall      ),
  .split_decd_ag_imm      (split_decd_ag_imm     ),
  .split_decd_ag_imm_vld  (split_decd_ag_imm_vld ),
  .split_decd_dp_sel      (split_decd_dp_sel     ),
  .split_decd_dst_idx     (split_decd_dst_idx    ),
  .split_decd_dst_vld     (split_decd_dst_vld    ),
  .split_decd_func        (split_decd_func       ),
  .split_decd_rs1_idx     (split_decd_rs1_idx    ),
  .split_decd_rs1_vld     (split_decd_rs1_vld    ),
  .split_decd_rs2_idx     (split_decd_rs2_idx    ),
  .split_decd_rs2_imm     (split_decd_rs2_imm    ),
  .split_decd_rs2_imm_vld (split_decd_rs2_imm_vld),
  .split_decd_rs2_vld     (split_decd_rs2_vld    ),
  .split_decd_sel         (split_decd_sel        ),
  .split_decd_split       (split_decd_split      ),
  .split_decd_sub_func    (split_decd_sub_func   ),
  .split_top_cur_st       (split_top_cur_st      )
);



// &Instance("pa_idu_hs"); @45
pa_idu_hs  x_pa_idu_hs (
  .cp0_idu_spec_push_en     (cp0_idu_spec_push_en    ),
  .cp0_idu_swap_sp_en       (cp0_idu_swap_sp_en      ),
  .cp0_yy_clk_en            (cp0_yy_clk_en           ),
  .cpurst_b                 (cpurst_b                ),
  .ctrl_hs_be_idle          (ctrl_hs_be_idle         ),
  .ctrl_hs_no_op            (ctrl_hs_no_op           ),
  .ctrl_hs_stall            (ctrl_hs_stall           ),
  .decd_hs_ipop_vld         (decd_hs_ipop_vld        ),
  .decd_hs_ipush_vld        (decd_hs_ipush_vld       ),
  .forever_cpuclk           (forever_cpuclk          ),
  .gpr_hs_sp_busy           (gpr_hs_sp_busy          ),
  .gpr_hs_sp_wb             (gpr_hs_sp_wb            ),
  .hd_dp_rs2_sel            (hd_dp_rs2_sel           ),
  .hs_ctrl_cancel           (hs_ctrl_cancel          ),
  .hs_ctrl_inst_vld         (hs_ctrl_inst_vld        ),
  .hs_ctrl_spec_ipush       (hs_ctrl_spec_ipush      ),
  .hs_ctrl_stall            (hs_ctrl_stall           ),
  .hs_decd_dp_vld           (hs_decd_dp_vld          ),
  .hs_decd_dst_vld          (hs_decd_dst_vld         ),
  .hs_decd_func             (hs_decd_func            ),
  .hs_decd_imm              (hs_decd_imm             ),
  .hs_decd_imm_vld          (hs_decd_imm_vld         ),
  .hs_decd_rd               (hs_decd_rd              ),
  .hs_decd_rs1              (hs_decd_rs1             ),
  .hs_decd_rs1_vld          (hs_decd_rs1_vld         ),
  .hs_decd_rs2              (hs_decd_rs2             ),
  .hs_decd_rs2_imm_vld      (hs_decd_rs2_imm_vld     ),
  .hs_decd_rs2_vld          (hs_decd_rs2_vld         ),
  .hs_decd_sel              (hs_decd_sel             ),
  .hs_decd_split            (hs_decd_split           ),
  .hs_decd_sub_func         (hs_decd_sub_func        ),
  .hs_dp_ipop_int_mask      (hs_dp_ipop_int_mask     ),
  .hs_dp_ipop_tail          (hs_dp_ipop_tail         ),
  .hs_dp_ipush_spec_fail    (hs_dp_ipush_spec_fail   ),
  .hs_dp_mie_en             (hs_dp_mie_en            ),
  .hs_dp_rs2_mcause         (hs_dp_rs2_mcause        ),
  .hs_dp_rs2_mepc           (hs_dp_rs2_mepc          ),
  .hs_gpr_wb_mask           (hs_gpr_wb_mask          ),
  .hs_gpr_wr_mask           (hs_gpr_wr_mask          ),
  .idu_cp0_sp_swap_pending  (idu_cp0_sp_swap_pending ),
  .idu_cp0_sp_swap_req      (idu_cp0_sp_swap_req     ),
  .idu_cp0_sp_swap_req_gate (idu_cp0_sp_swap_req_gate),
  .idu_iu_tail_fail         (idu_iu_tail_fail        ),
  .idu_iu_tail_fail_gate    (idu_iu_tail_fail_gate   ),
  .idu_rtu_ipush_spec       (idu_rtu_ipush_spec      ),
  .idu_rtu_tail_fail        (idu_rtu_tail_fail       ),
  .idu_yy_xx_tail_ack       (idu_yy_xx_tail_ack      ),
  .ifu_idu_chgflw_flush     (ifu_idu_chgflw_flush    ),
  .ifu_idu_id_inst_vld      (ifu_idu_id_inst_vld     ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .rtu_idu_id_cancel        (rtu_idu_id_cancel       ),
  .rtu_idu_id_tail_int_vld  (rtu_idu_id_tail_int_vld ),
  .rtu_idu_int_vld_raw      (rtu_idu_int_vld_raw     ),
  .rtu_idu_late_flush       (rtu_idu_late_flush      ),
  .rtu_yy_xx_expt_int       (rtu_yy_xx_expt_int      ),
  .rtu_yy_xx_expt_vld       (rtu_yy_xx_expt_vld      ),
  .rtu_yy_xx_flush          (rtu_yy_xx_flush         )
);

// &Instance("pa_idu_hs_dummy"); @47

// &Instance("pa_idu_decd_fp"); @52
// &Instance("pa_idu_fpr"); @55
// &Instance("pa_idu_id_fp"); @58
assign fpr_top_reg_busy_div[31:0] = 32'b0;
assign fpr_top_reg_busy_lsu[31:0] = 32'b0;
assign fpr_top_reg_busy[31:0] = 32'b0;

assign top_debug_info[21:0] = {
                              ctrl_top_ex1_fp_vld,
                              ctrl_top_ex1_vld,
                              ctrl_top_ex1_stall,
                              ctrl_top_id_stall,
                              ctrl_top_id_cancel,
                              ctrl_top_ex1_sel[5:0],
                              ctrl_top_bju_dep2_vld,
                              ctrl_top_bju_dep1_vld,
                              ctrl_top_st_dep_vld,
                              ctrl_top_cp0_stall,
                              ctrl_top_div_stall,
                              ctrl_top_ld_stall,
                              ctrl_top_norm_stall,
                              ctrl_top_id_inst_vld,
                              split_top_cur_st[2:0]
                             };
assign top_fpr_debug_info[95:0] = {
                                  fpr_top_reg_busy_div[31:0],
                                  fpr_top_reg_busy_lsu[31:0],
                                  fpr_top_reg_busy[31:0]
                                  };
// &Force("nonport", "top_debug_info"); @91
// &Force("nonport", "top_fpr_debug_info"); @92

// &ModuleEnd; @95
endmodule
























// &ModuleBeg; @23
module pa_ifu_bht(
  bht_id_pred_mem_taken,
  bht_id_pred_rslt,
  bht_top_cur_st,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  id_pred_bht_br_vld,
  id_pred_bht_pc,
  ifu_cp0_bht_inv_done,
  iu_ifu_bht_cur_pc,
  iu_ifu_bht_mispred,
  iu_ifu_bht_pred,
  iu_ifu_bht_taken,
  iu_ifu_br_vld,
  iu_ifu_br_vld_gate,
  pad_yy_gate_clk_en_b
);

// &Ports; @24
input           cp0_ifu_bht_en;
input           cp0_ifu_bht_inv;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           id_pred_bht_br_vld;
input   [2 :0]  id_pred_bht_pc;
input   [31:0]  iu_ifu_bht_cur_pc;
input           iu_ifu_bht_mispred;
input   [1 :0]  iu_ifu_bht_pred;
input           iu_ifu_bht_taken;
input           iu_ifu_br_vld;
input           iu_ifu_br_vld_gate;
input           pad_yy_gate_clk_en_b;
output          bht_id_pred_mem_taken;
output  [1 :0]  bht_id_pred_rslt;
output  [1 :0]  bht_top_cur_st;
output          ifu_cp0_bht_inv_done;

// &Regs; @25
reg             bht_bypass_sel;
reg     [15:0]  bht_dout_bypass;
reg     [15:0]  bht_dout_ff;
reg     [12:0]  bht_ghr;
reg     [8 :0]  bht_inv_cnt;
reg     [1 :0]  bht_inv_cur_st;
reg     [1 :0]  bht_inv_nxt_st;
reg     [1 :0]  bht_ref_cur_st;
reg     [1 :0]  bht_ref_nxt_st;
reg     [1 :0]  bht_ref_val;
reg     [12:0]  bht_ref_vghr;
reg             bht_upd_en;
reg     [1 :0]  bht_upd_val;
reg     [12:0]  bht_vghr;

// &Wires; @26
wire            bht_cen;
wire            bht_clk;
wire    [15:0]  bht_din;
wire    [15:0]  bht_dout;
wire    [15:0]  bht_dout_rslt;
wire            bht_icg_en;
wire            bht_id_pred_mem_taken;
wire    [1 :0]  bht_id_pred_rslt;
wire    [8 :0]  bht_idx;
wire            bht_inv_clk;
wire            bht_inv_done;
wire            bht_inv_icg_en;
wire            bht_inv_ide;
wire            bht_inv_rd;
wire            bht_inv_req;
wire            bht_inv_wr;
wire    [2 :0]  bht_mem_idx;
wire    [7 :0]  bht_mem_way;
wire    [7 :0]  bht_mis_wen;
wire            bht_miss_read1;
wire            bht_miss_read2;
wire            bht_miss_write;
wire            bht_pred_taken;
wire    [1 :0]  bht_sel_result;
wire    [7 :0]  bht_sel_way;
wire    [1 :0]  bht_top_cur_st;
wire    [2 :0]  bht_upd_idx;
wire            bht_upd_vld;
wire            bht_upd_write;
wire    [15:0]  bht_wen;
wire    [15:0]  bht_wr_val;
wire    [1 :0]  bht_wr_val_single;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire            id_pred_bht_br_vld;
wire            ifu_cp0_bht_inv_done;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire            pad_yy_gate_clk_en_b;


parameter IDX_WIDTH  = `BHT_IDX_WIDTH;
parameter HIS_WIDTH  = `BHT_IDX_WIDTH+4;
parameter DATA_WIDTH = 16;

// &Force("input", "id_pred_bht_pc"); @32
// &Force("bus", "id_pred_bht_pc", 2, 0); @33
// &Force("input", "iu_ifu_bht_cur_pc"); @34
// &Force("bus", "iu_ifu_bht_cur_pc", 31, 0); @35











assign bht_icg_en = id_pred_bht_br_vld
                 || iu_ifu_bht_mispred
                 || cp0_ifu_bht_inv
                 || iu_ifu_br_vld_gate
                 || bht_miss_read2
                 || bht_miss_write
                 || bht_upd_vld;
// &Instance("gated_clk_cell", "x_pa_ifu_bht_icg_cell"); @54
gated_clk_cell  x_pa_ifu_bht_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bht_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bht_icg_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @55
//          .external_en (1'b0), @56
//          .global_en   (cp0_yy_clk_en), @57
//          .module_en   (1'b0), @58
//          .local_en    (bht_icg_en), @59
//          .clk_out     (bht_clk), @60
// ); @61

assign bht_inv_icg_en = cp0_ifu_bht_inv
                      | !bht_inv_ide;
// &Instance("gated_clk_cell", "x_pa_ifu_bht_inv_icg_cell"); @65
gated_clk_cell  x_pa_ifu_bht_inv_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bht_inv_clk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bht_inv_icg_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @66
//          .external_en (1'b0), @67
//          .global_en   (cp0_yy_clk_en), @68
//          .module_en   (1'b0), @69
//          .local_en    (bht_inv_icg_en), @70
//          .clk_out     (bht_inv_clk), @71
// ); @72



always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_ghr[HIS_WIDTH-1:0] <= {HIS_WIDTH{1'b0}};
  else if(cp0_ifu_bht_inv)
    bht_ghr[HIS_WIDTH-1:0] <= {HIS_WIDTH{1'b0}};
  else if(iu_ifu_br_vld)
    bht_ghr[HIS_WIDTH-1:0] <= {bht_ghr[HIS_WIDTH-2:0], iu_ifu_bht_taken};
  else
    bht_ghr[HIS_WIDTH-1:0] <= bht_ghr[HIS_WIDTH-1:0];
end

always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_vghr[HIS_WIDTH-1:0] <= {HIS_WIDTH{1'b0}};
  else if(cp0_ifu_bht_inv)
    bht_vghr[HIS_WIDTH-1:0] <= {HIS_WIDTH{1'b0}};
  else if(iu_ifu_bht_mispred)
    bht_vghr[HIS_WIDTH-1:0] <= {bht_ghr[HIS_WIDTH-2:0], iu_ifu_bht_taken};
  else if(id_pred_bht_br_vld)
    bht_vghr[HIS_WIDTH-1:0] <= {bht_vghr[HIS_WIDTH-2:0], bht_pred_taken};
  else
    bht_vghr[HIS_WIDTH-1:0] <= bht_vghr[HIS_WIDTH-1:0];
end












assign bht_cen      = bht_inv_req
                   || (id_pred_bht_br_vld
                   || bht_miss_read1
                   || bht_miss_read2
                   || bht_miss_write
                   || bht_upd_vld)
                      && cp0_ifu_bht_en;

assign bht_mis_wen[7:0] = 8'b1 << bht_upd_idx[2:0];
assign bht_wen[15:0]  = bht_inv_wr ? 16'hffff
                      : bht_miss_write || bht_upd_vld ? {2{bht_mis_wen[7:0]}}
                      : 16'b0;

assign bht_din[15:0]  = {16{!bht_inv_req}} & bht_wr_val[15:0];

assign bht_idx[IDX_WIDTH-1:0] = bht_inv_req ? {IDX_WIDTH{bht_inv_wr}} & bht_inv_cnt[IDX_WIDTH-1:0]
                              : (bht_miss_read1 || bht_miss_read2) ? bht_ghr[HIS_WIDTH-2:3]
                              : bht_upd_write ? bht_ghr[HIS_WIDTH-1:4]
                              : (bht_miss_write || bht_upd_vld) ? bht_ref_vghr[HIS_WIDTH-1:4]
                              : bht_vghr[HIS_WIDTH-3:2];


// &Instance("pa_ifu_bht_array", "x_pa_ifu_bht_array"); @135
pa_ifu_bht_array  x_pa_ifu_bht_array (
  .bht_cen              (bht_cen             ),
  .bht_din              (bht_din             ),
  .bht_dout             (bht_dout            ),
  .bht_idx              (bht_idx             ),
  .bht_wen              (bht_wen             ),
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);



always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_bypass_sel <= 1'b0;
  else if(bht_miss_write || bht_upd_vld || bht_inv_wr)
    bht_bypass_sel <= 1'b1;
  else if(id_pred_bht_br_vld)
    bht_bypass_sel <= 1'b0;
end

always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_dout_bypass[DATA_WIDTH-1:0] <= {DATA_WIDTH{1'b0}};
  else if((bht_miss_write || bht_upd_vld) && !bht_bypass_sel)
    bht_dout_bypass[DATA_WIDTH-1:0] <= bht_dout[DATA_WIDTH-1:0];
  else if(bht_inv_wr && !bht_bypass_sel)
    bht_dout_bypass[DATA_WIDTH-1:0] <= {DATA_WIDTH{1'b0}};
end

assign bht_dout_rslt[DATA_WIDTH-1:0] = bht_bypass_sel ? bht_dout_bypass[DATA_WIDTH-1:0]
                                     : bht_dout[DATA_WIDTH-1:0];

always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_dout_ff[DATA_WIDTH-1:0] <= {DATA_WIDTH{1'b0}};
  else if(id_pred_bht_br_vld && bht_inv_ide)
    bht_dout_ff[DATA_WIDTH-1:0] <= bht_dout_rslt[DATA_WIDTH-1:0];
end

assign bht_sel_way[7:0] = 8'b1 << bht_vghr[2:0];

assign bht_sel_result[1] = |(bht_sel_way[7:0] & bht_dout_ff[15:8]);
assign bht_sel_result[0] = |(bht_sel_way[7:0] & bht_dout_ff[7:0]);

assign bht_mem_idx[2:0] = {bht_vghr[1:0],bht_pred_taken};

assign bht_mem_way[7:0] = 8'b1 << bht_mem_idx[2:0];

assign bht_id_pred_mem_taken = |(bht_mem_way[7:0] & bht_dout_rslt[15:8]);

assign bht_pred_taken = bht_sel_result[1];


parameter BHT_INV_IDLE = 2'b00;
parameter BHT_INV_WRTE = 2'b10;
parameter BHT_INV_READ = 2'b11;





always @ (posedge bht_inv_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_inv_cur_st[1:0] <= BHT_INV_IDLE;
  else
    bht_inv_cur_st[1:0] <= bht_inv_nxt_st[1:0];
end

// &CombBeg; @199
always @( bht_inv_cur_st[1:0]
       or cp0_ifu_bht_inv
       or bht_inv_done)
begin
case(bht_inv_cur_st[1:0])
  BHT_INV_IDLE:
  begin
    if(cp0_ifu_bht_inv)
      bht_inv_nxt_st[1:0] = BHT_INV_WRTE;
    else
      bht_inv_nxt_st[1:0] = BHT_INV_IDLE;
  end
  BHT_INV_WRTE:
  begin
    if(bht_inv_done)
      bht_inv_nxt_st[1:0] = BHT_INV_READ;
    else
      bht_inv_nxt_st[1:0] = BHT_INV_WRTE;
  end
  BHT_INV_READ:
  begin
    bht_inv_nxt_st[1:0] = BHT_INV_IDLE;
  end
  default:
  begin
    bht_inv_nxt_st[1:0] = BHT_INV_IDLE;
  end
endcase
// &CombEnd; @224
end

assign bht_inv_ide = bht_inv_cur_st[1:0] == BHT_INV_IDLE;
assign bht_inv_wr  = bht_inv_cur_st[1:0] == BHT_INV_WRTE;
assign bht_inv_rd  = bht_inv_cur_st[1:0] == BHT_INV_READ;
assign bht_inv_req = bht_inv_wr || bht_inv_rd;

always @ (posedge bht_inv_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_inv_cnt[IDX_WIDTH-1:0] <= {IDX_WIDTH{1'b0}};
  else if(bht_inv_wr)
    bht_inv_cnt[IDX_WIDTH-1:0] <= bht_inv_cnt[IDX_WIDTH-1:0] + 1'b1;
  else
    bht_inv_cnt[IDX_WIDTH-1:0] <= bht_inv_cnt[IDX_WIDTH-1:0];
end

assign bht_inv_done = bht_inv_cnt[IDX_WIDTH-1:0] == {IDX_WIDTH{1'b1}};






parameter BHT_REF_IDLE = 2'b00;
parameter BHT_REF_READ = 2'b01;
parameter BHT_REF_WRTE = 2'b10;
parameter BHT_REF_UPD  = 2'b11;

always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bht_ref_cur_st[1:0] <= BHT_REF_IDLE;
  else
    bht_ref_cur_st[1:0] <= bht_ref_nxt_st[1:0];
end

// &CombBeg; @261
always @( bht_ref_cur_st[1:0]
       or bht_upd_en
       or iu_ifu_bht_mispred
       or id_pred_bht_br_vld
       or iu_ifu_br_vld)
begin
case(bht_ref_cur_st[1:0])
  BHT_REF_IDLE:
  begin
    if(iu_ifu_bht_mispred)
      bht_ref_nxt_st[1:0] = BHT_REF_READ;
    else if(iu_ifu_br_vld && id_pred_bht_br_vld && bht_upd_en)
      bht_ref_nxt_st[1:0] = BHT_REF_UPD;
    else
      bht_ref_nxt_st[1:0] = BHT_REF_IDLE;
  end
  BHT_REF_READ:
  begin
    bht_ref_nxt_st[1:0] = BHT_REF_WRTE;
  end
  BHT_REF_WRTE:
  begin
    if(!id_pred_bht_br_vld)
      bht_ref_nxt_st[1:0] = BHT_REF_IDLE;
    else
      bht_ref_nxt_st[1:0] = BHT_REF_WRTE;
  end
  BHT_REF_UPD:
  begin
    if(!id_pred_bht_br_vld)
      bht_ref_nxt_st[1:0] = BHT_REF_IDLE;
    else
      bht_ref_nxt_st[1:0] = BHT_REF_UPD;
  end
  default:
  begin
    bht_ref_nxt_st[1:0] = BHT_REF_IDLE;
  end
endcase
// &CombEnd; @295
end

assign bht_miss_read1 = bht_ref_cur_st[1:0] == BHT_REF_IDLE && iu_ifu_bht_mispred;
assign bht_miss_read2 = bht_ref_cur_st[1:0] == BHT_REF_READ;
assign bht_miss_write = bht_ref_cur_st[1:0] == BHT_REF_WRTE && !id_pred_bht_br_vld;
assign bht_upd_write  = bht_ref_cur_st[1:0] == BHT_REF_IDLE && iu_ifu_br_vld
                  && !iu_ifu_bht_mispred && !id_pred_bht_br_vld && bht_upd_en;
assign bht_upd_vld      = bht_upd_write || bht_ref_cur_st[1:0] == BHT_REF_UPD && !id_pred_bht_br_vld;
assign bht_upd_idx[2:0] = bht_upd_write ? bht_ghr[2:0] : bht_ref_vghr[2:0];

// &CombBeg; @305
always @( iu_ifu_bht_taken
       or iu_ifu_bht_pred[1:0])
begin
case({iu_ifu_bht_pred[1:0], iu_ifu_bht_taken})
  3'b000:
  begin
    bht_upd_en       = 1'b0;
    bht_upd_val[1:0] = 2'b00;
  end
  3'b001:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b01;
  end
  3'b010:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b00;
  end
  3'b011:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b10;
  end
  3'b100:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b01;
  end
  3'b101:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b11;
  end
  3'b110:
  begin
    bht_upd_en       = 1'b1;
    bht_upd_val[1:0] = 2'b10;
  end
  3'b111:
  begin
    bht_upd_en       = 1'b0;
    bht_upd_val[1:0] = 2'b11;
  end
  default:
  begin
    bht_upd_en       = 1'b0;
    bht_upd_val[1:0] = {2{1'bx}};
  end
endcase
// &CombEnd; @353
end

always @ (posedge bht_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    bht_ref_vghr[HIS_WIDTH-1:0] <= {(HIS_WIDTH){1'b0}};
    bht_ref_val[1:0]            <= 2'b0;
  end
  else if(iu_ifu_bht_mispred || bht_upd_write)
  begin
    bht_ref_vghr[HIS_WIDTH-1:0] <= bht_ghr[HIS_WIDTH-1:0];
    bht_ref_val[1:0]            <= bht_upd_val[1:0];
  end
  else
  begin
    bht_ref_vghr[HIS_WIDTH-1:0] <= bht_ref_vghr[HIS_WIDTH-1:0];
    bht_ref_val[1:0]            <= bht_ref_val[1:0];
  end
end

assign bht_wr_val_single[1:0] = bht_upd_write ? bht_upd_val[1:0] : bht_ref_val[1:0];
assign bht_wr_val[15:0]       = {{8{bht_wr_val_single[1]}}, {8{bht_wr_val_single[0]}}};





assign bht_top_cur_st[1:0] = bht_ref_cur_st[1:0];


assign bht_id_pred_rslt[1:0] = bht_sel_result[1:0];
assign ifu_cp0_bht_inv_done = bht_inv_done;

// &ModuleEnd; @387
endmodule
























// &ModuleBeg; @23
module pa_ifu_bht_array(
  bht_cen,
  bht_din,
  bht_dout,
  bht_idx,
  bht_wen,
  cp0_yy_clk_en,
  forever_cpuclk,
  pad_yy_gate_clk_en_b
);

// &Ports; @24
input           bht_cen;
input   [15:0]  bht_din;
input   [8 :0]  bht_idx;
input   [15:0]  bht_wen;
input           cp0_yy_clk_en;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
output  [15:0]  bht_dout;

// &Regs; @25

// &Wires; @26
wire    [15:0]  bht_bwen_b;
wire            bht_cen;
wire            bht_cen_b;
wire            bht_clk;
wire    [15:0]  bht_din;
wire    [15:0]  bht_dout;
wire            bht_gwen_b;
wire            bht_icg_en;
wire    [8 :0]  bht_idx;
wire    [15:0]  bht_wen;
wire            cp0_yy_clk_en;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;











assign bht_icg_en = bht_cen;
// &Instance("gated_clk_cell", "x_bht_icg_cell"); @38
gated_clk_cell  x_bht_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bht_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bht_icg_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( .clk_in      (forever_cpuclk), @39
//           .external_en (1'b0          ), @40
//           .global_en   (cp0_yy_clk_en ), @41
//           .module_en   (1'b0          ), @42
//           .local_en    (bht_icg_en    ), @43
//           .clk_out     (bht_clk       ) @44
//          ); @45




assign bht_cen_b       = !bht_cen;
assign bht_gwen_b      = !(|bht_wen[15:0]);
assign bht_bwen_b[15:0] = ~bht_wen[15:0];

// &Instance("pa_spsram_128x16","x_pa_spsram_128x16"); @55
// &Instance("pa_spsram_256x16","x_pa_spsram_256x16"); @58
// &Instance("pa_spsram_512x16","x_pa_spsram_512x16"); @61
pa_spsram_512x16  x_pa_spsram_512x16 (
  .A          (bht_idx   ),
  .CEN        (bht_cen_b ),
  .CLK        (bht_clk   ),
  .D          (bht_din   ),
  .GWEN       (bht_gwen_b),
  .Q          (bht_dout  ),
  .WEN        (bht_bwen_b)
);

// &Instance("pa_spsram_1024x16","x_pa_spsram_1024x16"); @64
// &Connect( @66
//          .CLK    (bht_clk   ), @67
//          .CEN    (bht_cen_b ), @68
//          .GWEN   (bht_gwen_b), @69
//          .WEN    (bht_bwen_b), @70
//          .A      (bht_idx   ), @71
//          .D      (bht_din   ), @72
//          .Q      (bht_dout  ) @73
//        ); @74

// &ModuleEnd; @76
endmodule
























// &ModuleBeg; @23
module pa_ifu_btb(
  btb_pcgen_tar_pc,
  btb_xx_chgflw_vld
);

// &Ports; @24
output  [31:0]  btb_pcgen_tar_pc;
output          btb_xx_chgflw_vld;

// &Regs; @25

// &Wires; @26
wire    [31:0]  btb_pcgen_tar_pc;
wire            btb_xx_chgflw_vld;


// &Instance("gated_clk_cell", "x_btb_icg_cell"); @49
// &Connect( .clk_in     (forever_cpuclk), @50
//           .external_en(1'b0          ), @51
//           .global_en  (cp0_yy_clk_en ), @52
//           .module_en  (1'b0          ), @53
//           .local_en   (btb_icg_en    ), @54
//           .clk_out    (btb_clk       ) @55
//          ); @56
// &ConnRule(s/_x$/[0]/); @63
// &ConnRule(s/_y$/_0/); @64
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry0"); @65
// &ConnRule(s/_x$/[1]/); @67
// &ConnRule(s/_y$/_1/); @68
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry1"); @69
// &ConnRule(s/_x$/[2]/); @71
// &ConnRule(s/_y$/_2/); @72
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry2"); @73
// &ConnRule(s/_x$/[3]/); @75
// &ConnRule(s/_y$/_3/); @76
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry3"); @77
// &ConnRule(s/_x$/[4]/); @79
// &ConnRule(s/_y$/_4/); @80
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry4"); @81
// &ConnRule(s/_x$/[5]/); @83
// &ConnRule(s/_y$/_5/); @84
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry5"); @85
// &ConnRule(s/_x$/[6]/); @87
// &ConnRule(s/_y$/_6/); @88
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry6"); @89
// &ConnRule(s/_x$/[7]/); @91
// &ConnRule(s/_y$/_7/); @92
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry7"); @93
// &ConnRule(s/_x$/[8]/); @95
// &ConnRule(s/_y$/_8/); @96
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry8"); @97
// &ConnRule(s/_x$/[9]/); @99
// &ConnRule(s/_y$/_9/); @100
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry9"); @101
// &ConnRule(s/_x$/[10]/); @103
// &ConnRule(s/_y$/_10/); @104
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry10"); @105
// &ConnRule(s/_x$/[11]/); @107
// &ConnRule(s/_y$/_11/); @108
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry11"); @109
// &ConnRule(s/_x$/[12]/); @111
// &ConnRule(s/_y$/_12/); @112
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry12"); @113
// &ConnRule(s/_x$/[13]/); @115
// &ConnRule(s/_y$/_13/); @116
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry13"); @117
// &ConnRule(s/_x$/[14]/); @119
// &ConnRule(s/_y$/_14/); @120
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry14"); @121
// &ConnRule(s/_x$/[15]/); @123
// &ConnRule(s/_y$/_15/); @124
// &Instance("pa_ifu_btb_entry","x_pa_ifu_btb_entry15"); @125
// &Force("bus", "idu_iu_ex1_cur_pc", 31, 0); @156
// &Force("bus", "id_pred_btb_cur_pc", 31, 0); @167
// &Force("bus", "id_pred_btb_tar_pc", 31, 0); @168
// &CombBeg; @194
// &CombEnd; @214
// &Force("bus", "pcgen_btb_pc", 31, 0); @233
// &Force("bus", "pcgen_btb_addr", 31, 0); @234
assign btb_xx_chgflw_vld      = 1'b0;
assign btb_pcgen_tar_pc[31:0] = {32{1'b0}};

// &ModuleEnd; @242
endmodule
























// &ModuleBeg; @23
module pa_ifu_ctrl(
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_ifu_srst_mask,
  cp0_ifu_srst_req,
  ctrl_ibuf_pop_en,
  ctrl_ifetch_req_abort,
  ctrl_ifetch_req_vld,
  ctrl_pcgen_inst_vld,
  ctrl_pcgen_pipedown,
  ibuf_ctrl_inst_fetch,
  id_pred_ctrl_stall,
  idu_ifu_id_stall,
  idu_ifu_tail_vld,
  ifetch_ctrl_inst_vld,
  pcgen_ctrl_chgflw_vld,
  rtu_ifu_lockup_mask,
  rtu_ifu_lockup_req,
  rtu_ifu_xx_fe_flush,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_tail_int_vld,
  sysio_xx_halt_req,
  vec_ctrl_reset_mask,
  vec_ctrl_seq_mask
);

// &Ports; @24
input        cp0_ifu_in_lpmd;
input        cp0_ifu_lpmd_req;
input        cp0_ifu_srst_mask;
input        cp0_ifu_srst_req;
input        ibuf_ctrl_inst_fetch;
input        id_pred_ctrl_stall;
input        idu_ifu_id_stall;
input        idu_ifu_tail_vld;
input        ifetch_ctrl_inst_vld;
input        pcgen_ctrl_chgflw_vld;
input        rtu_ifu_lockup_mask;
input        rtu_ifu_lockup_req;
input        rtu_ifu_xx_fe_flush;
input        rtu_yy_xx_dbgon;
input        rtu_yy_xx_tail_int_vld;
input        sysio_xx_halt_req;
input        vec_ctrl_reset_mask;
input        vec_ctrl_seq_mask;
output       ctrl_ibuf_pop_en;
output       ctrl_ifetch_req_abort;
output       ctrl_ifetch_req_vld;
output       ctrl_pcgen_inst_vld;
output       ctrl_pcgen_pipedown;

// &Regs; @25

// &Wires; @26
wire         cp0_ifu_in_lpmd;
wire         cp0_ifu_lpmd_req;
wire         cp0_ifu_srst_mask;
wire         cp0_ifu_srst_req;
wire         ctrl_ibuf_pop_en;
wire         ctrl_if_abort;
wire         ctrl_if_pipedown;
wire         ctrl_ifetch_req_abort;
wire         ctrl_ifetch_req_vld;
wire         ctrl_inst_fetch;
wire         ctrl_pcgen_inst_vld;
wire         ctrl_pcgen_pipedown;
wire         ibuf_ctrl_inst_fetch;
wire         id_pred_ctrl_stall;
wire         idu_ifu_id_stall;
wire         idu_ifu_tail_vld;
wire         ifetch_ctrl_inst_vld;
wire         pcgen_ctrl_chgflw_vld;
wire         rtu_ifu_lockup_mask;
wire         rtu_ifu_lockup_req;
wire         rtu_ifu_xx_fe_flush;
wire         rtu_yy_xx_dbgon;
wire         rtu_yy_xx_tail_int_vld;
wire         sysio_xx_halt_req;
wire         vec_ctrl_reset_mask;
wire         vec_ctrl_seq_mask;














assign ctrl_inst_fetch = ibuf_ctrl_inst_fetch
                      && !(cp0_ifu_in_lpmd || cp0_ifu_lpmd_req)
                      && !rtu_yy_xx_dbgon
                      && !vec_ctrl_reset_mask
                      && !cp0_ifu_srst_req
                      && !cp0_ifu_srst_mask
                      && !rtu_ifu_lockup_req
                      && !rtu_ifu_lockup_mask
                      && !sysio_xx_halt_req
                      && !vec_ctrl_seq_mask;




assign ctrl_if_pipedown = ifetch_ctrl_inst_vld && !id_pred_ctrl_stall;




assign ctrl_if_abort = rtu_ifu_xx_fe_flush || pcgen_ctrl_chgflw_vld || idu_ifu_tail_vld || rtu_yy_xx_tail_int_vld;






assign ctrl_ibuf_pop_en       = !idu_ifu_id_stall;

assign ctrl_ifetch_req_vld    = ctrl_inst_fetch;
assign ctrl_ifetch_req_abort  = ctrl_if_abort;

assign ctrl_pcgen_pipedown    = ctrl_if_pipedown;
assign ctrl_pcgen_inst_vld    = ifetch_ctrl_inst_vld;


// &ModuleEnd; @78
endmodule
























// &ModuleBeg; @23
module pa_ifu_ibuf(
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_ibuf_pop_en,
  forever_cpuclk,
  had_ifu_ir,
  had_ifu_ir_vld,
  ibuf_ctrl_inst_fetch,
  ibuf_id_pred_hungry,
  ibuf_ipack_stall,
  ibuf_top_id_stall,
  ibuf_top_vld_num,
  id_pred_ibuf_br_taken0,
  id_pred_ibuf_br_taken1,
  id_pred_ibuf_chgflw_vld0,
  id_pred_ibuf_inst_bkpt0,
  id_pred_ibuf_inst_bkpt1,
  idu_ifu_id_stall,
  idu_ifu_tail_vld,
  ifetch_ibuf_idle,
  ifetch_xx_not_busy,
  ifu_idu_id_expt_vld,
  ifu_idu_id_inst,
  ifu_idu_id_inst_bkpt,
  ifu_idu_id_inst_vld,
  ifu_idu_id_pred_taken,
  ipack_ibuf_acc_err,
  ipack_ibuf_first_16,
  ipack_ibuf_inst,
  ipack_ibuf_inst_all,
  ipack_ibuf_inst_empty,
  ipack_ibuf_inst_full,
  ipack_ibuf_inst_one,
  ipack_ibuf_inst_two,
  ipack_ibuf_inst_vld,
  ipack_ibuf_inst_vld_raw,
  pad_yy_gate_clk_en_b,
  pcgen_ibuf_chgflw_vld,
  rtu_ifu_xx_fe_flush,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_tail_int_vld,
  vec_ibuf_warm_up
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_ibuf_pop_en;
input           forever_cpuclk;
input   [31:0]  had_ifu_ir;
input           had_ifu_ir_vld;
input   [1 :0]  id_pred_ibuf_br_taken0;
input   [1 :0]  id_pred_ibuf_br_taken1;
input           id_pred_ibuf_chgflw_vld0;
input   [8 :0]  id_pred_ibuf_inst_bkpt0;
input   [8 :0]  id_pred_ibuf_inst_bkpt1;
input           idu_ifu_id_stall;
input           idu_ifu_tail_vld;
input           ifetch_ibuf_idle;
input           ifetch_xx_not_busy;
input   [2 :0]  ipack_ibuf_acc_err;
input           ipack_ibuf_first_16;
input   [47:0]  ipack_ibuf_inst;
input           ipack_ibuf_inst_all;
input           ipack_ibuf_inst_empty;
input           ipack_ibuf_inst_full;
input           ipack_ibuf_inst_one;
input           ipack_ibuf_inst_two;
input           ipack_ibuf_inst_vld;
input           ipack_ibuf_inst_vld_raw;
input           pad_yy_gate_clk_en_b;
input           pcgen_ibuf_chgflw_vld;
input           rtu_ifu_xx_fe_flush;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_tail_int_vld;
input           vec_ibuf_warm_up;
output          ibuf_ctrl_inst_fetch;
output          ibuf_id_pred_hungry;
output          ibuf_ipack_stall;
output          ibuf_top_id_stall;
output  [2 :0]  ibuf_top_vld_num;
output          ifu_idu_id_expt_vld;
output  [31:0]  ifu_idu_id_inst;
output  [8 :0]  ifu_idu_id_inst_bkpt;
output          ifu_idu_id_inst_vld;
output  [1 :0]  ifu_idu_id_pred_taken;

// &Regs; @25
reg             ibuf_fetch_stall;
reg     [5 :0]  pop0;
reg             pop0_acc_err;
reg     [5 :0]  pop0_bypass;
reg     [15:0]  pop0_inst;
reg     [8 :0]  pop0_inst_bkpt;
reg     [1 :0]  pop0_pred_taken;
reg     [5 :0]  pop0_shift;
reg             pop0_vld;
reg             pop1_acc_err;
reg     [15:0]  pop1_inst;
reg     [8 :0]  pop1_inst_bkpt;
reg     [1 :0]  pop1_pred_taken;
reg             pop1_vld;
reg     [5 :0]  push0;
reg     [5 :0]  push0_bypass;
reg     [5 :0]  push0_shift;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_ibuf_pop_en;
wire            entry0_acc_err;
wire            entry0_create0_data_en;
wire            entry0_create0_en;
wire            entry0_create1_data_en;
wire            entry0_create1_en;
wire            entry0_create2_data_en;
wire            entry0_create2_en;
wire    [15:0]  entry0_inst;
wire    [8 :0]  entry0_inst_bkpt;
wire    [1 :0]  entry0_pred_taken;
wire            entry0_retire0_en;
wire            entry0_retire1_en;
wire            entry0_vld;
wire            entry1_acc_err;
wire            entry1_create0_data_en;
wire            entry1_create0_en;
wire            entry1_create1_data_en;
wire            entry1_create1_en;
wire            entry1_create2_data_en;
wire            entry1_create2_en;
wire    [15:0]  entry1_inst;
wire    [8 :0]  entry1_inst_bkpt;
wire    [1 :0]  entry1_pred_taken;
wire            entry1_retire0_en;
wire            entry1_retire1_en;
wire            entry1_vld;
wire            entry2_acc_err;
wire            entry2_create0_data_en;
wire            entry2_create0_en;
wire            entry2_create1_data_en;
wire            entry2_create1_en;
wire            entry2_create2_data_en;
wire            entry2_create2_en;
wire    [15:0]  entry2_inst;
wire    [8 :0]  entry2_inst_bkpt;
wire    [1 :0]  entry2_pred_taken;
wire            entry2_retire0_en;
wire            entry2_retire1_en;
wire            entry2_vld;
wire            entry3_acc_err;
wire            entry3_create0_data_en;
wire            entry3_create0_en;
wire            entry3_create1_data_en;
wire            entry3_create1_en;
wire            entry3_create2_data_en;
wire            entry3_create2_en;
wire    [15:0]  entry3_inst;
wire    [8 :0]  entry3_inst_bkpt;
wire    [1 :0]  entry3_pred_taken;
wire            entry3_retire0_en;
wire            entry3_retire1_en;
wire            entry3_vld;
wire            entry4_acc_err;
wire            entry4_create0_data_en;
wire            entry4_create0_en;
wire            entry4_create1_data_en;
wire            entry4_create1_en;
wire            entry4_create2_data_en;
wire            entry4_create2_en;
wire    [15:0]  entry4_inst;
wire    [8 :0]  entry4_inst_bkpt;
wire    [1 :0]  entry4_pred_taken;
wire            entry4_retire0_en;
wire            entry4_retire1_en;
wire            entry4_vld;
wire            entry5_acc_err;
wire            entry5_create0_data_en;
wire            entry5_create0_en;
wire            entry5_create1_data_en;
wire            entry5_create1_en;
wire            entry5_create2_data_en;
wire            entry5_create2_en;
wire    [15:0]  entry5_inst;
wire    [8 :0]  entry5_inst_bkpt;
wire    [1 :0]  entry5_pred_taken;
wire            entry5_retire0_en;
wire            entry5_retire1_en;
wire            entry5_vld;
wire            forever_cpuclk;
wire            had_create0_en;
wire            had_create1_en;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire            ibuf_acc_err;
wire            ibuf_cpuclk;
wire            ibuf_create0_acc_err;
wire            ibuf_create0_data_en;
wire            ibuf_create0_en;
wire    [15:0]  ibuf_create0_inst;
wire    [8 :0]  ibuf_create0_inst_bkpt;
wire    [1 :0]  ibuf_create0_pred_taken;
wire            ibuf_create1_acc_err;
wire            ibuf_create1_data_en;
wire            ibuf_create1_en;
wire    [15:0]  ibuf_create1_inst;
wire    [8 :0]  ibuf_create1_inst_bkpt;
wire    [1 :0]  ibuf_create1_pred_taken;
wire            ibuf_create2_acc_err;
wire            ibuf_create2_data_en;
wire            ibuf_create2_en;
wire    [15:0]  ibuf_create2_inst;
wire    [8 :0]  ibuf_create2_inst_bkpt;
wire    [1 :0]  ibuf_create2_pred_taken;
wire            ibuf_ctrl_inst_fetch;
wire            ibuf_empty;
wire            ibuf_fetch_empty;
wire            ibuf_fetch_five;
wire            ibuf_fetch_four;
wire            ibuf_fetch_three;
wire            ibuf_fetch_two;
wire            ibuf_five_avalbe;
wire            ibuf_flush_en;
wire            ibuf_four_avalbe;
wire            ibuf_full;
wire            ibuf_icg_en;
wire            ibuf_id_pred_hungry;
wire    [31:0]  ibuf_inst;
wire            ibuf_inst16;
wire            ibuf_inst32;
wire            ibuf_inst_32_vld;
wire    [8 :0]  ibuf_inst_bkpt;
wire            ibuf_inst_fetch;
wire            ibuf_inst_vld;
wire            ibuf_ipack_stall;
wire            ibuf_one_avalbe;
wire    [1 :0]  ibuf_pred_taken;
wire            ibuf_retire0_en;
wire            ibuf_retire0_en_vld;
wire            ibuf_retire1_en;
wire            ibuf_three_avalbe;
wire            ibuf_top_id_stall;
wire    [2 :0]  ibuf_top_vld_num;
wire            ibuf_two_avalbe;
wire    [2 :0]  ibuf_vld_num;
wire    [1 :0]  id_pred_ibuf_br_taken0;
wire    [1 :0]  id_pred_ibuf_br_taken1;
wire            id_pred_ibuf_chgflw_vld0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt1;
wire            idu_ifu_id_stall;
wire            idu_ifu_tail_vld;
wire            ifetch_ibuf_idle;
wire            ifetch_xx_not_busy;
wire            ifu_idu_id_expt_vld;
wire    [31:0]  ifu_idu_id_inst;
wire    [8 :0]  ifu_idu_id_inst_bkpt;
wire            ifu_idu_id_inst_vld;
wire    [1 :0]  ifu_idu_id_pred_taken;
wire            ipack_bypass_mask;
wire            ipack_bypass_vld;
wire            ipack_create0_data_en;
wire            ipack_create0_en;
wire            ipack_create1_data_en;
wire            ipack_create1_en;
wire    [2 :0]  ipack_ibuf_acc_err;
wire            ipack_ibuf_first_16;
wire    [47:0]  ipack_ibuf_inst;
wire            ipack_ibuf_inst_all;
wire            ipack_ibuf_inst_empty;
wire            ipack_ibuf_inst_full;
wire            ipack_ibuf_inst_one;
wire            ipack_ibuf_inst_two;
wire            ipack_ibuf_inst_vld;
wire            ipack_ibuf_inst_vld_raw;
wire            pad_yy_gate_clk_en_b;
wire            pcgen_ibuf_chgflw_vld;
wire            pop0_inst_32;
wire    [5 :0]  pop1;
wire    [5 :0]  push1;
wire    [5 :0]  push1_bypass;
wire    [5 :0]  push2;
wire    [5 :0]  push2_bypass;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_tail_int_vld;
wire            vec_ibuf_warm_up;















assign ibuf_icg_en = !ibuf_empty
                   | pop0_vld
                   | ipack_ibuf_inst_vld
                   | had_create0_en;
// &Instance("gated_clk_cell", "x_ifu_ibuf_icg_cell"); @45
gated_clk_cell  x_ifu_ibuf_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ibuf_cpuclk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ibuf_icg_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @46
//          .external_en (1'b0), @47
//          .global_en   (cp0_yy_clk_en), @48
//          .module_en   (1'b0), @49
//          .local_en    (ibuf_icg_en), @50
//          .clk_out     (ibuf_cpuclk) @51
//         ); @52




parameter ENTRY_NUM = 6;

// &ConnRule(s/ibuf_entry/entry0/); @59
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry0"); @60
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry0 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry0_acc_err            ),
  .ibuf_entry_create0_data_en (entry0_create0_data_en    ),
  .ibuf_entry_create0_en      (entry0_create0_en         ),
  .ibuf_entry_create1_data_en (entry0_create1_data_en    ),
  .ibuf_entry_create1_en      (entry0_create1_en         ),
  .ibuf_entry_create2_data_en (entry0_create2_data_en    ),
  .ibuf_entry_create2_en      (entry0_create2_en         ),
  .ibuf_entry_inst            (entry0_inst               ),
  .ibuf_entry_inst_bkpt       (entry0_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry0_pred_taken         ),
  .ibuf_entry_retire0_en      (entry0_retire0_en         ),
  .ibuf_entry_retire1_en      (entry0_retire1_en         ),
  .ibuf_entry_vld             (entry0_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);


// &ConnRule(s/ibuf_entry/entry1/); @62
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry1"); @63
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry1 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry1_acc_err            ),
  .ibuf_entry_create0_data_en (entry1_create0_data_en    ),
  .ibuf_entry_create0_en      (entry1_create0_en         ),
  .ibuf_entry_create1_data_en (entry1_create1_data_en    ),
  .ibuf_entry_create1_en      (entry1_create1_en         ),
  .ibuf_entry_create2_data_en (entry1_create2_data_en    ),
  .ibuf_entry_create2_en      (entry1_create2_en         ),
  .ibuf_entry_inst            (entry1_inst               ),
  .ibuf_entry_inst_bkpt       (entry1_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry1_pred_taken         ),
  .ibuf_entry_retire0_en      (entry1_retire0_en         ),
  .ibuf_entry_retire1_en      (entry1_retire1_en         ),
  .ibuf_entry_vld             (entry1_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);


// &ConnRule(s/ibuf_entry/entry2/); @65
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry2"); @66
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry2 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry2_acc_err            ),
  .ibuf_entry_create0_data_en (entry2_create0_data_en    ),
  .ibuf_entry_create0_en      (entry2_create0_en         ),
  .ibuf_entry_create1_data_en (entry2_create1_data_en    ),
  .ibuf_entry_create1_en      (entry2_create1_en         ),
  .ibuf_entry_create2_data_en (entry2_create2_data_en    ),
  .ibuf_entry_create2_en      (entry2_create2_en         ),
  .ibuf_entry_inst            (entry2_inst               ),
  .ibuf_entry_inst_bkpt       (entry2_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry2_pred_taken         ),
  .ibuf_entry_retire0_en      (entry2_retire0_en         ),
  .ibuf_entry_retire1_en      (entry2_retire1_en         ),
  .ibuf_entry_vld             (entry2_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);


// &ConnRule(s/ibuf_entry/entry3/); @68
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry3"); @69
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry3 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry3_acc_err            ),
  .ibuf_entry_create0_data_en (entry3_create0_data_en    ),
  .ibuf_entry_create0_en      (entry3_create0_en         ),
  .ibuf_entry_create1_data_en (entry3_create1_data_en    ),
  .ibuf_entry_create1_en      (entry3_create1_en         ),
  .ibuf_entry_create2_data_en (entry3_create2_data_en    ),
  .ibuf_entry_create2_en      (entry3_create2_en         ),
  .ibuf_entry_inst            (entry3_inst               ),
  .ibuf_entry_inst_bkpt       (entry3_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry3_pred_taken         ),
  .ibuf_entry_retire0_en      (entry3_retire0_en         ),
  .ibuf_entry_retire1_en      (entry3_retire1_en         ),
  .ibuf_entry_vld             (entry3_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);


// &ConnRule(s/ibuf_entry/entry4/); @71
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry4"); @72
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry4 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry4_acc_err            ),
  .ibuf_entry_create0_data_en (entry4_create0_data_en    ),
  .ibuf_entry_create0_en      (entry4_create0_en         ),
  .ibuf_entry_create1_data_en (entry4_create1_data_en    ),
  .ibuf_entry_create1_en      (entry4_create1_en         ),
  .ibuf_entry_create2_data_en (entry4_create2_data_en    ),
  .ibuf_entry_create2_en      (entry4_create2_en         ),
  .ibuf_entry_inst            (entry4_inst               ),
  .ibuf_entry_inst_bkpt       (entry4_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry4_pred_taken         ),
  .ibuf_entry_retire0_en      (entry4_retire0_en         ),
  .ibuf_entry_retire1_en      (entry4_retire1_en         ),
  .ibuf_entry_vld             (entry4_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);


// &ConnRule(s/ibuf_entry/entry5/); @74
// &Instance("pa_ifu_ibuf_entry","x_pa_ifu_ibuf_entry5"); @75
pa_ifu_ibuf_entry  x_pa_ifu_ibuf_entry5 (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_cpuclk                (ibuf_cpuclk               ),
  .ibuf_create0_acc_err       (ibuf_create0_acc_err      ),
  .ibuf_create0_inst          (ibuf_create0_inst         ),
  .ibuf_create0_inst_bkpt     (ibuf_create0_inst_bkpt    ),
  .ibuf_create0_pred_taken    (ibuf_create0_pred_taken   ),
  .ibuf_create1_acc_err       (ibuf_create1_acc_err      ),
  .ibuf_create1_inst          (ibuf_create1_inst         ),
  .ibuf_create1_inst_bkpt     (ibuf_create1_inst_bkpt    ),
  .ibuf_create1_pred_taken    (ibuf_create1_pred_taken   ),
  .ibuf_create2_acc_err       (ibuf_create2_acc_err      ),
  .ibuf_create2_inst          (ibuf_create2_inst         ),
  .ibuf_create2_inst_bkpt     (ibuf_create2_inst_bkpt    ),
  .ibuf_create2_pred_taken    (ibuf_create2_pred_taken   ),
  .ibuf_entry_acc_err         (entry5_acc_err            ),
  .ibuf_entry_create0_data_en (entry5_create0_data_en    ),
  .ibuf_entry_create0_en      (entry5_create0_en         ),
  .ibuf_entry_create1_data_en (entry5_create1_data_en    ),
  .ibuf_entry_create1_en      (entry5_create1_en         ),
  .ibuf_entry_create2_data_en (entry5_create2_data_en    ),
  .ibuf_entry_create2_en      (entry5_create2_en         ),
  .ibuf_entry_inst            (entry5_inst               ),
  .ibuf_entry_inst_bkpt       (entry5_inst_bkpt          ),
  .ibuf_entry_pred_taken      (entry5_pred_taken         ),
  .ibuf_entry_retire0_en      (entry5_retire0_en         ),
  .ibuf_entry_retire1_en      (entry5_retire1_en         ),
  .ibuf_entry_vld             (entry5_vld                ),
  .ibuf_flush_en              (ibuf_flush_en             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .vec_ibuf_warm_up           (vec_ibuf_warm_up          )
);









assign ibuf_retire0_en = pop0_vld && ctrl_ibuf_pop_en;
assign ibuf_retire1_en = ibuf_inst32 && ctrl_ibuf_pop_en;

assign ibuf_retire0_en_vld = ibuf_retire0_en;
assign ibuf_inst_32_vld = ibuf_inst32;

assign ibuf_flush_en   = rtu_ifu_xx_fe_flush || pcgen_ibuf_chgflw_vld || idu_ifu_tail_vld || rtu_yy_xx_tail_int_vld;


always @(posedge ibuf_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pop0[ENTRY_NUM-1:0] <= {{(ENTRY_NUM-1){1'b0}}, 1'b1};
  else if(ibuf_flush_en)
    pop0[ENTRY_NUM-1:0] <= pop0[ENTRY_NUM-1:0];
  else if(ibuf_retire0_en_vld)
    pop0[ENTRY_NUM-1:0] <= pop0_shift[ENTRY_NUM-1:0];
  else if(ipack_bypass_vld && !idu_ifu_id_stall)
    pop0[ENTRY_NUM-1:0] <= pop0_bypass[ENTRY_NUM-1:0];
end

// &CombBeg; @105
always @( pop0[5:0]
       or ibuf_inst_32_vld)
begin
  if(ibuf_inst_32_vld)
    pop0_shift[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-3:0],
                                 pop0[ENTRY_NUM-1:ENTRY_NUM-2]};
  else
    pop0_shift[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-2:0],
                                 pop0[ENTRY_NUM-1]};
// &CombEnd; @112
end

// &CombBeg; @114
always @( ipack_ibuf_first_16
       or ipack_ibuf_inst_one
       or pop0[5:0])
begin
  if(ipack_ibuf_inst_one || ipack_ibuf_first_16)
    pop0_bypass[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-2:0],
                                  pop0[ENTRY_NUM-1]};
  else
    pop0_bypass[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-3:0],
                                  pop0[ENTRY_NUM-1:ENTRY_NUM-2]};
// &CombEnd; @121
end


assign {entry5_retire0_en,
        entry4_retire0_en,
        entry3_retire0_en,
        entry2_retire0_en,
        entry1_retire0_en,
        entry0_retire0_en} = pop0[ENTRY_NUM-1:0] & {ENTRY_NUM{ibuf_retire0_en}};


assign pop1[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-2:0],
                              pop0[ENTRY_NUM-1]};


assign {entry5_retire1_en,
        entry4_retire1_en,
        entry3_retire1_en,
        entry2_retire1_en,
        entry1_retire1_en,
        entry0_retire1_en} = pop1[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_retire1_en}};

// &CombBeg; @144
always @( entry2_inst_bkpt[8:0]
       or entry3_acc_err
       or entry4_inst_bkpt[8:0]
       or entry1_vld
       or entry1_inst_bkpt[8:0]
       or entry1_acc_err
       or entry2_inst[15:0]
       or entry3_inst_bkpt[8:0]
       or entry5_inst[15:0]
       or entry4_acc_err
       or entry0_acc_err
       or entry4_pred_taken[1:0]
       or entry0_pred_taken[1:0]
       or entry5_acc_err
       or entry5_vld
       or entry4_inst[15:0]
       or entry2_vld
       or entry0_vld
       or entry0_inst_bkpt[8:0]
       or entry1_inst[15:0]
       or entry3_vld
       or entry5_pred_taken[1:0]
       or entry4_vld
       or entry2_acc_err
       or entry3_inst[15:0]
       or pop0[5:0]
       or entry5_inst_bkpt[8:0]
       or entry2_pred_taken[1:0]
       or entry3_pred_taken[1:0]
       or entry1_pred_taken[1:0]
       or entry0_inst[15:0])
begin
  case(pop0[ENTRY_NUM-1:0])
  6'b0001:
  begin
    pop0_vld          = entry0_vld;
    pop0_inst[15:0]   = entry0_inst[15:0];
    pop0_pred_taken[1:0] = entry0_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry0_inst_bkpt[8:0];
    pop0_acc_err      = entry0_acc_err;
  end
  6'b0010:
  begin
    pop0_vld          = entry1_vld;
    pop0_inst[15:0]   = entry1_inst[15:0];
    pop0_pred_taken[1:0] = entry1_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry1_inst_bkpt[8:0];
    pop0_acc_err      = entry1_acc_err;
  end
  6'b0100:
  begin
    pop0_vld          = entry2_vld;
    pop0_inst[15:0]   = entry2_inst[15:0];
    pop0_pred_taken[1:0] = entry2_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry2_inst_bkpt[8:0];
    pop0_acc_err      = entry2_acc_err;
  end
  6'b1000:
  begin
    pop0_vld          = entry3_vld;
    pop0_inst[15:0]   = entry3_inst[15:0];
    pop0_pred_taken[1:0] = entry3_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry3_inst_bkpt[8:0];
    pop0_acc_err      = entry3_acc_err;
  end
  6'b10000:
  begin
    pop0_vld          = entry4_vld;
    pop0_inst[15:0]   = entry4_inst[15:0];
    pop0_pred_taken[1:0] = entry4_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry4_inst_bkpt[8:0];
    pop0_acc_err      = entry4_acc_err;
  end
  6'b100000:
  begin
    pop0_vld          = entry5_vld;
    pop0_inst[15:0]   = entry5_inst[15:0];
    pop0_pred_taken[1:0] = entry5_pred_taken[1:0];
    pop0_inst_bkpt[8:0]  = entry5_inst_bkpt[8:0];
    pop0_acc_err      = entry5_acc_err;
  end
  default:
  begin
    pop0_vld          = 1'bx;
    pop0_inst[15:0]   = 16'bx;
    pop0_pred_taken[1:0] = 2'bx;
    pop0_inst_bkpt[8:0] = 9'bx;
    pop0_acc_err      = 1'bx;
  end
  endcase
// &CombEnd; @203
end


// &CombBeg; @206
always @( entry2_inst_bkpt[8:0]
       or entry3_acc_err
       or entry4_inst_bkpt[8:0]
       or entry1_vld
       or entry1_inst_bkpt[8:0]
       or entry1_acc_err
       or entry2_inst[15:0]
       or entry3_inst_bkpt[8:0]
       or entry5_inst[15:0]
       or entry4_acc_err
       or entry0_acc_err
       or entry4_pred_taken[1:0]
       or entry0_pred_taken[1:0]
       or entry5_acc_err
       or entry5_vld
       or entry4_inst[15:0]
       or entry2_vld
       or entry0_vld
       or entry0_inst_bkpt[8:0]
       or entry1_inst[15:0]
       or entry3_vld
       or entry5_pred_taken[1:0]
       or entry4_vld
       or entry2_acc_err
       or entry3_inst[15:0]
       or entry5_inst_bkpt[8:0]
       or pop1[5:0]
       or entry2_pred_taken[1:0]
       or entry3_pred_taken[1:0]
       or entry1_pred_taken[1:0]
       or entry0_inst[15:0])
begin
  case(pop1[ENTRY_NUM-1:0])
  6'b0001:
  begin
    pop1_vld          = entry0_vld;
    pop1_inst[15:0]   = entry0_inst[15:0];
    pop1_pred_taken[1:0] = entry0_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry0_inst_bkpt[8:0];
    pop1_acc_err      = entry0_acc_err;
  end
  6'b0010:
  begin
    pop1_vld          = entry1_vld;
    pop1_inst[15:0]   = entry1_inst[15:0];
    pop1_pred_taken[1:0] = entry1_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry1_inst_bkpt[8:0];
    pop1_acc_err      = entry1_acc_err;
  end
  6'b0100:
  begin
    pop1_vld          = entry2_vld;
    pop1_inst[15:0]   = entry2_inst[15:0];
    pop1_pred_taken[1:0] = entry2_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry2_inst_bkpt[8:0];
    pop1_acc_err      = entry2_acc_err;
  end
  6'b1000:
  begin
    pop1_vld          = entry3_vld;
    pop1_inst[15:0]   = entry3_inst[15:0];
    pop1_pred_taken[1:0] = entry3_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry3_inst_bkpt[8:0];
    pop1_acc_err      = entry3_acc_err;
  end
  6'b10000:
  begin
    pop1_vld          = entry4_vld;
    pop1_inst[15:0]   = entry4_inst[15:0];
    pop1_pred_taken[1:0] = entry4_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry4_inst_bkpt[8:0];
    pop1_acc_err      = entry4_acc_err;
  end
  6'b100000:
  begin
    pop1_vld          = entry5_vld;
    pop1_inst[15:0]   = entry5_inst[15:0];
    pop1_pred_taken[1:0] = entry5_pred_taken[1:0];
    pop1_inst_bkpt[8:0] = entry5_inst_bkpt[8:0];
    pop1_acc_err      = entry5_acc_err;
  end
  default:
  begin
    pop1_vld          = 1'bx;
    pop1_inst[15:0]   = 16'bx;
    pop1_pred_taken[1:0] = 2'bx;
    pop1_inst_bkpt[8:0] = 9'bx;
    pop1_acc_err      = 1'bx;
  end
  endcase
// &CombEnd; @265
end









assign ipack_bypass_vld = ibuf_empty && ipack_ibuf_inst_vld;
assign ipack_bypass_mask = ibuf_empty && !idu_ifu_id_stall;
assign ipack_create0_en = ipack_ibuf_inst_vld && !(ipack_bypass_mask
                        && !ipack_ibuf_inst_two);
assign ipack_create0_data_en = ipack_ibuf_inst_vld;
assign had_create0_en   = rtu_yy_xx_dbgon && had_ifu_ir_vld;

assign ibuf_create0_en  = ipack_create0_en || had_create0_en;
assign ibuf_create0_data_en  = ipack_create0_data_en || had_create0_en;

// &Force("bus", "had_ifu_ir", 31, 0); @285

assign ipack_create1_en = ipack_ibuf_inst_vld
                       && !ipack_bypass_mask
                       && !ipack_ibuf_inst_one;
assign ipack_create1_data_en = ipack_ibuf_inst_vld
                       && !ipack_ibuf_inst_one;
assign had_create1_en   = had_create0_en && had_ifu_ir[1:0] == 2'b11;

assign ibuf_create1_en  = ipack_create1_en || had_create1_en;
assign ibuf_create1_data_en  = ipack_create1_data_en || had_create1_en;


assign ibuf_create2_en  = ipack_ibuf_inst_vld && !id_pred_ibuf_chgflw_vld0
                       && !ipack_bypass_mask && ipack_ibuf_inst_all;
assign ibuf_create2_data_en = ipack_ibuf_inst_vld && !id_pred_ibuf_chgflw_vld0
                       && ipack_ibuf_inst_all;



always @(posedge ibuf_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    push0[ENTRY_NUM-1:0] <= {{(ENTRY_NUM-1){1'b0}}, 1'b1};
  else if(ibuf_flush_en)
    push0[ENTRY_NUM-1:0] <= pop0[ENTRY_NUM-1:0];
  else if(ibuf_create0_data_en)
    push0[ENTRY_NUM-1:0] <= push0_shift[ENTRY_NUM-1:0];
end

// &CombBeg; @315
always @( push0[5:0]
       or ibuf_create1_data_en
       or ibuf_create2_data_en)
begin
  if(ibuf_create2_data_en)
    push0_shift[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-4:0],
                                  push0[ENTRY_NUM-1:ENTRY_NUM-3]};
  else if(ibuf_create1_data_en)
    push0_shift[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-3:0],
                                  push0[ENTRY_NUM-1:ENTRY_NUM-2]};
  else
    push0_shift[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-2:0],
                                  push0[ENTRY_NUM-1]};
// &CombEnd; @325
end

// &CombBeg; @327
always @( push0[5:0]
       or idu_ifu_id_stall
       or ipack_ibuf_first_16
       or ipack_bypass_vld)
begin
  if(ipack_bypass_vld && !idu_ifu_id_stall)
    if(ipack_ibuf_first_16)
      push0_bypass[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-2:0],
                                     push0[ENTRY_NUM-1]};
    else
      push0_bypass[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-3:0],
                                     push0[ENTRY_NUM-1:ENTRY_NUM-2]};
  else
    push0_bypass[ENTRY_NUM-1:0] = push0[ENTRY_NUM-1:0];
// &CombEnd; @337
end


assign {entry5_create0_en,
        entry4_create0_en,
        entry3_create0_en,
        entry2_create0_en,
        entry1_create0_en,
        entry0_create0_en} = push0_bypass[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create0_en}};

assign {entry5_create0_data_en,
        entry4_create0_data_en,
        entry3_create0_data_en,
        entry2_create0_data_en,
        entry1_create0_data_en,
        entry0_create0_data_en} = push0[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create0_data_en}};


assign push1[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-2:0],
                               push0[ENTRY_NUM-1]};


assign push1_bypass[ENTRY_NUM-1:0] = {push0_bypass[ENTRY_NUM-2:0],
                                      push0_bypass[ENTRY_NUM-1]};


assign {entry5_create1_en,
        entry4_create1_en,
        entry3_create1_en,
        entry2_create1_en,
        entry1_create1_en,
        entry0_create1_en} = push1_bypass[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create1_en}};

assign {entry5_create1_data_en,
        entry4_create1_data_en,
        entry3_create1_data_en,
        entry2_create1_data_en,
        entry1_create1_data_en,
        entry0_create1_data_en} = push1[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create1_data_en}};


assign push2[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-3:0],
                               push0[ENTRY_NUM-1:ENTRY_NUM-2]};


assign push2_bypass[ENTRY_NUM-1:0] = {push0_bypass[ENTRY_NUM-3:0],
                                      push0_bypass[ENTRY_NUM-1:ENTRY_NUM-2]};


assign {entry5_create2_en,
        entry4_create2_en,
        entry3_create2_en,
        entry2_create2_en,
        entry1_create2_en,
        entry0_create2_en} = push2_bypass[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create2_en}};

assign {entry5_create2_data_en,
        entry4_create2_data_en,
        entry3_create2_data_en,
        entry2_create2_data_en,
        entry1_create2_data_en,
        entry0_create2_data_en} = push2[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create2_data_en}};













assign ibuf_create0_inst[15:0] = rtu_yy_xx_dbgon ? had_ifu_ir[15:0]
                                                 : ipack_ibuf_inst[15:0];
assign ibuf_create1_inst[15:0] = rtu_yy_xx_dbgon ? had_ifu_ir[31:16]
                                                 : ipack_ibuf_inst[31:16];
assign ibuf_create2_inst[15:0] = ipack_ibuf_inst[47:32];




assign ibuf_create0_pred_taken[1:0] = id_pred_ibuf_br_taken0[1:0];
assign ibuf_create1_pred_taken[1:0] = ipack_ibuf_first_16
                                    ? id_pred_ibuf_br_taken1[1:0]
                                    : id_pred_ibuf_br_taken0[1:0];
assign ibuf_create2_pred_taken[1:0] = id_pred_ibuf_br_taken1[1:0];

assign ibuf_create0_inst_bkpt[8:0]  = id_pred_ibuf_inst_bkpt0[8:0];
assign ibuf_create1_inst_bkpt[8:0]  = ipack_ibuf_first_16
                                    ? id_pred_ibuf_inst_bkpt1[8:0]
                                    : id_pred_ibuf_inst_bkpt0[8:0];
assign ibuf_create2_inst_bkpt[8:0]  = id_pred_ibuf_inst_bkpt1[8:0];

assign ibuf_create0_acc_err    = ipack_ibuf_acc_err[0];
assign ibuf_create1_acc_err    = ipack_ibuf_acc_err[1];
assign ibuf_create2_acc_err    = ipack_ibuf_acc_err[2];







assign ibuf_vld_num[2:0] = {2'b0, entry0_vld}
                         + {2'b0, entry1_vld}
                         + {2'b0, entry2_vld}
                         + {2'b0, entry3_vld}
                         + {2'b0, entry4_vld}
                         + {2'b0, entry5_vld};

assign ibuf_full         = ibuf_vld_num[2:0] == 3'b110;
assign ibuf_one_avalbe   = ibuf_vld_num[2:0] == 3'b101;
assign ibuf_two_avalbe   = ibuf_vld_num[2:0] == 3'b100;
assign ibuf_three_avalbe = ibuf_vld_num[2:0] == 3'b011;
assign ibuf_four_avalbe  = ibuf_vld_num[2:0] == 3'b010;
assign ibuf_five_avalbe  = ibuf_vld_num[2:0] == 3'b001;

assign ibuf_empty        = !(entry0_vld || entry1_vld || entry2_vld
                          || entry3_vld || entry4_vld || entry5_vld);


assign pop0_inst_32  = pop0_inst[1:0] == 2'b11;
assign ibuf_inst32   = pop0_vld && pop1_vld && pop0_inst_32;
assign ibuf_inst16   = pop0_vld && !pop0_inst_32;
assign ibuf_inst_vld = ibuf_inst32 || ibuf_inst16;

assign ibuf_inst[31:0] = {pop1_inst[15:0], pop0_inst[15:0]};
// &Force("nonport", "pop1_pred_taken"); @473
assign ibuf_pred_taken[1:0] = pop0_pred_taken[1:0];
// &Force("nonport", "pop1_inst_bkpt"); @475
assign ibuf_inst_bkpt[8:0] = pop0_inst_bkpt[8:0];
assign ibuf_acc_err    = (ibuf_inst32 && (pop0_acc_err || pop1_acc_err))
                      || (ibuf_inst16 &&  pop0_acc_err);




always @(posedge forever_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ibuf_fetch_stall <= 1'b0;
  else if(idu_ifu_id_stall)
    ibuf_fetch_stall <= 1'b1;
  else if(ibuf_fetch_stall)
    ibuf_fetch_stall <= 1'b0;
  else
    ibuf_fetch_stall <= ibuf_fetch_stall;
end

assign ibuf_fetch_empty = ibuf_empty;
assign ibuf_fetch_five = ibuf_five_avalbe;
assign ibuf_fetch_four   = ibuf_four_avalbe
                          && !(ipack_ibuf_inst_full
                          && !ifetch_ibuf_idle);
assign ibuf_fetch_three = ibuf_three_avalbe
                       && (ifetch_ibuf_idle
                        || ifetch_xx_not_busy &&
                           !ipack_ibuf_inst_vld_raw);
assign ibuf_fetch_two   = ibuf_two_avalbe
                       && (ifetch_ibuf_idle
                          && !ipack_ibuf_inst_full
                        || ifetch_xx_not_busy &&
                          ipack_ibuf_inst_empty);
assign ibuf_inst_fetch = ibuf_fetch_empty
                      || ibuf_fetch_five
                      || ibuf_fetch_four
                      || ibuf_fetch_three
                      || ibuf_fetch_two;






assign ibuf_ctrl_inst_fetch = ibuf_inst_fetch;// && !ibuf_fetch_stall;


assign ibuf_ipack_stall = (ibuf_full
                        || ibuf_one_avalbe
                        || ibuf_two_avalbe && ipack_ibuf_inst_full);


assign ibuf_id_pred_hungry = ibuf_empty || ibuf_five_avalbe || ibuf_four_avalbe;


assign ibuf_top_vld_num[2:0] = ibuf_vld_num[2:0];
assign ibuf_top_id_stall     = idu_ifu_id_stall;


assign ifu_idu_id_inst_vld   = ibuf_inst_vld || ipack_ibuf_inst_vld_raw;
assign ifu_idu_id_inst[31:0] = ibuf_empty ? ipack_ibuf_inst[31:0]
                                          : ibuf_inst[31:0];
assign ifu_idu_id_pred_taken[1:0] = ibuf_empty ? id_pred_ibuf_br_taken0[1:0]
                                               : ibuf_pred_taken[1:0];
assign ifu_idu_id_inst_bkpt[8:0]  = ibuf_empty ? id_pred_ibuf_inst_bkpt0[8:0]
                                               : ibuf_inst_bkpt[8:0];
assign ifu_idu_id_expt_vld   = ibuf_empty ? |ipack_ibuf_acc_err[1:0]
                                          : ibuf_acc_err;

// &ModuleEnd; @545
endmodule
























// &ModuleBeg; @23
module pa_ifu_ibuf_entry(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  ibuf_cpuclk,
  ibuf_create0_acc_err,
  ibuf_create0_inst,
  ibuf_create0_inst_bkpt,
  ibuf_create0_pred_taken,
  ibuf_create1_acc_err,
  ibuf_create1_inst,
  ibuf_create1_inst_bkpt,
  ibuf_create1_pred_taken,
  ibuf_create2_acc_err,
  ibuf_create2_inst,
  ibuf_create2_inst_bkpt,
  ibuf_create2_pred_taken,
  ibuf_entry_acc_err,
  ibuf_entry_create0_data_en,
  ibuf_entry_create0_en,
  ibuf_entry_create1_data_en,
  ibuf_entry_create1_en,
  ibuf_entry_create2_data_en,
  ibuf_entry_create2_en,
  ibuf_entry_inst,
  ibuf_entry_inst_bkpt,
  ibuf_entry_pred_taken,
  ibuf_entry_retire0_en,
  ibuf_entry_retire1_en,
  ibuf_entry_vld,
  ibuf_flush_en,
  pad_yy_gate_clk_en_b,
  vec_ibuf_warm_up
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           ibuf_cpuclk;
input           ibuf_create0_acc_err;
input   [15:0]  ibuf_create0_inst;
input   [8 :0]  ibuf_create0_inst_bkpt;
input   [1 :0]  ibuf_create0_pred_taken;
input           ibuf_create1_acc_err;
input   [15:0]  ibuf_create1_inst;
input   [8 :0]  ibuf_create1_inst_bkpt;
input   [1 :0]  ibuf_create1_pred_taken;
input           ibuf_create2_acc_err;
input   [15:0]  ibuf_create2_inst;
input   [8 :0]  ibuf_create2_inst_bkpt;
input   [1 :0]  ibuf_create2_pred_taken;
input           ibuf_entry_create0_data_en;
input           ibuf_entry_create0_en;
input           ibuf_entry_create1_data_en;
input           ibuf_entry_create1_en;
input           ibuf_entry_create2_data_en;
input           ibuf_entry_create2_en;
input           ibuf_entry_retire0_en;
input           ibuf_entry_retire1_en;
input           ibuf_flush_en;
input           pad_yy_gate_clk_en_b;
input           vec_ibuf_warm_up;
output          ibuf_entry_acc_err;
output  [15:0]  ibuf_entry_inst;
output  [8 :0]  ibuf_entry_inst_bkpt;
output  [1 :0]  ibuf_entry_pred_taken;
output          ibuf_entry_vld;

// &Regs; @25
reg             entry_acc_err;
reg     [15:0]  entry_inst;
reg     [8 :0]  entry_inst_bkpt;
reg     [1 :0]  entry_pred_taken;
reg             entry_vld;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            entry_acc_err_upd;
wire            entry_cpuclk;
wire            entry_create;
wire            entry_data_create;
wire            entry_icg_en;
wire    [8 :0]  entry_inst_bkpt_upd;
wire    [15:0]  entry_inst_upd;
wire    [1 :0]  entry_pred_taken_upd;
wire            entry_retire;
wire            forever_cpuclk;
wire            ibuf_cpuclk;
wire            ibuf_create0_acc_err;
wire    [15:0]  ibuf_create0_inst;
wire    [8 :0]  ibuf_create0_inst_bkpt;
wire    [1 :0]  ibuf_create0_pred_taken;
wire            ibuf_create1_acc_err;
wire    [15:0]  ibuf_create1_inst;
wire    [8 :0]  ibuf_create1_inst_bkpt;
wire    [1 :0]  ibuf_create1_pred_taken;
wire            ibuf_create2_acc_err;
wire    [15:0]  ibuf_create2_inst;
wire    [8 :0]  ibuf_create2_inst_bkpt;
wire    [1 :0]  ibuf_create2_pred_taken;
wire            ibuf_entry_acc_err;
wire            ibuf_entry_create0_data_en;
wire            ibuf_entry_create0_en;
wire            ibuf_entry_create1_data_en;
wire            ibuf_entry_create1_en;
wire            ibuf_entry_create2_data_en;
wire            ibuf_entry_create2_en;
wire    [15:0]  ibuf_entry_inst;
wire    [8 :0]  ibuf_entry_inst_bkpt;
wire    [1 :0]  ibuf_entry_pred_taken;
wire            ibuf_entry_retire0_en;
wire            ibuf_entry_retire1_en;
wire            ibuf_entry_vld;
wire            ibuf_flush_en;
wire            pad_yy_gate_clk_en_b;
wire            vec_ibuf_warm_up;











assign entry_icg_en = entry_data_create || vec_ibuf_warm_up;
// &Instance("gated_clk_cell", "x_ibuf_data_icg_cell"); @38
gated_clk_cell  x_ibuf_data_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (entry_cpuclk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (entry_icg_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @39
//          .external_en (1'b0), @40
//          .global_en   (cp0_yy_clk_en), @41
//          .module_en   (1'b0), @42
//          .local_en    (entry_icg_en), @43
//          .clk_out     (entry_cpuclk)); @44








assign entry_create  = ibuf_entry_create0_en || ibuf_entry_create1_en
                    || ibuf_entry_create2_en;
assign entry_data_create = ibuf_entry_create0_data_en
                        || ibuf_entry_create1_data_en
                        || ibuf_entry_create2_data_en;
assign entry_retire  = ibuf_entry_retire0_en || ibuf_entry_retire1_en;


always @(posedge ibuf_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_vld <= 1'b0;
  else if(ibuf_flush_en)
    entry_vld <= 1'b0;
  else if(entry_create)
    entry_vld <= 1'b1;
  else if(entry_retire)
    entry_vld <= 1'b0;
  else
    entry_vld <= entry_vld;
end


assign entry_inst_upd[15:0] =
                     {16{ibuf_entry_create0_data_en}} & ibuf_create0_inst[15:0]
                   | {16{ibuf_entry_create1_data_en}} & ibuf_create1_inst[15:0]
                   | {16{ibuf_entry_create2_data_en}} & ibuf_create2_inst[15:0];

always @(posedge entry_cpuclk)
begin
  if(entry_data_create || vec_ibuf_warm_up)
    entry_inst[15:0] <= entry_inst_upd[15:0];
  else
    entry_inst[15:0] <= entry_inst[15:0];
end




assign entry_pred_taken_upd[1:0] =
                  {2{ibuf_entry_create0_data_en}} & ibuf_create0_pred_taken[1:0]
                | {2{ibuf_entry_create1_data_en}} & ibuf_create1_pred_taken[1:0]
                | {2{ibuf_entry_create2_data_en}} & ibuf_create2_pred_taken[1:0];

assign entry_inst_bkpt_upd[8:0] =
                  {9{ibuf_entry_create0_data_en}} & ibuf_create0_inst_bkpt[8:0]
                | {9{ibuf_entry_create1_data_en}} & ibuf_create1_inst_bkpt[8:0]
                | {9{ibuf_entry_create2_data_en}} & ibuf_create2_inst_bkpt[8:0];

always @(posedge entry_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_pred_taken[1:0] <= 2'b0;
  else if(entry_data_create)
    entry_pred_taken[1:0] <= entry_pred_taken_upd[1:0];
  else
    entry_pred_taken[1:0] <= entry_pred_taken[1:0];
end

always @(posedge entry_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_inst_bkpt[8:0] <= 9'b0;
  else if(entry_data_create)
    entry_inst_bkpt[8:0] <= entry_inst_bkpt_upd[8:0];
  else
    entry_inst_bkpt[8:0] <= entry_inst_bkpt[8:0];
end




assign entry_acc_err_upd = ibuf_entry_create0_data_en && ibuf_create0_acc_err
                        || ibuf_entry_create1_data_en && ibuf_create1_acc_err
                        || ibuf_entry_create2_data_en && ibuf_create2_acc_err;

always @(posedge entry_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_acc_err <= 1'b0;
  else if(entry_data_create)
    entry_acc_err <= entry_acc_err_upd;
  else
    entry_acc_err <= entry_acc_err;
end





assign ibuf_entry_vld        = entry_vld;
assign ibuf_entry_inst[15:0] = entry_inst[15:0];
assign ibuf_entry_pred_taken[1:0] = entry_pred_taken[1:0];
assign ibuf_entry_inst_bkpt[8:0] = entry_inst_bkpt[8:0];
assign ibuf_entry_acc_err    = entry_acc_err;

// &ModuleEnd; @149
endmodule
























// &ModuleBeg; @23
module pa_ifu_icache(
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_ifetch_req_abort,
  ctrl_ifetch_req_vld,
  forever_cpuclk,
  ibus_icache_cmplt,
  ibus_icache_data,
  ibus_icache_error,
  ibus_icache_grant,
  ibus_icache_not_busy,
  ibus_icache_uc_cmplt,
  ibus_icache_unalign,
  ibus_trans_abort,
  icache_ibus_acc_deny,
  icache_ibus_addr,
  icache_ibus_burst,
  icache_ibus_data_req,
  icache_ibus_prot,
  icache_ibus_req,
  icache_ibus_seq,
  icache_ifetch_error,
  icache_ifetch_grant,
  icache_ifetch_idle,
  icache_ifetch_inst,
  icache_ifetch_inst_vld,
  icache_ifetch_inst_vld_gate,
  icache_ifetch_mach_mode,
  icache_ifetch_not_busy,
  icache_ifetch_rd_addr,
  icache_ifetch_uc_sel,
  icache_ifetch_unalign,
  icache_ifetch_vec_data_cmplt,
  icache_top_abort,
  icache_top_rd_vld,
  icache_top_ref_st,
  icache_top_uc_st,
  ifetch_outstanding,
  ifetch_req_addr,
  ifetch_req_ca,
  ifetch_req_prot,
  ifu_cp0_icache_inv_done,
  ifu_hpcp_icache_access,
  ifu_hpcp_icache_miss,
  pad_yy_gate_clk_en_b,
  pcgen_ifetch_chgflw_vld,
  pcgen_ifetch_seq_addr,
  pmp_ifu_acc_deny,
  vec_ifetch_data_fetch
);

// &Ports; @24
input           cp0_ifu_icache_en;
input   [31:0]  cp0_ifu_icache_inv_addr;
input           cp0_ifu_icache_inv_req;
input           cp0_ifu_icache_inv_type;
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_ifetch_req_abort;
input           ctrl_ifetch_req_vld;
input           forever_cpuclk;
input           ibus_icache_cmplt;
input   [31:0]  ibus_icache_data;
input           ibus_icache_error;
input           ibus_icache_grant;
input           ibus_icache_not_busy;
input           ibus_icache_uc_cmplt;
input           ibus_icache_unalign;
input           ibus_trans_abort;
input           ifetch_outstanding;
input   [31:0]  ifetch_req_addr;
input           ifetch_req_ca;
input   [3 :0]  ifetch_req_prot;
input           pad_yy_gate_clk_en_b;
input           pcgen_ifetch_chgflw_vld;
input   [31:0]  pcgen_ifetch_seq_addr;
input           pmp_ifu_acc_deny;
input           vec_ifetch_data_fetch;
output          icache_ibus_acc_deny;
output  [31:0]  icache_ibus_addr;
output  [2 :0]  icache_ibus_burst;
output          icache_ibus_data_req;
output  [3 :0]  icache_ibus_prot;
output          icache_ibus_req;
output          icache_ibus_seq;
output          icache_ifetch_error;
output          icache_ifetch_grant;
output          icache_ifetch_idle;
output  [31:0]  icache_ifetch_inst;
output          icache_ifetch_inst_vld;
output          icache_ifetch_inst_vld_gate;
output          icache_ifetch_mach_mode;
output          icache_ifetch_not_busy;
output  [31:0]  icache_ifetch_rd_addr;
output          icache_ifetch_uc_sel;
output          icache_ifetch_unalign;
output          icache_ifetch_vec_data_cmplt;
output          icache_top_abort;
output          icache_top_rd_vld;
output  [1 :0]  icache_top_ref_st;
output          icache_top_uc_st;
output          ifu_cp0_icache_inv_done;
output          ifu_hpcp_icache_access;
output          ifu_hpcp_icache_miss;

// &Regs; @25
reg     [26:0]  buf_hit_tag;
reg             buf_hit_way;
reg             direct_sel;
reg             icache_ca_ff;
reg             icache_deny;
reg             icache_en;
reg             icache_en_f;
reg     [31:0]  icache_rd_addr;
reg     [3 :0]  icache_rd_prot;
reg             icache_rd_vld;
reg     [31:0]  icache_refill_addr;
reg             icache_refill_fifo;
reg     [3 :0]  icache_refill_prot;
reg             icache_vec_data;
reg     [9 :0]  inv_cnt;
reg     [1 :0]  inv_cur_st;
reg     [1 :0]  inv_nxt_st;
reg     [1 :0]  ipa_way_sel;
reg     [2 :0]  ref_cnt;
reg     [1 :0]  ref_cur_st;
reg     [1 :0]  ref_nxt_st;
reg             ref_vld;
reg     [31:0]  refill_data;
reg             refill_data_abort;
reg     [2 :0]  req_cnt;
reg             tag_hit_vld;
reg             uc_cur_st;
reg             uc_nxt_st;

// &Wires; @26
wire            addr_equal;
wire            buf_clr_en;
wire            buf_hit_upd;
wire            buf_rfl_upd;
wire            buf_upd_en;
wire            cen_mask_vld;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_ifetch_req_abort;
wire            ctrl_ifetch_req_vld;
wire            forever_cpuclk;
wire            hit_clk;
wire    [26:0]  hit_tag;
wire            hit_way;
wire            ibus_icache_cmplt;
wire    [31:0]  ibus_icache_data;
wire            ibus_icache_error;
wire            ibus_icache_grant;
wire            ibus_icache_not_busy;
wire            ibus_icache_uc_cmplt;
wire            ibus_icache_unalign;
wire            ibus_trans_abort;
wire            icache_bypass_vld;
wire    [21:0]  icache_cmp_tag;
wire    [21:0]  icache_cmp_tag_fin;
wire            icache_cmplt;
wire    [31:0]  icache_data0_dout;
wire    [31:0]  icache_data1_dout;
wire    [1 :0]  icache_data_cen;
wire    [31:0]  icache_data_din;
wire    [12:0]  icache_data_idx;
wire            icache_data_req;
wire    [1 :0]  icache_data_wen;
wire            icache_hit;
wire            icache_hit0;
wire            icache_hit1;
wire    [31:0]  icache_hit_inst;
wire            icache_hit_vld;
wire            icache_ibus_acc_deny;
wire    [31:0]  icache_ibus_addr;
wire    [2 :0]  icache_ibus_burst;
wire            icache_ibus_data_req;
wire    [3 :0]  icache_ibus_prot;
wire            icache_ibus_req;
wire            icache_ibus_seq;
wire            icache_ifetch_error;
wire            icache_ifetch_grant;
wire            icache_ifetch_idle;
wire    [31:0]  icache_ifetch_inst;
wire            icache_ifetch_inst_vld;
wire            icache_ifetch_inst_vld_gate;
wire            icache_ifetch_mach_mode;
wire            icache_ifetch_not_busy;
wire    [31:0]  icache_ifetch_rd_addr;
wire            icache_ifetch_uc_sel;
wire            icache_ifetch_unalign;
wire            icache_ifetch_vec_data_cmplt;
wire            icache_inv_clk;
wire    [46:0]  icache_inv_din;
wire            icache_inv_done;
wire            icache_inv_icg_en;
wire    [9 :0]  icache_inv_idx;
wire            icache_inv_rd;
wire            icache_inv_req;
wire    [2 :0]  icache_inv_wen;
wire            icache_inv_wt;
wire    [31:0]  icache_miss_addr;
wire    [3 :0]  icache_miss_prot;
wire            icache_miss_req;
wire            icache_rd_clk;
wire    [12:0]  icache_rd_data_idx;
wire            icache_rd_icg_en;
wire            icache_rd_req;
wire            icache_rd_req_data;
wire    [9 :0]  icache_rd_tag_idx;
wire            icache_refdp_clk;
wire            icache_refdp_icg_en;
wire            icache_reffsm_clk;
wire            icache_reffsm_icg_en;
wire            icache_refill_ca;
wire            icache_req;
wire            icache_req_vld;
wire            icache_tag_cen;
wire    [46:0]  icache_tag_din;
wire    [46:0]  icache_tag_dout;
wire            icache_tag_fifo;
wire    [9 :0]  icache_tag_idx;
wire    [21:0]  icache_tag_way0_dout;
wire            icache_tag_way0_vld;
wire    [21:0]  icache_tag_way1_dout;
wire            icache_tag_way1_vld;
wire    [2 :0]  icache_tag_wen;
wire            icache_top_abort;
wire            icache_top_rd_vld;
wire    [1 :0]  icache_top_ref_st;
wire            icache_top_uc_st;
wire            icache_uc_data_req;
wire            icache_uc_req;
wire            icache_uc_sel;
wire            icache_way0_hit;
wire            icache_way1_hit;
wire    [12:0]  icache_wr_data_idx;
wire            icache_wr_data_req;
wire            ifetch_outstanding;
wire    [31:0]  ifetch_req_addr;
wire            ifetch_req_ca;
wire    [3 :0]  ifetch_req_prot;
wire            ifu_cp0_icache_inv_done;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire            inv_cnt_en;
wire    [9 :0]  inv_cnt_inc;
wire            inv_fsm_idle;
wire            inv_fsm_write;
wire            inv_tag_wen;
wire            inv_type_pa;
wire    [1 :0]  inv_way_sel;
wire            pad_yy_gate_clk_en_b;
wire            pcgen_ifetch_chgflw_vld;
wire    [31:0]  pcgen_ifetch_seq_addr;
wire            pmp_ifu_acc_deny;
wire            ref_cnt_done;
wire    [2 :0]  ref_cnt_inc;
wire            ref_fsm_idle;
wire            ref_fsm_ref;
wire            ref_fsm_req;
wire            ref_fsm_wfc;
wire            ref_rdy;
wire    [31:0]  refill_addr;
wire    [31:0]  refill_icache_addr;
wire    [31:0]  refill_icache_data;
wire            refill_icache_done;
wire            refill_icache_fifo;
wire            refill_icache_init;
wire            refill_icache_req;
wire    [46:0]  refill_inv_tag_din;
wire    [9 :0]  refill_inv_tag_idx;
wire            refill_inv_tag_req;
wire    [2 :0]  refill_inv_tag_wen;
wire    [46:0]  refill_tag_din;
wire    [2 :0]  refill_tag_wen;
wire            refill_tag_wr;
wire    [31:0]  req_addr;
wire            req_cnt_done;
wire            tag_hit_clk_en;
wire            uc_fsm_idle;
wire            uc_fsm_wfc;
wire            vec_ifetch_data_fetch;














assign icache_rd_icg_en = icache_rd_req && ref_rdy
                       || direct_sel;
// &Instance("gated_clk_cell", "x_ifu_icache_rd_icg_cell"); @42
gated_clk_cell  x_ifu_icache_rd_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_rd_clk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_rd_icg_en    ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @43
//          .external_en (1'b0), @44
//          .global_en   (cp0_yy_clk_en), @45
//          .module_en   (1'b0), @46
//          .local_en    (icache_rd_icg_en), @47
//          .clk_out     (icache_rd_clk) @48
//        ); @49

assign icache_refdp_icg_en = icache_miss_req & ref_fsm_idle;
// &Instance("gated_clk_cell", "x_ifu_icache_refdp_icg_cell"); @52
gated_clk_cell  x_ifu_icache_refdp_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_refdp_clk    ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_refdp_icg_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @53
//          .external_en (1'b0), @54
//          .global_en   (cp0_yy_clk_en), @55
//          .module_en   (1'b0), @56
//          .local_en    (icache_refdp_icg_en), @57
//          .clk_out     (icache_refdp_clk) @58
//        ); @59

assign icache_reffsm_icg_en = icache_miss_req | !ref_fsm_idle
                            | icache_uc_req | !uc_fsm_idle;
// &Instance("gated_clk_cell", "x_ifu_icache_reffsm_icg_cell"); @63
gated_clk_cell  x_ifu_icache_reffsm_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_reffsm_clk   ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_reffsm_icg_en),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @64
//          .external_en (1'b0), @65
//          .global_en   (cp0_yy_clk_en), @66
//          .module_en   (1'b0), @67
//          .local_en    (icache_reffsm_icg_en), @68
//          .clk_out     (icache_reffsm_clk) @69
//        ); @70

assign icache_inv_icg_en = !inv_fsm_idle;
// &Instance("gated_clk_cell", "x_ifu_icache_inv_icg_cell"); @73
gated_clk_cell  x_ifu_icache_inv_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_inv_clk      ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_inv_icg_en   ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @74
//          .external_en (1'b0), @75
//          .global_en   (cp0_yy_clk_en), @76
//          .module_en   (1'b0), @77
//          .local_en    (icache_inv_icg_en), @78
//          .clk_out     (icache_inv_clk) @79
//        ); @80














assign icache_req_vld = (ctrl_ifetch_req_vld | vec_ifetch_data_fetch)
                      & inv_fsm_idle & ref_fsm_idle & uc_fsm_idle;
assign icache_rd_req = icache_req_vld & ifetch_req_ca & cp0_ifu_icache_en;
assign icache_rd_req_data = icache_req_vld & icache_ca_ff;
assign icache_uc_req = (ctrl_ifetch_req_vld | vec_ifetch_data_fetch)
                     & inv_fsm_idle & ref_fsm_idle & !icache_rd_vld
                     & !(ifetch_req_ca & cp0_ifu_icache_en);
assign icache_uc_data_req = (ctrl_ifetch_req_vld | vec_ifetch_data_fetch)
                     & inv_fsm_idle & ref_fsm_idle & !icache_rd_vld;
assign icache_uc_sel = inv_fsm_idle & ref_fsm_idle & !icache_rd_vld
                     & !(ifetch_req_ca & cp0_ifu_icache_en)
                     | uc_fsm_wfc;








assign icache_rd_tag_idx[9:0]   = ifetch_req_addr[14:5];
assign icache_rd_data_idx[12:0] = ifetch_req_addr[14:2];






assign refill_tag_wr = refill_icache_req &&
                          (refill_icache_done || refill_icache_init);
assign refill_tag_wen[2:0] = {3{refill_tag_wr}} & {refill_icache_init,
                                                   icache_refill_fifo,
                                                  !icache_refill_fifo};
assign refill_tag_din[46:0] = {!refill_icache_fifo,
                               refill_icache_done, refill_icache_addr[31:10],
                               refill_icache_done, refill_icache_addr[31:10]};

assign refill_inv_tag_req       = refill_tag_wr || icache_inv_req;
assign refill_inv_tag_wen[2:0]  = icache_inv_req ? icache_inv_wen[2:0]
                                                 : refill_tag_wen[2:0];
assign refill_inv_tag_idx[9:0]  = icache_inv_req ? icache_inv_idx[9:0]
                                                 : refill_icache_addr[14:5];
assign refill_inv_tag_din[46:0] = icache_inv_req ? icache_inv_din[46:0]
                                                 : refill_tag_din[46:0];

assign icache_wr_data_req       = refill_icache_req;
assign icache_wr_data_idx[12:0] = refill_icache_addr[14:2];





assign tag_hit_clk_en = buf_upd_en || buf_clr_en;
// &Instance("gated_clk_cell","x_gated_hit_clk_cell"); @148
gated_clk_cell  x_gated_hit_clk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (hit_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (tag_hit_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in     (forever_cpuclk), @149
//          .global_en  (cp0_yy_clk_en ), @150
//          .module_en  (1'b0          ), @151
//          .local_en   (tag_hit_clk_en), @152
//          .external_en(1'b0          ), @153
//          .clk_out    (hit_clk       )); @154



assign buf_rfl_upd = refill_icache_req && refill_icache_done;
assign buf_hit_upd = icache_rd_vld && !direct_sel
                 && (icache_way1_hit || icache_way0_hit);


assign buf_upd_en = buf_rfl_upd || buf_hit_upd;


assign buf_clr_en = refill_icache_req && refill_icache_init || cp0_ifu_icache_inv_req;


always @ (posedge hit_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    tag_hit_vld <= 1'b0;
  else if(buf_clr_en)
    tag_hit_vld <= 1'b0;
  else if(buf_upd_en)
    tag_hit_vld <= 1'b1;
  else
    tag_hit_vld <= tag_hit_vld;
end

always @ (posedge icache_rd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    direct_sel <= 1'b0;
  else if(icache_rd_req && cen_mask_vld)
    direct_sel <= 1'b1;
  else if(direct_sel)
    direct_sel <= 1'b0;
  else
    direct_sel <= direct_sel;
end

assign hit_tag[26:0] = buf_rfl_upd ? refill_icache_addr[31:5] : icache_rd_addr[31:5];
assign hit_way       = buf_rfl_upd ? icache_data_wen[1] : icache_way1_hit;
always @ (posedge hit_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    buf_hit_tag[26:0] <= 27'b0;
    buf_hit_way       <= 1'b0;
  end
  else if(buf_upd_en)
  begin
    buf_hit_tag[26:0] <= hit_tag[26:0];
    buf_hit_way       <= hit_way;
  end
end

assign addr_equal   = pcgen_ifetch_seq_addr[31:5] == buf_hit_tag[26:0];

assign cen_mask_vld = tag_hit_vld && addr_equal && !pcgen_ifetch_chgflw_vld && !buf_upd_en;





assign icache_tag_cen       = icache_rd_req_data && !cen_mask_vld
                           || refill_inv_tag_req;
assign icache_tag_wen[2:0]  = icache_rd_req_data ? 3'b0 : refill_inv_tag_wen[2:0];
assign icache_tag_idx[9:0]  = icache_rd_req_data ? icache_rd_tag_idx[9:0]
                                            : refill_inv_tag_idx[9:0];
assign icache_tag_din[46:0] = refill_inv_tag_din[46:0];


assign icache_data_cen[1:0] = {(cen_mask_vld ?  buf_hit_way : icache_rd_req_data)
                            || icache_data_wen[1],
                               (cen_mask_vld ? !buf_hit_way : icache_rd_req_data)
                            || icache_data_wen[0]};
assign icache_data_wen[1:0] = {icache_wr_data_req &&  icache_refill_fifo,
                               icache_wr_data_req && !icache_refill_fifo};
assign icache_data_idx[12:0] = icache_rd_req_data ? icache_rd_data_idx[12:0]
                                             : icache_wr_data_idx[12:0];
assign icache_data_din[31:0] = refill_icache_data[31:0];




// &Instance("pa_ifu_icache_tag_array", "x_pa_ifu_icache_tag_array"); @238
pa_ifu_icache_tag_array  x_pa_ifu_icache_tag_array (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .forever_cpuclk       (forever_cpuclk      ),
  .icache_tag_cen       (icache_tag_cen      ),
  .icache_tag_din       (icache_tag_din      ),
  .icache_tag_dout      (icache_tag_dout     ),
  .icache_tag_idx       (icache_tag_idx      ),
  .icache_tag_wen       (icache_tag_wen      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Instance("pa_ifu_icache_data_array", "x_pa_ifu_icache_data_array"); @239
pa_ifu_icache_data_array  x_pa_ifu_icache_data_array (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .forever_cpuclk       (forever_cpuclk      ),
  .icache_data0_dout    (icache_data0_dout   ),
  .icache_data1_dout    (icache_data1_dout   ),
  .icache_data_cen      (icache_data_cen     ),
  .icache_data_din      (icache_data_din     ),
  .icache_data_idx      (icache_data_idx     ),
  .icache_data_wen      (icache_data_wen     ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);











assign icache_tag_fifo            = icache_tag_dout[46];
assign icache_tag_way1_vld        = icache_tag_dout[45];
assign icache_tag_way1_dout[21:0] = icache_tag_dout[44:23];
assign icache_tag_way0_vld        = icache_tag_dout[22];
assign icache_tag_way0_dout[21:0] = icache_tag_dout[21:0];


always @ (posedge forever_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    icache_rd_vld <= 1'b0;
  else if(icache_rd_req && ref_rdy && icache_ca_ff)
    icache_rd_vld <= 1'b1;
  else
    icache_rd_vld <= 1'b0;
end
assign icache_ifetch_idle = !icache_rd_vld & ref_fsm_idle
                          & uc_fsm_idle;

always @ (posedge icache_rd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    icache_rd_addr[31:0] <= 32'b0;
    icache_rd_prot[3:0]  <= 4'b0;
    icache_vec_data      <= 1'b0;
    icache_en            <= 1'b0;
    icache_deny          <= 1'b0;
  end
  else if(icache_rd_req && ref_rdy && icache_ca_ff)
  begin
    icache_rd_addr[31:0] <= ifetch_req_addr[31:0];
    icache_rd_prot[3:0]  <= ifetch_req_prot[3:0];
    icache_vec_data      <= vec_ifetch_data_fetch;
    icache_en            <= cp0_ifu_icache_en;
    icache_deny          <= pmp_ifu_acc_deny;
  end
  else
  begin
    icache_rd_addr[31:0] <= icache_rd_addr[31:0];
    icache_rd_prot[3:0]  <= icache_rd_prot[3:0];
    icache_vec_data      <= icache_vec_data;
    icache_en            <= icache_en;
    icache_deny          <= icache_deny;
  end
end
always @ (posedge icache_rd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    icache_ca_ff <= 1'b0;
  else if(icache_req_vld)
    icache_ca_ff <= ifetch_req_ca & cp0_ifu_icache_en;
  else
    icache_ca_ff <= icache_ca_ff;
end
// &Force("nonport", "icache_cmp_tag"); @305
// &Force("nonport", "icache_cmp_tag_fin"); @306
// &Force("nonport", "icache_inv_done"); @307
// &Force("nonport", "inv_cnt_inc"); @308
// &Force("bus", "pcgen_ifetch_seq_addr", 31, 0); @309

assign icache_cmp_tag[21:0] = inv_tag_wen ? cp0_ifu_icache_inv_addr[31:10] : icache_rd_addr[31:10];
//csky vperl_off
`ifdef ICACHE_2K
assign icache_cmp_tag_fin[21:0] = icache_cmp_tag[21:0];
`else
assign icache_cmp_tag_fin[21:0] = {{(22-`I_TAG_TAG_WIDTH){1'b0}},
                   icache_cmp_tag[21:22-`I_TAG_TAG_WIDTH]};

`endif
//csky vperl_on
assign icache_way1_hit = {icache_tag_way1_vld, icache_tag_way1_dout[21:0]}
                      == {1'b1,  icache_cmp_tag_fin[21:0]};
assign icache_way0_hit = {icache_tag_way0_vld, icache_tag_way0_dout[21:0]}
                      == {1'b1,  icache_cmp_tag_fin[21:0]};

assign icache_hit      = (icache_way1_hit || icache_way0_hit) && icache_en
                       || icache_deny || direct_sel;

assign icache_hit_vld        = icache_hit && icache_rd_vld;
assign icache_hit1     = direct_sel ?  buf_hit_way : icache_way1_hit;
assign icache_hit0     = direct_sel ? !buf_hit_way : icache_way0_hit;
assign icache_hit_inst[31:0] = {32{icache_hit1}} & icache_data1_dout[31:0]
                             | {32{icache_hit0}} & icache_data0_dout[31:0];


assign icache_miss_req        = !icache_hit && icache_rd_vld;
assign icache_miss_addr[31:0] = icache_rd_addr[31:0];
assign icache_miss_prot[3:0]  = icache_rd_prot[3:0];








always @ (posedge icache_refdp_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    icache_refill_addr[31:0]   <= 32'b0;
    icache_refill_fifo         <= 1'b0;
    icache_refill_prot[3:0]    <= 4'b0;
    icache_en_f                <= 1'b0;
  end
  else if(icache_miss_req && ref_fsm_idle)
  begin
    icache_refill_addr[31:0]   <= {icache_miss_addr[31:1], 1'b0};
    icache_refill_fifo         <= icache_tag_fifo;
    icache_refill_prot[3:0]    <= icache_miss_prot[3:0];
    icache_en_f                <= icache_en;
  end
end
assign icache_refill_ca = icache_refill_prot[3] & icache_en_f;



parameter IDLE = 2'b00,
          REQ  = 2'b01,
          WFC  = 2'b10,
          REF  = 2'b11;

always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ref_cur_st[1:0] <= IDLE;
  else
    ref_cur_st[1:0] <= ref_nxt_st[1:0];
end

// &CombBeg; @381
always @( ref_cur_st
       or icache_refill_ca
       or icache_miss_req
       or ibus_icache_error
       or ref_cnt_done
       or ibus_icache_cmplt
       or ibus_icache_grant)
begin
case(ref_cur_st)
  IDLE:
  begin
    if(icache_miss_req)
      ref_nxt_st = REQ;
    else
      ref_nxt_st = IDLE;
  end
  REQ:
  begin
    if (ibus_icache_grant)
      ref_nxt_st = WFC;
    else
      ref_nxt_st = REQ;
  end
  WFC:
  begin
    if(ibus_icache_cmplt)
      if(ibus_icache_error)
        ref_nxt_st = IDLE;
      else
        ref_nxt_st = icache_refill_ca ? REF : IDLE;
    else
      ref_nxt_st = WFC;
  end
  REF:
  begin
    if(ref_cnt_done | ibus_icache_error)
      ref_nxt_st = IDLE;
    else
      ref_nxt_st = REF;
  end
  default:
  begin
    ref_nxt_st = IDLE;
  end
endcase
// &CombEnd; @419
end


assign ref_fsm_idle = ref_cur_st == IDLE;
assign ref_fsm_req  = ref_cur_st == REQ;
assign ref_fsm_wfc  = ref_cur_st == WFC;
assign ref_fsm_ref  = ref_cur_st == REF;


always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    refill_data_abort <= 1'b0;
  else if (ctrl_ifetch_req_abort)
    refill_data_abort <= 1'b1;
  else if (ref_fsm_idle & icache_miss_req)
    refill_data_abort <= 1'b0;
end


always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    req_cnt[2:0] <= 3'b000;
  else if(ref_fsm_idle && icache_miss_req)
    req_cnt[2:0] <= icache_miss_addr[4:2];
  else if(icache_req && ibus_icache_grant && icache_refill_ca)
    req_cnt[2:0] <= req_cnt[2:0] + 3'b001;
  else
    req_cnt[2:0] <= req_cnt[2:0];
end


assign req_cnt_done   = req_cnt[2:0] == icache_refill_addr[4:2];
assign req_addr[31:0] = {icache_refill_addr[31:5], req_cnt[2:0], 2'b00};


always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ref_vld <= 1'b0;
  else if (ref_fsm_ref | ref_fsm_wfc & icache_refill_ca)
    ref_vld <= ibus_icache_cmplt & !ibus_icache_error;
end


always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ref_cnt[2:0] <= 3'b000;
  else if(ref_fsm_idle && icache_miss_req)
    ref_cnt[2:0] <= icache_miss_addr[4:2];
  else if(ref_fsm_ref & ibus_icache_cmplt & !ibus_icache_error)
    ref_cnt[2:0] <= ref_cnt_inc[2:0];
  else
    ref_cnt[2:0] <= ref_cnt[2:0];
end

assign ref_cnt_inc[2:0] = ref_cnt[2:0] + 3'b001;

assign ref_cnt_done = ref_cnt_inc[2:0] == icache_miss_addr[4:2];

assign refill_addr[31:0] = {icache_refill_addr[31:5], ref_cnt[2:0], 2'b0};

always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    refill_data[31:0] <= 32'b0;
  else if (ibus_icache_cmplt & !ibus_icache_error)
    refill_data[31:0] <= ibus_icache_data[31:0];
end



parameter UIDLE = 1'b0,
          UWFC  = 1'b1;

always @ (posedge icache_reffsm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    uc_cur_st <= UIDLE;
  else
    uc_cur_st <= uc_nxt_st;
end

// &CombBeg; @504
always @( ibus_icache_uc_cmplt
       or ifetch_outstanding
       or icache_uc_req
       or uc_cur_st)
begin
case(uc_cur_st)
  UIDLE:
  begin
    if(icache_uc_req)
      uc_nxt_st = UWFC;
    else
      uc_nxt_st = UIDLE;
  end
  UWFC:
  begin
    if(ibus_icache_uc_cmplt)
      if(icache_uc_req)
        uc_nxt_st = UWFC;
      else if(!ifetch_outstanding)
        uc_nxt_st = UIDLE;
      else
        uc_nxt_st = UWFC;
    else
      uc_nxt_st = UWFC;
  end
  default:
  begin
    uc_nxt_st = UIDLE;
  end
endcase
// &CombEnd; @530
end

assign uc_fsm_idle = uc_cur_st == UIDLE;
assign uc_fsm_wfc  = uc_cur_st == UWFC;


assign icache_req             = ref_fsm_req
                              | ref_fsm_wfc & icache_refill_ca
                              | ref_fsm_ref & !req_cnt_done
                              | icache_uc_req;

assign icache_data_req        = ref_fsm_req
                              | ref_fsm_wfc & icache_refill_ca
                              | ref_fsm_ref & !req_cnt_done
                              | icache_uc_data_req;

assign icache_ibus_req        = icache_req;
assign icache_ibus_data_req   = icache_data_req;
assign icache_ibus_addr[31:0] = ref_fsm_idle ? ifetch_req_addr[31:0]
                                             : req_addr[31:0];
assign icache_ibus_prot[3:0]  = ref_fsm_idle ? ifetch_req_prot[3:0]
                                             : icache_refill_prot[3:0];
assign icache_ibus_seq        = ref_fsm_wfc & icache_refill_ca
                              | ref_fsm_ref & !req_cnt_done;
assign icache_ibus_burst[2:0] = ref_fsm_idle ? 3'b000 : 3'b100;
assign icache_ibus_acc_deny   = ref_fsm_idle && pmp_ifu_acc_deny;


assign refill_icache_req        = ref_fsm_ref & ref_vld;
assign refill_icache_init       = ref_cnt[2:0] == icache_miss_addr[4:2];
assign refill_icache_done       = ref_cnt_done;
assign refill_icache_addr[31:0] = refill_addr[31:0];
assign refill_icache_fifo       = icache_refill_fifo;
assign refill_icache_data[31:0] = refill_data[31:0];


assign icache_cmplt             = ref_fsm_wfc && ibus_icache_cmplt && !refill_data_abort;
assign icache_bypass_vld        = icache_cmplt // && !icache_vec_data
                               || uc_fsm_wfc && ibus_icache_cmplt;
assign icache_ifetch_inst_vld   = icache_bypass_vld || icache_hit_vld;// && !icache_vec_data;
assign icache_ifetch_inst_vld_gate = icache_bypass_vld || icache_rd_vld;
assign icache_ifetch_inst[31:0] = icache_bypass_vld ? ibus_icache_data[31:0]
                                                    : icache_hit_inst[31:0];
assign icache_ifetch_error      = icache_bypass_vld ? ibus_icache_error
                                                    : icache_deny;
assign icache_ifetch_unalign    = icache_bypass_vld ? uc_fsm_wfc ? ibus_icache_unalign
                                                    : icache_refill_addr[1]
                                                    : icache_rd_addr[1];
assign icache_ifetch_grant      = ref_rdy && icache_rd_req && icache_ca_ff
                               || icache_uc_req && ibus_icache_grant
                               || icache_uc_sel && ifetch_outstanding && ibus_icache_grant;
assign ref_rdy                  = ref_fsm_idle && !icache_miss_req;
assign icache_ifetch_vec_data_cmplt = (icache_cmplt || icache_hit_vld) & icache_vec_data
                                   || uc_fsm_wfc && ibus_icache_cmplt;

assign icache_ifetch_rd_addr[31:0] = ifetch_req_addr[31:0];
assign icache_ifetch_mach_mode     = ifetch_req_prot[1];
assign icache_ifetch_not_busy      = (!ref_fsm_idle || icache_rd_vld) && !ibus_trans_abort
                                  || ibus_icache_not_busy;
assign icache_ifetch_uc_sel        = uc_fsm_wfc;


parameter INV_IDLE = 2'b00;
parameter INV_WRTE = 2'b10;
parameter INV_READ = 2'b01;
parameter INV_FLOP = 2'b11;




always @ (posedge icache_inv_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    inv_cur_st[1:0] <= INV_IDLE;
  else
    inv_cur_st[1:0] <= inv_nxt_st[1:0];
end

assign inv_type_pa = cp0_ifu_icache_inv_type;

// &CombBeg; @610
always @( inv_cur_st
       or inv_type_pa
       or cp0_ifu_icache_inv_req
       or ref_rdy
       or icache_inv_done)
begin
case(inv_cur_st)
  INV_IDLE: begin
    if(cp0_ifu_icache_inv_req & ref_rdy)
      inv_nxt_st = inv_type_pa ? INV_READ : INV_WRTE;
    else
      inv_nxt_st = INV_IDLE;
  end
  INV_WRTE: begin
    if(icache_inv_done)
      inv_nxt_st = INV_IDLE;
    else
      inv_nxt_st = INV_WRTE;
  end
  INV_READ: inv_nxt_st = INV_FLOP;
  INV_FLOP: inv_nxt_st = INV_WRTE;
  default:  inv_nxt_st = INV_IDLE;
endcase
// &CombEnd; @628
end

assign inv_fsm_idle    = inv_cur_st == INV_IDLE & !cp0_ifu_icache_inv_req;
assign inv_fsm_write   = inv_cur_st == INV_WRTE;
assign inv_tag_wen     = inv_cur_st == INV_FLOP;

always @ (posedge icache_inv_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipa_way_sel[1:0] <= 2'b0;
  else if (inv_tag_wen)
    ipa_way_sel[1:0] <= {icache_way1_hit,icache_way0_hit};
end

assign inv_way_sel[1:0] = inv_type_pa ? ipa_way_sel[1:0] : 2'b11;

assign icache_inv_rd   = inv_cur_st == INV_READ;
assign icache_inv_wt   = inv_fsm_write & (|inv_way_sel[1:0]);

assign icache_inv_req  = icache_inv_rd | icache_inv_wt;
assign icache_inv_wen[2:0] = {3{icache_inv_wt}}
                           & {!inv_type_pa, inv_way_sel[1:0]};
assign icache_inv_din[46:0] = {1'b1, 46'b0};
assign icache_inv_idx[9:0]  = inv_type_pa ? cp0_ifu_icache_inv_addr[14:5]
                                          : inv_cnt[9:0];

assign inv_cnt_en = inv_fsm_write & !inv_type_pa;

always @ (posedge icache_inv_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    inv_cnt[9:0] <= {10{1'b0}};
  else if(inv_cnt_en)
    inv_cnt[9:0] <= inv_cnt_inc[9:0];
  else
    inv_cnt[9:0] <= inv_cnt[9:0];
end

//csky vperl_off
`ifdef ICACHE_64K
assign inv_cnt_inc[9:0] = inv_cnt[9:0] + 1'b1;
`else
assign inv_cnt_inc[9:0] = {{(10-`I_TAG_INDEX_WIDTH){1'b0}},
                        inv_cnt[`I_TAG_INDEX_WIDTH-1:0] + 1'b1};
`endif
assign icache_inv_done = inv_type_pa & inv_fsm_write |
                         !inv_type_pa & inv_cnt_inc[`I_TAG_INDEX_WIDTH-1:0]
                                                == {`I_TAG_INDEX_WIDTH{1'b0}};
//csky vperl_on
assign ifu_cp0_icache_inv_done = icache_inv_done;




// &Force("input", "cp0_ifu_icache_inv_addr"); @682
// &Force("bus", "cp0_ifu_icache_inv_addr", 31, 0); @683



assign ifu_hpcp_icache_access = icache_rd_vld && ref_fsm_idle;
assign ifu_hpcp_icache_miss   = icache_miss_req;


assign icache_top_rd_vld      = icache_rd_vld;
assign icache_top_ref_st[1:0] = ref_cur_st[1:0];
assign icache_top_abort       = refill_data_abort;
assign icache_top_uc_st       = uc_cur_st;

// &ModuleEnd; @696
endmodule























// &Depend("cpu_cfig.h"); @22
// &Depend("pa_spsram_256x32.vp"); @23
// &Depend("pa_spsram_512x32.vp"); @24
// &Depend("pa_spsram_1024x32.vp"); @25
// &Depend("pa_spsram_2048x32.vp"); @26
// &Depend("pa_spsram_4096x32.vp"); @27
// &Depend("pa_spsram_8192x32.vp"); @28
// &Depend("gated_clk_cell.vp"); @29

module pa_ifu_icache_data_array(
  cp0_yy_clk_en,
  forever_cpuclk,
  icache_data0_dout,
  icache_data1_dout,
  icache_data_cen,
  icache_data_din,
  icache_data_idx,
  icache_data_wen,
  pad_yy_gate_clk_en_b
);

input           cp0_yy_clk_en;
input           forever_cpuclk;
input   [1 :0]  icache_data_cen;
input   [31:0]  icache_data_din;
input   [12:0]  icache_data_idx;
input   [1 :0]  icache_data_wen;
input           pad_yy_gate_clk_en_b;
output  [31:0]  icache_data0_dout;
output  [31:0]  icache_data1_dout;

wire            cp0_yy_clk_en;
wire            forever_cpuclk;
wire    [31:0]  icache_data0_bwen_b;
wire            icache_data0_cen_b;
wire            icache_data0_clk;
wire    [31:0]  icache_data0_dout;
wire            icache_data0_gwen_b;
wire            icache_data0_icg_en;
wire    [31:0]  icache_data1_bwen_b;
wire            icache_data1_cen_b;
wire            icache_data1_clk;
wire    [31:0]  icache_data1_dout;
wire            icache_data1_gwen_b;
wire            icache_data1_icg_en;
wire    [1 :0]  icache_data_cen;
wire    [31:0]  icache_data_din;
wire    [12:0]  icache_data_idx;
wire    [1 :0]  icache_data_wen;
wire            pad_yy_gate_clk_en_b;












assign icache_data1_icg_en = icache_data_cen[1];
gated_clk_cell  x_icache_data1_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_data1_clk    ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_data1_icg_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

assign icache_data0_icg_en = icache_data_cen[0];
gated_clk_cell  x_icache_data0_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_data0_clk    ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_data0_icg_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

assign icache_data1_cen_b  = !icache_data_cen[1];
assign icache_data1_gwen_b = !icache_data_wen[1];
assign icache_data1_bwen_b[31:0] = ~{32{icache_data_wen[1]}};

assign icache_data0_cen_b  = !icache_data_cen[0];
assign icache_data0_gwen_b = !icache_data_wen[0];
assign icache_data0_bwen_b[31:0] = ~{32{icache_data_wen[0]}};

//csky vperl_off
`ifdef ICACHE_2K
pa_spsram_256x32 x_pa_spsram_256x32_1
`endif
`ifdef ICACHE_4K
pa_spsram_512x32 x_pa_spsram_512x32_1
`endif
`ifdef ICACHE_8K
pa_spsram_1024x32 x_pa_spsram_1024x32_1
`endif
`ifdef ICACHE_16K
pa_spsram_2048x32 x_pa_spsram_2048x32_1
`endif
`ifdef ICACHE_32K
pa_spsram_4096x32 x_pa_spsram_4096x32_1
`endif
`ifdef ICACHE_64K
pa_spsram_8192x32 x_pa_spsram_8192x32_1
`endif
(
  .A                    (icache_data_idx[`I_TAG_INDEX_WIDTH+2:0]),
  .CEN                  (icache_data1_cen_b  ),
  .CLK                  (icache_data1_clk    ),
  .D                    (icache_data_din     ),
  .GWEN                 (icache_data1_gwen_b ),
  .Q                    (icache_data1_dout   ),
  .WEN                  (icache_data1_bwen_b )
);

`ifdef ICACHE_2K
pa_spsram_256x32 x_pa_spsram_256x32_0
`endif
`ifdef ICACHE_4K
pa_spsram_512x32 x_pa_spsram_512x32_0
`endif
`ifdef ICACHE_8K
pa_spsram_1024x32 x_pa_spsram_1024x32_0
`endif
`ifdef ICACHE_16K
pa_spsram_2048x32 x_pa_spsram_2048x32_0
`endif
`ifdef ICACHE_32K
pa_spsram_4096x32 x_pa_spsram_4096x32_0
`endif
`ifdef ICACHE_64K
pa_spsram_8192x32 x_pa_spsram_8192x32_0
`endif
(
  .A                    (icache_data_idx[`I_TAG_INDEX_WIDTH+2:0]),
  .CEN                  (icache_data0_cen_b  ),
  .CLK                  (icache_data0_clk    ),
  .D                    (icache_data_din     ),
  .GWEN                 (icache_data0_gwen_b ),
  .Q                    (icache_data0_dout   ),
  .WEN                  (icache_data0_bwen_b )
);
//csky vperl_on

endmodule





















// &Depend("cpu_cfig.h"); @22
// &Depend("pa_spsram_32x47.vp"); @23
// &Depend("pa_spsram_64x45.vp"); @24
// &Depend("pa_spsram_128x43.vp"); @25
// &Depend("pa_spsram_256x41.vp"); @26
// &Depend("pa_spsram_512x39.vp"); @27
// &Depend("pa_spsram_1024x37.vp"); @28
// &Depend("gated_clk_cell.vp"); @29

module pa_ifu_icache_tag_array(
  cp0_yy_clk_en,
  forever_cpuclk,
  icache_tag_cen,
  icache_tag_din,
  icache_tag_dout,
  icache_tag_idx,
  icache_tag_wen,
  pad_yy_gate_clk_en_b
);

input           cp0_yy_clk_en;
input           forever_cpuclk;
input           icache_tag_cen;
input   [46:0]  icache_tag_din;
input   [9 :0]  icache_tag_idx;
input   [2 :0]  icache_tag_wen;
input           pad_yy_gate_clk_en_b;
output  [46:0]  icache_tag_dout;

wire            cp0_yy_clk_en;
wire            forever_cpuclk;
wire    [46:0]  icache_tag_bwen;
wire    [46:0]  icache_tag_bwen_b;
wire            icache_tag_cen;
wire            icache_tag_cen_b;
wire            icache_tag_clk;
wire    [46:0]  icache_tag_din;
wire    [46:0]  icache_tag_din_fin;
wire    [46:0]  icache_tag_dout;
wire    [46:0]  icache_tag_dout_raw;
wire            icache_tag_gwen;
wire            icache_tag_gwen_b;
wire            icache_tag_icg_en;
wire    [9 :0]  icache_tag_idx;
wire    [2 :0]  icache_tag_wen;
wire            pad_yy_gate_clk_en_b;











assign icache_tag_icg_en = icache_tag_cen;
// &Instance("gated_clk_cell", "x_icache_tag_icg_cell"); @80
gated_clk_cell  x_icache_tag_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icache_tag_clk      ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (icache_tag_icg_en   ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( .clk_in     (forever_cpuclk   ), @81
//           .external_en(1'b0             ), @82
//           .global_en  (cp0_yy_clk_en    ), @83
//           .module_en  (1'b0             ), @84
//           .local_en   (icache_tag_icg_en), @85
//           .clk_out    (icache_tag_clk   ) @86
//          ); @87




assign icache_tag_gwen = |icache_tag_wen[2:0];
//csky vperl_off
`ifdef ICACHE_2K
assign icache_tag_bwen[46:0] = {
                               {  {icache_tag_wen[2]}},  //fifo
                               {(`I_TAG_TAG_WIDTH+1){icache_tag_wen[1]}},  //way1
                               {(`I_TAG_TAG_WIDTH+1){icache_tag_wen[0]}}   //way0
                              };
assign icache_tag_dout[46:0] = icache_tag_dout_raw[46:0];
`else
assign icache_tag_bwen[46:0] = {  {2*(22-`I_TAG_TAG_WIDTH){1'b0}},
                               {  {icache_tag_wen[2]}},  //fifo
                               {(`I_TAG_TAG_WIDTH+1){icache_tag_wen[1]}},  //way1
                               {(`I_TAG_TAG_WIDTH+1){icache_tag_wen[0]}}   //way0
                              };
assign icache_tag_dout[46:0] = {
                  icache_tag_dout_raw[2*`I_TAG_TAG_WIDTH+2:2*`I_TAG_TAG_WIDTH+1],
                  {(22-`I_TAG_TAG_WIDTH){1'b0}},
                  icache_tag_dout_raw[2*`I_TAG_TAG_WIDTH:`I_TAG_TAG_WIDTH],
                  {(22-`I_TAG_TAG_WIDTH){1'b0}},
                  icache_tag_dout_raw[`I_TAG_TAG_WIDTH-1:0]
                              };

assign icache_tag_dout_raw[46:2*`I_TAG_TAG_WIDTH+3] = {(44-2*`I_TAG_TAG_WIDTH){1'b0}};
assign icache_tag_din_fin[46:2*`I_TAG_TAG_WIDTH+3]  = {(44-2*`I_TAG_TAG_WIDTH){1'b0}};
`endif
//csky vperl_on
assign icache_tag_cen_b  = !icache_tag_cen;
assign icache_tag_gwen_b = !icache_tag_gwen;
assign icache_tag_bwen_b[46:0] = ~icache_tag_bwen[46:0];
assign icache_tag_din_fin[2*`I_TAG_TAG_WIDTH+2:0] =
                               {icache_tag_din[46:45-`I_TAG_TAG_WIDTH],
                                icache_tag_din[22:22-`I_TAG_TAG_WIDTH]
                              };




//csky vperl_off
`ifdef ICACHE_2K
pa_spsram_32x47  x_pa_spsram_32x47
`endif
`ifdef ICACHE_4K
pa_spsram_64x45  x_pa_spsram_64x45
`endif
`ifdef ICACHE_8K
pa_spsram_128x43  x_pa_spsram_128x43
`endif
`ifdef ICACHE_16K
pa_spsram_256x41  x_pa_spsram_256x41
`endif
`ifdef ICACHE_32K
pa_spsram_512x39  x_pa_spsram_512x39
`endif
`ifdef ICACHE_64K
pa_spsram_1024x37  x_pa_spsram_1024x37
`endif
(
         .CLK    (icache_tag_clk     ),
         .CEN    (icache_tag_cen_b   ),
         .GWEN   (icache_tag_gwen_b  ),
         .WEN    (icache_tag_bwen_b[2*`I_TAG_TAG_WIDTH+2:0]),
         .A      (icache_tag_idx[`I_TAG_INDEX_WIDTH-1:0]),
         .D      (icache_tag_din_fin[2*`I_TAG_TAG_WIDTH+2:0]),
         .Q      (icache_tag_dout_raw[2*`I_TAG_TAG_WIDTH+2:0])
);
//csky vperl_on

// &ModuleEnd; @160
endmodule
























// &ModuleBeg; @23
module pa_ifu_id_pred(
  bht_top_cur_st,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_ifu_ras_en,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  ibuf_id_pred_hungry,
  ibuf_ipack_stall,
  id_pred_ctrl_stall,
  id_pred_ibuf_br_taken0,
  id_pred_ibuf_br_taken1,
  id_pred_ibuf_chgflw_vld0,
  id_pred_ibuf_inst_bkpt0,
  id_pred_ibuf_inst_bkpt1,
  id_pred_ipack_chgflw_vld0,
  id_pred_ipack_delay_stall,
  id_pred_ipack_mask,
  id_pred_ipack_ret_stall,
  id_pred_pcgen_chgflw_pc,
  id_pred_pcgen_chgflw_vld,
  id_pred_pcgen_inst_vld,
  idu_ifu_x1,
  ifu_cp0_bht_inv_done,
  ifu_iu_ex1_pc_pred,
  ipack_id_pred_h0_create,
  ipack_id_pred_h0_vld,
  ipack_id_pred_inst0,
  ipack_id_pred_inst0_vld,
  ipack_id_pred_inst1,
  ipack_id_pred_inst1_vld,
  ipack_id_pred_inst_full,
  ipack_id_pred_new_vld,
  ipack_id_pred_unalign,
  iu_ifu_bht_cur_pc,
  iu_ifu_bht_mispred,
  iu_ifu_bht_pred,
  iu_ifu_bht_taken,
  iu_ifu_br_vld,
  iu_ifu_br_vld_gate,
  iu_ifu_link_vld,
  iu_ifu_link_vld_gate,
  iu_ifu_pc_mispred,
  iu_ifu_ret_vld,
  iu_ifu_ret_vld_gate,
  pad_yy_gate_clk_en_b,
  pcgen_id_pred_btb_tar_pc,
  pcgen_id_pred_btb_tar_vld,
  pcgen_id_pred_flush_vld,
  pcgen_id_pred_idpc,
  pcgen_id_pred_ifpc,
  pred_top_delay_chgflw,
  pred_top_ras_st,
  rtu_ifu_xx_fe_flush,
  rtu_ifu_xx_fe_flush_gate
);

// &Ports; @24
input           cp0_ifu_bht_en;
input           cp0_ifu_bht_inv;
input           cp0_ifu_ras_en;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input           ibuf_id_pred_hungry;
input           ibuf_ipack_stall;
input   [31:0]  idu_ifu_x1;
input           ipack_id_pred_h0_create;
input           ipack_id_pred_h0_vld;
input   [31:0]  ipack_id_pred_inst0;
input           ipack_id_pred_inst0_vld;
input   [15:0]  ipack_id_pred_inst1;
input           ipack_id_pred_inst1_vld;
input           ipack_id_pred_inst_full;
input           ipack_id_pred_new_vld;
input           ipack_id_pred_unalign;
input   [31:0]  iu_ifu_bht_cur_pc;
input           iu_ifu_bht_mispred;
input   [1 :0]  iu_ifu_bht_pred;
input           iu_ifu_bht_taken;
input           iu_ifu_br_vld;
input           iu_ifu_br_vld_gate;
input           iu_ifu_link_vld;
input           iu_ifu_link_vld_gate;
input           iu_ifu_pc_mispred;
input           iu_ifu_ret_vld;
input           iu_ifu_ret_vld_gate;
input           pad_yy_gate_clk_en_b;
input   [31:0]  pcgen_id_pred_btb_tar_pc;
input           pcgen_id_pred_btb_tar_vld;
input           pcgen_id_pred_flush_vld;
input   [31:0]  pcgen_id_pred_idpc;
input   [31:0]  pcgen_id_pred_ifpc;
input           rtu_ifu_xx_fe_flush;
input           rtu_ifu_xx_fe_flush_gate;
output  [1 :0]  bht_top_cur_st;
output          id_pred_ctrl_stall;
output  [1 :0]  id_pred_ibuf_br_taken0;
output  [1 :0]  id_pred_ibuf_br_taken1;
output          id_pred_ibuf_chgflw_vld0;
output  [8 :0]  id_pred_ibuf_inst_bkpt0;
output  [8 :0]  id_pred_ibuf_inst_bkpt1;
output          id_pred_ipack_chgflw_vld0;
output          id_pred_ipack_delay_stall;
output          id_pred_ipack_mask;
output          id_pred_ipack_ret_stall;
output  [31:0]  id_pred_pcgen_chgflw_pc;
output          id_pred_pcgen_chgflw_vld;
output          id_pred_pcgen_inst_vld;
output          ifu_cp0_bht_inv_done;
output  [31:0]  ifu_iu_ex1_pc_pred;
output          pred_top_delay_chgflw;
output          pred_top_ras_st;

// &Regs; @25
reg     [31:0]  chgflw_pc;
reg             delay_chgflw;
reg             h0_br_vld;
reg     [31:0]  id_pred_cur_pc;
reg     [31:0]  id_pred_h0_pc;
reg             ras_cur_st;
reg             ras_nxt_st;
reg     [31:0]  ras_pred_pc;

// &Wires; @26
wire            bht_id_pred_mem_taken;
wire    [1 :0]  bht_id_pred_rslt;
wire    [1 :0]  bht_top_cur_st;
wire            btb_mis_pred;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_ras_en;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire            ibuf_ipack_stall;
wire            id_pred_bht_br_vld;
wire    [2 :0]  id_pred_bht_pc;
wire    [31:0]  id_pred_br_imm;
wire    [1 :0]  id_pred_br_rslt0;
wire    [1 :0]  id_pred_br_rslt1;
wire            id_pred_br_taken;
wire            id_pred_br_taken0;
wire            id_pred_br_taken1;
wire    [31:0]  id_pred_br_tar;
wire            id_pred_br_vld0;
wire            id_pred_br_vld1;
wire            id_pred_br_vld1_raw;
wire            id_pred_chgflw;
wire            id_pred_chgflw_fin;
wire    [31:0]  id_pred_chgflw_fin_tar;
wire    [31:0]  id_pred_chgflw_fin_tar1;
wire    [31:0]  id_pred_chgflw_tar;
wire            id_pred_chgflw_vld;
wire            id_pred_chgflw_vld0;
wire            id_pred_chgflw_vld1;
wire            id_pred_clk;
wire            id_pred_ctrl_stall;
wire            id_pred_delay_br;
wire            id_pred_delay_br1;
wire    [1 :0]  id_pred_ibuf_br_taken0;
wire    [1 :0]  id_pred_ibuf_br_taken1;
wire            id_pred_ibuf_chgflw_vld0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt1;
wire            id_pred_icg_en;
wire    [31:0]  id_pred_idpc;
wire    [31:0]  id_pred_imm0;
wire    [31:0]  id_pred_imm1;
wire            id_pred_inst0_32;
wire            id_pred_inst0_bjtype;
wire    [31:0]  id_pred_inst0_bkpt_pc;
wire            id_pred_inst0_taken;
wire    [31:0]  id_pred_inst1_bkpt_pc;
wire            id_pred_inst1_taken;
wire    [8 :0]  id_pred_inst_bkpt0;
wire    [8 :0]  id_pred_inst_bkpt1;
wire            id_pred_ipack_chgflw_vld0;
wire            id_pred_ipack_delay_stall;
wire            id_pred_ipack_mask;
wire            id_pred_ipack_ret_stall;
wire            id_pred_jmp_vld0;
wire            id_pred_jmp_vld1;
wire            id_pred_link_vld0;
wire            id_pred_link_vld1;
wire    [31:0]  id_pred_nxt_offset;
wire    [31:0]  id_pred_nxt_pc;
wire    [31:0]  id_pred_pcgen_chgflw_pc;
wire            id_pred_pcgen_chgflw_vld;
wire            id_pred_pcgen_inst_vld;
wire    [23:0]  id_pred_ras_link_pc;
wire            id_pred_ras_link_vld;
wire            id_pred_ras_link_vld0;
wire            id_pred_ras_link_vld1;
wire            id_pred_ras_ret_chgflw;
wire            id_pred_ras_ret_req;
wire            id_pred_ras_ret_req1;
wire            id_pred_ras_ret_vld;
wire            id_pred_ras_ret_vld0;
wire            id_pred_ras_ret_vld1;
wire    [31:0]  id_pred_ras_tar;
wire            id_pred_ret_stall;
wire            id_pred_ret_vld0;
wire            id_pred_ret_vld1;
wire            id_ras_clk;
wire            id_ras_icg_en;
wire            ifu_cp0_bht_inv_done;
wire    [31:0]  ifu_iu_ex1_pc_pred;
wire            ipack_id_pred_h0_create;
wire            ipack_id_pred_h0_vld;
wire    [31:0]  ipack_id_pred_inst0;
wire            ipack_id_pred_inst0_vld;
wire    [15:0]  ipack_id_pred_inst1;
wire            ipack_id_pred_inst1_vld;
wire            ipack_id_pred_inst_full;
wire            ipack_id_pred_new_vld;
wire            ipack_id_pred_unalign;
wire    [31:0]  iu_ifu_bht_cur_pc;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  pcgen_id_pred_btb_tar_pc;
wire            pcgen_id_pred_btb_tar_vld;
wire            pcgen_id_pred_flush_vld;
wire    [31:0]  pcgen_id_pred_idpc;
wire            pred_top_delay_chgflw;
wire            pred_top_ras_st;
wire    [23:0]  ras_id_pred_tar_pc;
wire    [23:0]  ras_link_offset;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;
















assign id_pred_icg_en = ipack_id_pred_h0_create || h0_br_vld
                     || id_pred_br_vld0 || id_pred_chgflw
                     || delay_chgflw;

// &Instance("gated_clk_cell", "x_pa_ifu_id_pred_icg_cell"); @46
gated_clk_cell  x_pa_ifu_id_pred_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (id_pred_clk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (id_pred_icg_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @47
//          .external_en (1'b0), @48
//          .global_en   (cp0_yy_clk_en), @49
//          .module_en   (1'b0), @50
//          .local_en    (id_pred_icg_en), @51
//          .clk_out     (id_pred_clk)  @52
// ); @53

assign id_ras_icg_en = pcgen_id_pred_flush_vld
                     | id_pred_ras_ret_chgflw
                     | iu_ifu_ret_vld;
// &Instance("gated_clk_cell", "x_pa_ifu_id_ras_icg_cell"); @58
gated_clk_cell  x_pa_ifu_id_ras_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (id_ras_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (id_ras_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @59
//          .external_en (1'b0), @60
//          .global_en   (cp0_yy_clk_en), @61
//          .module_en   (1'b0), @62
//          .local_en    (id_ras_icg_en), @63
//          .clk_out     (id_ras_clk)  @64
// ); @65




// &Instance("pa_ifu_pre_decd", "x_pa_ifu_pre_decd"); @70
pa_ifu_pre_decd  x_pa_ifu_pre_decd (
  .id_pred_br_vld0         (id_pred_br_vld0        ),
  .id_pred_br_vld1         (id_pred_br_vld1        ),
  .id_pred_br_vld1_raw     (id_pred_br_vld1_raw    ),
  .id_pred_imm0            (id_pred_imm0           ),
  .id_pred_imm1            (id_pred_imm1           ),
  .id_pred_inst0_32        (id_pred_inst0_32       ),
  .id_pred_jmp_vld0        (id_pred_jmp_vld0       ),
  .id_pred_jmp_vld1        (id_pred_jmp_vld1       ),
  .id_pred_link_vld0       (id_pred_link_vld0      ),
  .id_pred_link_vld1       (id_pred_link_vld1      ),
  .id_pred_ret_vld0        (id_pred_ret_vld0       ),
  .id_pred_ret_vld1        (id_pred_ret_vld1       ),
  .ipack_id_pred_inst0     (ipack_id_pred_inst0    ),
  .ipack_id_pred_inst0_vld (ipack_id_pred_inst0_vld),
  .ipack_id_pred_inst1     (ipack_id_pred_inst1    ),
  .ipack_id_pred_inst1_vld (ipack_id_pred_inst1_vld)
);





assign id_pred_idpc[31:0] = pcgen_id_pred_idpc[31:0];

always @ (posedge id_pred_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    id_pred_h0_pc[31:0] <= 32'b0;
  else if(ipack_id_pred_h0_create)
    id_pred_h0_pc[31:0] <= {id_pred_idpc[31:2], 2'b10};
  else
    id_pred_h0_pc[31:0] <= id_pred_h0_pc[31:0];
end

// &CombBeg; @87
always @( id_pred_br_taken0
       or ipack_id_pred_inst_full
       or id_pred_h0_pc[31:0]
       or delay_chgflw
       or id_pred_idpc[31:0]
       or ipack_id_pred_h0_vld
       or id_pred_br_taken1)
begin
if(id_pred_br_taken0 && !delay_chgflw)
  if(ipack_id_pred_h0_vld)
    id_pred_cur_pc[31:0] = id_pred_h0_pc[31:0];
  else
    id_pred_cur_pc[31:0] = id_pred_idpc[31:0];
else if(id_pred_br_taken1 || delay_chgflw)
  id_pred_cur_pc[31:0] = {id_pred_idpc[31:2], 2'b10};
else  if(ipack_id_pred_h0_vld && !ipack_id_pred_inst_full)
  id_pred_cur_pc[31:0] = id_pred_h0_pc[31:0];
else
  id_pred_cur_pc[31:0] = id_pred_idpc[31:0];
// &CombEnd; @99
end

assign id_pred_nxt_offset[31:0] = ipack_id_pred_unalign ? 32'h2 : 32'h4;
assign id_pred_nxt_pc[31:0] = id_pred_cur_pc[31:0] + id_pred_nxt_offset[31:0];








assign id_pred_bht_br_vld   = (id_pred_br_vld0 || id_pred_br_vld1)
                           && !ibuf_ipack_stall;

always @ (posedge id_pred_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    h0_br_vld <= 1'b0;
  else if(pcgen_id_pred_flush_vld)
    h0_br_vld <= 1'b0;
  else if(ipack_id_pred_h0_create)
    h0_br_vld <= id_pred_br_vld1_raw;
  else if(h0_br_vld && !ibuf_ipack_stall)
    h0_br_vld <= 1'b0;
  else
    h0_br_vld <= h0_br_vld;
end

assign id_pred_bht_pc[2:0]  = h0_br_vld ? id_pred_h0_pc[3:1]
                            : (ipack_id_pred_unalign || !id_pred_br_vld0) ? {id_pred_idpc[3:2], 1'b1}
                            : id_pred_idpc[3:1];




// &Instance("pa_ifu_bht", "x_pa_ifu_bht"); @136
pa_ifu_bht  x_pa_ifu_bht (
  .bht_id_pred_mem_taken (bht_id_pred_mem_taken),
  .bht_id_pred_rslt      (bht_id_pred_rslt     ),
  .bht_top_cur_st        (bht_top_cur_st       ),
  .cp0_ifu_bht_en        (cp0_ifu_bht_en       ),
  .cp0_ifu_bht_inv       (cp0_ifu_bht_inv      ),
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .forever_cpuclk        (forever_cpuclk       ),
  .id_pred_bht_br_vld    (id_pred_bht_br_vld   ),
  .id_pred_bht_pc        (id_pred_bht_pc       ),
  .ifu_cp0_bht_inv_done  (ifu_cp0_bht_inv_done ),
  .iu_ifu_bht_cur_pc     (iu_ifu_bht_cur_pc    ),
  .iu_ifu_bht_mispred    (iu_ifu_bht_mispred   ),
  .iu_ifu_bht_pred       (iu_ifu_bht_pred      ),
  .iu_ifu_bht_taken      (iu_ifu_bht_taken     ),
  .iu_ifu_br_vld         (iu_ifu_br_vld        ),
  .iu_ifu_br_vld_gate    (iu_ifu_br_vld_gate   ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b )
);

// &Force("nonport", "id_pred_br_vld1_raw"); @138
// &Force("input", "ipack_id_pred_new_vld"); @139
assign id_pred_delay_br = id_pred_br_vld0 && !bht_id_pred_rslt[1]
                       && (id_pred_br_vld1 && (bht_id_pred_mem_taken
                            || ipack_id_pred_new_vld)
                          || id_pred_ret_vld1)
                       && !ibuf_ipack_stall;

assign id_pred_delay_br1 = id_pred_chgflw
                       && !ibuf_ipack_stall;


always @ (posedge id_pred_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    delay_chgflw <= 1'b0;
  else if(pcgen_id_pred_flush_vld)
    delay_chgflw <= 1'b0;
  else if(id_pred_delay_br || id_pred_delay_br1)
    delay_chgflw <= 1'b1;
  else if(delay_chgflw && !ibuf_ipack_stall)
    delay_chgflw <= 1'b0;
  else
    delay_chgflw <= delay_chgflw;
end
always @ (posedge id_pred_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    chgflw_pc[31:0] <= 32'b0;
  else if(id_pred_delay_br || id_pred_delay_br1)
    chgflw_pc[31:0] <= id_pred_chgflw_fin_tar1[31:0];
end



assign id_pred_inst0_bjtype = id_pred_br_vld0 || id_pred_jmp_vld0;
assign id_pred_inst0_taken  = id_pred_br_vld0 && bht_id_pred_rslt[1]
                           || id_pred_jmp_vld0;
assign id_pred_inst1_taken  = !id_pred_br_vld0
                            && id_pred_br_vld1 && bht_id_pred_rslt[1]
                           || !id_pred_inst0_taken && id_pred_br_vld0
                            && id_pred_br_vld1 && bht_id_pred_mem_taken
                           || !id_pred_inst0_taken && id_pred_jmp_vld1;
assign id_pred_br_taken0    = id_pred_inst0_taken;
assign id_pred_br_taken1    = id_pred_inst1_taken;
assign id_pred_br_taken     = (id_pred_br_taken0 || id_pred_br_taken1) && !delay_chgflw;

assign id_pred_br_imm[31:0] = id_pred_inst0_taken ? id_pred_imm0[31:0]
                                                  : id_pred_imm1[31:0];
assign id_pred_br_tar[31:0] = id_pred_cur_pc[31:0] + id_pred_br_imm[31:0];
assign id_pred_br_rslt0[1:0] = {2{id_pred_br_vld0}} & bht_id_pred_rslt[1:0];
assign id_pred_br_rslt1[1:0] = {2{id_pred_br_vld1 && !id_pred_inst0_bjtype}} & bht_id_pred_rslt[1:0];










assign id_pred_ras_link_vld0 = id_pred_link_vld0;
assign id_pred_ras_link_vld1 = id_pred_link_vld1 && !id_pred_inst0_taken;
assign id_pred_ras_link_vld  = (id_pred_ras_link_vld0 || id_pred_ras_link_vld1)
                            && cp0_ifu_ras_en
                            && !ibuf_ipack_stall;

assign id_pred_ras_ret_vld0  = id_pred_ret_vld0;
assign id_pred_ras_ret_vld1  = id_pred_ret_vld1 && !id_pred_inst0_bjtype;
assign id_pred_ras_ret_req1  = id_pred_ret_vld1 && !id_pred_inst0_taken;
assign id_pred_ras_ret_chgflw = (id_pred_ras_ret_vld0 || id_pred_ras_ret_vld1);
assign id_pred_ras_ret_req   = (id_pred_ras_ret_vld0 || id_pred_ras_ret_req1);


assign id_pred_ras_ret_vld = id_pred_ras_ret_chgflw && !ibuf_ipack_stall;

assign ras_link_offset[23:0] = id_pred_ras_link_vld0 && id_pred_inst0_32
                             ? 24'h4 : 24'h2;

assign id_pred_ras_link_pc[23:0] = id_pred_cur_pc[23:0] + ras_link_offset[23:0];


// &Instance("pa_ifu_ras", "x_pa_ifu_ras"); @231
pa_ifu_ras  x_pa_ifu_ras (
  .cp0_yy_clk_en            (cp0_yy_clk_en           ),
  .cpurst_b                 (cpurst_b                ),
  .forever_cpuclk           (forever_cpuclk          ),
  .id_pred_ras_link_pc      (id_pred_ras_link_pc     ),
  .id_pred_ras_link_vld     (id_pred_ras_link_vld    ),
  .id_pred_ras_ret_vld      (id_pred_ras_ret_vld     ),
  .iu_ifu_bht_mispred       (iu_ifu_bht_mispred      ),
  .iu_ifu_link_vld          (iu_ifu_link_vld         ),
  .iu_ifu_link_vld_gate     (iu_ifu_link_vld_gate    ),
  .iu_ifu_pc_mispred        (iu_ifu_pc_mispred       ),
  .iu_ifu_ret_vld           (iu_ifu_ret_vld          ),
  .iu_ifu_ret_vld_gate      (iu_ifu_ret_vld_gate     ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .ras_cur_st               (ras_cur_st              ),
  .ras_id_pred_tar_pc       (ras_id_pred_tar_pc      ),
  .rtu_ifu_xx_fe_flush      (rtu_ifu_xx_fe_flush     ),
  .rtu_ifu_xx_fe_flush_gate (rtu_ifu_xx_fe_flush_gate)
);



// &Force("input", "idu_ifu_x1"); @234
// &Force("bus", "idu_ifu_x1", 31, 0); @235
assign id_pred_ras_tar[31:0] = {id_pred_idpc[31:24], ras_id_pred_tar_pc[23:0]};

// &Force("nonport", "id_pred_inst0_32"); @241
// &Force("nonport", "id_pred_ras_link_vld"); @242
// &Force("input", "iu_ifu_ret_vld_gate"); @243


parameter RAS_IDLE = 1'b0;
parameter RAS_WAIT = 1'b1;

always @ (posedge id_ras_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ras_cur_st <= RAS_IDLE;
  else if(pcgen_id_pred_flush_vld)
    ras_cur_st <= RAS_IDLE;
  else
    ras_cur_st <= ras_nxt_st;
end

// &CombBeg; @263
always @( iu_ifu_ret_vld
       or ras_cur_st
       or id_pred_ras_ret_vld)
begin
case(ras_cur_st)
  RAS_IDLE:
    if(id_pred_ras_ret_vld)
      ras_nxt_st = RAS_WAIT;
    else
      ras_nxt_st = RAS_IDLE;
  RAS_WAIT:
    if(iu_ifu_ret_vld)
      ras_nxt_st = RAS_IDLE;
    else
      ras_nxt_st = RAS_WAIT;
  default:
      ras_nxt_st = RAS_IDLE;
endcase
// &CombEnd; @278
end

assign id_pred_ret_stall = ras_cur_st == RAS_WAIT && id_pred_ras_ret_vld;

always @ (posedge id_ras_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ras_pred_pc[31:0] <= 32'b0;
  else if(id_pred_ras_ret_vld && ras_cur_st == RAS_IDLE)
    ras_pred_pc[31:0] <= id_pred_ras_tar[31:0];
  else
    ras_pred_pc[31:0] <= ras_pred_pc[31:0];
end






assign id_pred_chgflw_vld0 = id_pred_br_taken0 || id_pred_ras_ret_vld0;
assign id_pred_chgflw_vld1 = id_pred_br_taken1 || id_pred_ras_ret_req1;
assign id_pred_chgflw_vld  = id_pred_chgflw_vld0 || id_pred_chgflw_vld1;
assign id_pred_chgflw_tar[31:0] = id_pred_ras_ret_req ? id_pred_ras_tar[31:0]
                                                      : id_pred_br_tar[31:0];


assign btb_mis_pred = (id_pred_br_tar[31:0]
                    != pcgen_id_pred_btb_tar_pc[31:0]
                    || !id_pred_chgflw_vld) && pcgen_id_pred_btb_tar_vld
                      && (ipack_id_pred_inst0_vld
                       || ipack_id_pred_inst1_vld);

// &Force("input", "pcgen_id_pred_btb_tar_pc"); @310
// &Force("bus", "pcgen_id_pred_btb_tar_pc", 31, 0); @311




assign id_pred_chgflw       = (pcgen_id_pred_btb_tar_vld ? btb_mis_pred
                                                         : id_pred_br_taken)
                           ;// || id_pred_ras_ret_vld;// || delay_chgflw;
assign id_pred_chgflw_fin   = id_pred_ras_ret_chgflw || delay_chgflw;
assign id_pred_chgflw_fin_tar1[31:0] = id_pred_chgflw_vld
                                    ? id_pred_chgflw_tar[31:0]
                                    : id_pred_nxt_pc[31:0];
assign id_pred_chgflw_fin_tar[31:0] = delay_chgflw ? chgflw_pc[31:0]
                                                   : id_pred_ras_tar[31:0];




assign id_pred_inst0_bkpt_pc[31:0] = ipack_id_pred_h0_vld ? id_pred_h0_pc[31:0]
                                   : id_pred_idpc[31:0];
assign id_pred_inst1_bkpt_pc[31:0] = {id_pred_idpc[31:2], 2'b10};

// &Instance("pa_ifu_inst_bkpt","x_pa_ifu_inst_bkpt0"); @333
pa_ifu_inst_bkpt  x_pa_ifu_inst_bkpt0 (
  .bkpt_cur_pc                 (id_pred_inst0_bkpt_pc[31:0]),
  .bkpt_inst_hit               (id_pred_inst_bkpt0[8:0]    ),
  .bkpt_inst_vld               (ipack_id_pred_inst0_vld    ),
  .had_yy_xx_bkpta_base        (had_yy_xx_bkpta_base       ),
  .had_yy_xx_bkpta_mask        (had_yy_xx_bkpta_mask       ),
  .had_yy_xx_bkpta_rc          (had_yy_xx_bkpta_rc         ),
  .had_yy_xx_bkptb_base        (had_yy_xx_bkptb_base       ),
  .had_yy_xx_bkptb_mask        (had_yy_xx_bkptb_mask       ),
  .had_yy_xx_bkptb_rc          (had_yy_xx_bkptb_rc         ),
  .had_yy_xx_bkptc_base        (had_yy_xx_bkptc_base       ),
  .had_yy_xx_bkptc_mask        (had_yy_xx_bkptc_mask       ),
  .had_yy_xx_bkptd_base        (had_yy_xx_bkptd_base       ),
  .had_yy_xx_bkptd_mask        (had_yy_xx_bkptd_mask       ),
  .had_yy_xx_bkpte_base        (had_yy_xx_bkpte_base       ),
  .had_yy_xx_bkpte_mask        (had_yy_xx_bkpte_mask       )
);

// &Connect(.bkpt_inst_vld (ipack_id_pred_inst0_vld)); @334
// &Connect(.bkpt_cur_pc   (id_pred_inst0_bkpt_pc[31:0])); @335
// &Connect(.bkpt_inst_hit (id_pred_inst_bkpt0[8:0])); @336

// &Instance("pa_ifu_inst_bkpt","x_pa_ifu_inst_bkpt1"); @338
pa_ifu_inst_bkpt  x_pa_ifu_inst_bkpt1 (
  .bkpt_cur_pc                 (id_pred_inst1_bkpt_pc[31:0]),
  .bkpt_inst_hit               (id_pred_inst_bkpt1[8:0]    ),
  .bkpt_inst_vld               (ipack_id_pred_inst1_vld    ),
  .had_yy_xx_bkpta_base        (had_yy_xx_bkpta_base       ),
  .had_yy_xx_bkpta_mask        (had_yy_xx_bkpta_mask       ),
  .had_yy_xx_bkpta_rc          (had_yy_xx_bkpta_rc         ),
  .had_yy_xx_bkptb_base        (had_yy_xx_bkptb_base       ),
  .had_yy_xx_bkptb_mask        (had_yy_xx_bkptb_mask       ),
  .had_yy_xx_bkptb_rc          (had_yy_xx_bkptb_rc         ),
  .had_yy_xx_bkptc_base        (had_yy_xx_bkptc_base       ),
  .had_yy_xx_bkptc_mask        (had_yy_xx_bkptc_mask       ),
  .had_yy_xx_bkptd_base        (had_yy_xx_bkptd_base       ),
  .had_yy_xx_bkptd_mask        (had_yy_xx_bkptd_mask       ),
  .had_yy_xx_bkpte_base        (had_yy_xx_bkpte_base       ),
  .had_yy_xx_bkpte_mask        (had_yy_xx_bkpte_mask       )
);

// &Connect(.bkpt_inst_vld (ipack_id_pred_inst1_vld)); @339
// &Connect(.bkpt_cur_pc   (id_pred_inst1_bkpt_pc[31:0])); @340
// &Connect(.bkpt_inst_hit (id_pred_inst_bkpt1[8:0])); @341






assign id_pred_pcgen_chgflw_vld      = id_pred_chgflw_fin;
assign id_pred_pcgen_inst_vld        = (ipack_id_pred_inst0_vld
                                     || ipack_id_pred_inst1_vld) && !ibuf_ipack_stall;
assign id_pred_pcgen_chgflw_pc[31:0] = id_pred_chgflw_fin_tar[31:0];


assign id_pred_ipack_chgflw_vld0 = id_pred_chgflw_vld0;


assign id_pred_ibuf_chgflw_vld0     = id_pred_chgflw_vld0;
assign id_pred_ibuf_br_taken0[1:0]  = id_pred_br_rslt0[1:0];
assign id_pred_ibuf_br_taken1[1:0]  = id_pred_br_rslt1[1:0];
assign id_pred_ibuf_inst_bkpt0[8:0] = id_pred_inst_bkpt0[8:0];
assign id_pred_ibuf_inst_bkpt1[8:0] = id_pred_inst_bkpt1[8:0];
assign id_pred_ipack_ret_stall      = id_pred_ret_stall;
assign id_pred_ipack_delay_stall    = id_pred_delay_br;
assign id_pred_ipack_mask           = id_pred_delay_br1;


assign id_pred_ctrl_stall          = id_pred_ret_stall || id_pred_delay_br || id_pred_delay_br1;


assign pred_top_delay_chgflw = delay_chgflw;
assign pred_top_ras_st       = ras_cur_st;

// &Force("bus", "pcgen_id_pred_ifpc", 31, 0); @373
// &Force("input", "ibuf_id_pred_hungry"); @388
// &Force("input", "pcgen_id_pred_ifpc"); @389


assign ifu_iu_ex1_pc_pred[31:0] = ras_pred_pc[31:0];

// &Force("input", "rtu_ifu_xx_fe_flush_gate"); @395

// &ModuleEnd; @397
endmodule
























// &ModuleBeg; @23
module pa_ifu_ifetch(
  bmu_ifu_acc_err,
  bmu_ifu_grant,
  bmu_ifu_rdata,
  bmu_ifu_trans_cmplt,
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_ifu_lpmd_req,
  cp0_ifu_srst_req,
  cp0_yy_clk_en,
  cp0_yy_mach_mode,
  cpurst_b,
  ctrl_ifetch_req_abort,
  ctrl_ifetch_req_vld,
  forever_cpuclk,
  icache_top_abort,
  icache_top_rd_vld,
  icache_top_ref_st,
  icache_top_uc_st,
  ifetch_ctrl_inst_vld,
  ifetch_ibuf_idle,
  ifetch_ipack_acc_err,
  ifetch_ipack_inst,
  ifetch_ipack_inst_vld,
  ifetch_ipack_inst_vld_gate,
  ifetch_ipack_unalign,
  ifetch_pcgen_data,
  ifetch_pcgen_grant,
  ifetch_pcgen_grant_dp,
  ifetch_top_abt_st,
  ifetch_top_cur_st,
  ifetch_vec_acc_err,
  ifetch_vec_cmplt,
  ifetch_vec_grant,
  ifetch_vec_idle,
  ifetch_xx_not_busy,
  ifu_bmu_acc_deny,
  ifu_bmu_addr,
  ifu_bmu_burst,
  ifu_bmu_data_req,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_seq,
  ifu_bmu_size,
  ifu_cp0_icache_inv_done,
  ifu_cp0_lpmd_ack,
  ifu_cp0_srst_ack,
  ifu_hpcp_icache_access,
  ifu_hpcp_icache_miss,
  ifu_pmp_addr,
  ifu_pmp_machine_mode,
  ifu_rtu_lockup_ack,
  ifu_sysmap_pa,
  pad_yy_gate_clk_en_b,
  pcgen_ifetch_addr,
  pcgen_ifetch_chgflw_vld,
  pcgen_ifetch_ifpc,
  pcgen_ifetch_seq_addr,
  pmp_ifu_acc_deny,
  rtu_ifu_lockup_mask,
  rtu_ifu_lockup_req,
  rtu_yy_xx_dbgon,
  sysmap_ifu_flg,
  vec_ifetch_data_fetch
);

// &Ports; @24
input           bmu_ifu_acc_err;
input           bmu_ifu_grant;
input   [31:0]  bmu_ifu_rdata;
input           bmu_ifu_trans_cmplt;
input           cp0_ifu_icache_en;
input   [31:0]  cp0_ifu_icache_inv_addr;
input           cp0_ifu_icache_inv_req;
input           cp0_ifu_icache_inv_type;
input           cp0_ifu_lpmd_req;
input           cp0_ifu_srst_req;
input           cp0_yy_clk_en;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           ctrl_ifetch_req_abort;
input           ctrl_ifetch_req_vld;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input   [31:0]  pcgen_ifetch_addr;
input           pcgen_ifetch_chgflw_vld;
input   [31:0]  pcgen_ifetch_ifpc;
input   [31:0]  pcgen_ifetch_seq_addr;
input           pmp_ifu_acc_deny;
input           rtu_ifu_lockup_mask;
input           rtu_ifu_lockup_req;
input           rtu_yy_xx_dbgon;
input   [4 :0]  sysmap_ifu_flg;
input           vec_ifetch_data_fetch;
output          icache_top_abort;
output          icache_top_rd_vld;
output  [1 :0]  icache_top_ref_st;
output          icache_top_uc_st;
output          ifetch_ctrl_inst_vld;
output          ifetch_ibuf_idle;
output          ifetch_ipack_acc_err;
output  [31:0]  ifetch_ipack_inst;
output          ifetch_ipack_inst_vld;
output          ifetch_ipack_inst_vld_gate;
output          ifetch_ipack_unalign;
output  [31:0]  ifetch_pcgen_data;
output          ifetch_pcgen_grant;
output          ifetch_pcgen_grant_dp;
output  [1 :0]  ifetch_top_abt_st;
output  [2 :0]  ifetch_top_cur_st;
output          ifetch_vec_acc_err;
output          ifetch_vec_cmplt;
output          ifetch_vec_grant;
output          ifetch_vec_idle;
output          ifetch_xx_not_busy;
output          ifu_bmu_acc_deny;
output  [31:0]  ifu_bmu_addr;
output  [2 :0]  ifu_bmu_burst;
output          ifu_bmu_data_req;
output  [3 :0]  ifu_bmu_prot;
output          ifu_bmu_req;
output          ifu_bmu_seq;
output  [1 :0]  ifu_bmu_size;
output          ifu_cp0_icache_inv_done;
output          ifu_cp0_lpmd_ack;
output          ifu_cp0_srst_ack;
output          ifu_hpcp_icache_access;
output          ifu_hpcp_icache_miss;
output  [31:0]  ifu_pmp_addr;
output          ifu_pmp_machine_mode;
output          ifu_rtu_lockup_ack;
output  [31:0]  ifu_sysmap_pa;

// &Regs; @25
reg     [1 :0]  abort_cur_st;
reg     [1 :0]  abort_nxt_st;
reg     [2 :0]  cur_st;
reg             ibus_deny_reg;
reg             ibus_unalign_reg;
reg     [2 :0]  nxt_st;

// &Wires; @26
wire            bmu_ifu_acc_err;
wire            bmu_ifu_grant;
wire    [31:0]  bmu_ifu_rdata;
wire            bmu_ifu_trans_cmplt;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_ifu_lpmd_req;
wire            cp0_ifu_srst_req;
wire            cp0_yy_clk_en;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            ctrl_ifetch_req_abort;
wire            ctrl_ifetch_req_vld;
wire            flop_out_bus;
wire            forever_cpuclk;
wire            ibus_abort_trig;
wire    [31:0]  ibus_data;
wire            ibus_data_req_vld;
wire            ibus_icache_cmplt;
wire    [31:0]  ibus_icache_data;
wire            ibus_icache_error;
wire            ibus_icache_grant;
wire            ibus_icache_not_busy;
wire            ibus_icache_uc_cmplt;
wire            ibus_icache_unalign;
wire            ibus_inst_data_req;
wire            ibus_inst_req;
wire            ibus_req;
wire    [31:0]  ibus_req_addr;
wire    [2 :0]  ibus_req_burst;
wire            ibus_req_cmplt;
wire            ibus_req_deny;
wire            ibus_req_err;
wire    [3 :0]  ibus_req_prot;
wire            ibus_req_seq;
wire    [1 :0]  ibus_req_size;
wire            ibus_req_vld;
wire            ibus_trans_abort;
wire            ibusif_idle_st;
wire            icache_ibus_acc_deny;
wire    [31:0]  icache_ibus_addr;
wire    [2 :0]  icache_ibus_burst;
wire            icache_ibus_data_req;
wire    [3 :0]  icache_ibus_prot;
wire            icache_ibus_req;
wire            icache_ibus_seq;
wire            icache_ifetch_error;
wire            icache_ifetch_grant;
wire            icache_ifetch_idle;
wire    [31:0]  icache_ifetch_inst;
wire            icache_ifetch_inst_vld;
wire            icache_ifetch_inst_vld_gate;
wire            icache_ifetch_mach_mode;
wire            icache_ifetch_not_busy;
wire    [31:0]  icache_ifetch_rd_addr;
wire            icache_ifetch_uc_sel;
wire            icache_ifetch_unalign;
wire            icache_ifetch_vec_data_cmplt;
wire            icache_top_abort;
wire            icache_top_rd_vld;
wire    [1 :0]  icache_top_ref_st;
wire            icache_top_uc_st;
wire            ifetch_cpuclk;
wire            ifetch_ctrl_inst_vld;
wire            ifetch_ibuf_idle;
wire            ifetch_icg_en;
wire            ifetch_inst_vld;
wire            ifetch_ipack_acc_err;
wire    [31:0]  ifetch_ipack_inst;
wire            ifetch_ipack_inst_vld;
wire            ifetch_ipack_inst_vld_gate;
wire            ifetch_ipack_unalign;
wire            ifetch_outstanding;
wire    [31:0]  ifetch_pcgen_data;
wire            ifetch_pcgen_grant;
wire            ifetch_pcgen_grant_dp;
wire    [31:0]  ifetch_req_addr;
wire            ifetch_req_buf;
wire            ifetch_req_ca;
wire    [4 :0]  ifetch_req_flg;
wire    [3 :0]  ifetch_req_prot;
wire    [1 :0]  ifetch_top_abt_st;
wire    [2 :0]  ifetch_top_cur_st;
wire            ifetch_vec_acc_err;
wire            ifetch_vec_cmplt;
wire            ifetch_vec_grant;
wire            ifetch_vec_idle;
wire            ifetch_xx_not_busy;
wire            ifu_bmu_acc_deny;
wire    [31:0]  ifu_bmu_addr;
wire    [2 :0]  ifu_bmu_burst;
wire            ifu_bmu_data_req;
wire    [3 :0]  ifu_bmu_prot;
wire            ifu_bmu_req;
wire            ifu_bmu_seq;
wire    [1 :0]  ifu_bmu_size;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_lpmd_ack;
wire            ifu_cp0_srst_ack;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire    [31:0]  ifu_pmp_addr;
wire            ifu_pmp_machine_mode;
wire            ifu_rtu_lockup_ack;
wire    [31:0]  ifu_sysmap_pa;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  pcgen_ifetch_addr;
wire            pcgen_ifetch_chgflw_vld;
wire    [31:0]  pcgen_ifetch_seq_addr;
wire            pmp_ifu_acc_deny;
wire            rtu_ifu_lockup_mask;
wire            rtu_ifu_lockup_req;
wire            rtu_yy_xx_dbgon;
wire    [4 :0]  sysmap_ifu_flg;
wire            trans_abort;
wire            vec_ifetch_data_fetch;













assign ifetch_icg_en =  ibus_req_vld
                    || !ibusif_idle_st;
// &Instance("gated_clk_cell", "x_ifu_ifetch_icg_cell"); @41
gated_clk_cell  x_ifu_ifetch_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ifetch_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ifetch_icg_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @42
//          .external_en (1'b0), @43
//          .global_en   (cp0_yy_clk_en), @44
//          .module_en   (1'b0), @45
//          .local_en    (ifetch_icg_en), @46
//          .clk_out     (ifetch_cpuclk) @47
//        ); @48




assign ifetch_req_addr[31:0] = pcgen_ifetch_addr[31:0];
assign ifetch_req_flg[4:0]   = sysmap_ifu_flg[4:0];

assign ifetch_req_ca         = ifetch_req_flg[3];
assign ifetch_req_buf        = ifetch_req_flg[2];
assign ifetch_req_prot[3:0]  = {ifetch_req_ca, ifetch_req_buf,
                              cp0_yy_mach_mode, 1'b0};



// &Instance("pa_ifu_icache", "x_pa_ifu_icache"); @64
pa_ifu_icache  x_pa_ifu_icache (
  .cp0_ifu_icache_en            (cp0_ifu_icache_en           ),
  .cp0_ifu_icache_inv_addr      (cp0_ifu_icache_inv_addr     ),
  .cp0_ifu_icache_inv_req       (cp0_ifu_icache_inv_req      ),
  .cp0_ifu_icache_inv_type      (cp0_ifu_icache_inv_type     ),
  .cp0_yy_clk_en                (cp0_yy_clk_en               ),
  .cpurst_b                     (cpurst_b                    ),
  .ctrl_ifetch_req_abort        (ctrl_ifetch_req_abort       ),
  .ctrl_ifetch_req_vld          (ctrl_ifetch_req_vld         ),
  .forever_cpuclk               (forever_cpuclk              ),
  .ibus_icache_cmplt            (ibus_icache_cmplt           ),
  .ibus_icache_data             (ibus_icache_data            ),
  .ibus_icache_error            (ibus_icache_error           ),
  .ibus_icache_grant            (ibus_icache_grant           ),
  .ibus_icache_not_busy         (ibus_icache_not_busy        ),
  .ibus_icache_uc_cmplt         (ibus_icache_uc_cmplt        ),
  .ibus_icache_unalign          (ibus_icache_unalign         ),
  .ibus_trans_abort             (ibus_trans_abort            ),
  .icache_ibus_acc_deny         (icache_ibus_acc_deny        ),
  .icache_ibus_addr             (icache_ibus_addr            ),
  .icache_ibus_burst            (icache_ibus_burst           ),
  .icache_ibus_data_req         (icache_ibus_data_req        ),
  .icache_ibus_prot             (icache_ibus_prot            ),
  .icache_ibus_req              (icache_ibus_req             ),
  .icache_ibus_seq              (icache_ibus_seq             ),
  .icache_ifetch_error          (icache_ifetch_error         ),
  .icache_ifetch_grant          (icache_ifetch_grant         ),
  .icache_ifetch_idle           (icache_ifetch_idle          ),
  .icache_ifetch_inst           (icache_ifetch_inst          ),
  .icache_ifetch_inst_vld       (icache_ifetch_inst_vld      ),
  .icache_ifetch_inst_vld_gate  (icache_ifetch_inst_vld_gate ),
  .icache_ifetch_mach_mode      (icache_ifetch_mach_mode     ),
  .icache_ifetch_not_busy       (icache_ifetch_not_busy      ),
  .icache_ifetch_rd_addr        (icache_ifetch_rd_addr       ),
  .icache_ifetch_uc_sel         (icache_ifetch_uc_sel        ),
  .icache_ifetch_unalign        (icache_ifetch_unalign       ),
  .icache_ifetch_vec_data_cmplt (icache_ifetch_vec_data_cmplt),
  .icache_top_abort             (icache_top_abort            ),
  .icache_top_rd_vld            (icache_top_rd_vld           ),
  .icache_top_ref_st            (icache_top_ref_st           ),
  .icache_top_uc_st             (icache_top_uc_st            ),
  .ifetch_outstanding           (ifetch_outstanding          ),
  .ifetch_req_addr              (ifetch_req_addr             ),
  .ifetch_req_ca                (ifetch_req_ca               ),
  .ifetch_req_prot              (ifetch_req_prot             ),
  .ifu_cp0_icache_inv_done      (ifu_cp0_icache_inv_done     ),
  .ifu_hpcp_icache_access       (ifu_hpcp_icache_access      ),
  .ifu_hpcp_icache_miss         (ifu_hpcp_icache_miss        ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        ),
  .pcgen_ifetch_chgflw_vld      (pcgen_ifetch_chgflw_vld     ),
  .pcgen_ifetch_seq_addr        (pcgen_ifetch_seq_addr       ),
  .pmp_ifu_acc_deny             (pmp_ifu_acc_deny            ),
  .vec_ifetch_data_fetch        (vec_ifetch_data_fetch       )
);

assign ibus_req_vld        = icache_ibus_req;
assign ibus_data_req_vld   = icache_ibus_data_req;
assign ibus_req_addr[31:0] = icache_ibus_addr[31:0];
assign ibus_req_prot[3:0]  = icache_ibus_prot[3:0];
assign ibus_req_size[1:0]  = 2'b10;
assign ibus_req_seq        = icache_ibus_seq;
assign ibus_req_burst[2:0] = icache_ibus_burst[2:0];
assign ibus_req_deny       = icache_ibus_acc_deny;









assign ibus_icache_grant      = bmu_ifu_grant;
assign ibus_icache_cmplt      = ibus_req_cmplt;// && !rtu_yy_xx_dbgon;
assign ibus_icache_error      = ibus_req_err || ibus_req_cmplt && ibus_deny_reg;
assign ibus_icache_data[31:0] = ibus_data[31:0];
assign ibus_icache_unalign    = ibus_unalign_reg;
assign ibus_icache_not_busy   = cur_st[0];












parameter IDLE     = 3'b001,
          WFG1     = 3'b010,
          WFD1     = 3'b011,
          WFD1WFG2 = 3'b000,
          WFD1WFD2 = 3'b110;

parameter ABORT_IDLE = 2'b00,
          ABORT_VLD1 = 2'b10,
          ABORT_VLD2 = 2'b11;

assign flop_out_bus = 1'b1;

assign ibus_data[31:0] = bmu_ifu_rdata[31:0];




always @(posedge ifetch_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_st[2:0] <= IDLE;
  else
    cur_st[2:0] <= nxt_st[2:0];
end


// &CombBeg; @136
always @( bmu_ifu_trans_cmplt
       or bmu_ifu_acc_err
       or ibus_req_vld
       or flop_out_bus
       or cur_st
       or bmu_ifu_grant)
begin
case(cur_st)
IDLE:
begin
  if(ibus_req_vld)
    begin
      if(bmu_ifu_grant)
        nxt_st = WFD1;
      else
        nxt_st = WFG1;
    end
  else
    nxt_st = IDLE;
end
WFG1:
begin
  if(bmu_ifu_grant)
    nxt_st = WFD1;
  else
    nxt_st = WFG1;
end
WFD1:
begin
  if(bmu_ifu_trans_cmplt)
    begin
      if(ibus_req_vld)
        begin
          if(bmu_ifu_grant)
            nxt_st = WFD1;
          else
            nxt_st = WFG1;
        end
      else
        nxt_st = IDLE;
    end
  else if(ibus_req_vld && flop_out_bus)
    begin //flop out bus can grant 2 outstanding inst fetch
      if(bmu_ifu_grant)
        nxt_st = WFD1WFD2;
      else
        nxt_st = WFD1WFG2;
    end
  else if(ibus_req_vld)
    nxt_st = WFD1WFG2;
  else
    nxt_st = WFD1;
end
WFD1WFG2:
begin
  if(bmu_ifu_trans_cmplt)
    begin
      if(bmu_ifu_grant)
        nxt_st = WFD1;
      else if(bmu_ifu_acc_err)
        nxt_st = IDLE;
      else
        nxt_st = WFG1;
    end
  else
    begin
      if(bmu_ifu_grant && flop_out_bus)
        nxt_st = WFD1WFD2;
      else
        nxt_st = WFD1WFG2;
    end
end
WFD1WFD2:
begin
  if(bmu_ifu_trans_cmplt)
    nxt_st = WFD1;
  else
    nxt_st = WFD1WFD2;
end
default:
begin
  nxt_st = IDLE;
end
endcase
// &CombEnd; @214
end

assign ibusif_idle_st = (cur_st == IDLE);

assign ibus_req_cmplt = ((cur_st == WFD1)
                      || (cur_st == WFD1WFG2)
                      || (cur_st == WFD1WFD2)
                        )  && bmu_ifu_trans_cmplt
                           && !ibus_trans_abort;
assign ibus_req_err = ((cur_st == WFD1)
                    || (cur_st == WFD1WFG2)
                    || (cur_st == WFD1WFD2)
                      )  &&  bmu_ifu_acc_err;
assign ibus_inst_req = (cur_st == IDLE)
                         && ibus_req_vld
                    || (cur_st == WFG1)
                    || (cur_st == WFD1)
                         && ibus_req_vld
                    || (cur_st == WFD1WFG2);
assign ibus_inst_data_req = (cur_st == IDLE)
                         && ibus_data_req_vld
                    || (cur_st == WFG1)
                    || (cur_st == WFD1)
                         && ibus_data_req_vld
                    || (cur_st == WFD1WFG2);

assign trans_abort = icache_ifetch_uc_sel && ctrl_ifetch_req_abort;
assign ibus_icache_uc_cmplt = ((cur_st == WFD1)
                            || (cur_st == WFD1WFG2)
                            || (cur_st == WFD1WFD2)
                              )  && bmu_ifu_trans_cmplt;

always @(posedge ifetch_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ibus_deny_reg <= 1'b0;
  else if(bmu_ifu_grant)
    ibus_deny_reg <= ibus_req_deny;
  else if(ibus_req_cmplt)
    ibus_deny_reg <= 1'b0;
end
assign ibus_abort_trig = ((cur_st == WFD1)
                           && !bmu_ifu_trans_cmplt
                      || (cur_st == WFG1)
                      || (cur_st == WFD1WFG2)
                           && !bmu_ifu_acc_err)
                           && trans_abort;















always @(posedge ifetch_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    abort_cur_st[1:0] <= ABORT_IDLE;
  else
    abort_cur_st[1:0] <= abort_nxt_st[1:0];
end

// &CombBeg; @288
always @( bmu_ifu_trans_cmplt
       or bmu_ifu_acc_err
       or abort_cur_st[1:0]
       or ibus_abort_trig
       or cur_st)
begin
case(abort_cur_st[1:0])
ABORT_IDLE:
begin
  abort_nxt_st[1:0] = ABORT_IDLE;
  if(ibus_abort_trig)
    if(cur_st == WFD1WFG2 && !bmu_ifu_trans_cmplt)
      abort_nxt_st[1:0] = ABORT_VLD2;
    else
      abort_nxt_st[1:0] = ABORT_VLD1;
end
ABORT_VLD1:
begin
  if(ibus_abort_trig) begin
    if(cur_st == WFD1WFG2 && !bmu_ifu_trans_cmplt)
      abort_nxt_st[1:0] = ABORT_VLD2;
    else
      abort_nxt_st[1:0] = ABORT_VLD1;
  end
  else if(bmu_ifu_trans_cmplt)
    abort_nxt_st[1:0] = ABORT_IDLE;
  else
    abort_nxt_st[1:0] = ABORT_VLD1;
end
ABORT_VLD2:
begin
  abort_nxt_st[1:0] = ABORT_VLD2;
  if(bmu_ifu_trans_cmplt)
    if(bmu_ifu_acc_err)
      abort_nxt_st[1:0] = ABORT_IDLE;
    else
      abort_nxt_st[1:0] = ABORT_VLD1;
end
default:
begin
  abort_nxt_st[1:0] = ABORT_IDLE;
end
endcase
// &CombEnd; @326
end

assign ibus_trans_abort = (abort_cur_st[1:0] != ABORT_IDLE);


assign ibus_req = ibus_inst_req;




always @(posedge ifetch_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ibus_unalign_reg <= 1'b0;
  else if(bmu_ifu_grant)
    ibus_unalign_reg <= ibus_req_addr[1];
  else if(ibus_req_cmplt)
    ibus_unalign_reg <= 1'b0;
end






assign ifu_bmu_req        = ibus_req;
assign ifu_bmu_data_req   = ibus_inst_data_req;

assign ifu_bmu_seq        = ibus_req_seq;
assign ifu_bmu_burst[2:0] = ibus_req_burst[2:0];
assign ifu_bmu_acc_deny   = ibus_req_deny;
assign ifu_bmu_addr[31:0] = {ibus_req_addr[31:2], 2'b0};
assign ifu_bmu_size[1:0]  = ibus_req_size[1:0];
assign ifu_bmu_prot[3:0]  = ibus_req_prot[3:0];



assign ifetch_inst_vld         = icache_ifetch_inst_vld && !rtu_yy_xx_dbgon
                              && !rtu_ifu_lockup_mask;
assign ifetch_ipack_inst_vld   = ifetch_inst_vld;
assign ifetch_ipack_inst_vld_gate = icache_ifetch_inst_vld_gate;
assign ifetch_ipack_acc_err    = icache_ifetch_error;
assign ifetch_ipack_inst[31:0] = icache_ifetch_inst[31:0];
assign ifetch_ipack_unalign    = icache_ifetch_unalign;
assign ifetch_ctrl_inst_vld    = ifetch_inst_vld;
assign ifetch_ibuf_idle        = icache_ifetch_idle;
assign ifetch_vec_idle         = icache_ifetch_idle && ibusif_idle_st;
assign ifetch_xx_not_busy      = icache_ifetch_not_busy;
assign ifetch_pcgen_grant      = icache_ifetch_grant;
assign ifetch_pcgen_data[31:0] = icache_ifetch_inst[31:0];
assign ifetch_vec_grant        = icache_ifetch_grant;
assign ifetch_vec_cmplt        = icache_ifetch_vec_data_cmplt;
assign ifetch_vec_acc_err      = icache_ifetch_error;
assign ifetch_outstanding      = cur_st[2:0] == WFG1 || cur_st[2:0] == WFD1WFG2 || cur_st[2:0] == WFD1WFD2;


assign ifu_cp0_lpmd_ack        = cp0_ifu_lpmd_req && ibusif_idle_st && icache_ifetch_idle;
assign ifu_cp0_srst_ack        = cp0_ifu_srst_req && ibusif_idle_st && icache_ifetch_idle;
assign ifu_rtu_lockup_ack      = rtu_ifu_lockup_req && ibusif_idle_st && icache_ifetch_idle;





















assign ifetch_top_cur_st[2:0]  = cur_st[2:0];
assign ifetch_top_abt_st[1:0]  = abort_cur_st[1:0];

assign ifetch_pcgen_grant_dp   = ctrl_ifetch_req_vld
                              || (cur_st == WFG1)
                              || (cur_st == WFD1WFG2);


assign ifu_pmp_addr[31:0]   = icache_ifetch_rd_addr[31:0];
assign ifu_pmp_machine_mode = icache_ifetch_mach_mode;
// &Force("input","pcgen_ifetch_ifpc"); @456
// &Force("bus","pcgen_ifetch_ifpc",31,0); @457


assign ifu_sysmap_pa[31:0]     = ifetch_req_addr[31:0];

// &ModuleEnd; @466
endmodule
























// &ModuleBeg; @23
module pa_ifu_inst_bkpt(
  bkpt_cur_pc,
  bkpt_inst_hit,
  bkpt_inst_vld,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask
);

// &Ports; @24
input   [31:0]  bkpt_cur_pc;
input           bkpt_inst_vld;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
output  [8 :0]  bkpt_inst_hit;

// &Regs; @25

// &Wires; @26
wire    [31:0]  bkpt_cur_pc;
wire    [8 :0]  bkpt_inst_hit;
wire            bkpt_inst_mbkpta;
wire            bkpt_inst_mbkptb;
wire            bkpt_inst_mbkptc;
wire            bkpt_inst_mbkptd;
wire            bkpt_inst_mbkpte;
wire            bkpt_inst_mbkptf;
wire            bkpt_inst_mbkptg;
wire            bkpt_inst_mbkpth;
wire            bkpt_inst_mbkpti;
wire            bkpt_inst_vld;
wire    [31:0]  bkpta_after_mask;
wire    [31:0]  bkptb_after_mask;
wire    [31:0]  bkptc_after_mask;
wire    [31:0]  bkptd_after_mask;
wire    [31:0]  bkpte_after_mask;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire    [31:0]  judge_pc_after_maska;
wire    [31:0]  judge_pc_after_maskb;
wire    [31:0]  judge_pc_after_maskc;
wire    [31:0]  judge_pc_after_maskd;
wire    [31:0]  judge_pc_after_maske;



assign judge_pc_after_maska[31:0] = {bkpt_cur_pc[31:8],
                                    bkpt_cur_pc[7:0] & had_yy_xx_bkpta_mask[7:0]};
assign judge_pc_after_maskb[31:0] = {bkpt_cur_pc[31:8],
                                    bkpt_cur_pc[7:0] & had_yy_xx_bkptb_mask[7:0]};
assign judge_pc_after_maskc[31:0] = {bkpt_cur_pc[31:8],
                                    bkpt_cur_pc[7:0] & had_yy_xx_bkptc_mask[7:0]};
assign judge_pc_after_maskd[31:0] = {bkpt_cur_pc[31:8],
                                    bkpt_cur_pc[7:0] & had_yy_xx_bkptd_mask[7:0]};
assign judge_pc_after_maske[31:0] = {bkpt_cur_pc[31:8],
                                    bkpt_cur_pc[7:0] & had_yy_xx_bkpte_mask[7:0]};

assign bkpta_after_mask[31:0]   = {had_yy_xx_bkpta_base[31:8],
                                   had_yy_xx_bkpta_base[7:0] &  had_yy_xx_bkpta_mask[7:0]};
assign bkptb_after_mask[31:0]   = {had_yy_xx_bkptb_base[31:8],
                                   had_yy_xx_bkptb_base[7:0] &  had_yy_xx_bkptb_mask[7:0]};
assign bkptc_after_mask[31:0]   = {had_yy_xx_bkptc_base[31:8],
                                   had_yy_xx_bkptc_base[7:0] &  had_yy_xx_bkptc_mask[7:0]};
assign bkptd_after_mask[31:0]   = {had_yy_xx_bkptd_base[31:8],
                                   had_yy_xx_bkptd_base[7:0] &  had_yy_xx_bkptd_mask[7:0]};
assign bkpte_after_mask[31:0]   = {had_yy_xx_bkpte_base[31:8],
                                   had_yy_xx_bkpte_base[7:0] &  had_yy_xx_bkpte_mask[7:0]};

assign bkpt_inst_mbkpta = bkpt_inst_vld
                            && (had_yy_xx_bkpta_rc
                              ^ (bkpta_after_mask[31:0]
                                ==  judge_pc_after_maska[31:0]));
assign bkpt_inst_mbkptb = bkpt_inst_vld
                            && (had_yy_xx_bkptb_rc
                              ^ (bkptb_after_mask[31:0]
                                ==  judge_pc_after_maskb[31:0]));
assign bkpt_inst_mbkptc = bkpt_inst_vld
                            && ((bkptc_after_mask[31:0] ==  judge_pc_after_maskc[31:0]));
assign bkpt_inst_mbkptd = bkpt_inst_vld
                            && ((bkptd_after_mask[31:0] ==  judge_pc_after_maskd[31:0]));
assign bkpt_inst_mbkpte = bkpt_inst_vld
                            && ((bkpte_after_mask[31:0] ==  judge_pc_after_maske[31:0]));
assign bkpt_inst_mbkptf = 1'b0;
assign bkpt_inst_mbkptg = 1'b0;
assign bkpt_inst_mbkpth = 1'b0;
assign bkpt_inst_mbkpti = 1'b0;

assign bkpt_inst_hit[8:0] = {bkpt_inst_mbkpti, bkpt_inst_mbkpth, bkpt_inst_mbkptg,
                             bkpt_inst_mbkptf, bkpt_inst_mbkpte, bkpt_inst_mbkptd,
                             bkpt_inst_mbkptc, bkpt_inst_mbkptb, bkpt_inst_mbkpta};

// &ModuleEnd; @140
endmodule
























// &ModuleBeg; @23
module pa_ifu_ipack(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  ibuf_ipack_stall,
  id_pred_ipack_chgflw_vld0,
  id_pred_ipack_delay_stall,
  id_pred_ipack_mask,
  id_pred_ipack_ret_stall,
  idu_ifu_tail_vld,
  ifetch_ipack_acc_err,
  ifetch_ipack_inst,
  ifetch_ipack_inst_vld,
  ifetch_ipack_inst_vld_gate,
  ifetch_ipack_unalign,
  ipack_ibuf_acc_err,
  ipack_ibuf_first_16,
  ipack_ibuf_inst,
  ipack_ibuf_inst_all,
  ipack_ibuf_inst_empty,
  ipack_ibuf_inst_full,
  ipack_ibuf_inst_one,
  ipack_ibuf_inst_two,
  ipack_ibuf_inst_vld,
  ipack_ibuf_inst_vld_raw,
  ipack_id_pred_h0_create,
  ipack_id_pred_h0_vld,
  ipack_id_pred_inst0,
  ipack_id_pred_inst0_vld,
  ipack_id_pred_inst1,
  ipack_id_pred_inst1_vld,
  ipack_id_pred_inst_full,
  ipack_id_pred_new_vld,
  ipack_id_pred_unalign,
  ipack_top_entry0_vld,
  ipack_top_entry1_vld,
  ipack_top_entry2_vld,
  iu_ifu_ex1_tar_pc_vld,
  pad_yy_gate_clk_en_b,
  pcgen_ipack_chgflw_vld,
  rtu_ifu_chgflow_vld,
  rtu_ifu_xx_fe_flush,
  rtu_yy_xx_tail_int_vld,
  vec_ipack_inst_mask
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           ibuf_ipack_stall;
input           id_pred_ipack_chgflw_vld0;
input           id_pred_ipack_delay_stall;
input           id_pred_ipack_mask;
input           id_pred_ipack_ret_stall;
input           idu_ifu_tail_vld;
input           ifetch_ipack_acc_err;
input   [31:0]  ifetch_ipack_inst;
input           ifetch_ipack_inst_vld;
input           ifetch_ipack_inst_vld_gate;
input           ifetch_ipack_unalign;
input           iu_ifu_ex1_tar_pc_vld;
input           pad_yy_gate_clk_en_b;
input           pcgen_ipack_chgflw_vld;
input           rtu_ifu_chgflow_vld;
input           rtu_ifu_xx_fe_flush;
input           rtu_yy_xx_tail_int_vld;
input           vec_ipack_inst_mask;
output  [2 :0]  ipack_ibuf_acc_err;
output          ipack_ibuf_first_16;
output  [47:0]  ipack_ibuf_inst;
output          ipack_ibuf_inst_all;
output          ipack_ibuf_inst_empty;
output          ipack_ibuf_inst_full;
output          ipack_ibuf_inst_one;
output          ipack_ibuf_inst_two;
output          ipack_ibuf_inst_vld;
output          ipack_ibuf_inst_vld_raw;
output          ipack_id_pred_h0_create;
output          ipack_id_pred_h0_vld;
output  [31:0]  ipack_id_pred_inst0;
output          ipack_id_pred_inst0_vld;
output  [15:0]  ipack_id_pred_inst1;
output          ipack_id_pred_inst1_vld;
output          ipack_id_pred_inst_full;
output          ipack_id_pred_new_vld;
output          ipack_id_pred_unalign;
output          ipack_top_entry0_vld;
output          ipack_top_entry1_vld;
output          ipack_top_entry2_vld;

// &Regs; @25

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            entry0_acc_err;
wire            entry0_create_en;
wire            entry0_create_icg_en;
wire    [15:0]  entry0_inst;
wire            entry0_retire_en;
wire            entry0_upd_acc_err;
wire    [15:0]  entry0_upd_inst;
wire            entry0_vld;
wire            entry1_acc_err;
wire            entry1_create_en;
wire            entry1_create_icg_en;
wire    [15:0]  entry1_inst;
wire            entry1_retire_en;
wire            entry1_upd_acc_err;
wire    [15:0]  entry1_upd_inst;
wire            entry1_vld;
wire            entry2_acc_err;
wire            entry2_create_en;
wire            entry2_create_icg_en;
wire    [15:0]  entry2_inst;
wire            entry2_retire_en;
wire            entry2_upd_acc_err;
wire    [15:0]  entry2_upd_inst;
wire            entry2_vld;
wire            forever_cpuclk;
wire            h0_vld;
wire            h1_16bit_vld;
wire            h1_32bit_vld;
wire            h2_16bit_vld;
wire            h2_32bit_vld;
wire            ibuf_ipack_stall;
wire            id_pred_ipack_chgflw_vld0;
wire            id_pred_ipack_delay_stall;
wire            id_pred_ipack_mask;
wire            id_pred_ipack_ret_stall;
wire            idu_ifu_tail_vld;
wire            ifetch_inst_vld;
wire            ifetch_ipack_acc_err;
wire    [31:0]  ifetch_ipack_inst;
wire            ifetch_ipack_inst_vld;
wire            ifetch_ipack_inst_vld_gate;
wire            ifetch_ipack_unalign;
wire            ipack_acc_err0;
wire            ipack_acc_err1;
wire            ipack_acc_err2;
wire            ipack_align_create;
wire            ipack_all_vld;
wire            ipack_buf_flush;
wire            ipack_buf_stall;
wire            ipack_cpuclk;
wire            ipack_empty;
wire    [31:0]  ipack_first_inst;
wire            ipack_first_vld;
wire            ipack_full;
wire    [2 :0]  ipack_ibuf_acc_err;
wire            ipack_ibuf_first_16;
wire    [47:0]  ipack_ibuf_inst;
wire            ipack_ibuf_inst_all;
wire            ipack_ibuf_inst_empty;
wire            ipack_ibuf_inst_full;
wire            ipack_ibuf_inst_one;
wire            ipack_ibuf_inst_two;
wire            ipack_ibuf_inst_vld;
wire            ipack_ibuf_inst_vld_raw;
wire            ipack_icg_en;
wire            ipack_id_pred_h0_create;
wire            ipack_id_pred_h0_vld;
wire    [31:0]  ipack_id_pred_inst0;
wire            ipack_id_pred_inst0_vld;
wire    [15:0]  ipack_id_pred_inst1;
wire            ipack_id_pred_inst1_vld;
wire            ipack_id_pred_inst_full;
wire            ipack_id_pred_new_vld;
wire            ipack_id_pred_unalign;
wire            ipack_one_16bit_vld;
wire    [47:0]  ipack_retire_inst;
wire            ipack_retire_one;
wire            ipack_retire_vld;
wire    [15:0]  ipack_secnd_inst;
wire            ipack_secnd_vld;
wire            ipack_top_entry0_vld;
wire            ipack_top_entry1_vld;
wire            ipack_top_entry2_vld;
wire            iu_ifu_ex1_tar_pc_vld;
wire            pad_yy_gate_clk_en_b;
wire            pcgen_ipack_chgflw_vld;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_yy_xx_tail_int_vld;
wire            vec_ipack_inst_mask;












assign ipack_icg_en = ifetch_ipack_inst_vld_gate
                   || !ipack_empty;
// &Instance("gated_clk_cell", "x_pa_ifu_ipack_icg_cell"); @40
gated_clk_cell  x_pa_ifu_ipack_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ipack_cpuclk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ipack_icg_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @41
//          .clk_out     (ipack_cpuclk), @42
//          .external_en (1'b0), @43
//          .global_en   (cp0_yy_clk_en), @44
//          .module_en   (1'b0), @45
//          .local_en    (ipack_icg_en) @46
// ); @47










assign ipack_buf_flush      = rtu_ifu_xx_fe_flush || iu_ifu_ex1_tar_pc_vld
                           || rtu_ifu_chgflow_vld || idu_ifu_tail_vld || rtu_yy_xx_tail_int_vld;
assign ifetch_inst_vld      = ifetch_ipack_inst_vld && !pcgen_ipack_chgflw_vld & !vec_ipack_inst_mask && !id_pred_ipack_mask;

assign ipack_align_create   = ifetch_inst_vld && !ifetch_ipack_unalign;

assign ipack_buf_stall      = id_pred_ipack_ret_stall || ibuf_ipack_stall
                           ; //|| id_pred_ipack_delay_stall;

assign entry0_create_en = (!entry1_vld && h2_32bit_vld
                        || !h0_vld && h1_16bit_vld && h2_32bit_vld
                        || h0_vld && entry1_vld && h2_32bit_vld)
                          && !id_pred_ipack_chgflw_vld0
                          && !ipack_buf_stall;
assign entry1_create_en = ipack_align_create
                       && !(entry1_vld && ipack_buf_stall)
                       && !id_pred_ipack_delay_stall;
assign entry2_create_en = ifetch_inst_vld
                       && !(entry2_vld && ipack_buf_stall)
                       && !id_pred_ipack_delay_stall;
assign entry0_create_icg_en = !entry1_vld && h2_32bit_vld
                        || !h0_vld && h1_16bit_vld && h2_32bit_vld
                        || h0_vld && entry1_vld && h2_32bit_vld;
assign entry1_create_icg_en = ipack_align_create;
assign entry2_create_icg_en = ifetch_inst_vld;


assign entry0_upd_inst[15:0] = entry2_inst[15:0];
assign entry1_upd_inst[15:0] = ifetch_ipack_inst[15:0];
assign entry2_upd_inst[15:0] = ifetch_ipack_inst[31:16];


assign entry0_upd_acc_err = entry2_acc_err;
assign entry1_upd_acc_err = ifetch_ipack_acc_err;
assign entry2_upd_acc_err = ifetch_ipack_acc_err;


assign entry0_retire_en = !ipack_buf_stall && entry1_vld;
assign entry1_retire_en = !ipack_buf_stall;
assign entry2_retire_en = !ipack_buf_stall && !id_pred_ipack_delay_stall;


// &ConnRule(s/ipack_entry/entry0/); @100
// &Instance("pa_ifu_ipack_entry","x_pa_ifu_ipack_entry0"); @101
pa_ifu_ipack_entry  x_pa_ifu_ipack_entry0 (
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .ipack_buf_flush           (ipack_buf_flush          ),
  .ipack_cpuclk              (ipack_cpuclk             ),
  .ipack_entry_acc_err       (entry0_acc_err           ),
  .ipack_entry_create_en     (entry0_create_en         ),
  .ipack_entry_create_icg_en (entry0_create_icg_en     ),
  .ipack_entry_inst          (entry0_inst              ),
  .ipack_entry_retire_en     (entry0_retire_en         ),
  .ipack_entry_upd_acc_err   (entry0_upd_acc_err       ),
  .ipack_entry_upd_inst      (entry0_upd_inst          ),
  .ipack_entry_vld           (entry0_vld               ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);


// &ConnRule(s/ipack_entry/entry1/); @103
// &Instance("pa_ifu_ipack_entry","x_pa_ifu_ipack_entry1"); @104
pa_ifu_ipack_entry  x_pa_ifu_ipack_entry1 (
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .ipack_buf_flush           (ipack_buf_flush          ),
  .ipack_cpuclk              (ipack_cpuclk             ),
  .ipack_entry_acc_err       (entry1_acc_err           ),
  .ipack_entry_create_en     (entry1_create_en         ),
  .ipack_entry_create_icg_en (entry1_create_icg_en     ),
  .ipack_entry_inst          (entry1_inst              ),
  .ipack_entry_retire_en     (entry1_retire_en         ),
  .ipack_entry_upd_acc_err   (entry1_upd_acc_err       ),
  .ipack_entry_upd_inst      (entry1_upd_inst          ),
  .ipack_entry_vld           (entry1_vld               ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);


// &ConnRule(s/ipack_entry/entry2/); @106
// &Instance("pa_ifu_ipack_entry","x_pa_ifu_ipack_entry2"); @107
pa_ifu_ipack_entry  x_pa_ifu_ipack_entry2 (
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .ipack_buf_flush           (ipack_buf_flush          ),
  .ipack_cpuclk              (ipack_cpuclk             ),
  .ipack_entry_acc_err       (entry2_acc_err           ),
  .ipack_entry_create_en     (entry2_create_en         ),
  .ipack_entry_create_icg_en (entry2_create_icg_en     ),
  .ipack_entry_inst          (entry2_inst              ),
  .ipack_entry_retire_en     (entry2_retire_en         ),
  .ipack_entry_upd_acc_err   (entry2_upd_acc_err       ),
  .ipack_entry_upd_inst      (entry2_upd_inst          ),
  .ipack_entry_vld           (entry2_vld               ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);










assign h0_vld       = entry0_vld && entry0_inst[1:0] == 2'b11;

assign h1_16bit_vld = entry1_vld && entry1_inst[1:0] != 2'b11;
assign h1_32bit_vld = entry1_vld && entry1_inst[1:0] == 2'b11;

assign h2_16bit_vld = entry2_vld && entry2_inst[1:0] != 2'b11;
assign h2_32bit_vld = entry2_vld && entry2_inst[1:0] == 2'b11
                   && !id_pred_ipack_chgflw_vld0;



assign ipack_empty = !entry0_vld && !entry1_vld && !entry2_vld;
assign ipack_full = entry0_vld && entry1_vld && entry2_vld;// && entry2_inst[1:0] != 2'b11;


assign ipack_first_vld        = entry1_vld || !h0_vld && h2_16bit_vld;
assign ipack_first_inst[31:0] = entry0_vld ? {entry1_inst[15:0], entry0_inst[15:0]}
                              : entry1_vld ? {entry2_inst[15:0], entry1_inst[15:0]}
                                           : {entry2_inst[15:0], entry2_inst[15:0]};

assign ipack_secnd_vld        = (h0_vld || h1_16bit_vld) && h2_16bit_vld;

assign ipack_secnd_inst[15:0] = entry2_inst[15:0];



assign ipack_one_16bit_vld = !h0_vld && h1_16bit_vld && !(h2_16bit_vld
                                 && !id_pred_ipack_chgflw_vld0
                                 && !id_pred_ipack_delay_stall)
                          || !entry1_vld && h2_16bit_vld;









assign ipack_all_vld     = h0_vld && entry1_vld && h2_16bit_vld
                         && !id_pred_ipack_chgflw_vld0
                         && !id_pred_ipack_delay_stall;




assign ipack_retire_vld    = entry1_vld || h2_16bit_vld;
assign ipack_retire_one    = ipack_one_16bit_vld;



assign ipack_retire_inst[47:0] = {entry2_inst[15:0], ipack_first_inst[31:0]};


assign ipack_acc_err0 = !h0_vld && h1_16bit_vld && entry1_acc_err
                     || !h0_vld && h1_32bit_vld && entry1_acc_err
                     || !entry1_vld && h2_16bit_vld && entry2_acc_err
                     || h0_vld && entry1_vld && entry0_acc_err;
assign ipack_acc_err1 = !h0_vld && h1_32bit_vld && entry2_vld
                         && entry2_acc_err
                     || !h0_vld && h1_16bit_vld && h2_16bit_vld
                         && entry2_acc_err
                     || h0_vld && entry1_vld && entry1_acc_err;
assign ipack_acc_err2 = h0_vld && entry1_vld && h2_16bit_vld
                     && entry2_acc_err;






assign ipack_id_pred_inst0_vld   = ipack_first_vld;// && !ibuf_ipack_stall;
assign ipack_id_pred_inst0[31:0] = ipack_first_inst[31:0];

assign ipack_id_pred_inst1_vld   = ipack_secnd_vld;// && !ibuf_ipack_stall;
assign ipack_id_pred_inst1[15:0] = ipack_secnd_inst[15:0];

assign ipack_id_pred_h0_create   = entry0_create_en;
assign ipack_id_pred_h0_vld      = h0_vld;
assign ipack_id_pred_unalign     = !entry1_vld && h2_16bit_vld;
assign ipack_id_pred_inst_full   = ipack_full;

assign ipack_id_pred_new_vld     = ifetch_ipack_inst_vld;


assign ipack_ibuf_inst_vld   = ipack_retire_vld && !ipack_buf_stall;
assign ipack_ibuf_inst_vld_raw = ipack_retire_vld;
assign ipack_ibuf_inst_one   = ipack_retire_one;
assign ipack_ibuf_inst_two   = ipack_secnd_vld
                              && !id_pred_ipack_chgflw_vld0
                              && !id_pred_ipack_delay_stall;
assign ipack_ibuf_inst_all   = ipack_all_vld;
assign ipack_ibuf_first_16   = !h0_vld && h1_16bit_vld;
assign ipack_ibuf_inst[47:0] = ipack_retire_inst[47:0];
assign ipack_ibuf_acc_err[2:0] = {ipack_acc_err2,ipack_acc_err1,ipack_acc_err0};
assign ipack_ibuf_inst_empty = ipack_empty;
assign ipack_ibuf_inst_full  = ipack_full;



assign ipack_top_entry0_vld  = entry0_vld;
assign ipack_top_entry1_vld  = entry1_vld;
assign ipack_top_entry2_vld  = entry2_vld;

// &ModuleEnd; @221
endmodule
























// &ModuleBeg; @23
module pa_ifu_ipack_entry(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  ipack_buf_flush,
  ipack_cpuclk,
  ipack_entry_acc_err,
  ipack_entry_create_en,
  ipack_entry_create_icg_en,
  ipack_entry_inst,
  ipack_entry_retire_en,
  ipack_entry_upd_acc_err,
  ipack_entry_upd_inst,
  ipack_entry_vld,
  pad_yy_gate_clk_en_b
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           ipack_buf_flush;
input           ipack_cpuclk;
input           ipack_entry_create_en;
input           ipack_entry_create_icg_en;
input           ipack_entry_retire_en;
input           ipack_entry_upd_acc_err;
input   [15:0]  ipack_entry_upd_inst;
input           pad_yy_gate_clk_en_b;
output          ipack_entry_acc_err;
output  [15:0]  ipack_entry_inst;
output          ipack_entry_vld;

// &Regs; @25
reg             entry_acc_err;
reg     [15:0]  entry_inst;
reg             entry_vld;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            entry_cpuclk;
wire            entry_icg_en;
wire            forever_cpuclk;
wire            ipack_buf_flush;
wire            ipack_cpuclk;
wire            ipack_entry_acc_err;
wire            ipack_entry_create_en;
wire            ipack_entry_create_icg_en;
wire    [15:0]  ipack_entry_inst;
wire            ipack_entry_retire_en;
wire            ipack_entry_upd_acc_err;
wire    [15:0]  ipack_entry_upd_inst;
wire            ipack_entry_vld;
wire            pad_yy_gate_clk_en_b;











assign entry_icg_en = ipack_entry_create_icg_en;
// &Instance("gated_clk_cell", "x_ipack_data_icg_cell"); @38
gated_clk_cell  x_ipack_data_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (entry_cpuclk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (entry_icg_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @39
//          .external_en (1'b0), @40
//          .global_en   (cp0_yy_clk_en), @41
//          .module_en   (1'b0), @42
//          .local_en    (entry_icg_en), @43
//          .clk_out     (entry_cpuclk)); @44







always @(posedge ipack_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_vld <= 1'b0;
  else if(ipack_buf_flush)
    entry_vld <= 1'b0;
  else if(ipack_entry_create_en)
    entry_vld <= 1'b1;
  else if(ipack_entry_retire_en)
    entry_vld <= 1'b0;
  else
    entry_vld <= entry_vld;
end


always @(posedge entry_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_inst[15:0] <= 16'b0;
  else if(ipack_entry_create_en)
    entry_inst[15:0] <= ipack_entry_upd_inst[15:0];
  else
    entry_inst[15:0] <= entry_inst[15:0];
end




always @(posedge entry_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_acc_err <= 1'b0;
  else if(ipack_entry_create_en)
    entry_acc_err <= ipack_entry_upd_acc_err;
  else
    entry_acc_err <= entry_acc_err;
end





assign ipack_entry_vld        = entry_vld;
assign ipack_entry_inst[15:0] = entry_inst[15:0];
assign ipack_entry_acc_err    = entry_acc_err;

// &ModuleEnd; @98
endmodule
























// &ModuleBeg; @23
module pa_ifu_pcgen(
  btb_pcgen_tar_pc,
  btb_xx_chgflw_vld,
  cp0_yy_clk_en,
  cpurst_b,
  ctrl_pcgen_inst_vld,
  ctrl_pcgen_pipedown,
  forever_cpuclk,
  had_ifu_pc,
  had_yy_xx_exit_dbg,
  id_pred_pcgen_chgflw_pc,
  id_pred_pcgen_chgflw_vld,
  id_pred_pcgen_inst_vld,
  ifetch_pcgen_data,
  ifetch_pcgen_grant,
  ifetch_pcgen_grant_dp,
  ifetch_xx_not_busy,
  ifu_idu_chgflw_flush,
  ifu_iu_chgflw_pc,
  ifu_iu_chgflw_vld,
  iu_ifu_ex1_tar_pc,
  iu_ifu_ex1_tar_pc_vld,
  pad_yy_gate_clk_en_b,
  pcgen_ctrl_chgflw_vld,
  pcgen_ibuf_chgflw_vld,
  pcgen_id_pred_btb_tar_pc,
  pcgen_id_pred_btb_tar_vld,
  pcgen_id_pred_flush_vld,
  pcgen_id_pred_idpc,
  pcgen_id_pred_ifpc,
  pcgen_ifetch_addr,
  pcgen_ifetch_chgflw_vld,
  pcgen_ifetch_ifpc,
  pcgen_ifetch_seq_addr,
  pcgen_ipack_chgflw_vld,
  pcgen_top_btb_tar_vld,
  pcgen_top_buf_chgflw,
  rtu_ifu_chgflow_pc,
  rtu_ifu_chgflow_vld,
  rtu_ifu_xx_fe_flush,
  sysio_ifu_rst_addr,
  vec_pcgen_chgflw_vld,
  vec_pcgen_inst_fetch,
  vec_pcgen_iu_chgflw,
  vec_pcgen_pc_flop,
  vec_pcgen_rst_vld,
  vec_pcgen_tar_pc
);

// &Ports; @24
input   [31:0]  btb_pcgen_tar_pc;
input           btb_xx_chgflw_vld;
input           cp0_yy_clk_en;
input           cpurst_b;
input           ctrl_pcgen_inst_vld;
input           ctrl_pcgen_pipedown;
input           forever_cpuclk;
input   [31:0]  had_ifu_pc;
input           had_yy_xx_exit_dbg;
input   [31:0]  id_pred_pcgen_chgflw_pc;
input           id_pred_pcgen_chgflw_vld;
input           id_pred_pcgen_inst_vld;
input   [31:0]  ifetch_pcgen_data;
input           ifetch_pcgen_grant;
input           ifetch_pcgen_grant_dp;
input           ifetch_xx_not_busy;
input   [31:0]  iu_ifu_ex1_tar_pc;
input           iu_ifu_ex1_tar_pc_vld;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_ifu_chgflow_pc;
input           rtu_ifu_chgflow_vld;
input           rtu_ifu_xx_fe_flush;
input   [31:0]  sysio_ifu_rst_addr;
input           vec_pcgen_chgflw_vld;
input           vec_pcgen_inst_fetch;
input           vec_pcgen_iu_chgflw;
input           vec_pcgen_pc_flop;
input           vec_pcgen_rst_vld;
input   [31:0]  vec_pcgen_tar_pc;
output          ifu_idu_chgflw_flush;
output  [31:0]  ifu_iu_chgflw_pc;
output          ifu_iu_chgflw_vld;
output          pcgen_ctrl_chgflw_vld;
output          pcgen_ibuf_chgflw_vld;
output  [31:0]  pcgen_id_pred_btb_tar_pc;
output          pcgen_id_pred_btb_tar_vld;
output          pcgen_id_pred_flush_vld;
output  [31:0]  pcgen_id_pred_idpc;
output  [31:0]  pcgen_id_pred_ifpc;
output  [31:0]  pcgen_ifetch_addr;
output          pcgen_ifetch_chgflw_vld;
output  [31:0]  pcgen_ifetch_ifpc;
output  [31:0]  pcgen_ifetch_seq_addr;
output          pcgen_ipack_chgflw_vld;
output          pcgen_top_btb_tar_vld;
output          pcgen_top_buf_chgflw;

// &Regs; @25
reg     [31:0]  btb_tar_pc;
reg             btb_tar_vld;
reg     [31:0]  pcgen_addr;
reg             pcgen_buf_chgflw;
reg     [31:0]  pcgen_delay_pc;
reg     [31:0]  pcgen_idpc;
reg     [31:0]  pcgen_ifpc;
reg     [31:0]  pcgen_pc;

// &Wires; @26
wire            btb_chgflw_vld;
wire    [31:0]  btb_pcgen_tar_pc;
wire            btb_tar_clk;
wire            btb_tar_icg_en;
wire            btb_xx_chgflw_vld;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            ctrl_pcgen_inst_vld;
wire            ctrl_pcgen_pipedown;
wire            forever_cpuclk;
wire    [31:0]  had_ifu_pc;
wire            had_yy_xx_exit_dbg;
wire    [31:0]  id_pred_pcgen_chgflw_pc;
wire            id_pred_pcgen_chgflw_vld;
wire            id_pred_pcgen_inst_vld;
wire    [31:0]  ifetch_pcgen_data;
wire            ifetch_pcgen_grant;
wire            ifetch_pcgen_grant_dp;
wire            ifetch_xx_not_busy;
wire            ifpc_updt_en;
wire            ifu_idu_chgflw_flush;
wire    [31:0]  ifu_iu_chgflw_pc;
wire            ifu_iu_chgflw_vld;
wire    [31:0]  iu_ifu_ex1_tar_pc;
wire            iu_ifu_ex1_tar_pc_vld;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  pcgen_addr_inc;
wire            pcgen_chgflw_vld;
wire            pcgen_cpuclk;
wire            pcgen_ctrl_chgflw_vld;
wire    [31:0]  pcgen_fetch_pc;
wire            pcgen_flush_vld;
wire            pcgen_ibuf_chgflw_vld;
wire            pcgen_icg_en;
wire    [31:0]  pcgen_id_pred_btb_tar_pc;
wire            pcgen_id_pred_btb_tar_vld;
wire            pcgen_id_pred_flush_vld;
wire    [31:0]  pcgen_id_pred_idpc;
wire    [31:0]  pcgen_id_pred_ifpc;
wire            pcgen_idpc_clk;
wire    [31:0]  pcgen_ifetch_addr;
wire            pcgen_ifetch_chgflw_vld;
wire    [31:0]  pcgen_ifetch_ifpc;
wire    [31:0]  pcgen_ifetch_seq_addr;
wire            pcgen_ipack_chgflw_vld;
wire            pcgen_top_btb_tar_vld;
wire            pcgen_top_buf_chgflw;
wire    [31:0]  rtu_ifu_chgflow_pc;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_xx_fe_flush;
wire    [31:0]  sysio_ifu_rst_addr;
wire            vec_pcgen_chgflw_vld;
wire            vec_pcgen_inst_fetch;
wire            vec_pcgen_iu_chgflw;
wire            vec_pcgen_pc_flop;
wire            vec_pcgen_rst_vld;
wire    [31:0]  vec_pcgen_tar_pc;













assign pcgen_icg_en = pcgen_chgflw_vld
                   || ifetch_pcgen_grant_dp
                   || pcgen_buf_chgflw
                   || vec_pcgen_rst_vld
                   || vec_pcgen_pc_flop;
// &Instance("gated_clk_cell", "x_ifu_pcgen_icg_cell"); @44
gated_clk_cell  x_ifu_pcgen_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (pcgen_cpuclk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (pcgen_icg_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @45
//          .external_en (1'b0), @46
//          .global_en   (cp0_yy_clk_en), @47
//          .module_en   (1'b0), @48
//          .local_en    (pcgen_icg_en), @49
//          .clk_out     (pcgen_cpuclk) @50
//        ); @51

assign btb_tar_icg_en = btb_tar_vld || btb_xx_chgflw_vld;
// &Instance("gated_clk_cell", "x_ifu_pcgen_btb_tar_icg_cell"); @54
gated_clk_cell  x_ifu_pcgen_btb_tar_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (btb_tar_clk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (btb_tar_icg_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @55
//          .external_en (1'b0), @56
//          .global_en   (cp0_yy_clk_en), @57
//          .module_en   (1'b0), @58
//          .local_en    (btb_tar_icg_en), @59
//          .clk_out     (btb_tar_clk) @60
//        ); @61

// &Instance("gated_clk_cell", "x_ifu_pcgen_idpc_icg_cell"); @63
gated_clk_cell  x_ifu_pcgen_idpc_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (pcgen_idpc_clk      ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ctrl_pcgen_inst_vld ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @64
//          .external_en (1'b0), @65
//          .global_en   (cp0_yy_clk_en), @66
//          .module_en   (1'b0), @67
//          .local_en    (ctrl_pcgen_inst_vld), @68
//          .clk_out     (pcgen_idpc_clk) @69
//        ); @70






// &CombBeg; @77
always @( vec_pcgen_tar_pc[31:0]
       or iu_ifu_ex1_tar_pc[31:0]
       or rtu_ifu_chgflow_pc[31:0]
       or vec_pcgen_chgflw_vld
       or had_yy_xx_exit_dbg
       or rtu_ifu_chgflow_vld
       or had_ifu_pc[31:0])
begin
  if(had_yy_xx_exit_dbg)
    pcgen_delay_pc[31:0] = had_ifu_pc[31:0];
  else if(vec_pcgen_chgflw_vld)
    pcgen_delay_pc[31:0] = vec_pcgen_tar_pc[31:0];
  else if(rtu_ifu_chgflow_vld)
    pcgen_delay_pc[31:0] = rtu_ifu_chgflow_pc[31:0];
  else// if(iu_ifu_ex1_tar_pc_vld)
    pcgen_delay_pc[31:0] = iu_ifu_ex1_tar_pc[31:0];
// &CombEnd; @86
end

// &CombBeg; @88
always @( id_pred_pcgen_chgflw_pc[31:0]
       or id_pred_pcgen_chgflw_vld
       or pcgen_addr[31:0]
       or btb_pcgen_tar_pc[31:0]
       or pcgen_ifpc[31:0]
       or pcgen_buf_chgflw
       or btb_xx_chgflw_vld)
begin
  if(pcgen_buf_chgflw)
    pcgen_pc[31:0] = pcgen_ifpc[31:0];
  else if(id_pred_pcgen_chgflw_vld)
    pcgen_pc[31:0] = id_pred_pcgen_chgflw_pc[31:0];
  else if(btb_xx_chgflw_vld)
    pcgen_pc[31:0] = btb_pcgen_tar_pc[31:0];
  else
    pcgen_pc[31:0] = pcgen_addr[31:0];
// &CombEnd; @97
end

assign pcgen_flush_vld  = had_yy_xx_exit_dbg
                       || rtu_ifu_chgflow_vld
                       || vec_pcgen_chgflw_vld
                       || iu_ifu_ex1_tar_pc_vld;
assign pcgen_chgflw_vld = pcgen_flush_vld
                       || id_pred_pcgen_chgflw_vld
                       || btb_xx_chgflw_vld;

always @ (posedge pcgen_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pcgen_addr[31:0] <= 32'b0;
  else if(vec_pcgen_rst_vld)
    pcgen_addr[31:0] <= sysio_ifu_rst_addr[31:0];
  else if(pcgen_chgflw_vld && !ifetch_pcgen_grant && ifetch_xx_not_busy)
    pcgen_addr[31:0] <= pcgen_pc[31:0];
  else if(vec_pcgen_pc_flop)
    pcgen_addr[31:0] <= ifetch_pcgen_data[31:0];
  else if(pcgen_buf_chgflw && !ifetch_pcgen_grant && ifetch_xx_not_busy)
    pcgen_addr[31:0] <= pcgen_ifpc[31:0];
  else if(ifetch_pcgen_grant)
    pcgen_addr[31:0] <= pcgen_addr_inc[31:0];
  else
    pcgen_addr[31:0] <= pcgen_addr[31:0];
end

assign pcgen_addr_inc[31:0] = {pcgen_pc[31:2], 2'b0} + 32'h4;

assign pcgen_fetch_pc[31:0] = ifetch_xx_not_busy ? pcgen_pc[31:0]
                                                 : pcgen_addr[31:0];





always @ (posedge pcgen_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pcgen_buf_chgflw <= 1'b0;
  else if(ifpc_updt_en)// && !ifetch_xx_not_busy)
    pcgen_buf_chgflw <= 1'b1;
  else if(ifetch_xx_not_busy && pcgen_buf_chgflw)
    pcgen_buf_chgflw <= 1'b0;
end

assign ifpc_updt_en = pcgen_flush_vld
                   || id_pred_pcgen_chgflw_vld && !ifetch_xx_not_busy;
always @ (posedge pcgen_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pcgen_ifpc[31:0] <= 32'b0;
  else if(pcgen_flush_vld)
    pcgen_ifpc[31:0] <= pcgen_delay_pc[31:0];
  else if(ifpc_updt_en)// && !ifetch_xx_not_busy)
    pcgen_ifpc[31:0] <= pcgen_pc[31:0];
  else if(ifetch_pcgen_grant)
    pcgen_ifpc[31:0] <= pcgen_pc[31:0];
  else
    pcgen_ifpc[31:0] <= pcgen_ifpc[31:0];
end

assign pcgen_ifetch_ifpc[31:0] = pcgen_ifpc[31:0];





always @ (posedge pcgen_idpc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pcgen_idpc[31:0] <= 32'b0;
  else if(ctrl_pcgen_pipedown)
    pcgen_idpc[31:0] <= pcgen_ifpc[31:0];
  else
    pcgen_idpc[31:0] <= pcgen_idpc[31:0];
end




assign btb_chgflw_vld = !pcgen_flush_vld && !rtu_ifu_xx_fe_flush
                     && !id_pred_pcgen_chgflw_vld && !pcgen_buf_chgflw
                     && btb_xx_chgflw_vld;
always @ (posedge btb_tar_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    btb_tar_vld      <= 1'b0;
    btb_tar_pc[31:0] <= 32'b0;
  end
  else if(pcgen_flush_vld || id_pred_pcgen_chgflw_vld || rtu_ifu_xx_fe_flush)
  begin
    btb_tar_vld      <= 1'b0;
    btb_tar_pc[31:0] <= btb_tar_pc[31:0];
  end
  else if(btb_chgflw_vld)
  begin
    btb_tar_vld      <= 1'b1;
    btb_tar_pc[31:0] <= btb_pcgen_tar_pc[31:0];
  end
  else if(btb_tar_vld && id_pred_pcgen_inst_vld)
  begin
    btb_tar_vld      <= 1'b0;
    btb_tar_pc[31:0] <= btb_tar_pc[31:0];
  end
end






assign pcgen_ifetch_addr[31:0] = pcgen_fetch_pc[31:0];
assign pcgen_ifetch_seq_addr[31:0] = pcgen_addr[31:0];
assign pcgen_ifetch_chgflw_vld = pcgen_buf_chgflw
                              || id_pred_pcgen_chgflw_vld
                              || btb_xx_chgflw_vld;


assign pcgen_ctrl_chgflw_vld = pcgen_flush_vld || pcgen_buf_chgflw || id_pred_pcgen_chgflw_vld;



assign pcgen_ipack_chgflw_vld = pcgen_flush_vld || pcgen_buf_chgflw || id_pred_pcgen_chgflw_vld;


assign pcgen_ibuf_chgflw_vld  = pcgen_flush_vld;


assign pcgen_top_buf_chgflw   = pcgen_buf_chgflw;
assign pcgen_top_btb_tar_vld  = btb_tar_vld;


assign pcgen_id_pred_ifpc[31:0]       = pcgen_ifpc[31:0];
assign pcgen_id_pred_idpc[31:0]       = pcgen_idpc[31:0];
assign pcgen_id_pred_btb_tar_vld      = btb_tar_vld;
assign pcgen_id_pred_btb_tar_pc[31:0] = btb_tar_pc[31:0];
assign pcgen_id_pred_flush_vld        = pcgen_flush_vld;


assign ifu_idu_chgflw_flush     = iu_ifu_ex1_tar_pc_vld;


assign ifu_iu_chgflw_vld        = had_yy_xx_exit_dbg
                               || rtu_ifu_chgflow_vld
                               || vec_pcgen_iu_chgflw;
assign ifu_iu_chgflw_pc[31:0]   = vec_pcgen_inst_fetch ? pcgen_addr[31:0]
                                                       : pcgen_delay_pc[31:0];

// &ModuleEnd; @255
endmodule
























// &ModuleBeg; @23
module pa_ifu_pre_decd(
  id_pred_br_vld0,
  id_pred_br_vld1,
  id_pred_br_vld1_raw,
  id_pred_imm0,
  id_pred_imm1,
  id_pred_inst0_32,
  id_pred_jmp_vld0,
  id_pred_jmp_vld1,
  id_pred_link_vld0,
  id_pred_link_vld1,
  id_pred_ret_vld0,
  id_pred_ret_vld1,
  ipack_id_pred_inst0,
  ipack_id_pred_inst0_vld,
  ipack_id_pred_inst1,
  ipack_id_pred_inst1_vld
);

// &Ports; @24
input   [31:0]  ipack_id_pred_inst0;
input           ipack_id_pred_inst0_vld;
input   [15:0]  ipack_id_pred_inst1;
input           ipack_id_pred_inst1_vld;
output          id_pred_br_vld0;
output          id_pred_br_vld1;
output          id_pred_br_vld1_raw;
output  [31:0]  id_pred_imm0;
output  [31:0]  id_pred_imm1;
output          id_pred_inst0_32;
output          id_pred_jmp_vld0;
output          id_pred_jmp_vld1;
output          id_pred_link_vld0;
output          id_pred_link_vld1;
output          id_pred_ret_vld0;
output          id_pred_ret_vld1;

// &Regs; @25

// &Wires; @26
wire    [31:0]  btype_imm;
wire            btype_vld;
wire            btype_vld1;
wire    [31:0]  cbtype_imm0;
wire    [31:0]  cbtype_imm1;
wire            cbtype_vld0;
wire            cbtype_vld1;
wire            cjltype_vld0;
wire            cjltype_vld1;
wire            cjrtype_vld0;
wire            cjrtype_vld1;
wire    [31:0]  cjtype_imm0;
wire    [31:0]  cjtype_imm1;
wire            cjtype_vld0;
wire            cjtype_vld1;
wire            id_pred_br_vld0;
wire            id_pred_br_vld1;
wire            id_pred_br_vld1_raw;
wire    [31:0]  id_pred_imm0;
wire    [31:0]  id_pred_imm1;
wire            id_pred_inst0_32;
wire            id_pred_jmp_vld0;
wire            id_pred_jmp_vld1;
wire            id_pred_link_vld0;
wire            id_pred_link_vld1;
wire            id_pred_ret_vld0;
wire            id_pred_ret_vld1;
wire    [31:0]  inst0;
wire    [31:0]  inst0_imm;
wire    [15:0]  inst1;
wire    [31:0]  inst1_imm;
wire    [31:0]  ipack_id_pred_inst0;
wire            ipack_id_pred_inst0_vld;
wire    [15:0]  ipack_id_pred_inst1;
wire            ipack_id_pred_inst1_vld;
wire            jltype_vld;
wire            jrtype_vld;
wire    [31:0]  jtype_imm;
wire            jtype_vld;














assign inst0[31:0] = ipack_id_pred_inst0[31:0];
assign inst1[15:0] = ipack_id_pred_inst1[15:0];




assign btype_vld       = inst0[6:0] == 7'b1100011;
assign btype_imm[31:0] = {{20{inst0[31]}}, inst0[7], inst0[30:25],
                         inst0[11:8], 1'b0};


assign jtype_vld       = inst0[6:0] == 7'b1101111;
assign jtype_imm[31:0] = {{12{inst0[31]}}, inst0[19:12], inst0[20],
                         inst0[30:21], 1'b0};


assign jrtype_vld      = inst0[6:0] == 7'b1100111 && inst0[19:15] == 5'b1
                      && inst0[31:20] == 12'b0;


assign jltype_vld      = jtype_vld && inst0[11:7] == 5'b1;





assign cbtype_vld0       = {inst0[15:13], inst0[1:0]} == 5'b11001 ||
                           {inst0[15:13], inst0[1:0]} == 5'b11101;
assign cbtype_imm0[31:0] = {{24{inst0[12]}}, inst0[6:5], inst0[2],
                           inst0[11:10], inst0[4:3], 1'b0};


assign cjtype_vld0       = {inst0[14:13], inst0[1:0]} == 4'b0101;
assign cjtype_imm0[31:0] = {{21{inst0[12]}}, inst0[8], inst0[10:9],
                           inst0[6], inst0[7], inst0[2], inst0[11],
                           inst0[5:3], 1'b0};


assign cjrtype_vld0      = inst0[6:0] == 7'b10 && inst0[15:13] == 3'b100
                        && inst0[11:7] == 5'b1;


assign inst0_imm[31:0] = {32{  btype_vld}} &   btype_imm[31:0] |
                         {32{  jtype_vld}} &   jtype_imm[31:0] |
                         {32{cbtype_vld0}} & cbtype_imm0[31:0] |
                         {32{cjtype_vld0}} & cjtype_imm0[31:0] ;


assign cjltype_vld0 = cjtype_vld0 && !inst0[15];






assign btype_vld1        = inst1[6:0] == 7'b1100011;


assign cbtype_vld1       = {inst1[15:13], inst1[1:0]} == 5'b11001 ||
                           {inst1[15:13], inst1[1:0]} == 5'b11101;
assign cbtype_imm1[31:0] = {{24{inst1[12]}}, inst1[6:5], inst1[2],
                           inst1[11:10], inst1[4:3], 1'b0};


assign cjtype_vld1       = {inst1[14:13], inst1[1:0]} == 4'b0101;
assign cjtype_imm1[31:0] = {{21{inst1[12]}}, inst1[8], inst1[10:9],
                           inst1[6], inst1[7], inst1[2], inst1[11],
                           inst1[5:3], 1'b0};


assign cjrtype_vld1      = inst1[6:0] == 7'b10 && inst1[15:13] == 3'b100
                        && inst1[11:7] == 5'b1;


assign cjltype_vld1 = cjtype_vld1 && !inst1[15];


assign inst1_imm[31:0] = {32{cbtype_vld1}} & cbtype_imm1[31:0] |
                         {32{cjtype_vld1}} & cjtype_imm1[31:0] ;






assign id_pred_br_vld0    = ipack_id_pred_inst0_vld && (btype_vld || cbtype_vld0);
assign id_pred_jmp_vld0   = ipack_id_pred_inst0_vld && (jtype_vld || cjtype_vld0);
assign id_pred_link_vld0  = ipack_id_pred_inst0_vld && (jltype_vld || cjltype_vld0);
assign id_pred_ret_vld0   = ipack_id_pred_inst0_vld && (jrtype_vld || cjrtype_vld0);
assign id_pred_imm0[31:0] = inst0_imm[31:0];
assign id_pred_inst0_32   = inst0[1:0] == 2'b11;

assign id_pred_br_vld1    = ipack_id_pred_inst1_vld && (btype_vld1 || cbtype_vld1);
assign id_pred_br_vld1_raw = btype_vld1 || cbtype_vld1;
assign id_pred_jmp_vld1   = ipack_id_pred_inst1_vld && (cjtype_vld1);
assign id_pred_link_vld1  = ipack_id_pred_inst1_vld && (cjltype_vld1);
assign id_pred_ret_vld1   = ipack_id_pred_inst1_vld && (cjrtype_vld1);
assign id_pred_imm1[31:0] = inst1_imm[31:0];

// &ModuleEnd; @139
endmodule
























// &ModuleBeg; @23
module pa_ifu_ras(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  id_pred_ras_link_pc,
  id_pred_ras_link_vld,
  id_pred_ras_ret_vld,
  iu_ifu_bht_mispred,
  iu_ifu_link_vld,
  iu_ifu_link_vld_gate,
  iu_ifu_pc_mispred,
  iu_ifu_ret_vld,
  iu_ifu_ret_vld_gate,
  pad_yy_gate_clk_en_b,
  ras_cur_st,
  ras_id_pred_tar_pc,
  rtu_ifu_xx_fe_flush,
  rtu_ifu_xx_fe_flush_gate
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input   [23:0]  id_pred_ras_link_pc;
input           id_pred_ras_link_vld;
input           id_pred_ras_ret_vld;
input           iu_ifu_bht_mispred;
input           iu_ifu_link_vld;
input           iu_ifu_link_vld_gate;
input           iu_ifu_pc_mispred;
input           iu_ifu_ret_vld;
input           iu_ifu_ret_vld_gate;
input           pad_yy_gate_clk_en_b;
input           ras_cur_st;
input           rtu_ifu_xx_fe_flush;
input           rtu_ifu_xx_fe_flush_gate;
output  [23:0]  ras_id_pred_tar_pc;

// &Regs; @25
reg     [3 :0]  ras_bju;
reg     [3 :0]  ras_pop;
reg     [23:0]  ras_tar_pc;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire    [23:0]  entry0_pc;
wire            entry0_upd;
wire    [23:0]  entry1_pc;
wire            entry1_upd;
wire    [23:0]  entry2_pc;
wire            entry2_upd;
wire    [23:0]  entry3_pc;
wire            entry3_upd;
wire            forever_cpuclk;
wire    [23:0]  id_pred_ras_link_pc;
wire            id_pred_ras_link_vld;
wire            id_pred_ras_ret_vld;
wire            iu_ifu_bht_mispred;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            pad_yy_gate_clk_en_b;
wire            ras_cpuclk;
wire            ras_cur_st;
wire            ras_icg_en;
wire    [23:0]  ras_id_pred_tar_pc;
wire    [23:0]  ras_upd_pc;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;














assign ras_icg_en = id_pred_ras_ret_vld
                  | id_pred_ras_link_vld
                  | rtu_ifu_xx_fe_flush_gate | iu_ifu_bht_mispred | iu_ifu_pc_mispred
                  | iu_ifu_link_vld_gate | iu_ifu_ret_vld_gate;
// &Instance("gated_clk_cell", "x_pa_ifu_ras_icg_cell"); @44
gated_clk_cell  x_pa_ifu_ras_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ras_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ras_icg_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @45
//          .external_en (1'b0), @46
//          .global_en   (cp0_yy_clk_en), @47
//          .module_en   (1'b0), @48
//          .local_en    (ras_icg_en), @49
//          .clk_out     (ras_cpuclk) @50
//         ); @51




parameter ENTRY_NUM = 4;

// &ConnRule(s/ras_entry/entry0/); @58
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry0"); @59
pa_ifu_ras_entry  x_pa_ifu_ras_entry0 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .ras_entry_pc         (entry0_pc           ),
  .ras_entry_upd        (entry0_upd          ),
  .ras_upd_pc           (ras_upd_pc          )
);


// &ConnRule(s/ras_entry/entry1/); @61
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry1"); @62
pa_ifu_ras_entry  x_pa_ifu_ras_entry1 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .ras_entry_pc         (entry1_pc           ),
  .ras_entry_upd        (entry1_upd          ),
  .ras_upd_pc           (ras_upd_pc          )
);


// &ConnRule(s/ras_entry/entry2/); @64
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry2"); @65
pa_ifu_ras_entry  x_pa_ifu_ras_entry2 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .ras_entry_pc         (entry2_pc           ),
  .ras_entry_upd        (entry2_upd          ),
  .ras_upd_pc           (ras_upd_pc          )
);


// &ConnRule(s/ras_entry/entry3/); @67
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry3"); @68
pa_ifu_ras_entry  x_pa_ifu_ras_entry3 (
  .cp0_yy_clk_en        (cp0_yy_clk_en       ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .ras_entry_pc         (entry3_pc           ),
  .ras_entry_upd        (entry3_upd          ),
  .ras_upd_pc           (ras_upd_pc          )
);


// &ConnRule(s/ras_entry/entry4/); @71
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry4"); @72
// &ConnRule(s/ras_entry/entry5/); @74
// &Instance("pa_ifu_ras_entry","x_pa_ifu_ras_entry5"); @75




always@(posedge ras_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ras_pop[ENTRY_NUM-1:0] <= {{ENTRY_NUM-1{1'b0}}, 1'b1};
  else if(rtu_ifu_xx_fe_flush || iu_ifu_bht_mispred || iu_ifu_pc_mispred)
    ras_pop[ENTRY_NUM-1:0] <= ras_bju[ENTRY_NUM-1:0];
  else if(id_pred_ras_link_vld)
    ras_pop[ENTRY_NUM-1:0] <= {ras_pop[0], ras_pop[ENTRY_NUM-1:1]};
  else if(id_pred_ras_ret_vld && !ras_cur_st)
    ras_pop[ENTRY_NUM-1:0] <= {ras_pop[ENTRY_NUM-2:0], ras_pop[ENTRY_NUM-1]};
  else
    ras_pop[ENTRY_NUM-1:0] <= ras_pop[ENTRY_NUM-1:0];
end

always@(posedge ras_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ras_bju[ENTRY_NUM-1:0] <= {{ENTRY_NUM-1{1'b0}}, 1'b1};
  else if(iu_ifu_link_vld && !rtu_ifu_xx_fe_flush)
    ras_bju[ENTRY_NUM-1:0] <= {ras_bju[0], ras_bju[ENTRY_NUM-1:1]};
  else if(iu_ifu_ret_vld && !rtu_ifu_xx_fe_flush)
    ras_bju[ENTRY_NUM-1:0] <= {ras_bju[ENTRY_NUM-2:0], ras_bju[ENTRY_NUM-1]};
  else
    ras_bju[ENTRY_NUM-1:0] <= ras_bju[ENTRY_NUM-1:0];
end

// &CombBeg; @108
// &CombEnd; @118
// &CombBeg; @120
always @( entry0_pc[23:0]
       or ras_pop[3:0]
       or entry3_pc[23:0]
       or entry2_pc[23:0]
       or entry1_pc[23:0])
begin
case(ras_pop[3:0])
  4'b0001: ras_tar_pc[23:0] = entry0_pc[23:0];
  4'b0010: ras_tar_pc[23:0] = entry1_pc[23:0];
  4'b0100: ras_tar_pc[23:0] = entry2_pc[23:0];
  4'b1000: ras_tar_pc[23:0] = entry3_pc[23:0];
  default: ras_tar_pc[23:0] = 24'bx;
endcase
// &CombEnd; @128
end




assign entry3_upd = id_pred_ras_link_vld && ras_pop[0];
assign entry2_upd = id_pred_ras_link_vld && ras_pop[3];
assign entry1_upd = id_pred_ras_link_vld && ras_pop[2];
assign entry0_upd = id_pred_ras_link_vld && ras_pop[1];
assign ras_upd_pc[23:0] = id_pred_ras_link_pc[23:0];






assign ras_id_pred_tar_pc[23:0] = ras_tar_pc[23:0];

// &ModuleEnd; @153
endmodule
























// &ModuleBeg; @23
module pa_ifu_ras_entry(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  ras_entry_pc,
  ras_entry_upd,
  ras_upd_pc
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input           ras_entry_upd;
input   [23:0]  ras_upd_pc;
output  [23:0]  ras_entry_pc;

// &Regs; @25
reg     [23:0]  entry_pc;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            entry_clk;
wire            entry_clk_en;
wire            forever_cpuclk;
wire            pad_yy_gate_clk_en_b;
wire    [23:0]  ras_entry_pc;
wire            ras_entry_upd;
wire    [23:0]  ras_upd_pc;











assign entry_clk_en = ras_entry_upd;
// &Instance("gated_clk_cell", "x_ras_entry_icg_cell"); @38
gated_clk_cell  x_ras_entry_icg_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (entry_clk           ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (entry_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @39
//          .external_en (1'b0), @40
//          .global_en   (cp0_yy_clk_en), @41
//          .module_en   (1'b0), @42
//          .local_en    (entry_clk_en), @43
//          .clk_out     (entry_clk) @44
//         ); @45




always @(posedge entry_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    entry_pc[23:0] <= 24'b0;
  end
  else if(ras_entry_upd)
  begin
    entry_pc[23:0] <= ras_upd_pc[23:0];
  end
  else
  begin
    entry_pc[23:0] <= entry_pc[23:0];
  end
end





assign ras_entry_pc[23:0] = entry_pc[23:0];


// &ModuleEnd; @73
endmodule
























// &ModuleBeg; @23
module pa_ifu_top(
  bmu_ifu_acc_err,
  bmu_ifu_grant,
  bmu_ifu_rdata,
  bmu_ifu_trans_cmplt,
  cp0_ifu_bht_en,
  cp0_ifu_bht_inv,
  cp0_ifu_icache_en,
  cp0_ifu_icache_inv_addr,
  cp0_ifu_icache_inv_req,
  cp0_ifu_icache_inv_type,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_ifu_mtvec,
  cp0_ifu_ras_en,
  cp0_ifu_rst_inv_done,
  cp0_ifu_srst_mask,
  cp0_ifu_srst_req,
  cp0_yy_clk_en,
  cp0_yy_mach_mode,
  cpurst_b,
  forever_cpuclk,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_ifu_pc,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  had_yy_xx_exit_dbg,
  idu_ifu_id_stall,
  idu_ifu_tail_vld,
  idu_ifu_x1,
  ifu_bmu_acc_deny,
  ifu_bmu_addr,
  ifu_bmu_burst,
  ifu_bmu_data_req,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_seq,
  ifu_bmu_size,
  ifu_cp0_bht_inv_done,
  ifu_cp0_icache_inv_done,
  ifu_cp0_lpmd_ack,
  ifu_cp0_rst_inv_req,
  ifu_cp0_srst_ack,
  ifu_cp0_vec_err,
  ifu_cp0_vec_succeed,
  ifu_hpcp_icache_access,
  ifu_hpcp_icache_miss,
  ifu_idu_chgflw_flush,
  ifu_idu_id_expt_vld,
  ifu_idu_id_inst,
  ifu_idu_id_inst_bkpt,
  ifu_idu_id_inst_vld,
  ifu_idu_id_pred_taken,
  ifu_idu_id_warm_up,
  ifu_iu_chgflw_pc,
  ifu_iu_chgflw_vld,
  ifu_iu_ex1_pc_pred,
  ifu_iu_reset_vld,
  ifu_pmp_addr,
  ifu_pmp_machine_mode,
  ifu_rtu_cpu_in_init,
  ifu_rtu_lockup_ack,
  ifu_sysmap_pa,
  ifu_xx_warm_up_clk,
  iu_ifu_bht_cur_pc,
  iu_ifu_bht_mispred,
  iu_ifu_bht_pred,
  iu_ifu_bht_taken,
  iu_ifu_br_vld,
  iu_ifu_br_vld_gate,
  iu_ifu_ex1_tar_pc,
  iu_ifu_ex1_tar_pc_vld,
  iu_ifu_link_vld,
  iu_ifu_link_vld_gate,
  iu_ifu_pc_mispred,
  iu_ifu_ret_vld,
  iu_ifu_ret_vld_gate,
  pad_yy_gate_clk_en_b,
  pmp_ifu_acc_deny,
  rtu_ifu_chgflow_pc,
  rtu_ifu_chgflow_vld,
  rtu_ifu_lockup_expt_vld,
  rtu_ifu_lockup_mask,
  rtu_ifu_lockup_req,
  rtu_ifu_xx_fe_flush,
  rtu_ifu_xx_fe_flush_gate,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_tail_int_vld,
  sysio_ifu_rst_addr,
  sysio_ifu_rst_addr_done,
  sysio_xx_halt_req,
  sysmap_ifu_flg
);

// &Ports; @24
input           bmu_ifu_acc_err;
input           bmu_ifu_grant;
input   [31:0]  bmu_ifu_rdata;
input           bmu_ifu_trans_cmplt;
input           cp0_ifu_bht_en;
input           cp0_ifu_bht_inv;
input           cp0_ifu_icache_en;
input   [31:0]  cp0_ifu_icache_inv_addr;
input           cp0_ifu_icache_inv_req;
input           cp0_ifu_icache_inv_type;
input           cp0_ifu_in_lpmd;
input           cp0_ifu_lpmd_req;
input   [31:0]  cp0_ifu_mtvec;
input           cp0_ifu_ras_en;
input           cp0_ifu_rst_inv_done;
input           cp0_ifu_srst_mask;
input           cp0_ifu_srst_req;
input           cp0_yy_clk_en;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_ifu_ir;
input           had_ifu_ir_vld;
input   [31:0]  had_ifu_pc;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input           had_yy_xx_exit_dbg;
input           idu_ifu_id_stall;
input           idu_ifu_tail_vld;
input   [31:0]  idu_ifu_x1;
input   [31:0]  iu_ifu_bht_cur_pc;
input           iu_ifu_bht_mispred;
input   [1 :0]  iu_ifu_bht_pred;
input           iu_ifu_bht_taken;
input           iu_ifu_br_vld;
input           iu_ifu_br_vld_gate;
input   [31:0]  iu_ifu_ex1_tar_pc;
input           iu_ifu_ex1_tar_pc_vld;
input           iu_ifu_link_vld;
input           iu_ifu_link_vld_gate;
input           iu_ifu_pc_mispred;
input           iu_ifu_ret_vld;
input           iu_ifu_ret_vld_gate;
input           pad_yy_gate_clk_en_b;
input           pmp_ifu_acc_deny;
input   [31:0]  rtu_ifu_chgflow_pc;
input           rtu_ifu_chgflow_vld;
input           rtu_ifu_lockup_expt_vld;
input           rtu_ifu_lockup_mask;
input           rtu_ifu_lockup_req;
input           rtu_ifu_xx_fe_flush;
input           rtu_ifu_xx_fe_flush_gate;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_expt_vld_gate;
input           rtu_yy_xx_int_hv;
input           rtu_yy_xx_tail_int_vld;
input   [31:0]  sysio_ifu_rst_addr;
input           sysio_ifu_rst_addr_done;
input           sysio_xx_halt_req;
input   [4 :0]  sysmap_ifu_flg;
output          ifu_bmu_acc_deny;
output  [31:0]  ifu_bmu_addr;
output  [2 :0]  ifu_bmu_burst;
output          ifu_bmu_data_req;
output  [3 :0]  ifu_bmu_prot;
output          ifu_bmu_req;
output          ifu_bmu_seq;
output  [1 :0]  ifu_bmu_size;
output          ifu_cp0_bht_inv_done;
output          ifu_cp0_icache_inv_done;
output          ifu_cp0_lpmd_ack;
output          ifu_cp0_rst_inv_req;
output          ifu_cp0_srst_ack;
output          ifu_cp0_vec_err;
output          ifu_cp0_vec_succeed;
output          ifu_hpcp_icache_access;
output          ifu_hpcp_icache_miss;
output          ifu_idu_chgflw_flush;
output          ifu_idu_id_expt_vld;
output  [31:0]  ifu_idu_id_inst;
output  [8 :0]  ifu_idu_id_inst_bkpt;
output          ifu_idu_id_inst_vld;
output  [1 :0]  ifu_idu_id_pred_taken;
output          ifu_idu_id_warm_up;
output  [31:0]  ifu_iu_chgflw_pc;
output          ifu_iu_chgflw_vld;
output  [31:0]  ifu_iu_ex1_pc_pred;
output          ifu_iu_reset_vld;
output  [31:0]  ifu_pmp_addr;
output          ifu_pmp_machine_mode;
output          ifu_rtu_cpu_in_init;
output          ifu_rtu_lockup_ack;
output  [31:0]  ifu_sysmap_pa;
output          ifu_xx_warm_up_clk;

// &Regs; @25

// &Wires; @26
wire    [1 :0]  bht_top_cur_st;
wire            bmu_ifu_acc_err;
wire            bmu_ifu_grant;
wire    [31:0]  bmu_ifu_rdata;
wire            bmu_ifu_trans_cmplt;
wire    [31:0]  btb_pcgen_tar_pc;
wire            btb_xx_chgflw_vld;
wire            cp0_ifu_bht_en;
wire            cp0_ifu_bht_inv;
wire            cp0_ifu_icache_en;
wire    [31:0]  cp0_ifu_icache_inv_addr;
wire            cp0_ifu_icache_inv_req;
wire            cp0_ifu_icache_inv_type;
wire            cp0_ifu_in_lpmd;
wire            cp0_ifu_lpmd_req;
wire    [31:0]  cp0_ifu_mtvec;
wire            cp0_ifu_ras_en;
wire            cp0_ifu_rst_inv_done;
wire            cp0_ifu_srst_mask;
wire            cp0_ifu_srst_req;
wire            cp0_yy_clk_en;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            ctrl_ibuf_pop_en;
wire            ctrl_ifetch_req_abort;
wire            ctrl_ifetch_req_vld;
wire            ctrl_pcgen_inst_vld;
wire            ctrl_pcgen_pipedown;
wire            forever_cpuclk;
wire    [31:0]  had_ifu_ir;
wire            had_ifu_ir_vld;
wire    [31:0]  had_ifu_pc;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire            had_yy_xx_exit_dbg;
wire            ibuf_ctrl_inst_fetch;
wire            ibuf_id_pred_hungry;
wire            ibuf_ipack_stall;
wire            ibuf_top_id_stall;
wire    [2 :0]  ibuf_top_vld_num;
wire            icache_top_abort;
wire            icache_top_rd_vld;
wire    [1 :0]  icache_top_ref_st;
wire            icache_top_uc_st;
wire            id_pred_ctrl_stall;
wire    [1 :0]  id_pred_ibuf_br_taken0;
wire    [1 :0]  id_pred_ibuf_br_taken1;
wire            id_pred_ibuf_chgflw_vld0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt0;
wire    [8 :0]  id_pred_ibuf_inst_bkpt1;
wire            id_pred_ipack_chgflw_vld0;
wire            id_pred_ipack_delay_stall;
wire            id_pred_ipack_mask;
wire            id_pred_ipack_ret_stall;
wire    [31:0]  id_pred_pcgen_chgflw_pc;
wire            id_pred_pcgen_chgflw_vld;
wire            id_pred_pcgen_inst_vld;
wire            idu_ifu_id_stall;
wire            idu_ifu_tail_vld;
wire    [31:0]  idu_ifu_x1;
wire            ifetch_ctrl_inst_vld;
wire            ifetch_ibuf_idle;
wire            ifetch_ipack_acc_err;
wire    [31:0]  ifetch_ipack_inst;
wire            ifetch_ipack_inst_vld;
wire            ifetch_ipack_inst_vld_gate;
wire            ifetch_ipack_unalign;
wire    [31:0]  ifetch_pcgen_data;
wire            ifetch_pcgen_grant;
wire            ifetch_pcgen_grant_dp;
wire    [1 :0]  ifetch_top_abt_st;
wire    [2 :0]  ifetch_top_cur_st;
wire            ifetch_vec_acc_err;
wire            ifetch_vec_cmplt;
wire            ifetch_vec_grant;
wire            ifetch_vec_idle;
wire            ifetch_xx_not_busy;
wire            ifu_bmu_acc_deny;
wire    [31:0]  ifu_bmu_addr;
wire    [2 :0]  ifu_bmu_burst;
wire            ifu_bmu_data_req;
wire    [3 :0]  ifu_bmu_prot;
wire            ifu_bmu_req;
wire            ifu_bmu_seq;
wire    [1 :0]  ifu_bmu_size;
wire            ifu_cp0_bht_inv_done;
wire            ifu_cp0_icache_inv_done;
wire            ifu_cp0_lpmd_ack;
wire            ifu_cp0_rst_inv_req;
wire            ifu_cp0_srst_ack;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire            ifu_hpcp_icache_access;
wire            ifu_hpcp_icache_miss;
wire            ifu_idu_chgflw_flush;
wire            ifu_idu_id_expt_vld;
wire    [31:0]  ifu_idu_id_inst;
wire    [8 :0]  ifu_idu_id_inst_bkpt;
wire            ifu_idu_id_inst_vld;
wire    [1 :0]  ifu_idu_id_pred_taken;
wire            ifu_idu_id_warm_up;
wire    [31:0]  ifu_iu_chgflw_pc;
wire            ifu_iu_chgflw_vld;
wire    [31:0]  ifu_iu_ex1_pc_pred;
wire            ifu_iu_reset_vld;
wire    [31:0]  ifu_pmp_addr;
wire            ifu_pmp_machine_mode;
wire            ifu_rtu_cpu_in_init;
wire            ifu_rtu_lockup_ack;
wire    [31:0]  ifu_sysmap_pa;
wire            ifu_xx_warm_up_clk;
wire    [2 :0]  ipack_ibuf_acc_err;
wire            ipack_ibuf_first_16;
wire    [47:0]  ipack_ibuf_inst;
wire            ipack_ibuf_inst_all;
wire            ipack_ibuf_inst_empty;
wire            ipack_ibuf_inst_full;
wire            ipack_ibuf_inst_one;
wire            ipack_ibuf_inst_two;
wire            ipack_ibuf_inst_vld;
wire            ipack_ibuf_inst_vld_raw;
wire            ipack_id_pred_h0_create;
wire            ipack_id_pred_h0_vld;
wire    [31:0]  ipack_id_pred_inst0;
wire            ipack_id_pred_inst0_vld;
wire    [15:0]  ipack_id_pred_inst1;
wire            ipack_id_pred_inst1_vld;
wire            ipack_id_pred_inst_full;
wire            ipack_id_pred_new_vld;
wire            ipack_id_pred_unalign;
wire            ipack_top_entry0_vld;
wire            ipack_top_entry1_vld;
wire            ipack_top_entry2_vld;
wire    [31:0]  iu_ifu_bht_cur_pc;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire    [31:0]  iu_ifu_ex1_tar_pc;
wire            iu_ifu_ex1_tar_pc_vld;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            pad_yy_gate_clk_en_b;
wire            pcgen_ctrl_chgflw_vld;
wire            pcgen_ibuf_chgflw_vld;
wire    [31:0]  pcgen_id_pred_btb_tar_pc;
wire            pcgen_id_pred_btb_tar_vld;
wire            pcgen_id_pred_flush_vld;
wire    [31:0]  pcgen_id_pred_idpc;
wire    [31:0]  pcgen_id_pred_ifpc;
wire    [31:0]  pcgen_ifetch_addr;
wire            pcgen_ifetch_chgflw_vld;
wire    [31:0]  pcgen_ifetch_ifpc;
wire    [31:0]  pcgen_ifetch_seq_addr;
wire            pcgen_ipack_chgflw_vld;
wire            pcgen_top_btb_tar_vld;
wire            pcgen_top_buf_chgflw;
wire            pmp_ifu_acc_deny;
wire            pred_top_delay_chgflw;
wire            pred_top_ras_st;
wire    [31:0]  rtu_ifu_chgflow_pc;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_lockup_expt_vld;
wire            rtu_ifu_lockup_mask;
wire            rtu_ifu_lockup_req;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_tail_int_vld;
wire    [31:0]  sysio_ifu_rst_addr;
wire            sysio_ifu_rst_addr_done;
wire            sysio_xx_halt_req;
wire    [4 :0]  sysmap_ifu_flg;
wire    [26:0]  top_debug_info;
wire            vec_ctrl_reset_mask;
wire            vec_ctrl_seq_mask;
wire            vec_ibuf_warm_up;
wire            vec_ifetch_data_fetch;
wire            vec_ipack_inst_mask;
wire            vec_pcgen_chgflw_vld;
wire            vec_pcgen_inst_fetch;
wire            vec_pcgen_iu_chgflw;
wire            vec_pcgen_pc_flop;
wire            vec_pcgen_rst_vld;
wire    [31:0]  vec_pcgen_tar_pc;
wire    [3 :0]  vec_top_cur_st;



// &Instance("pa_ifu_pcgen"); @29
pa_ifu_pcgen  x_pa_ifu_pcgen (
  .btb_pcgen_tar_pc          (btb_pcgen_tar_pc         ),
  .btb_xx_chgflw_vld         (btb_xx_chgflw_vld        ),
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cpurst_b                  (cpurst_b                 ),
  .ctrl_pcgen_inst_vld       (ctrl_pcgen_inst_vld      ),
  .ctrl_pcgen_pipedown       (ctrl_pcgen_pipedown      ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_ifu_pc                (had_ifu_pc               ),
  .had_yy_xx_exit_dbg        (had_yy_xx_exit_dbg       ),
  .id_pred_pcgen_chgflw_pc   (id_pred_pcgen_chgflw_pc  ),
  .id_pred_pcgen_chgflw_vld  (id_pred_pcgen_chgflw_vld ),
  .id_pred_pcgen_inst_vld    (id_pred_pcgen_inst_vld   ),
  .ifetch_pcgen_data         (ifetch_pcgen_data        ),
  .ifetch_pcgen_grant        (ifetch_pcgen_grant       ),
  .ifetch_pcgen_grant_dp     (ifetch_pcgen_grant_dp    ),
  .ifetch_xx_not_busy        (ifetch_xx_not_busy       ),
  .ifu_idu_chgflw_flush      (ifu_idu_chgflw_flush     ),
  .ifu_iu_chgflw_pc          (ifu_iu_chgflw_pc         ),
  .ifu_iu_chgflw_vld         (ifu_iu_chgflw_vld        ),
  .iu_ifu_ex1_tar_pc         (iu_ifu_ex1_tar_pc        ),
  .iu_ifu_ex1_tar_pc_vld     (iu_ifu_ex1_tar_pc_vld    ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .pcgen_ctrl_chgflw_vld     (pcgen_ctrl_chgflw_vld    ),
  .pcgen_ibuf_chgflw_vld     (pcgen_ibuf_chgflw_vld    ),
  .pcgen_id_pred_btb_tar_pc  (pcgen_id_pred_btb_tar_pc ),
  .pcgen_id_pred_btb_tar_vld (pcgen_id_pred_btb_tar_vld),
  .pcgen_id_pred_flush_vld   (pcgen_id_pred_flush_vld  ),
  .pcgen_id_pred_idpc        (pcgen_id_pred_idpc       ),
  .pcgen_id_pred_ifpc        (pcgen_id_pred_ifpc       ),
  .pcgen_ifetch_addr         (pcgen_ifetch_addr        ),
  .pcgen_ifetch_chgflw_vld   (pcgen_ifetch_chgflw_vld  ),
  .pcgen_ifetch_ifpc         (pcgen_ifetch_ifpc        ),
  .pcgen_ifetch_seq_addr     (pcgen_ifetch_seq_addr    ),
  .pcgen_ipack_chgflw_vld    (pcgen_ipack_chgflw_vld   ),
  .pcgen_top_btb_tar_vld     (pcgen_top_btb_tar_vld    ),
  .pcgen_top_buf_chgflw      (pcgen_top_buf_chgflw     ),
  .rtu_ifu_chgflow_pc        (rtu_ifu_chgflow_pc       ),
  .rtu_ifu_chgflow_vld       (rtu_ifu_chgflow_vld      ),
  .rtu_ifu_xx_fe_flush       (rtu_ifu_xx_fe_flush      ),
  .sysio_ifu_rst_addr        (sysio_ifu_rst_addr       ),
  .vec_pcgen_chgflw_vld      (vec_pcgen_chgflw_vld     ),
  .vec_pcgen_inst_fetch      (vec_pcgen_inst_fetch     ),
  .vec_pcgen_iu_chgflw       (vec_pcgen_iu_chgflw      ),
  .vec_pcgen_pc_flop         (vec_pcgen_pc_flop        ),
  .vec_pcgen_rst_vld         (vec_pcgen_rst_vld        ),
  .vec_pcgen_tar_pc          (vec_pcgen_tar_pc         )
);



// &Instance("pa_ifu_ifetch"); @32
pa_ifu_ifetch  x_pa_ifu_ifetch (
  .bmu_ifu_acc_err            (bmu_ifu_acc_err           ),
  .bmu_ifu_grant              (bmu_ifu_grant             ),
  .bmu_ifu_rdata              (bmu_ifu_rdata             ),
  .bmu_ifu_trans_cmplt        (bmu_ifu_trans_cmplt       ),
  .cp0_ifu_icache_en          (cp0_ifu_icache_en         ),
  .cp0_ifu_icache_inv_addr    (cp0_ifu_icache_inv_addr   ),
  .cp0_ifu_icache_inv_req     (cp0_ifu_icache_inv_req    ),
  .cp0_ifu_icache_inv_type    (cp0_ifu_icache_inv_type   ),
  .cp0_ifu_lpmd_req           (cp0_ifu_lpmd_req          ),
  .cp0_ifu_srst_req           (cp0_ifu_srst_req          ),
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cp0_yy_mach_mode           (cp0_yy_mach_mode          ),
  .cpurst_b                   (cpurst_b                  ),
  .ctrl_ifetch_req_abort      (ctrl_ifetch_req_abort     ),
  .ctrl_ifetch_req_vld        (ctrl_ifetch_req_vld       ),
  .forever_cpuclk             (forever_cpuclk            ),
  .icache_top_abort           (icache_top_abort          ),
  .icache_top_rd_vld          (icache_top_rd_vld         ),
  .icache_top_ref_st          (icache_top_ref_st         ),
  .icache_top_uc_st           (icache_top_uc_st          ),
  .ifetch_ctrl_inst_vld       (ifetch_ctrl_inst_vld      ),
  .ifetch_ibuf_idle           (ifetch_ibuf_idle          ),
  .ifetch_ipack_acc_err       (ifetch_ipack_acc_err      ),
  .ifetch_ipack_inst          (ifetch_ipack_inst         ),
  .ifetch_ipack_inst_vld      (ifetch_ipack_inst_vld     ),
  .ifetch_ipack_inst_vld_gate (ifetch_ipack_inst_vld_gate),
  .ifetch_ipack_unalign       (ifetch_ipack_unalign      ),
  .ifetch_pcgen_data          (ifetch_pcgen_data         ),
  .ifetch_pcgen_grant         (ifetch_pcgen_grant        ),
  .ifetch_pcgen_grant_dp      (ifetch_pcgen_grant_dp     ),
  .ifetch_top_abt_st          (ifetch_top_abt_st         ),
  .ifetch_top_cur_st          (ifetch_top_cur_st         ),
  .ifetch_vec_acc_err         (ifetch_vec_acc_err        ),
  .ifetch_vec_cmplt           (ifetch_vec_cmplt          ),
  .ifetch_vec_grant           (ifetch_vec_grant          ),
  .ifetch_vec_idle            (ifetch_vec_idle           ),
  .ifetch_xx_not_busy         (ifetch_xx_not_busy        ),
  .ifu_bmu_acc_deny           (ifu_bmu_acc_deny          ),
  .ifu_bmu_addr               (ifu_bmu_addr              ),
  .ifu_bmu_burst              (ifu_bmu_burst             ),
  .ifu_bmu_data_req           (ifu_bmu_data_req          ),
  .ifu_bmu_prot               (ifu_bmu_prot              ),
  .ifu_bmu_req                (ifu_bmu_req               ),
  .ifu_bmu_seq                (ifu_bmu_seq               ),
  .ifu_bmu_size               (ifu_bmu_size              ),
  .ifu_cp0_icache_inv_done    (ifu_cp0_icache_inv_done   ),
  .ifu_cp0_lpmd_ack           (ifu_cp0_lpmd_ack          ),
  .ifu_cp0_srst_ack           (ifu_cp0_srst_ack          ),
  .ifu_hpcp_icache_access     (ifu_hpcp_icache_access    ),
  .ifu_hpcp_icache_miss       (ifu_hpcp_icache_miss      ),
  .ifu_pmp_addr               (ifu_pmp_addr              ),
  .ifu_pmp_machine_mode       (ifu_pmp_machine_mode      ),
  .ifu_rtu_lockup_ack         (ifu_rtu_lockup_ack        ),
  .ifu_sysmap_pa              (ifu_sysmap_pa             ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .pcgen_ifetch_addr          (pcgen_ifetch_addr         ),
  .pcgen_ifetch_chgflw_vld    (pcgen_ifetch_chgflw_vld   ),
  .pcgen_ifetch_ifpc          (pcgen_ifetch_ifpc         ),
  .pcgen_ifetch_seq_addr      (pcgen_ifetch_seq_addr     ),
  .pmp_ifu_acc_deny           (pmp_ifu_acc_deny          ),
  .rtu_ifu_lockup_mask        (rtu_ifu_lockup_mask       ),
  .rtu_ifu_lockup_req         (rtu_ifu_lockup_req        ),
  .rtu_yy_xx_dbgon            (rtu_yy_xx_dbgon           ),
  .sysmap_ifu_flg             (sysmap_ifu_flg            ),
  .vec_ifetch_data_fetch      (vec_ifetch_data_fetch     )
);



// &Instance("pa_ifu_btb"); @35
pa_ifu_btb  x_pa_ifu_btb (
  .btb_pcgen_tar_pc  (btb_pcgen_tar_pc ),
  .btb_xx_chgflw_vld (btb_xx_chgflw_vld)
);



// &Instance("pa_ifu_ipack"); @38
pa_ifu_ipack  x_pa_ifu_ipack (
  .cp0_yy_clk_en              (cp0_yy_clk_en             ),
  .cpurst_b                   (cpurst_b                  ),
  .forever_cpuclk             (forever_cpuclk            ),
  .ibuf_ipack_stall           (ibuf_ipack_stall          ),
  .id_pred_ipack_chgflw_vld0  (id_pred_ipack_chgflw_vld0 ),
  .id_pred_ipack_delay_stall  (id_pred_ipack_delay_stall ),
  .id_pred_ipack_mask         (id_pred_ipack_mask        ),
  .id_pred_ipack_ret_stall    (id_pred_ipack_ret_stall   ),
  .idu_ifu_tail_vld           (idu_ifu_tail_vld          ),
  .ifetch_ipack_acc_err       (ifetch_ipack_acc_err      ),
  .ifetch_ipack_inst          (ifetch_ipack_inst         ),
  .ifetch_ipack_inst_vld      (ifetch_ipack_inst_vld     ),
  .ifetch_ipack_inst_vld_gate (ifetch_ipack_inst_vld_gate),
  .ifetch_ipack_unalign       (ifetch_ipack_unalign      ),
  .ipack_ibuf_acc_err         (ipack_ibuf_acc_err        ),
  .ipack_ibuf_first_16        (ipack_ibuf_first_16       ),
  .ipack_ibuf_inst            (ipack_ibuf_inst           ),
  .ipack_ibuf_inst_all        (ipack_ibuf_inst_all       ),
  .ipack_ibuf_inst_empty      (ipack_ibuf_inst_empty     ),
  .ipack_ibuf_inst_full       (ipack_ibuf_inst_full      ),
  .ipack_ibuf_inst_one        (ipack_ibuf_inst_one       ),
  .ipack_ibuf_inst_two        (ipack_ibuf_inst_two       ),
  .ipack_ibuf_inst_vld        (ipack_ibuf_inst_vld       ),
  .ipack_ibuf_inst_vld_raw    (ipack_ibuf_inst_vld_raw   ),
  .ipack_id_pred_h0_create    (ipack_id_pred_h0_create   ),
  .ipack_id_pred_h0_vld       (ipack_id_pred_h0_vld      ),
  .ipack_id_pred_inst0        (ipack_id_pred_inst0       ),
  .ipack_id_pred_inst0_vld    (ipack_id_pred_inst0_vld   ),
  .ipack_id_pred_inst1        (ipack_id_pred_inst1       ),
  .ipack_id_pred_inst1_vld    (ipack_id_pred_inst1_vld   ),
  .ipack_id_pred_inst_full    (ipack_id_pred_inst_full   ),
  .ipack_id_pred_new_vld      (ipack_id_pred_new_vld     ),
  .ipack_id_pred_unalign      (ipack_id_pred_unalign     ),
  .ipack_top_entry0_vld       (ipack_top_entry0_vld      ),
  .ipack_top_entry1_vld       (ipack_top_entry1_vld      ),
  .ipack_top_entry2_vld       (ipack_top_entry2_vld      ),
  .iu_ifu_ex1_tar_pc_vld      (iu_ifu_ex1_tar_pc_vld     ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      ),
  .pcgen_ipack_chgflw_vld     (pcgen_ipack_chgflw_vld    ),
  .rtu_ifu_chgflow_vld        (rtu_ifu_chgflow_vld       ),
  .rtu_ifu_xx_fe_flush        (rtu_ifu_xx_fe_flush       ),
  .rtu_yy_xx_tail_int_vld     (rtu_yy_xx_tail_int_vld    ),
  .vec_ipack_inst_mask        (vec_ipack_inst_mask       )
);



// &Instance("pa_ifu_ibuf"); @41
pa_ifu_ibuf  x_pa_ifu_ibuf (
  .cp0_yy_clk_en            (cp0_yy_clk_en           ),
  .cpurst_b                 (cpurst_b                ),
  .ctrl_ibuf_pop_en         (ctrl_ibuf_pop_en        ),
  .forever_cpuclk           (forever_cpuclk          ),
  .had_ifu_ir               (had_ifu_ir              ),
  .had_ifu_ir_vld           (had_ifu_ir_vld          ),
  .ibuf_ctrl_inst_fetch     (ibuf_ctrl_inst_fetch    ),
  .ibuf_id_pred_hungry      (ibuf_id_pred_hungry     ),
  .ibuf_ipack_stall         (ibuf_ipack_stall        ),
  .ibuf_top_id_stall        (ibuf_top_id_stall       ),
  .ibuf_top_vld_num         (ibuf_top_vld_num        ),
  .id_pred_ibuf_br_taken0   (id_pred_ibuf_br_taken0  ),
  .id_pred_ibuf_br_taken1   (id_pred_ibuf_br_taken1  ),
  .id_pred_ibuf_chgflw_vld0 (id_pred_ibuf_chgflw_vld0),
  .id_pred_ibuf_inst_bkpt0  (id_pred_ibuf_inst_bkpt0 ),
  .id_pred_ibuf_inst_bkpt1  (id_pred_ibuf_inst_bkpt1 ),
  .idu_ifu_id_stall         (idu_ifu_id_stall        ),
  .idu_ifu_tail_vld         (idu_ifu_tail_vld        ),
  .ifetch_ibuf_idle         (ifetch_ibuf_idle        ),
  .ifetch_xx_not_busy       (ifetch_xx_not_busy      ),
  .ifu_idu_id_expt_vld      (ifu_idu_id_expt_vld     ),
  .ifu_idu_id_inst          (ifu_idu_id_inst         ),
  .ifu_idu_id_inst_bkpt     (ifu_idu_id_inst_bkpt    ),
  .ifu_idu_id_inst_vld      (ifu_idu_id_inst_vld     ),
  .ifu_idu_id_pred_taken    (ifu_idu_id_pred_taken   ),
  .ipack_ibuf_acc_err       (ipack_ibuf_acc_err      ),
  .ipack_ibuf_first_16      (ipack_ibuf_first_16     ),
  .ipack_ibuf_inst          (ipack_ibuf_inst         ),
  .ipack_ibuf_inst_all      (ipack_ibuf_inst_all     ),
  .ipack_ibuf_inst_empty    (ipack_ibuf_inst_empty   ),
  .ipack_ibuf_inst_full     (ipack_ibuf_inst_full    ),
  .ipack_ibuf_inst_one      (ipack_ibuf_inst_one     ),
  .ipack_ibuf_inst_two      (ipack_ibuf_inst_two     ),
  .ipack_ibuf_inst_vld      (ipack_ibuf_inst_vld     ),
  .ipack_ibuf_inst_vld_raw  (ipack_ibuf_inst_vld_raw ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .pcgen_ibuf_chgflw_vld    (pcgen_ibuf_chgflw_vld   ),
  .rtu_ifu_xx_fe_flush      (rtu_ifu_xx_fe_flush     ),
  .rtu_yy_xx_dbgon          (rtu_yy_xx_dbgon         ),
  .rtu_yy_xx_tail_int_vld   (rtu_yy_xx_tail_int_vld  ),
  .vec_ibuf_warm_up         (vec_ibuf_warm_up        )
);



// &Instance("pa_ifu_ctrl"); @44
pa_ifu_ctrl  x_pa_ifu_ctrl (
  .cp0_ifu_in_lpmd        (cp0_ifu_in_lpmd       ),
  .cp0_ifu_lpmd_req       (cp0_ifu_lpmd_req      ),
  .cp0_ifu_srst_mask      (cp0_ifu_srst_mask     ),
  .cp0_ifu_srst_req       (cp0_ifu_srst_req      ),
  .ctrl_ibuf_pop_en       (ctrl_ibuf_pop_en      ),
  .ctrl_ifetch_req_abort  (ctrl_ifetch_req_abort ),
  .ctrl_ifetch_req_vld    (ctrl_ifetch_req_vld   ),
  .ctrl_pcgen_inst_vld    (ctrl_pcgen_inst_vld   ),
  .ctrl_pcgen_pipedown    (ctrl_pcgen_pipedown   ),
  .ibuf_ctrl_inst_fetch   (ibuf_ctrl_inst_fetch  ),
  .id_pred_ctrl_stall     (id_pred_ctrl_stall    ),
  .idu_ifu_id_stall       (idu_ifu_id_stall      ),
  .idu_ifu_tail_vld       (idu_ifu_tail_vld      ),
  .ifetch_ctrl_inst_vld   (ifetch_ctrl_inst_vld  ),
  .pcgen_ctrl_chgflw_vld  (pcgen_ctrl_chgflw_vld ),
  .rtu_ifu_lockup_mask    (rtu_ifu_lockup_mask   ),
  .rtu_ifu_lockup_req     (rtu_ifu_lockup_req    ),
  .rtu_ifu_xx_fe_flush    (rtu_ifu_xx_fe_flush   ),
  .rtu_yy_xx_dbgon        (rtu_yy_xx_dbgon       ),
  .rtu_yy_xx_tail_int_vld (rtu_yy_xx_tail_int_vld),
  .sysio_xx_halt_req      (sysio_xx_halt_req     ),
  .vec_ctrl_reset_mask    (vec_ctrl_reset_mask   ),
  .vec_ctrl_seq_mask      (vec_ctrl_seq_mask     )
);



// &Instance("pa_ifu_id_pred"); @47
pa_ifu_id_pred  x_pa_ifu_id_pred (
  .bht_top_cur_st            (bht_top_cur_st           ),
  .cp0_ifu_bht_en            (cp0_ifu_bht_en           ),
  .cp0_ifu_bht_inv           (cp0_ifu_bht_inv          ),
  .cp0_ifu_ras_en            (cp0_ifu_ras_en           ),
  .cp0_yy_clk_en             (cp0_yy_clk_en            ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_yy_xx_bkpta_base      (had_yy_xx_bkpta_base     ),
  .had_yy_xx_bkpta_mask      (had_yy_xx_bkpta_mask     ),
  .had_yy_xx_bkpta_rc        (had_yy_xx_bkpta_rc       ),
  .had_yy_xx_bkptb_base      (had_yy_xx_bkptb_base     ),
  .had_yy_xx_bkptb_mask      (had_yy_xx_bkptb_mask     ),
  .had_yy_xx_bkptb_rc        (had_yy_xx_bkptb_rc       ),
  .had_yy_xx_bkptc_base      (had_yy_xx_bkptc_base     ),
  .had_yy_xx_bkptc_mask      (had_yy_xx_bkptc_mask     ),
  .had_yy_xx_bkptd_base      (had_yy_xx_bkptd_base     ),
  .had_yy_xx_bkptd_mask      (had_yy_xx_bkptd_mask     ),
  .had_yy_xx_bkpte_base      (had_yy_xx_bkpte_base     ),
  .had_yy_xx_bkpte_mask      (had_yy_xx_bkpte_mask     ),
  .ibuf_id_pred_hungry       (ibuf_id_pred_hungry      ),
  .ibuf_ipack_stall          (ibuf_ipack_stall         ),
  .id_pred_ctrl_stall        (id_pred_ctrl_stall       ),
  .id_pred_ibuf_br_taken0    (id_pred_ibuf_br_taken0   ),
  .id_pred_ibuf_br_taken1    (id_pred_ibuf_br_taken1   ),
  .id_pred_ibuf_chgflw_vld0  (id_pred_ibuf_chgflw_vld0 ),
  .id_pred_ibuf_inst_bkpt0   (id_pred_ibuf_inst_bkpt0  ),
  .id_pred_ibuf_inst_bkpt1   (id_pred_ibuf_inst_bkpt1  ),
  .id_pred_ipack_chgflw_vld0 (id_pred_ipack_chgflw_vld0),
  .id_pred_ipack_delay_stall (id_pred_ipack_delay_stall),
  .id_pred_ipack_mask        (id_pred_ipack_mask       ),
  .id_pred_ipack_ret_stall   (id_pred_ipack_ret_stall  ),
  .id_pred_pcgen_chgflw_pc   (id_pred_pcgen_chgflw_pc  ),
  .id_pred_pcgen_chgflw_vld  (id_pred_pcgen_chgflw_vld ),
  .id_pred_pcgen_inst_vld    (id_pred_pcgen_inst_vld   ),
  .idu_ifu_x1                (idu_ifu_x1               ),
  .ifu_cp0_bht_inv_done      (ifu_cp0_bht_inv_done     ),
  .ifu_iu_ex1_pc_pred        (ifu_iu_ex1_pc_pred       ),
  .ipack_id_pred_h0_create   (ipack_id_pred_h0_create  ),
  .ipack_id_pred_h0_vld      (ipack_id_pred_h0_vld     ),
  .ipack_id_pred_inst0       (ipack_id_pred_inst0      ),
  .ipack_id_pred_inst0_vld   (ipack_id_pred_inst0_vld  ),
  .ipack_id_pred_inst1       (ipack_id_pred_inst1      ),
  .ipack_id_pred_inst1_vld   (ipack_id_pred_inst1_vld  ),
  .ipack_id_pred_inst_full   (ipack_id_pred_inst_full  ),
  .ipack_id_pred_new_vld     (ipack_id_pred_new_vld    ),
  .ipack_id_pred_unalign     (ipack_id_pred_unalign    ),
  .iu_ifu_bht_cur_pc         (iu_ifu_bht_cur_pc        ),
  .iu_ifu_bht_mispred        (iu_ifu_bht_mispred       ),
  .iu_ifu_bht_pred           (iu_ifu_bht_pred          ),
  .iu_ifu_bht_taken          (iu_ifu_bht_taken         ),
  .iu_ifu_br_vld             (iu_ifu_br_vld            ),
  .iu_ifu_br_vld_gate        (iu_ifu_br_vld_gate       ),
  .iu_ifu_link_vld           (iu_ifu_link_vld          ),
  .iu_ifu_link_vld_gate      (iu_ifu_link_vld_gate     ),
  .iu_ifu_pc_mispred         (iu_ifu_pc_mispred        ),
  .iu_ifu_ret_vld            (iu_ifu_ret_vld           ),
  .iu_ifu_ret_vld_gate       (iu_ifu_ret_vld_gate      ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .pcgen_id_pred_btb_tar_pc  (pcgen_id_pred_btb_tar_pc ),
  .pcgen_id_pred_btb_tar_vld (pcgen_id_pred_btb_tar_vld),
  .pcgen_id_pred_flush_vld   (pcgen_id_pred_flush_vld  ),
  .pcgen_id_pred_idpc        (pcgen_id_pred_idpc       ),
  .pcgen_id_pred_ifpc        (pcgen_id_pred_ifpc       ),
  .pred_top_delay_chgflw     (pred_top_delay_chgflw    ),
  .pred_top_ras_st           (pred_top_ras_st          ),
  .rtu_ifu_xx_fe_flush       (rtu_ifu_xx_fe_flush      ),
  .rtu_ifu_xx_fe_flush_gate  (rtu_ifu_xx_fe_flush_gate )
);



// &Instance("pa_ifu_vec"); @50
pa_ifu_vec  x_pa_ifu_vec (
  .cp0_ifu_mtvec           (cp0_ifu_mtvec          ),
  .cp0_ifu_rst_inv_done    (cp0_ifu_rst_inv_done   ),
  .cp0_yy_clk_en           (cp0_yy_clk_en          ),
  .cpurst_b                (cpurst_b               ),
  .forever_cpuclk          (forever_cpuclk         ),
  .ifetch_vec_acc_err      (ifetch_vec_acc_err     ),
  .ifetch_vec_cmplt        (ifetch_vec_cmplt       ),
  .ifetch_vec_grant        (ifetch_vec_grant       ),
  .ifetch_vec_idle         (ifetch_vec_idle        ),
  .ifu_cp0_rst_inv_req     (ifu_cp0_rst_inv_req    ),
  .ifu_cp0_vec_err         (ifu_cp0_vec_err        ),
  .ifu_cp0_vec_succeed     (ifu_cp0_vec_succeed    ),
  .ifu_idu_id_warm_up      (ifu_idu_id_warm_up     ),
  .ifu_iu_reset_vld        (ifu_iu_reset_vld       ),
  .ifu_rtu_cpu_in_init     (ifu_rtu_cpu_in_init    ),
  .ifu_xx_warm_up_clk      (ifu_xx_warm_up_clk     ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   ),
  .rtu_ifu_lockup_expt_vld (rtu_ifu_lockup_expt_vld),
  .rtu_yy_xx_dbgon         (rtu_yy_xx_dbgon        ),
  .rtu_yy_xx_expt_int      (rtu_yy_xx_expt_int     ),
  .rtu_yy_xx_expt_vld      (rtu_yy_xx_expt_vld     ),
  .rtu_yy_xx_expt_vld_gate (rtu_yy_xx_expt_vld_gate),
  .rtu_yy_xx_int_hv        (rtu_yy_xx_int_hv       ),
  .rtu_yy_xx_tail_int_vld  (rtu_yy_xx_tail_int_vld ),
  .sysio_ifu_rst_addr_done (sysio_ifu_rst_addr_done),
  .vec_ctrl_reset_mask     (vec_ctrl_reset_mask    ),
  .vec_ctrl_seq_mask       (vec_ctrl_seq_mask      ),
  .vec_ibuf_warm_up        (vec_ibuf_warm_up       ),
  .vec_ifetch_data_fetch   (vec_ifetch_data_fetch  ),
  .vec_ipack_inst_mask     (vec_ipack_inst_mask    ),
  .vec_pcgen_chgflw_vld    (vec_pcgen_chgflw_vld   ),
  .vec_pcgen_inst_fetch    (vec_pcgen_inst_fetch   ),
  .vec_pcgen_iu_chgflw     (vec_pcgen_iu_chgflw    ),
  .vec_pcgen_pc_flop       (vec_pcgen_pc_flop      ),
  .vec_pcgen_rst_vld       (vec_pcgen_rst_vld      ),
  .vec_pcgen_tar_pc        (vec_pcgen_tar_pc       ),
  .vec_top_cur_st          (vec_top_cur_st         )
);


assign top_debug_info[26:0] = {
                              bht_top_cur_st[1:0],
                              pred_top_ras_st,
                              pred_top_delay_chgflw,
                              ibuf_top_id_stall,
                              ibuf_top_vld_num[2:0],
                              ipack_top_entry2_vld,
                              ipack_top_entry1_vld,
                              ipack_top_entry0_vld,
                              icache_top_uc_st,
                              icache_top_abort,
                              icache_top_ref_st[1:0],
                              icache_top_rd_vld,
                              ifetch_top_abt_st[1:0],
                              ifetch_top_cur_st[2:0],
                              pcgen_top_btb_tar_vld,
                              pcgen_top_buf_chgflw,
                              vec_top_cur_st[3:0]
                              };
// &Force("nonport", "top_debug_info"); @74































































































































































// &ModuleEnd; @235
endmodule
























// &ModuleBeg; @23
module pa_ifu_vec(
  cp0_ifu_mtvec,
  cp0_ifu_rst_inv_done,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  ifetch_vec_acc_err,
  ifetch_vec_cmplt,
  ifetch_vec_grant,
  ifetch_vec_idle,
  ifu_cp0_rst_inv_req,
  ifu_cp0_vec_err,
  ifu_cp0_vec_succeed,
  ifu_idu_id_warm_up,
  ifu_iu_reset_vld,
  ifu_rtu_cpu_in_init,
  ifu_xx_warm_up_clk,
  pad_yy_gate_clk_en_b,
  rtu_ifu_lockup_expt_vld,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_tail_int_vld,
  sysio_ifu_rst_addr_done,
  vec_ctrl_reset_mask,
  vec_ctrl_seq_mask,
  vec_ibuf_warm_up,
  vec_ifetch_data_fetch,
  vec_ipack_inst_mask,
  vec_pcgen_chgflw_vld,
  vec_pcgen_inst_fetch,
  vec_pcgen_iu_chgflw,
  vec_pcgen_pc_flop,
  vec_pcgen_rst_vld,
  vec_pcgen_tar_pc,
  vec_top_cur_st
);

// &Ports; @24
input   [31:0]  cp0_ifu_mtvec;
input           cp0_ifu_rst_inv_done;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           ifetch_vec_acc_err;
input           ifetch_vec_cmplt;
input           ifetch_vec_grant;
input           ifetch_vec_idle;
input           pad_yy_gate_clk_en_b;
input           rtu_ifu_lockup_expt_vld;
input           rtu_yy_xx_dbgon;
input           rtu_yy_xx_expt_int;
input           rtu_yy_xx_expt_vld;
input           rtu_yy_xx_expt_vld_gate;
input           rtu_yy_xx_int_hv;
input           rtu_yy_xx_tail_int_vld;
input           sysio_ifu_rst_addr_done;
output          ifu_cp0_rst_inv_req;
output          ifu_cp0_vec_err;
output          ifu_cp0_vec_succeed;
output          ifu_idu_id_warm_up;
output          ifu_iu_reset_vld;
output          ifu_rtu_cpu_in_init;
output          ifu_xx_warm_up_clk;
output          vec_ctrl_reset_mask;
output          vec_ctrl_seq_mask;
output          vec_ibuf_warm_up;
output          vec_ifetch_data_fetch;
output          vec_ipack_inst_mask;
output          vec_pcgen_chgflw_vld;
output          vec_pcgen_inst_fetch;
output          vec_pcgen_iu_chgflw;
output          vec_pcgen_pc_flop;
output          vec_pcgen_rst_vld;
output  [31:0]  vec_pcgen_tar_pc;
output  [3 :0]  vec_top_cur_st;

// &Regs; @25
reg     [3 :0]  vec_cur_state;
reg     [3 :0]  vec_next_state;
reg             vector_rst_inv_ff;
reg             vector_warmup_ff;
reg     [2 :0]  warm_up_cnt;

// &Wires; @26
wire    [31:0]  cp0_ifu_mtvec;
wire            cp0_ifu_rst_inv_done;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire            ifetch_vec_acc_err;
wire            ifetch_vec_cmplt;
wire            ifetch_vec_grant;
wire            ifetch_vec_idle;
wire            ifu_cp0_rst_inv_req;
wire            ifu_cp0_vec_err;
wire            ifu_cp0_vec_succeed;
wire            ifu_idu_id_warm_up;
wire            ifu_iu_reset_vld;
wire            ifu_rtu_cpu_in_init;
wire            ifu_xx_warm_up_clk;
wire            pad_yy_gate_clk_en_b;
wire            rtu_ifu_lockup_expt_vld;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_tail_int_vld;
wire            sysio_ifu_rst_addr_done;
wire    [31:0]  vec_chgflw_pc;
wire            vec_chgflw_vld;
wire            vec_ctrl_reset_mask;
wire            vec_ctrl_seq_mask;
wire            vec_data_fetch;
wire            vec_err_occur;
wire            vec_ibuf_warm_up;
wire            vec_ifetch_data_fetch;
wire            vec_inst_fetch;
wire            vec_ipack_inst_mask;
wire            vec_pc_flop;
wire            vec_pcgen_chgflw_vld;
wire            vec_pcgen_inst_fetch;
wire            vec_pcgen_iu_chgflw;
wire            vec_pcgen_pc_flop;
wire            vec_pcgen_rst_vld;
wire    [31:0]  vec_pcgen_tar_pc;
wire            vec_rst_inv_req;
wire            vec_seq_mask;
wire            vec_sm_clk;
wire            vec_sm_clk_en;
wire            vec_sm_idle;
wire            vec_sm_pcload;
wire            vec_sm_reset;
wire            vec_sm_vec_cmpt;
wire            vec_sm_vec_err;
wire            vec_sm_vec_pcg;
wire            vec_sm_vec_prep;
wire            vec_sm_vec_req;
wire            vec_sm_vec_wfc;
wire            vec_sm_warm_up;
wire    [3 :0]  vec_top_cur_st;
wire            vec_warm_up_clk_en;
wire            vec_warmup_req;
wire            warm_up_cnt_done;















assign vec_sm_clk_en = rtu_yy_xx_expt_vld_gate
                    || !vec_sm_idle
                    || rtu_yy_xx_dbgon
                    || vector_rst_inv_ff
                    || vector_warmup_ff;

// &Instance("gated_clk_cell","x_ifu_vec_sm_clk"); @47
gated_clk_cell  x_ifu_vec_sm_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vec_sm_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (vec_sm_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( .clk_in      (forever_cpuclk), @48
//           .clk_out     (vec_sm_clk), @49
//           .external_en (1'b0), @50
//           .global_en   (cp0_yy_clk_en), @51
//           .local_en    (vec_sm_clk_en), @52
//           .module_en   (1'b0) @53
//         ); @54

// &Force("output", "ifu_xx_warm_up_clk"); @56
assign vec_warm_up_clk_en = vector_warmup_ff || vec_sm_warm_up;
// &Instance("gated_clk_cell","x_ifu_warm_up_clk"); @58
gated_clk_cell  x_ifu_warm_up_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ifu_xx_warm_up_clk  ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (vec_warm_up_clk_en  ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect( .clk_in      (forever_cpuclk), @59
//           .clk_out     (ifu_xx_warm_up_clk), @60
//           .external_en (1'b0), @61
//           .global_en   (cp0_yy_clk_en), @62
//           .local_en    (vec_warm_up_clk_en), @63
//           .module_en   (1'b0) @64
//         ); @65









parameter RESET    = 4'b0001;
parameter IDLE     = 4'b0000;
parameter PC_LOAD  = 4'b0010;
parameter VEC_LOAD = 4'b0011;
parameter VEC_PREP = 4'b0100;
parameter VEC_PCG  = 4'b1100;
parameter VEC_REQ  = 4'b0101;
parameter VEC_WFC  = 4'b0110;
parameter VEC_CMPT = 4'b0111;
parameter VEC_ERR  = 4'b1000;
parameter WARM_UP  = 4'b1001;













always @(posedge vec_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    vec_cur_state[3:0] <= RESET;
  else if(rtu_yy_xx_dbgon)
    vec_cur_state[3:0] <= IDLE;
  else
    vec_cur_state[3:0] <= vec_next_state[3:0];
end

// &CombBeg; @109
always @( rtu_yy_xx_tail_int_vld
       or rtu_yy_xx_expt_vld
       or warm_up_cnt_done
       or sysio_ifu_rst_addr_done
       or ifetch_vec_grant
       or vec_cur_state
       or rtu_yy_xx_int_hv
       or rtu_ifu_lockup_expt_vld
       or cp0_ifu_rst_inv_done
       or rtu_yy_xx_expt_int
       or ifetch_vec_acc_err
       or ifetch_vec_idle
       or ifetch_vec_cmplt)
begin
case(vec_cur_state)
  RESET:
    if(cp0_ifu_rst_inv_done && sysio_ifu_rst_addr_done)
      vec_next_state = WARM_UP;
    else
      vec_next_state = RESET;
  WARM_UP:
    if(warm_up_cnt_done)
      vec_next_state = IDLE;
    else
      vec_next_state = WARM_UP;
  IDLE:
    if(rtu_yy_xx_expt_vld && !rtu_ifu_lockup_expt_vld)
      if(rtu_yy_xx_expt_int && rtu_yy_xx_int_hv)
        vec_next_state = VEC_PREP;
      else
        vec_next_state = PC_LOAD;
    else if(rtu_yy_xx_tail_int_vld)
      if(rtu_yy_xx_int_hv)
        vec_next_state = VEC_PREP;
      else
        vec_next_state = PC_LOAD;
    else
      vec_next_state = IDLE;
  PC_LOAD:
    vec_next_state = IDLE;
  VEC_PREP:
    if(ifetch_vec_idle)
      vec_next_state = VEC_PCG;
    else
      vec_next_state = VEC_PREP;
  VEC_PCG:
    vec_next_state = VEC_REQ;
  VEC_REQ:
    if(ifetch_vec_grant)
      vec_next_state = VEC_WFC;
    else
      vec_next_state = VEC_REQ;
  VEC_WFC:
    if(ifetch_vec_cmplt)
      if(ifetch_vec_acc_err)
        vec_next_state = VEC_ERR;
      else
        vec_next_state = VEC_CMPT;
    else
      vec_next_state = VEC_WFC;
  VEC_CMPT:
    vec_next_state = IDLE;
  VEC_ERR:
    vec_next_state = IDLE;
  default:
    vec_next_state = IDLE;
endcase
// &CombEnd; @163
end


assign vec_sm_reset    = vec_cur_state == RESET;
assign vec_sm_warm_up  = vec_cur_state == WARM_UP;
assign vec_sm_idle     = vec_cur_state == IDLE;
assign vec_sm_pcload   = vec_cur_state == PC_LOAD;
assign vec_sm_vec_prep = vec_cur_state == VEC_PREP;
assign vec_sm_vec_pcg  = vec_cur_state == VEC_PCG;
assign vec_sm_vec_req  = vec_cur_state == VEC_REQ;
assign vec_sm_vec_wfc  = vec_cur_state == VEC_WFC;
assign vec_sm_vec_cmpt = vec_cur_state == VEC_CMPT;
assign vec_sm_vec_err  = vec_cur_state == VEC_ERR;





always @(posedge vec_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    vector_rst_inv_ff <= 1'b0;
  else
    vector_rst_inv_ff <= vec_sm_reset;
end

assign vec_rst_inv_req = vec_sm_reset && !vector_rst_inv_ff;

always @(posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    warm_up_cnt[2:0] <= 3'b0;
  else if(vec_sm_warm_up)
    warm_up_cnt[2:0] <= warm_up_cnt[2:0] + 3'b1;
  else
    warm_up_cnt[2:0] <= warm_up_cnt[2:0];
end

assign warm_up_cnt_done = warm_up_cnt[2:0] == 3'b111;

always @(posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    vector_warmup_ff <= 1'b0;
  else
    vector_warmup_ff <= vec_sm_warm_up;
end

assign vec_warmup_req = vec_sm_warm_up && !vector_warmup_ff;





assign vec_chgflw_vld      = vec_sm_pcload;
assign vec_chgflw_pc[31:0] = cp0_ifu_mtvec[31:0];














assign vec_seq_mask   = vec_sm_vec_req || vec_sm_vec_wfc || vec_sm_vec_prep || vec_sm_vec_pcg;


assign vec_data_fetch = vec_sm_vec_req;


assign vec_pc_flop    = vec_sm_vec_wfc && ifetch_vec_cmplt
                     && !ifetch_vec_acc_err;


assign vec_inst_fetch = vec_sm_vec_cmpt;


assign vec_err_occur  = vec_sm_vec_wfc && ifetch_vec_cmplt
                     && ifetch_vec_acc_err;






assign vec_pcgen_iu_chgflw    = vec_chgflw_vld || vec_inst_fetch
                             || vec_sm_vec_err;

assign vec_pcgen_chgflw_vld   = vec_chgflw_vld || vec_sm_vec_pcg
                             || vec_sm_vec_err;

assign vec_pcgen_inst_fetch   = vec_inst_fetch;
assign vec_pcgen_pc_flop      = vec_pc_flop;
assign vec_pcgen_rst_vld      = vec_sm_reset;
assign vec_pcgen_tar_pc[31:0] = vec_chgflw_pc[31:0];


assign vec_ctrl_reset_mask    = vec_sm_reset || vec_sm_warm_up;
assign vec_ctrl_seq_mask      = vec_seq_mask;


assign vec_ifetch_data_fetch  = vec_data_fetch;


assign vec_ibuf_warm_up       = vec_warmup_req;


assign vec_ipack_inst_mask    = vec_seq_mask;


assign vec_top_cur_st[3:0]    = vec_cur_state[3:0];


assign ifu_idu_id_warm_up     = vec_warmup_req;


assign ifu_iu_reset_vld       = vec_sm_reset;


assign ifu_cp0_rst_inv_req    = vec_rst_inv_req;


assign ifu_rtu_cpu_in_init    = vec_sm_reset || vec_sm_warm_up;

assign ifu_cp0_vec_succeed       = vec_pc_flop;
assign ifu_cp0_vec_err           = vec_err_occur;


// &ModuleEnd; @302
endmodule
























// &ModuleBeg; @23
module pa_iu_addr_gen(
  ag_bju_pc,
  idu_iu_ex1_ag_imm,
  idu_iu_ex1_bju_sel,
  idu_iu_ex1_bju_use_pc,
  idu_iu_ex1_src0,
  idu_iu_ex1_src0_reg,
  idu_iu_ex1_src1,
  iu_ex1_cur_pc,
  iu_idu_ex1_src1_update_value,
  iu_rtu_ex1_lsu_wb_data,
  iu_rtu_ex1_lsu_wb_preg,
  iu_rtu_ex1_lsu_wb_vld,
  lsu_iu_ex1_base_wb,
  lsu_iu_ex1_src1_sel
);

// &Ports; @24
input   [31:0]  idu_iu_ex1_ag_imm;
input           idu_iu_ex1_bju_sel;
input           idu_iu_ex1_bju_use_pc;
input   [31:0]  idu_iu_ex1_src0;
input   [5 :0]  idu_iu_ex1_src0_reg;
input   [31:0]  idu_iu_ex1_src1;
input   [31:0]  iu_ex1_cur_pc;
input           lsu_iu_ex1_base_wb;
input           lsu_iu_ex1_src1_sel;
output  [31:0]  ag_bju_pc;
output  [31:0]  iu_idu_ex1_src1_update_value;
output  [31:0]  iu_rtu_ex1_lsu_wb_data;
output  [5 :0]  iu_rtu_ex1_lsu_wb_preg;
output          iu_rtu_ex1_lsu_wb_vld;

// &Regs; @25

// &Wires; @26
wire    [31:0]  ag_adder_res;
wire    [31:0]  ag_adder_rs1;
wire    [31:0]  ag_adder_rs1_raw;
wire    [31:0]  ag_adder_rs2;
wire    [31:0]  ag_bju_pc;
wire            ag_rs1_use_pc;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire            idu_iu_ex1_bju_sel;
wire            idu_iu_ex1_bju_use_pc;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  iu_ex1_cur_pc;
wire    [31:0]  iu_idu_ex1_src1_update_value;
wire    [31:0]  iu_rtu_ex1_lsu_wb_data;
wire    [5 :0]  iu_rtu_ex1_lsu_wb_preg;
wire            iu_rtu_ex1_lsu_wb_vld;
wire            lsu_iu_ex1_base_wb;
wire            lsu_iu_ex1_src1_sel;















assign ag_adder_rs1_raw[31:0]  = {32{idu_iu_ex1_bju_sel || lsu_iu_ex1_base_wb}} & idu_iu_ex1_src0[31:0];


assign ag_rs1_use_pc           = idu_iu_ex1_bju_use_pc;
assign ag_adder_rs1[31:0]      = ag_rs1_use_pc ? {iu_ex1_cur_pc[31:1], 1'b0}
                                               : ag_adder_rs1_raw[31:0];
// &Force("bus", "iu_ex1_cur_pc", 31, 0); @47



assign ag_adder_rs2[31:0]      = {32{idu_iu_ex1_bju_sel || lsu_iu_ex1_base_wb}} & idu_iu_ex1_ag_imm[31:0];


assign ag_adder_res[31:0] = ag_adder_rs1[31:0] + ag_adder_rs2[31:0];


assign ag_bju_pc[31:0]       = {ag_adder_res[31:1], 1'b0};

assign iu_idu_ex1_src1_update_value[31:0] = ag_adder_res[31:0];


assign iu_rtu_ex1_lsu_wb_vld = lsu_iu_ex1_base_wb;
assign iu_rtu_ex1_lsu_wb_preg[5:0] = {1'b0, idu_iu_ex1_src0_reg[4:0]};
// &Force("bus", "idu_iu_ex1_src0_reg", 5, 0); @65
assign iu_rtu_ex1_lsu_wb_data[31:0] = lsu_iu_ex1_src1_sel ? idu_iu_ex1_src1[31:0]
                                                       : ag_adder_res[31:0];
// &Force("input", "lsu_iu_ex1_src1_sel"); @69


// &ModuleEnd; @76
endmodule


























// &ModuleBeg; @25
module pa_iu_alu(
  idu_iu_ex1_ag_imm,
  idu_iu_ex1_alu_sel,
  idu_iu_ex1_func,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_src0,
  idu_iu_ex1_src1,
  idu_iu_ex1_src2,
  idu_iu_ex1_sub_func,
  iu_rtu_ex1_alu_cmplt,
  iu_rtu_ex1_alu_data
);

// &Ports; @26
input   [31:0]  idu_iu_ex1_ag_imm;
input           idu_iu_ex1_alu_sel;
input   [4 :0]  idu_iu_ex1_func;
input           idu_iu_ex1_inst_vld;
input   [31:0]  idu_iu_ex1_src0;
input   [31:0]  idu_iu_ex1_src1;
input   [31:0]  idu_iu_ex1_src2;
input   [4 :0]  idu_iu_ex1_sub_func;
output          iu_rtu_ex1_alu_cmplt;
output  [31:0]  iu_rtu_ex1_alu_data;

// &Regs; @27
reg     [5 :0]  alu_bitop_ff1_rst;
reg             alu_bitop_tst_bit;
reg             alu_shifter_ext_sign;
reg     [31:0]  alu_shifter_extu_mask;

// &Wires; @28
wire    [31:0]  alu_adder_add_res;
wire            alu_adder_c_in;
wire            alu_adder_c_out_raw;
wire    [31:0]  alu_adder_comp_res;
wire            alu_adder_comp_rslt;
wire    [31:0]  alu_adder_minmax_res;
wire            alu_adder_oper_add;
wire            alu_adder_oper_addsl;
wire            alu_adder_oper_comp;
wire            alu_adder_oper_max;
wire            alu_adder_oper_minmax;
wire            alu_adder_oper_signed;
wire    [31:0]  alu_adder_res;
wire    [31:0]  alu_adder_res_raw;
wire            alu_adder_res_signed_lt;
wire            alu_adder_res_unsigned_lt;
wire    [31:0]  alu_adder_rs1;
wire    [31:0]  alu_adder_rs2;
wire    [31:0]  alu_adder_rs2_raw;
wire    [31:0]  alu_adder_rs2_shift;
wire            alu_adder_sel;
wire    [31:0]  alu_adder_slt_res;
wire    [4 :0]  alu_adder_sub_func;
wire            alu_bitop_ff01;
wire    [31:0]  alu_bitop_ff01_rst;
wire    [31:0]  alu_bitop_ff1_rs;
wire            alu_bitop_rev;
wire    [31:0]  alu_bitop_rev_rs;
wire    [31:0]  alu_bitop_rev_rst;
wire    [31:0]  alu_bitop_rs1;
wire    [31:0]  alu_bitop_rs2;
wire    [31:0]  alu_bitop_rst;
wire            alu_bitop_sel;
wire    [4 :0]  alu_bitop_sub_func;
wire            alu_bitop_tst;
wire    [4 :0]  alu_bitop_tst_imm;
wire    [31:0]  alu_bitop_tst_rs;
wire    [31:0]  alu_bitop_tst_rst;
wire            alu_bitop_tstnbz;
wire            alu_bitop_tstnbz_byte0;
wire            alu_bitop_tstnbz_byte1;
wire            alu_bitop_tstnbz_byte2;
wire            alu_bitop_tstnbz_byte3;
wire    [31:0]  alu_bitop_tstnbz_rs;
wire    [31:0]  alu_bitop_tstnbz_rst;
wire    [31:0]  alu_ext_and_mask;
wire            alu_ext_and_sel_mask;
wire    [31:0]  alu_ext_or_mask;
wire            alu_ext_or_sel_mask;
wire    [31:0]  alu_logic_and_res;
wire    [31:0]  alu_logic_or_res;
wire    [31:0]  alu_logic_res;
wire    [31:0]  alu_logic_rs1;
wire    [31:0]  alu_logic_rs2;
wire    [31:0]  alu_logic_rs2_raw;
wire            alu_logic_sel;
wire    [4 :0]  alu_logic_sub_func;
wire    [31:0]  alu_logic_xor_res;
wire            alu_minmax_sel_rs1;
wire    [31:0]  alu_pack_encry_rst;
wire    [31:0]  alu_pack_mov_rst;
wire            alu_pack_pack_inst;
wire    [31:0]  alu_pack_rs1;
wire    [31:0]  alu_pack_rs2;
wire    [31:0]  alu_pack_rs3;
wire    [31:0]  alu_pack_rst;
wire            alu_pack_sel;
wire            alu_pack_sel_rs3;
wire            alu_pack_src_not_zero;
wire    [4 :0]  alu_pack_sub_func;
wire    [31:0]  alu_packh_rst;
wire    [31:0]  alu_packhl_rst;
wire    [31:0]  alu_packl_rst;
wire    [31:0]  alu_res;
wire    [4 :0]  alu_sel;
wire    [63:0]  alu_shift_res_tmp;
wire            alu_shifter_dir_right;
wire    [4 :0]  alu_shifter_ext_count;
wire    [31:0]  alu_shifter_ext_rst;
wire            alu_shifter_ext_sign_op;
wire    [31:0]  alu_shifter_high;
wire            alu_shifter_inst_ext;
wire            alu_shifter_inst_sll;
wire            alu_shifter_inst_sra;
wire            alu_shifter_inst_srri;
wire    [31:0]  alu_shifter_res;
wire    [31:0]  alu_shifter_res_raw;
wire    [31:0]  alu_shifter_res_raw_rev;
wire    [31:0]  alu_shifter_res_tmp;
wire    [31:0]  alu_shifter_rs1;
wire    [31:0]  alu_shifter_rs1_raw;
wire    [31:0]  alu_shifter_rs1_raw_rev;
wire    [9 :0]  alu_shifter_rs2;
wire            alu_shifter_sel;
wire            alu_shifter_shift_in;
wire    [4 :0]  alu_shifter_sub_func;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire            idu_iu_ex1_alu_sel;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_vld;
wire    [31:0]  idu_iu_ex1_src0;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            iu_rtu_ex1_alu_cmplt;
wire    [31:0]  iu_rtu_ex1_alu_data;


assign alu_sel[4:0]            = idu_iu_ex1_func[4:0] & {5{idu_iu_ex1_alu_sel}};




// &Force("bus", "idu_iu_ex1_ag_imm", 31, 0); @35
assign alu_adder_sel           = alu_sel[0];
assign alu_adder_rs1[31:0]     = {32{alu_adder_sel}} & idu_iu_ex1_src0[31:0];
assign alu_adder_rs2_raw[31:0] = {32{alu_adder_sel}} & idu_iu_ex1_src1[31:0];
assign alu_adder_sub_func[4:0] = { 5{alu_adder_sel}} & idu_iu_ex1_sub_func[4:0];

assign alu_adder_oper_add    = alu_adder_sub_func[0]; // sub_func[0]: 0-add,              1-sub.
assign alu_adder_oper_comp   = alu_adder_sub_func[1]; // sub_func[1]: 0-compare,          1-arithmetic.
assign alu_adder_oper_minmax = alu_adder_sub_func[2]; // sub_func[2]: 0-not min_max,      1-min_max.
assign alu_adder_oper_max    = alu_adder_sub_func[3]; // sub_func[3]: 0-min,              1-max.
assign alu_adder_oper_signed = alu_adder_sub_func[4]; // sub_func[4]: 0-unsigned compare, 1-signed compare.
assign alu_adder_oper_addsl      = alu_adder_sub_func[4] & alu_adder_sub_func[0];
assign alu_adder_rs2_shift[31:0] = alu_adder_rs2_raw[31:0] << idu_iu_ex1_ag_imm[1:0];





assign alu_adder_rs2[31:0] = alu_adder_oper_addsl ?  alu_adder_rs2_shift[31:0] :
                                                     alu_adder_oper_add ? alu_adder_rs2_raw[31:0]
                                                                        : ~alu_adder_rs2_raw[31:0];
assign alu_adder_c_in      = !alu_adder_oper_add;



assign {alu_adder_c_out_raw, alu_adder_res_raw[31:0]} =
         {1'b0, alu_adder_rs1[31:0]} + {1'b0, alu_adder_rs2[31:0]} + {32'b0, alu_adder_c_in};


assign alu_adder_res_signed_lt =
            (alu_adder_rs1[31] & alu_adder_rs2[31])
         | ((alu_adder_rs1[31] ^ alu_adder_rs2[31]) & alu_adder_res_raw[31]);
assign alu_adder_res_unsigned_lt = !alu_adder_c_out_raw;


assign alu_adder_comp_rslt     = alu_adder_oper_signed ? alu_adder_res_signed_lt
                                                       : alu_adder_res_unsigned_lt;

assign alu_adder_add_res[31:0]  = alu_adder_res_raw[31:0];
assign alu_adder_comp_res[31:0] = alu_adder_oper_minmax ? alu_adder_minmax_res[31:0]
                                                        : alu_adder_slt_res[31:0];

assign alu_adder_slt_res[31:0]  = {31'b0, alu_adder_comp_rslt};

assign alu_minmax_sel_rs1 = alu_adder_oper_max ^ alu_adder_comp_rslt;

assign alu_adder_minmax_res[31:0] = alu_minmax_sel_rs1 ? alu_adder_rs1[31:0]
                                                       : alu_adder_rs2_raw[31:0];

assign alu_adder_res[31:0] = alu_adder_oper_comp ? alu_adder_comp_res[31:0]
                                                 : alu_adder_add_res[31:0];





assign alu_shifter_sel           = alu_sel[1];
assign alu_shifter_rs1_raw[31:0] = {32{alu_shifter_sel}} & idu_iu_ex1_src0[31:0];
assign alu_shifter_rs2[9:0]      = { 10{alu_shifter_sel}} & idu_iu_ex1_src1[9:0];
assign alu_shifter_sub_func[4:0] = { 5{alu_shifter_sel}} & idu_iu_ex1_sub_func[4:0];

assign alu_shifter_inst_sll = alu_shifter_sub_func[0] && !alu_shifter_sub_func[4];

assign alu_shifter_inst_sra = alu_shifter_sub_func[2];
assign alu_shifter_inst_srri = alu_shifter_sub_func[3];
assign alu_shifter_inst_ext  = alu_shifter_sub_func[4];
// &Force("nonport", "alu_shifter_inst_sll"); @111

assign alu_shifter_dir_right = !alu_shifter_inst_sll;


assign alu_shifter_rs1_raw_rev[31:0] = {alu_shifter_rs1_raw[0],  alu_shifter_rs1_raw[1],
                                        alu_shifter_rs1_raw[2],  alu_shifter_rs1_raw[3],
                                        alu_shifter_rs1_raw[4],  alu_shifter_rs1_raw[5],
                                        alu_shifter_rs1_raw[6],  alu_shifter_rs1_raw[7],
                                        alu_shifter_rs1_raw[8],  alu_shifter_rs1_raw[9],
                                        alu_shifter_rs1_raw[10], alu_shifter_rs1_raw[11],
                                        alu_shifter_rs1_raw[12], alu_shifter_rs1_raw[13],
                                        alu_shifter_rs1_raw[14], alu_shifter_rs1_raw[15],
                                        alu_shifter_rs1_raw[16], alu_shifter_rs1_raw[17],
                                        alu_shifter_rs1_raw[18], alu_shifter_rs1_raw[19],
                                        alu_shifter_rs1_raw[20], alu_shifter_rs1_raw[21],
                                        alu_shifter_rs1_raw[22], alu_shifter_rs1_raw[23],
                                        alu_shifter_rs1_raw[24], alu_shifter_rs1_raw[25],
                                        alu_shifter_rs1_raw[26], alu_shifter_rs1_raw[27],
                                        alu_shifter_rs1_raw[28], alu_shifter_rs1_raw[29],
                                        alu_shifter_rs1_raw[30], alu_shifter_rs1_raw[31]};

assign alu_shifter_rs1[31:0] = alu_shifter_dir_right ? alu_shifter_rs1_raw[31:0]
                                                     : alu_shifter_rs1_raw_rev[31:0];

assign alu_shifter_shift_in = alu_shifter_inst_sra && alu_shifter_rs1_raw[31];




assign alu_shifter_ext_count[4:0] = alu_shifter_rs2[9:5] - alu_shifter_rs2[4:0];
// &CombBeg; @143
always @( alu_shifter_ext_count[4:0])
begin
  case(alu_shifter_ext_count[4:0])
    5'd0 :   alu_shifter_extu_mask[31:0] = 32'h00000001;
    5'd1 :   alu_shifter_extu_mask[31:0] = 32'h00000003;
    5'd2 :   alu_shifter_extu_mask[31:0] = 32'h00000007;
    5'd3 :   alu_shifter_extu_mask[31:0] = 32'h0000000f;
    5'd4 :   alu_shifter_extu_mask[31:0] = 32'h0000001f;
    5'd5 :   alu_shifter_extu_mask[31:0] = 32'h0000003f;
    5'd6 :   alu_shifter_extu_mask[31:0] = 32'h0000007f;
    5'd7 :   alu_shifter_extu_mask[31:0] = 32'h000000ff;
    5'd8 :   alu_shifter_extu_mask[31:0] = 32'h000001ff;
    5'd9 :   alu_shifter_extu_mask[31:0] = 32'h000003ff;
    5'd10:   alu_shifter_extu_mask[31:0] = 32'h000007ff;
    5'd11:   alu_shifter_extu_mask[31:0] = 32'h00000fff;
    5'd12:   alu_shifter_extu_mask[31:0] = 32'h00001fff;
    5'd13:   alu_shifter_extu_mask[31:0] = 32'h00003fff;
    5'd14:   alu_shifter_extu_mask[31:0] = 32'h00007fff;
    5'd15:   alu_shifter_extu_mask[31:0] = 32'h0000ffff;
    5'd16:   alu_shifter_extu_mask[31:0] = 32'h0001ffff;
    5'd17:   alu_shifter_extu_mask[31:0] = 32'h0003ffff;
    5'd18:   alu_shifter_extu_mask[31:0] = 32'h0007ffff;
    5'd19:   alu_shifter_extu_mask[31:0] = 32'h000fffff;
    5'd20:   alu_shifter_extu_mask[31:0] = 32'h001fffff;
    5'd21:   alu_shifter_extu_mask[31:0] = 32'h003fffff;
    5'd22:   alu_shifter_extu_mask[31:0] = 32'h007fffff;
    5'd23:   alu_shifter_extu_mask[31:0] = 32'h00ffffff;
    5'd24:   alu_shifter_extu_mask[31:0] = 32'h01ffffff;
    5'd25:   alu_shifter_extu_mask[31:0] = 32'h03ffffff;
    5'd26:   alu_shifter_extu_mask[31:0] = 32'h07ffffff;
    5'd27:   alu_shifter_extu_mask[31:0] = 32'h0fffffff;
    5'd28:   alu_shifter_extu_mask[31:0] = 32'h1fffffff;
    5'd29:   alu_shifter_extu_mask[31:0] = 32'h3fffffff;
    5'd30:   alu_shifter_extu_mask[31:0] = 32'h7fffffff;
    5'd31:   alu_shifter_extu_mask[31:0] = 32'hffffffff;
    default: alu_shifter_extu_mask[31:0] = {32{1'bx}};
  endcase
// &CombEnd; @179
end

// &CombBeg; @181
always @( alu_shifter_rs2[9:5]
       or alu_shifter_rs1_raw[8:4]
       or alu_shifter_rs1_raw[21:0]
       or alu_shifter_rs1_raw[31:22])
begin
  case(alu_shifter_rs2[9:5])
    5'd0 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[0];
    5'd1 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[1];
    5'd2 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[2];
    5'd3 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[3];
    5'd4 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[4];
    5'd5 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[5];
    5'd6 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[6];
    5'd7 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[7];
    5'd8 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[8];
    5'd9 :   alu_shifter_ext_sign = alu_shifter_rs1_raw[9];
    5'd10:   alu_shifter_ext_sign = alu_shifter_rs1_raw[10];
    5'd11:   alu_shifter_ext_sign = alu_shifter_rs1_raw[11];
    5'd12:   alu_shifter_ext_sign = alu_shifter_rs1_raw[12];
    5'd13:   alu_shifter_ext_sign = alu_shifter_rs1_raw[13];
    5'd14:   alu_shifter_ext_sign = alu_shifter_rs1_raw[14];
    5'd15:   alu_shifter_ext_sign = alu_shifter_rs1_raw[15];
    5'd16:   alu_shifter_ext_sign = alu_shifter_rs1_raw[16];
    5'd17:   alu_shifter_ext_sign = alu_shifter_rs1_raw[17];
    5'd18:   alu_shifter_ext_sign = alu_shifter_rs1_raw[18];
    5'd19:   alu_shifter_ext_sign = alu_shifter_rs1_raw[19];
    5'd20:   alu_shifter_ext_sign = alu_shifter_rs1_raw[20];
    5'd21:   alu_shifter_ext_sign = alu_shifter_rs1_raw[21];
    5'd22:   alu_shifter_ext_sign = alu_shifter_rs1_raw[22];
    5'd23:   alu_shifter_ext_sign = alu_shifter_rs1_raw[23];
    5'd24:   alu_shifter_ext_sign = alu_shifter_rs1_raw[24];
    5'd25:   alu_shifter_ext_sign = alu_shifter_rs1_raw[25];
    5'd26:   alu_shifter_ext_sign = alu_shifter_rs1_raw[26];
    5'd27:   alu_shifter_ext_sign = alu_shifter_rs1_raw[27];
    5'd28:   alu_shifter_ext_sign = alu_shifter_rs1_raw[28];
    5'd29:   alu_shifter_ext_sign = alu_shifter_rs1_raw[29];
    5'd30:   alu_shifter_ext_sign = alu_shifter_rs1_raw[30];
    5'd31:   alu_shifter_ext_sign = alu_shifter_rs1_raw[31];
    default: alu_shifter_ext_sign = 1'bx;
  endcase
// &CombEnd; @217
end

assign alu_shifter_high[31:0]    = alu_shifter_inst_srri ? alu_shifter_rs1[31:0] : {32{alu_shifter_shift_in}};
assign alu_shift_res_tmp[63:0]   = {alu_shifter_high[31:0], alu_shifter_rs1[31:0]} >> alu_shifter_rs2[4:0];
assign alu_shifter_res_raw[31:0] = alu_shift_res_tmp[31:0];

assign alu_shifter_ext_sign_op = alu_shifter_sub_func[0];
assign alu_ext_and_sel_mask    = alu_shifter_ext_sign_op && !alu_shifter_ext_sign || !alu_shifter_ext_sign_op;
assign alu_ext_or_sel_mask     = alu_shifter_ext_sign_op &&  alu_shifter_ext_sign;
assign alu_ext_and_mask[31:0]  = alu_ext_and_sel_mask ?  alu_shifter_extu_mask[31:0] : {32{1'b1}};
assign alu_ext_or_mask[31:0]   = alu_ext_or_sel_mask  ? ~alu_shifter_extu_mask[31:0] : {32{1'b0}};

assign alu_shifter_ext_rst[31:0]  = alu_shifter_res_raw[31:0] & alu_ext_and_mask[31:0] | alu_ext_or_mask[31:0];
// &CombBeg; @233
// &CombEnd; @302


assign alu_shifter_res_raw_rev[31:0] = {alu_shifter_res_raw[0],  alu_shifter_res_raw[1],
                                        alu_shifter_res_raw[2],  alu_shifter_res_raw[3],
                                        alu_shifter_res_raw[4],  alu_shifter_res_raw[5],
                                        alu_shifter_res_raw[6],  alu_shifter_res_raw[7],
                                        alu_shifter_res_raw[8],  alu_shifter_res_raw[9],
                                        alu_shifter_res_raw[10], alu_shifter_res_raw[11],
                                        alu_shifter_res_raw[12], alu_shifter_res_raw[13],
                                        alu_shifter_res_raw[14], alu_shifter_res_raw[15],
                                        alu_shifter_res_raw[16], alu_shifter_res_raw[17],
                                        alu_shifter_res_raw[18], alu_shifter_res_raw[19],
                                        alu_shifter_res_raw[20], alu_shifter_res_raw[21],
                                        alu_shifter_res_raw[22], alu_shifter_res_raw[23],
                                        alu_shifter_res_raw[24], alu_shifter_res_raw[25],
                                        alu_shifter_res_raw[26], alu_shifter_res_raw[27],
                                        alu_shifter_res_raw[28], alu_shifter_res_raw[29],
                                        alu_shifter_res_raw[30], alu_shifter_res_raw[31]};

assign alu_shifter_res_tmp[31:0] = alu_shifter_dir_right ? alu_shifter_res_raw[31:0]
                                                         : alu_shifter_res_raw_rev[31:0];

assign alu_shifter_res[31:0] = alu_shifter_inst_ext ? alu_shifter_ext_rst[31:0] : alu_shifter_res_tmp[31:0];




assign alu_logic_sel               = alu_sel[2];
assign alu_logic_rs1[31:0]         = {32{alu_logic_sel}} & idu_iu_ex1_src0[31:0];
assign alu_logic_rs2_raw[31:0]     = {32{alu_logic_sel}} & idu_iu_ex1_src1[31:0];





assign alu_logic_sub_func[4:0] = { 5{alu_logic_sel}} & idu_iu_ex1_sub_func[4:0];

assign alu_logic_rs2[31:0] =  alu_logic_rs2_raw[31:0];

assign alu_logic_and_res[31:0] = alu_logic_rs1[31:0] & alu_logic_rs2[31:0];
assign alu_logic_or_res[31:0]  = alu_logic_rs1[31:0] | alu_logic_rs2[31:0];
assign alu_logic_xor_res[31:0] = alu_logic_rs1[31:0] ^ alu_logic_rs2[31:0];


assign alu_logic_res[31:0] = {32{alu_logic_sub_func[0]}} & alu_logic_and_res[31:0]
                           | {32{alu_logic_sub_func[1]}} & alu_logic_or_res[31:0]
                           | {32{alu_logic_sub_func[2]}} & alu_logic_xor_res[31:0];




assign alu_pack_sel           = alu_sel[3];
assign alu_pack_sub_func[4:0] =  {5{alu_pack_sel}} & idu_iu_ex1_sub_func[4:0];

assign alu_pack_rs1[31:0] = {32{alu_pack_sel}} & idu_iu_ex1_src0[31:0];
assign alu_pack_rs2[31:0] = {32{alu_pack_sel}} & idu_iu_ex1_src1[31:0];
assign alu_pack_pack_inst = |alu_pack_sub_func[2:0];

// &Force("nonport", "alu_pack_rs1"); @368
// &Force("nonport", "alu_pack_rs2"); @369

assign alu_packl_rst[31:0]  = 32'b0;
assign alu_packh_rst[31:0]  = 32'b0;
assign alu_packhl_rst[31:0] = 32'b0;

assign alu_pack_encry_rst[31:0] = {32{alu_pack_sub_func[0]}} & alu_packl_rst[31:0] |
                                  {32{alu_pack_sub_func[1]}} & alu_packh_rst[31:0] |
                                  {32{alu_pack_sub_func[2]}} & alu_packhl_rst[31:0];


assign alu_pack_rs3[31:0]    = {32{alu_pack_sel}} & idu_iu_ex1_src2[31:0];
assign alu_pack_src_not_zero = |alu_pack_rs2[31:0];
assign alu_pack_sel_rs3      = alu_pack_sub_func[3] &&  alu_pack_src_not_zero ||
                               alu_pack_sub_func[4] && !alu_pack_src_not_zero;
assign alu_pack_mov_rst[31:0] = alu_pack_sel_rs3 ? alu_pack_rs3[31:0] : alu_pack_rs1[31:0];
assign alu_pack_rst[31:0] = alu_pack_pack_inst ? alu_pack_encry_rst[31:0] : alu_pack_mov_rst[31:0];




assign alu_bitop_sel           = alu_sel[4];
assign alu_bitop_sub_func[4:0] =  {5{alu_bitop_sel}} & idu_iu_ex1_sub_func[4:0];
assign alu_bitop_rs1[31:0] = {32{alu_bitop_sel}} & idu_iu_ex1_src0[31:0];
assign alu_bitop_rs2[31:0] = {32{alu_bitop_sel}} & idu_iu_ex1_src1[31:0];
assign alu_bitop_ff01      = alu_bitop_sub_func[4];
assign alu_bitop_tst       = alu_bitop_sub_func[2];
assign alu_bitop_tstnbz    = alu_bitop_sub_func[3];
assign alu_bitop_rev       = alu_bitop_sub_func[1];


assign alu_bitop_ff1_rs[31:0] = alu_bitop_sub_func[0] ? ~alu_bitop_rs1[31:0]
                                                      :  alu_bitop_rs1[31:0];
// &CombBeg; @414
always @( alu_bitop_ff1_rs[31:0])
begin
  casez (alu_bitop_ff1_rs[31:0])
    32'b1???????????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd0;
    32'b01??????????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd1;
    32'b001?????????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd2;
    32'b0001????????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd3;
    32'b00001???????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd4;
    32'b000001??????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd5;
    32'b0000001?????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd6;
    32'b00000001????????????????????????: alu_bitop_ff1_rst[5:0] = 6'd7;
    32'b000000001???????????????????????: alu_bitop_ff1_rst[5:0] = 6'd8;
    32'b0000000001??????????????????????: alu_bitop_ff1_rst[5:0] = 6'd9;
    32'b00000000001?????????????????????: alu_bitop_ff1_rst[5:0] = 6'd10;
    32'b000000000001????????????????????: alu_bitop_ff1_rst[5:0] = 6'd11;
    32'b0000000000001???????????????????: alu_bitop_ff1_rst[5:0] = 6'd12;
    32'b00000000000001??????????????????: alu_bitop_ff1_rst[5:0] = 6'd13;
    32'b000000000000001?????????????????: alu_bitop_ff1_rst[5:0] = 6'd14;
    32'b0000000000000001????????????????: alu_bitop_ff1_rst[5:0] = 6'd15;
    32'b00000000000000001???????????????: alu_bitop_ff1_rst[5:0] = 6'd16;
    32'b000000000000000001??????????????: alu_bitop_ff1_rst[5:0] = 6'd17;
    32'b0000000000000000001?????????????: alu_bitop_ff1_rst[5:0] = 6'd18;
    32'b00000000000000000001????????????: alu_bitop_ff1_rst[5:0] = 6'd19;
    32'b000000000000000000001???????????: alu_bitop_ff1_rst[5:0] = 6'd20;
    32'b0000000000000000000001??????????: alu_bitop_ff1_rst[5:0] = 6'd21;
    32'b00000000000000000000001?????????: alu_bitop_ff1_rst[5:0] = 6'd22;
    32'b000000000000000000000001????????: alu_bitop_ff1_rst[5:0] = 6'd23;
    32'b0000000000000000000000001???????: alu_bitop_ff1_rst[5:0] = 6'd24;
    32'b00000000000000000000000001??????: alu_bitop_ff1_rst[5:0] = 6'd25;
    32'b000000000000000000000000001?????: alu_bitop_ff1_rst[5:0] = 6'd26;
    32'b0000000000000000000000000001????: alu_bitop_ff1_rst[5:0] = 6'd27;
    32'b00000000000000000000000000001???: alu_bitop_ff1_rst[5:0] = 6'd28;
    32'b000000000000000000000000000001??: alu_bitop_ff1_rst[5:0] = 6'd29;
    32'b0000000000000000000000000000001?: alu_bitop_ff1_rst[5:0] = 6'd30;
    32'b00000000000000000000000000000001: alu_bitop_ff1_rst[5:0] = 6'd31;
    default:                              alu_bitop_ff1_rst[5:0] = 6'd32;
  endcase
// &CombEnd; @450
end

assign alu_bitop_ff01_rst[31:0] = {26'b0, alu_bitop_ff1_rst[5:0]};


assign alu_bitop_tst_rs[31:0] = alu_bitop_rs1[31:0];
assign alu_bitop_tst_imm[4:0] = alu_bitop_rs2[4:0];
// &CombBeg; @457
always @( alu_bitop_tst_imm[4:0]
       or alu_bitop_tst_rs[31:0])
begin
  casez (alu_bitop_tst_imm[4:0])
   5'd0:  alu_bitop_tst_bit = alu_bitop_tst_rs[0];
   5'd1:  alu_bitop_tst_bit = alu_bitop_tst_rs[1];
   5'd2:  alu_bitop_tst_bit = alu_bitop_tst_rs[2];
   5'd3:  alu_bitop_tst_bit = alu_bitop_tst_rs[3];
   5'd4:  alu_bitop_tst_bit = alu_bitop_tst_rs[4];
   5'd5:  alu_bitop_tst_bit = alu_bitop_tst_rs[5];
   5'd6:  alu_bitop_tst_bit = alu_bitop_tst_rs[6];
   5'd7:  alu_bitop_tst_bit = alu_bitop_tst_rs[7];
   5'd8:  alu_bitop_tst_bit = alu_bitop_tst_rs[8];
   5'd9:  alu_bitop_tst_bit = alu_bitop_tst_rs[9];
   5'd10: alu_bitop_tst_bit = alu_bitop_tst_rs[10];
   5'd11: alu_bitop_tst_bit = alu_bitop_tst_rs[11];
   5'd12: alu_bitop_tst_bit = alu_bitop_tst_rs[12];
   5'd13: alu_bitop_tst_bit = alu_bitop_tst_rs[13];
   5'd14: alu_bitop_tst_bit = alu_bitop_tst_rs[14];
   5'd15: alu_bitop_tst_bit = alu_bitop_tst_rs[15];
   5'd16: alu_bitop_tst_bit = alu_bitop_tst_rs[16];
   5'd17: alu_bitop_tst_bit = alu_bitop_tst_rs[17];
   5'd18: alu_bitop_tst_bit = alu_bitop_tst_rs[18];
   5'd19: alu_bitop_tst_bit = alu_bitop_tst_rs[19];
   5'd20: alu_bitop_tst_bit = alu_bitop_tst_rs[20];
   5'd21: alu_bitop_tst_bit = alu_bitop_tst_rs[21];
   5'd22: alu_bitop_tst_bit = alu_bitop_tst_rs[22];
   5'd23: alu_bitop_tst_bit = alu_bitop_tst_rs[23];
   5'd24: alu_bitop_tst_bit = alu_bitop_tst_rs[24];
   5'd25: alu_bitop_tst_bit = alu_bitop_tst_rs[25];
   5'd26: alu_bitop_tst_bit = alu_bitop_tst_rs[26];
   5'd27: alu_bitop_tst_bit = alu_bitop_tst_rs[27];
   5'd28: alu_bitop_tst_bit = alu_bitop_tst_rs[28];
   5'd29: alu_bitop_tst_bit = alu_bitop_tst_rs[29];
   5'd30: alu_bitop_tst_bit = alu_bitop_tst_rs[30];
   5'd31: alu_bitop_tst_bit = alu_bitop_tst_rs[31];
    default:              alu_bitop_tst_bit = 1'bx;
  endcase
// &CombEnd; @493
end

assign alu_bitop_tst_rst[31:0] = {31'b0, alu_bitop_tst_bit};


assign alu_bitop_tstnbz_rs[31:0] = alu_bitop_rs1[31:0];
assign alu_bitop_tstnbz_byte0 =  alu_bitop_tstnbz_rs[7:0]   == 8'b0;
assign alu_bitop_tstnbz_byte1 =  alu_bitop_tstnbz_rs[15:8]  == 8'b0;
assign alu_bitop_tstnbz_byte2 =  alu_bitop_tstnbz_rs[23:16] == 8'b0;
assign alu_bitop_tstnbz_byte3 =  alu_bitop_tstnbz_rs[31:24] == 8'b0;
assign alu_bitop_tstnbz_rst[31:0] = {{8{ alu_bitop_tstnbz_byte3}} & 8'hff,
                                     {8{ alu_bitop_tstnbz_byte2}} & 8'hff,
                                     {8{ alu_bitop_tstnbz_byte1}} & 8'hff,
                                     {8{ alu_bitop_tstnbz_byte0}} & 8'hff};


assign alu_bitop_rev_rs[31:0]  = alu_bitop_rs1[31:0];
assign alu_bitop_rev_rst[31:0] = {alu_bitop_rev_rs[7:0],
                                  alu_bitop_rev_rs[15:8],
                                  alu_bitop_rev_rs[23:16],
                                  alu_bitop_rev_rs[31:24]};


assign alu_bitop_rst[31:0] = {32{alu_bitop_ff01}}   & alu_bitop_ff01_rst[31:0] |
                             {32{alu_bitop_tst}}    & alu_bitop_tst_rst[31:0]  |
                             {32{alu_bitop_rev}}    & alu_bitop_rev_rst[31:0]  |
                             {32{alu_bitop_tstnbz}} & alu_bitop_tstnbz_rst[31:0];





assign alu_res[31:0] = alu_adder_res[31:0]
                     | alu_shifter_res[31:0]
                     | alu_logic_res[31:0]
                     | alu_pack_rst[31:0]
                     | alu_bitop_rst[31:0];





assign iu_rtu_ex1_alu_cmplt      = idu_iu_ex1_inst_vld && (|alu_sel[4:0]);
assign iu_rtu_ex1_alu_data[31:0] = alu_res[31:0];

// &ModuleEnd; @541
endmodule
























// &ModuleBeg; @23
module pa_iu_bju(
  ag_bju_pc,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  idu_iu_ex1_bht_pred,
  idu_iu_ex1_bju_depd_lsu_src0,
  idu_iu_ex1_bju_depd_lsu_src1,
  idu_iu_ex1_bju_sel,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_func,
  idu_iu_ex1_inst_len,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_split,
  idu_iu_ex1_src0,
  idu_iu_ex1_src0_reg,
  idu_iu_ex1_src1,
  idu_iu_ex1_sub_func,
  idu_iu_ex1_wb_vld,
  idu_iu_tail_fail,
  idu_iu_tail_fail_gate,
  idu_xx_ex1_warm_up,
  ifu_iu_chgflw_pc,
  ifu_iu_chgflw_vld,
  ifu_iu_ex1_pc_pred,
  ifu_iu_reset_vld,
  iu_ex1_cur_pc,
  iu_hpcp_inst_bht_mispred,
  iu_hpcp_inst_condbr,
  iu_hpcp_inst_condbr_gate,
  iu_ifu_bht_cur_pc,
  iu_ifu_bht_mispred,
  iu_ifu_bht_pred,
  iu_ifu_bht_taken,
  iu_ifu_br_vld,
  iu_ifu_br_vld_gate,
  iu_ifu_ex1_tar_pc,
  iu_ifu_ex1_tar_pc_vld,
  iu_ifu_link_vld,
  iu_ifu_link_vld_gate,
  iu_ifu_pc_mispred,
  iu_ifu_ret_vld,
  iu_ifu_ret_vld_gate,
  iu_rtu_ex1_bju_chgflw_vld,
  iu_rtu_ex1_bju_cmplt,
  iu_rtu_ex1_bju_cmplt_dp,
  iu_rtu_ex1_bju_data,
  iu_rtu_ex1_bju_stall,
  iu_rtu_ex1_bju_wb_vld,
  iu_rtu_ex1_branch_inst,
  iu_rtu_ex1_cur_pc,
  iu_rtu_ex1_next_pc,
  iu_rtu_ex2_chgflw_pc,
  iu_rtu_ex2_chgflw_vld,
  lsu_iu_ex2_data,
  lsu_iu_ex2_data_vld,
  lsu_iu_ex2_data_vld_gate,
  pad_yy_gate_clk_en_b,
  rtu_iu_ex1_stall,
  rtu_iu_ex2_cur_pc,
  rtu_iu_ex2_stall,
  rtu_yy_xx_flush,
  sysio_iu_rst_addr
);

// &Ports; @24
input   [31:0]  ag_bju_pc;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input   [1 :0]  idu_iu_ex1_bht_pred;
input           idu_iu_ex1_bju_depd_lsu_src0;
input           idu_iu_ex1_bju_depd_lsu_src1;
input           idu_iu_ex1_bju_sel;
input   [5 :0]  idu_iu_ex1_dst_preg;
input   [4 :0]  idu_iu_ex1_func;
input           idu_iu_ex1_inst_len;
input           idu_iu_ex1_inst_vld;
input           idu_iu_ex1_split;
input   [31:0]  idu_iu_ex1_src0;
input   [5 :0]  idu_iu_ex1_src0_reg;
input   [31:0]  idu_iu_ex1_src1;
input   [4 :0]  idu_iu_ex1_sub_func;
input           idu_iu_ex1_wb_vld;
input           idu_iu_tail_fail;
input           idu_iu_tail_fail_gate;
input           idu_xx_ex1_warm_up;
input   [31:0]  ifu_iu_chgflw_pc;
input           ifu_iu_chgflw_vld;
input   [31:0]  ifu_iu_ex1_pc_pred;
input           ifu_iu_reset_vld;
input   [31:0]  lsu_iu_ex2_data;
input           lsu_iu_ex2_data_vld;
input           lsu_iu_ex2_data_vld_gate;
input           pad_yy_gate_clk_en_b;
input           rtu_iu_ex1_stall;
input   [31:0]  rtu_iu_ex2_cur_pc;
input           rtu_iu_ex2_stall;
input           rtu_yy_xx_flush;
input   [31:0]  sysio_iu_rst_addr;
output  [31:0]  iu_ex1_cur_pc;
output          iu_hpcp_inst_bht_mispred;
output          iu_hpcp_inst_condbr;
output          iu_hpcp_inst_condbr_gate;
output  [31:0]  iu_ifu_bht_cur_pc;
output          iu_ifu_bht_mispred;
output  [1 :0]  iu_ifu_bht_pred;
output          iu_ifu_bht_taken;
output          iu_ifu_br_vld;
output          iu_ifu_br_vld_gate;
output  [31:0]  iu_ifu_ex1_tar_pc;
output          iu_ifu_ex1_tar_pc_vld;
output          iu_ifu_link_vld;
output          iu_ifu_link_vld_gate;
output          iu_ifu_pc_mispred;
output          iu_ifu_ret_vld;
output          iu_ifu_ret_vld_gate;
output          iu_rtu_ex1_bju_chgflw_vld;
output          iu_rtu_ex1_bju_cmplt;
output          iu_rtu_ex1_bju_cmplt_dp;
output  [31:0]  iu_rtu_ex1_bju_data;
output          iu_rtu_ex1_bju_stall;
output          iu_rtu_ex1_bju_wb_vld;
output          iu_rtu_ex1_branch_inst;
output  [31:0]  iu_rtu_ex1_cur_pc;
output  [31:0]  iu_rtu_ex1_next_pc;
output  [31:0]  iu_rtu_ex2_chgflw_pc;
output          iu_rtu_ex2_chgflw_vld;

// &Regs; @25
reg             bju_cur_state;
reg     [1 :0]  bju_ex2_bht_pred;
reg     [31:0]  bju_ex2_not_pred_pc;
reg     [31:0]  bju_ex2_rs1;
reg     [31:0]  bju_ex2_rs2;
reg     [3 :0]  bju_ex2_sub_func_4_1;
reg             bju_next_state;
reg     [30:0]  bju_pcgen_pc_31;
reg             tar_pc_state;

// &Wires; @26
wire    [31:0]  ag_bju_pc;
wire    [31:0]  bju_ag_tar_pc;
wire            bju_ag_tar_pc_sel;
wire    [31:0]  bju_auipc_res;
wire            bju_auipc_sel;
wire            bju_beq_taken;
wire    [31:0]  bju_bht_cur_pc;
wire            bju_bht_mispred;
wire    [1 :0]  bju_bht_pred;
wire            bju_bht_taken;
wire            bju_blt_taken;
wire            bju_br_vld;
wire            bju_br_vld_gate;
wire            bju_clk;
wire            bju_clk_en;
wire            bju_cond_br_taken;
wire            bju_cond_br_taken_raw;
wire            bju_cond_sel;
wire            bju_cond_sel_ex1;
wire            bju_ex1_bht_mispred;
wire            bju_ex1_inst_cmplt;
wire            bju_ex1_inst_cmplt_dp;
wire            bju_ex1_inst_depd_vld;
wire            bju_ex1_inst_depd_vld_gate;
wire            bju_ex1_inst_no_depd_vld;
wire    [31:0]  bju_ex1_not_pred_pc;
wire    [31:0]  bju_ex1_rs1;
wire    [31:0]  bju_ex1_rs2;
wire    [4 :0]  bju_ex1_sub_func;
wire            bju_ex1_tar_pc_vld;
wire            bju_ex2_bht_mispred;
wire    [31:0]  bju_ex2_chgflw_pc;
wire            bju_ex2_chgflw_vld;
wire            bju_fwd_clk;
wire            bju_fwd_clk_en;
wire            bju_hi_clk;
wire            bju_hi_clk_en;
wire            bju_hi_updt;
wire    [31:0]  bju_inc_pc;
wire    [30:0]  bju_inc_pc_31_1;
wire            bju_inst_jalr;
wire            bju_is_ex1;
wire            bju_is_ex2;
wire            bju_link_vld;
wire            bju_link_vld_raw;
wire    [31:0]  bju_next_pc;
wire            bju_pc_cmp_fail;
wire            bju_pc_mispred;
wire    [31:0]  bju_pcgen_pc;
wire            bju_ret_vld;
wire            bju_ret_vld_raw;
wire    [31:0]  bju_rs1;
wire            bju_rs1_lt_rs2;
wire            bju_rs1_lt_rs2_signed;
wire    [31:0]  bju_rs2;
wire    [2 :0]  bju_sel;
wire            bju_strct_conflict_stall;
wire    [4 :0]  bju_sub_func;
wire            bju_tar_pc_vld_mask;
wire            bju_uncond_sel;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [1 :0]  idu_iu_ex1_bht_pred;
wire            idu_iu_ex1_bju_depd_lsu;
wire            idu_iu_ex1_bju_depd_lsu_src0;
wire            idu_iu_ex1_bju_depd_lsu_src1;
wire            idu_iu_ex1_bju_sel;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_len;
wire            idu_iu_ex1_inst_vld;
wire            idu_iu_ex1_split;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_iu_ex1_wb_vld;
wire            idu_iu_tail_fail;
wire            idu_iu_tail_fail_gate;
wire            idu_xx_ex1_warm_up;
wire    [31:0]  ifu_iu_chgflw_pc;
wire            ifu_iu_chgflw_vld;
wire    [31:0]  ifu_iu_ex1_pc_pred;
wire            ifu_iu_reset_vld;
wire    [31:0]  iu_ex1_cur_pc;
wire            iu_hpcp_inst_bht_mispred;
wire            iu_hpcp_inst_condbr;
wire            iu_hpcp_inst_condbr_gate;
wire    [31:0]  iu_ifu_bht_cur_pc;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire    [31:0]  iu_ifu_ex1_tar_pc;
wire            iu_ifu_ex1_tar_pc_vld;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            iu_rtu_ex1_bju_chgflw_vld;
wire            iu_rtu_ex1_bju_cmplt;
wire            iu_rtu_ex1_bju_cmplt_dp;
wire    [31:0]  iu_rtu_ex1_bju_data;
wire            iu_rtu_ex1_bju_stall;
wire            iu_rtu_ex1_bju_wb_vld;
wire            iu_rtu_ex1_branch_inst;
wire    [31:0]  iu_rtu_ex1_cur_pc;
wire    [31:0]  iu_rtu_ex1_next_pc;
wire    [31:0]  iu_rtu_ex2_chgflw_pc;
wire            iu_rtu_ex2_chgflw_vld;
wire    [31:0]  lsu_iu_ex2_data;
wire            lsu_iu_ex2_data_vld;
wire            lsu_iu_ex2_data_vld_gate;
wire            pad_yy_gate_clk_en_b;
wire            pcgen_pipedown;
wire            rtu_iu_ex1_stall;
wire    [31:0]  rtu_iu_ex2_cur_pc;
wire            rtu_iu_ex2_stall;
wire            rtu_yy_xx_flush;
wire    [31:0]  sysio_iu_rst_addr;


assign idu_iu_ex1_bju_depd_lsu = (idu_iu_ex1_bju_depd_lsu_src0
                               || idu_iu_ex1_bju_depd_lsu_src1)
                               && bju_cond_sel_ex1;

assign bju_ex1_inst_no_depd_vld = idu_iu_ex1_inst_vld && !idu_iu_ex1_bju_depd_lsu
                               && !bju_strct_conflict_stall;
assign bju_ex1_inst_depd_vld = idu_iu_ex1_inst_vld && bju_cond_sel_ex1
                            && idu_iu_ex1_bju_depd_lsu && lsu_iu_ex2_data_vld
                            && !rtu_iu_ex2_stall
                            && !bju_strct_conflict_stall;

assign bju_ex1_inst_depd_vld_gate = idu_iu_ex1_inst_vld && bju_cond_sel_ex1
                                 && idu_iu_ex1_bju_depd_lsu && lsu_iu_ex2_data_vld_gate
                                 && !bju_strct_conflict_stall;

assign bju_sel[2:0]          = { 3{idu_iu_ex1_bju_sel}} & idu_iu_ex1_func[2:0];
// &Force("bus", "idu_iu_ex1_func", 4, 0); @44
assign bju_ex1_sub_func[4:0] = { 5{idu_iu_ex1_bju_sel}} & idu_iu_ex1_sub_func[4:0];
assign bju_ex1_rs1[31:0]     = {32{idu_iu_ex1_bju_sel}} & idu_iu_ex1_src0[31:0];
assign bju_ex1_rs2[31:0]     = {32{idu_iu_ex1_bju_sel}} & idu_iu_ex1_src1[31:0];





parameter BJU_EX1 = 1'b0;
parameter BJU_EX2 = 1'b1;

always @ (posedge bju_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    bju_cur_state <= BJU_EX1;
  else
    bju_cur_state <= bju_next_state;
end

// &CombBeg; @64
always @( idu_iu_ex1_bju_depd_lsu
       or lsu_iu_ex2_data_vld
       or bju_cur_state
       or bju_cond_sel_ex1
       or idu_iu_ex1_inst_vld
       or rtu_iu_ex2_stall)
begin
  case(bju_cur_state)
    BJU_EX1:
      if (bju_cond_sel_ex1 && idu_iu_ex1_inst_vld)
        if (idu_iu_ex1_bju_depd_lsu && lsu_iu_ex2_data_vld && !rtu_iu_ex2_stall)
          bju_next_state = BJU_EX2;
        else
          bju_next_state = BJU_EX1;
      else
        bju_next_state = BJU_EX1;
    BJU_EX2:
      bju_next_state = BJU_EX1;
    default:
      bju_next_state = BJU_EX1;
  endcase
// &CombEnd; @79
end

assign bju_is_ex1 = bju_cur_state == BJU_EX1;
assign bju_is_ex2 = bju_cur_state == BJU_EX2;




always @ (posedge bju_fwd_clk)
begin
  if (bju_ex1_inst_depd_vld || idu_xx_ex1_warm_up) begin
    bju_ex2_sub_func_4_1[3:0] <= bju_ex1_sub_func[4:1];
    bju_ex2_bht_pred[1:0]     <= idu_iu_ex1_bht_pred[1:0];
    bju_ex2_not_pred_pc[31:0] <= bju_ex1_not_pred_pc[31:0];
  end
end

always @ (posedge bju_fwd_clk)
begin
  if (bju_ex1_inst_depd_vld && idu_iu_ex1_bju_depd_lsu_src0) begin
    bju_ex2_rs1[31:0] <= lsu_iu_ex2_data[31:0];
  end
  else if (bju_ex1_inst_depd_vld && !idu_iu_ex1_bju_depd_lsu_src0 || idu_xx_ex1_warm_up) begin
    bju_ex2_rs1[31:0] <= bju_ex1_rs1[31:0];
  end
end

always @ (posedge bju_fwd_clk)
begin
  if (bju_ex1_inst_depd_vld && idu_iu_ex1_bju_depd_lsu_src1) begin
    bju_ex2_rs2[31:0] <= lsu_iu_ex2_data[31:0];
  end
  else if (bju_ex1_inst_depd_vld && !idu_iu_ex1_bju_depd_lsu_src1 || idu_xx_ex1_warm_up) begin
    bju_ex2_rs2[31:0] <= bju_ex1_rs2[31:0];
  end
end

assign bju_ex2_chgflw_vld      = bju_ex2_bht_mispred;
assign bju_ex2_chgflw_pc[31:0] = bju_ex2_not_pred_pc[31:0];




assign bju_sub_func[4:0] = bju_is_ex1 ? bju_ex1_sub_func[4:0]
                                      : {bju_ex2_sub_func_4_1[3:0], 1'b0};
assign bju_rs1[31:0]     = bju_is_ex1 ? bju_ex1_rs1[31:0]
                                      : bju_ex2_rs1[31:0];
assign bju_rs2[31:0]     = bju_is_ex1 ? bju_ex1_rs2[31:0]
                                      : bju_ex2_rs2[31:0];
assign bju_bht_pred[1:0] = bju_is_ex1 ? idu_iu_ex1_bht_pred[1:0]
                                      : bju_ex2_bht_pred[1:0];



assign bju_inc_pc_31_1[30:0] = bju_pcgen_pc[31:1] + {29'b0, idu_iu_ex1_inst_len, !idu_iu_ex1_inst_len};
assign bju_inc_pc[31:0]      = {bju_inc_pc_31_1[30:0], 1'b0};




assign bju_auipc_sel       = bju_sel[2];
assign bju_auipc_res[31:0] = ag_bju_pc[31:0];




assign bju_uncond_sel = bju_sel[0];
assign bju_inst_jalr  = bju_uncond_sel & bju_ex1_sub_func[2];


assign bju_ag_tar_pc[31:0] = ag_bju_pc[31:0];




assign bju_cond_sel_ex1       = bju_sel[1];
assign bju_cond_sel           = bju_cond_sel_ex1 || bju_is_ex2;

assign bju_beq_taken  = bju_rs1[31:0] == bju_rs2[31:0];
assign bju_rs1_lt_rs2 = bju_rs1[31:0] < bju_rs2[31:0];
assign bju_rs1_lt_rs2_signed =  bju_rs1[31] &&  bju_rs2[31] && bju_rs1_lt_rs2
                            ||  bju_rs1[31] && !bju_rs2[31]
                            || !bju_rs1[31] && !bju_rs2[31] && bju_rs1_lt_rs2;
assign bju_blt_taken  = bju_sub_func[4] ? bju_rs1_lt_rs2_signed
                                        : bju_rs1_lt_rs2;


assign bju_cond_br_taken_raw = (bju_beq_taken  ^ bju_sub_func[3]) & bju_sub_func[2]     // beq and bne taken
                             | (bju_blt_taken  ^ bju_sub_func[3]) & bju_sub_func[1];    // blt/bltu and bge/bgeu taken
assign bju_cond_br_taken = bju_ex1_inst_no_depd_vld || bju_is_ex2 ? bju_cond_br_taken_raw
                                                          : idu_iu_ex1_bht_pred[1];




assign bju_ag_tar_pc_sel = bju_cond_sel_ex1 && bju_cond_br_taken
                        || bju_uncond_sel;
assign bju_next_pc[31:0] = bju_ag_tar_pc_sel ? bju_ag_tar_pc[31:0]
                                             : bju_inc_pc[31:0];





assign bju_ex1_not_pred_pc[31:0] = bju_bht_pred[1] ? bju_inc_pc[31:0]
                                                   : bju_ag_tar_pc[31:0];


assign bju_ex1_bht_mispred  = bju_cond_sel && (bju_cond_br_taken ^ bju_bht_pred[1])
                           && bju_tar_pc_vld_mask && bju_ex1_inst_no_depd_vld;
assign bju_ex2_bht_mispred  = bju_cond_sel && (bju_cond_br_taken ^ bju_bht_pred[1])
                           && bju_is_ex2;
assign bju_br_vld  = bju_cond_sel && ((bju_tar_pc_vld_mask && bju_ex1_inst_no_depd_vld) || bju_is_ex2);
assign bju_br_vld_gate = bju_cond_sel && (bju_ex1_inst_no_depd_vld || bju_is_ex2);
assign bju_bht_taken = bju_cond_sel && bju_cond_br_taken;

// &Force("bus", "idu_iu_ex1_dst_preg", 5, 0); @195
// &Force("bus", "idu_iu_ex1_src0_reg", 5, 0); @196



assign bju_pc_cmp_fail     = bju_inst_jalr
                          && idu_iu_ex1_src0_reg[4:0] == 5'b1
                          && bju_ag_tar_pc[31:0] != ifu_iu_ex1_pc_pred[31:0];

assign bju_pc_mispred = bju_inst_jalr
                        && idu_iu_ex1_src0_reg[4:0] != 5'b1
                        && bju_tar_pc_vld_mask;

assign bju_ex1_tar_pc_vld   = (bju_ex1_bht_mispred || bju_pc_mispred)
                            && bju_tar_pc_vld_mask && idu_iu_ex1_inst_vld;

assign bju_bht_mispred = bju_ex1_bht_mispred || bju_ex2_bht_mispred;
assign bju_ret_vld_raw   = idu_iu_ex1_src0_reg[4:0] == 5'b1 && bju_inst_jalr && bju_ex1_inst_no_depd_vld;
assign bju_ret_vld       = bju_ret_vld_raw && !rtu_iu_ex2_stall;
assign bju_link_vld_raw  = idu_iu_ex1_dst_preg[4:0] == 5'b1 && bju_uncond_sel
                        && idu_iu_ex1_wb_vld
                        && bju_ex1_inst_no_depd_vld;
assign bju_link_vld      = bju_link_vld_raw && !rtu_iu_ex2_stall;

assign bju_ex1_inst_cmplt         = |bju_sel[2:0] && (bju_ex1_inst_no_depd_vld
                                                   || bju_ex1_inst_depd_vld);

assign bju_ex1_inst_cmplt_dp      = |bju_sel[2:0] && idu_iu_ex1_inst_vld;



parameter IDLE  = 1'b0;
parameter STALL = 1'b1;


always @ (posedge bju_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    tar_pc_state <= IDLE;
  else if (rtu_yy_xx_flush)
    tar_pc_state <= IDLE;
  else if (bju_ex1_inst_cmplt && rtu_iu_ex2_stall)
    tar_pc_state <= STALL;
  else
    tar_pc_state <= IDLE;
end


assign bju_tar_pc_vld_mask     = tar_pc_state == IDLE;





assign pcgen_pipedown = !rtu_iu_ex1_stall;

// &Force("bus", "sysio_iu_rst_addr", 31, 0); @251
// &Force("bus", "ifu_iu_chgflw_pc", 31, 0); @252

always @ (posedge bju_clk)
begin
  if (ifu_iu_reset_vld)
    bju_pcgen_pc_31[10:0] <= sysio_iu_rst_addr[11:1];
  else if (ifu_iu_chgflw_vld)
    bju_pcgen_pc_31[10:0] <= ifu_iu_chgflw_pc[11:1];
  else if (idu_iu_tail_fail)
    bju_pcgen_pc_31[10:0] <= rtu_iu_ex2_cur_pc[11:1];
  else if (idu_iu_ex1_inst_vld && pcgen_pipedown && !idu_iu_ex1_split)
    bju_pcgen_pc_31[10:0] <= bju_next_pc[11:1];
end


always @ (posedge bju_hi_clk)
begin
  if (ifu_iu_reset_vld)
    bju_pcgen_pc_31[30:11] <= sysio_iu_rst_addr[31:12];
  else if (ifu_iu_chgflw_vld)
    bju_pcgen_pc_31[30:11] <= ifu_iu_chgflw_pc[31:12];
  else if (idu_iu_tail_fail)
    bju_pcgen_pc_31[30:11] <= rtu_iu_ex2_cur_pc[31:12];
  else if (idu_iu_ex1_inst_vld && pcgen_pipedown && !idu_iu_ex1_split)
    bju_pcgen_pc_31[30:11] <= bju_next_pc[31:12];
end

assign bju_pcgen_pc[31:0] = {bju_pcgen_pc_31[30:0], 1'b0};

assign bju_hi_updt = bju_pcgen_pc[31:12] != bju_next_pc[31:12];

assign iu_ex1_cur_pc[31:0] = bju_pcgen_pc[31:0];
assign bju_bht_cur_pc[31:0] = bju_is_ex1 ? bju_pcgen_pc[31:0]
                                         : rtu_iu_ex2_cur_pc[31:0];








assign bju_clk_en = ifu_iu_chgflw_vld
                 || idu_iu_ex1_inst_vld
                 || bju_is_ex2
                 || idu_iu_tail_fail_gate
                 || idu_xx_ex1_warm_up
                 || ifu_iu_reset_vld;

// &Instance("gated_clk_cell", "x_bju_clk"); @301
gated_clk_cell  x_bju_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bju_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bju_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @302
//          .external_en (1'b0), @303
//          .global_en   (cp0_yy_clk_en), @304
//          .module_en   (1'b0), @305
//          .local_en    (bju_clk_en), @306
//          .clk_out     (bju_clk)); @307

assign bju_hi_clk_en = ifu_iu_chgflw_vld
                    || idu_iu_ex1_inst_vld && bju_hi_updt
                    || idu_iu_tail_fail_gate
                    || idu_xx_ex1_warm_up
                    || ifu_iu_reset_vld;


// &Instance("gated_clk_cell", "x_bju_hi_clk"); @316
gated_clk_cell  x_bju_hi_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bju_hi_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bju_hi_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @317
//          .external_en (1'b0), @318
//          .global_en   (cp0_yy_clk_en), @319
//          .module_en   (1'b0), @320
//          .local_en    (bju_hi_clk_en), @321
//          .clk_out     (bju_hi_clk)); @322

assign bju_fwd_clk_en = bju_ex1_inst_depd_vld_gate
                     || idu_xx_ex1_warm_up;

// &Instance("gated_clk_cell", "x_bju_fwd_clk"); @327
gated_clk_cell  x_bju_fwd_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (bju_fwd_clk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (bju_fwd_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @328
//          .external_en (1'b0), @329
//          .global_en   (cp0_yy_clk_en), @330
//          .module_en   (1'b0), @331
//          .local_en    (bju_fwd_clk_en), @332
//          .clk_out     (bju_fwd_clk)); @333





assign bju_strct_conflict_stall = idu_iu_ex1_inst_vld && bju_cond_sel_ex1 && bju_is_ex2;
assign iu_rtu_ex1_bju_stall = idu_iu_ex1_inst_vld && idu_iu_ex1_bju_depd_lsu && !bju_ex1_inst_depd_vld
                           || bju_strct_conflict_stall;








assign iu_ifu_ex1_tar_pc_vld   = bju_ex1_tar_pc_vld;
assign iu_ifu_ex1_tar_pc[31:0] = bju_next_pc[31:0];


assign iu_ifu_br_vld = bju_br_vld;
assign iu_ifu_br_vld_gate = bju_br_vld_gate;
assign iu_ifu_bht_cur_pc[31:0] = bju_bht_cur_pc[31:0];
assign iu_ifu_bht_taken = bju_bht_taken;
assign iu_ifu_bht_pred[1:0] = bju_bht_pred[1:0];
assign iu_ifu_bht_mispred = bju_bht_mispred;

// &Force("nonport", "iu_ifu_br_vld"); @363
// &Force("nonport", "iu_ifu_br_vld_gate"); @364
// &Force("nonport", "iu_ifu_bht_cur_pc"); @365
// &Force("nonport", "iu_ifu_bht_taken"); @366
// &Force("nonport", "iu_ifu_bht_pred"); @367
// &Force("nonport", "iu_ifu_bht_mispred"); @370


assign iu_ifu_ret_vld = bju_ret_vld;
assign iu_ifu_link_vld = bju_link_vld;
assign iu_ifu_ret_vld_gate = bju_ret_vld_raw;
assign iu_ifu_link_vld_gate = bju_link_vld_raw;
assign iu_ifu_pc_mispred = bju_pc_mispred;

// &Force("nonport", "iu_ifu_link_vld"); @384
// &Force("nonport", "iu_ifu_link_vld_gate"); @385
// &Force("nonport", "iu_ifu_pc_mispred"); @386





assign iu_rtu_ex1_bju_cmplt       = bju_ex1_inst_cmplt;
assign iu_rtu_ex1_bju_cmplt_dp    = bju_ex1_inst_cmplt_dp;
assign iu_rtu_ex1_bju_wb_vld      = (bju_uncond_sel || bju_auipc_sel)
                                 && idu_iu_ex1_wb_vld && idu_iu_ex1_inst_vld;
assign iu_rtu_ex1_bju_data[31:0]  = bju_auipc_sel ? bju_auipc_res[31:0]
                                                  : bju_inc_pc[31:0];
assign iu_rtu_ex1_next_pc[31:0]   = bju_next_pc[31:0];
assign iu_rtu_ex1_cur_pc[31:0]    = bju_pcgen_pc[31:0];

assign iu_rtu_ex1_branch_inst     = |bju_sel[2:0] && !bju_auipc_sel;
assign iu_rtu_ex1_bju_chgflw_vld  = idu_iu_ex1_inst_vld && bju_pc_cmp_fail;

assign iu_rtu_ex2_chgflw_vld      = bju_ex2_chgflw_vld;
assign iu_rtu_ex2_chgflw_pc[31:0] = bju_ex2_chgflw_pc[31:0];




assign iu_hpcp_inst_condbr = bju_cond_sel_ex1 && bju_ex1_inst_cmplt;
assign iu_hpcp_inst_condbr_gate = bju_cond_sel_ex1 && bju_ex1_inst_cmplt_dp;
assign iu_hpcp_inst_bht_mispred = bju_bht_mispred;

// &ModuleEnd; @418
endmodule
























// &ModuleBeg; @23
module pa_iu_ctrl(
  div_ctrl_itering,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_split,
  idu_iu_ex1_wb_vld,
  iu_rtu_ex1_split_inst,
  iu_rtu_ex1_wb_preg,
  iu_rtu_ex1_wb_vld,
  iu_xx_no_op
);

// &Ports; @24
input          div_ctrl_itering;
input   [5:0]  idu_iu_ex1_dst_preg;
input          idu_iu_ex1_inst_vld;
input          idu_iu_ex1_split;
input          idu_iu_ex1_wb_vld;
output         iu_rtu_ex1_split_inst;
output  [5:0]  iu_rtu_ex1_wb_preg;
output         iu_rtu_ex1_wb_vld;
output         iu_xx_no_op;

// &Regs; @25

// &Wires; @26
wire           div_ctrl_itering;
wire    [5:0]  idu_iu_ex1_dst_preg;
wire           idu_iu_ex1_inst_vld;
wire           idu_iu_ex1_split;
wire           idu_iu_ex1_wb_vld;
wire           iu_rtu_ex1_split_inst;
wire    [5:0]  iu_rtu_ex1_wb_preg;
wire           iu_rtu_ex1_wb_vld;
wire           iu_xx_no_op;






assign iu_rtu_ex1_wb_vld       = idu_iu_ex1_wb_vld;
assign iu_rtu_ex1_wb_preg[5:0] = idu_iu_ex1_dst_preg[5:0];
assign iu_rtu_ex1_split_inst   = idu_iu_ex1_split;




assign iu_xx_no_op = !idu_iu_ex1_inst_vld && !div_ctrl_itering;





































































































// &ModuleEnd; @141
endmodule
























// &ModuleBeg; @23
module pa_iu_div(
  cp0_yy_clk_en,
  cpurst_b,
  div_ctrl_itering,
  forever_cpuclk,
  idu_iu_ex1_div_sel,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_src0,
  idu_iu_ex1_src1,
  idu_iu_ex1_sub_func,
  idu_xx_ex1_warm_up,
  iu_rtu_div_ex1_stall,
  iu_rtu_ex1_div_cmplt,
  iu_rtu_ex1_div_data,
  iu_rtu_ex1_div_wb_vld,
  iu_rtu_ex2_div_data,
  iu_rtu_ex2_div_preg,
  iu_rtu_ex2_div_wb_vld,
  pad_yy_gate_clk_en_b,
  rtu_iu_ex2_div_wb_en,
  rtu_iu_ex2_stall,
  rtu_xx_ex1_cancel,
  rtu_xx_ex2_cancel,
  rtu_yy_xx_async_flush
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           idu_iu_ex1_div_sel;
input   [5 :0]  idu_iu_ex1_dst_preg;
input           idu_iu_ex1_inst_vld;
input   [31:0]  idu_iu_ex1_src0;
input   [31:0]  idu_iu_ex1_src1;
input   [4 :0]  idu_iu_ex1_sub_func;
input           idu_xx_ex1_warm_up;
input           pad_yy_gate_clk_en_b;
input           rtu_iu_ex2_div_wb_en;
input           rtu_iu_ex2_stall;
input           rtu_xx_ex1_cancel;
input           rtu_xx_ex2_cancel;
input           rtu_yy_xx_async_flush;
output          div_ctrl_itering;
output          iu_rtu_div_ex1_stall;
output          iu_rtu_ex1_div_cmplt;
output  [31:0]  iu_rtu_ex1_div_data;
output          iu_rtu_ex1_div_wb_vld;
output  [31:0]  iu_rtu_ex2_div_data;
output  [4 :0]  iu_rtu_ex2_div_preg;
output          iu_rtu_ex2_div_wb_vld;

// &Regs; @25
reg     [2 :0]  div_cur_state;
reg     [31:0]  div_dividend_raw;
reg             div_divisor_31;
reg     [31:0]  div_divisor_reg;
reg     [4 :0]  div_dst_preg;
reg     [4 :0]  div_ff1_res_pos;
reg     [2 :0]  div_next_state;
reg             div_oper_is_signed_flop;
reg     [31:0]  div_quotient_reg;
reg     [31:0]  div_remainder_reg;
reg             div_res_sel_quotient_flop;
reg     [1 :0]  wb_cur_state;
reg     [1 :0]  wb_nxt_state;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire    [31:0]  div_abnormal_quotient;
wire    [31:0]  div_abnormal_remainder;
wire    [31:0]  div_abnormal_res;
wire            div_abnormal_res_vld;
wire    [31:0]  div_abs_res;
wire    [31:0]  div_abs_src;
wire            div_clk;
wire            div_clk_en;
wire            div_clk_en_raw;
wire            div_cmplt;
wire            div_ctrl_itering;
wire    [31:0]  div_dividend;
wire            div_dividend_31;
wire            div_dividend_eq0;
wire    [31:0]  div_dividend_eq0_quotient;
wire    [31:0]  div_dividend_eq0_remainder;
wire            div_dividend_hit_buffer;
wire    [31:0]  div_divisor;
wire            div_divisor_eq0;
wire    [31:0]  div_divisor_eq0_quotient;
wire    [31:0]  div_divisor_eq0_remainder;
wire            div_divisor_hit_buffer;
wire    [31:0]  div_divisor_raw;
wire            div_divisor_raw_is_neg;
wire    [31:0]  div_ex1_res;
wire            div_ex1_res_vld;
wire            div_ex1_stall;
wire            div_ex2_enable_wb;
wire    [31:0]  div_ex2_res;
wire            div_ex2_res_vld;
wire            div_ex2_res_vld_raw;
wire    [4 :0]  div_ff1_res;
wire    [4 :0]  div_ff1_res_neg;
wire    [31:0]  div_ff1_src;
wire            div_flush;
wire            div_flush_buffer;
wire            div_hit_buffer;
wire    [31:0]  div_hit_buffer_res;
wire            div_hit_buffer_res_vld;
wire            div_inst_vld;
wire            div_is_idle;
wire            div_is_signed;
wire            div_iter_cmplt;
wire            div_iter_start;
wire            div_iterating;
wire    [31:0]  div_normal_quotient;
wire    [31:0]  div_normal_remainder;
wire            div_not_cmplt;
wire            div_oper_is_signed;
wire            div_prepare_src0;
wire            div_prepare_src1;
wire    [31:0]  div_quotient_reg_updt;
wire    [31:0]  div_quotient_res;
wire    [31:0]  div_remainder_reg_updt;
wire    [31:0]  div_remainder_res;
wire            div_res_overflow;
wire    [31:0]  div_res_overflow_quotient;
wire    [31:0]  div_res_overflow_remainder;
wire            div_res_quotient_neg;
wire            div_res_remainder_neg;
wire            div_res_sel_quotient;
wire            div_signed_hit_buffer;
wire            div_src_is_neg;
wire    [4 :0]  div_sub_func;
wire            div_wb_sm_cmplt;
wire            div_wb_sm_ex2;
wire            div_wb_sm_idle;
wire            div_wfwb;
wire            forever_cpuclk;
wire            idu_iu_ex1_div_sel;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire            idu_iu_ex1_inst_vld;
wire    [31:0]  idu_iu_ex1_src0;
wire    [31:0]  idu_iu_ex1_src1;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_xx_ex1_warm_up;
wire            iu_rtu_div_ex1_stall;
wire            iu_rtu_ex1_div_cmplt;
wire    [31:0]  iu_rtu_ex1_div_data;
wire            iu_rtu_ex1_div_wb_vld;
wire    [31:0]  iu_rtu_ex2_div_data;
wire    [4 :0]  iu_rtu_ex2_div_preg;
wire            iu_rtu_ex2_div_wb_vld;
wire            pad_yy_gate_clk_en_b;
wire            rtu_iu_ex2_div_wb_en;
wire            rtu_iu_ex2_stall;
wire            rtu_xx_ex1_cancel;
wire            rtu_xx_ex2_cancel;
wire            rtu_yy_xx_async_flush;


assign div_inst_vld         = idu_iu_ex1_inst_vld && idu_iu_ex1_div_sel;
assign div_sub_func[4:0]    = {5{idu_iu_ex1_div_sel}} & idu_iu_ex1_sub_func[4:0];
assign div_oper_is_signed   = div_sub_func[0] || div_sub_func[2];
assign div_res_sel_quotient = div_sub_func[0] || div_sub_func[1];

assign div_dividend[31:0]   = {32{idu_iu_ex1_div_sel}} & idu_iu_ex1_src0[31:0];
assign div_divisor[31:0]    = {32{idu_iu_ex1_div_sel}} & idu_iu_ex1_src1[31:0];

// &Force("bus", "idu_iu_ex1_dst_preg", 5, 0); @36
always @ (posedge div_clk)
begin
  if (idu_xx_ex1_warm_up)
    div_dst_preg[4:0] <= 5'b0;
  else if (div_prepare_src0)
    div_dst_preg[4:0] <= idu_iu_ex1_dst_preg[4:0];
  else
    div_dst_preg[4:0] <= div_dst_preg[4:0];
end




parameter IDLE  = 3'b000,
          WFI2  = 3'b001,
          ITER  = 3'b010,
          CMPLT = 3'b011,
          WFWB  = 3'b100; // EX2 stall set and must wait for wb.

always @ (posedge div_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    div_cur_state[2:0] <= IDLE;
  else if (div_flush)
    div_cur_state[2:0] <= IDLE;
  else
    div_cur_state[2:0] <= div_next_state[2:0];
end

// &CombBeg; @66
always @( div_iter_start
       or div_ex2_enable_wb
       or div_cur_state
       or div_iter_cmplt)
begin
case (div_cur_state)
  IDLE:
  begin
    if (div_iter_start)
      div_next_state = WFI2;
    else
      div_next_state = IDLE;
  end
  WFI2:
    div_next_state = ITER;
  ITER:
  begin
    if (div_iter_cmplt)
      div_next_state = CMPLT;
    else
      div_next_state = ITER;
  end
  CMPLT:
  begin
    if (div_ex2_enable_wb)
      if (div_iter_start)
        div_next_state = WFI2;
      else
        div_next_state = IDLE;
    else
      div_next_state = WFWB;
  end
  WFWB:
  begin
    if (div_ex2_enable_wb)
      if (div_iter_start)
        div_next_state = WFI2;
      else
        div_next_state = IDLE;
    else
      div_next_state = WFWB;
  end
  default:
    div_next_state = IDLE;
endcase
// &CombEnd; @107
end


assign div_is_idle      = div_cur_state == IDLE
                       || div_ex2_res_vld;       // Next state will be IDLE;
assign div_iter_start   = div_inst_vld && !div_ex1_res_vld;
assign div_prepare_src0 = div_is_idle &&  div_iter_start;
assign div_prepare_src1 = div_cur_state == WFI2;
assign div_iterating    = div_cur_state == ITER;
assign div_cmplt        = div_cur_state == CMPLT;
assign div_wfwb         = div_cur_state == WFWB;





assign div_dividend_eq0                 = div_dividend[31:0] == 32'b0;
assign div_dividend_eq0_quotient[31:0]  = 32'b0;
assign div_dividend_eq0_remainder[31:0] = 32'b0;

assign div_divisor_eq0                  = div_divisor[31:0] == 32'b0;
assign div_divisor_eq0_quotient[31:0]   = 32'hffff_ffff;
assign div_divisor_eq0_remainder[31:0]  = div_dividend[31:0];

assign div_res_overflow                 = div_oper_is_signed
                                       && (div_dividend[31:0] == 32'h8000_0000)
                                       && (div_divisor[31:0] == 32'hffff_ffff);
assign div_res_overflow_quotient[31:0]  = 32'h8000_0000;
assign div_res_overflow_remainder[31:0] = 32'b0;

assign div_abnormal_res_vld             = div_dividend_eq0
                                       || div_divisor_eq0
                                       || div_res_overflow;
assign div_abnormal_quotient[31:0]      = {32{div_dividend_eq0}} & div_dividend_eq0_quotient
                                        | {32{div_divisor_eq0}}  & div_divisor_eq0_quotient
                                        | {32{div_res_overflow}} & div_res_overflow_quotient;
assign div_abnormal_remainder[31:0]     = {32{div_dividend_eq0}} & div_dividend_eq0_remainder
                                        | {32{div_divisor_eq0}}  & div_divisor_eq0_remainder
                                        | {32{div_res_overflow}} & div_res_overflow_remainder;
assign div_abnormal_res[31:0]           = div_res_sel_quotient ? div_abnormal_quotient[31:0]
                                                               : div_abnormal_remainder[31:0];

assign div_hit_buffer_res_vld           = div_hit_buffer;
assign div_hit_buffer_res[31:0]         = div_res_sel_quotient ? div_quotient_res[31:0]
                                                               : div_remainder_res[31:0];

assign div_ex1_res_vld                  = (div_abnormal_res_vld || div_hit_buffer_res_vld)
                                        && div_is_idle;
assign div_ex1_res[31:0]                = div_abnormal_res_vld ? div_abnormal_res[31:0]
                                                               : div_hit_buffer_res[31:0];






assign div_abs_src[31:0] = div_prepare_src1 ? div_divisor_reg[31:0]
                                            : div_dividend[31:0];

assign div_is_signed     = div_prepare_src1 ? div_oper_is_signed_flop
                                            : div_oper_is_signed;

assign div_src_is_neg    = div_is_signed ? div_abs_src[31]
                                         : 1'b0;

assign div_abs_res[31:0] = div_src_is_neg ? ~div_abs_src[31:0] + 32'b1
                                          :  div_abs_src[31:0];

assign div_ff1_src[31:0] = div_abs_src[31:0];
// &CombBeg; @176
always @( div_ff1_src[31:0])
begin
  casez (div_ff1_src[31:0])
    32'b1???????????????????????????????: div_ff1_res_pos[4:0] = 5'd31;
    32'b01??????????????????????????????: div_ff1_res_pos[4:0] = 5'd30;
    32'b001?????????????????????????????: div_ff1_res_pos[4:0] = 5'd29;
    32'b0001????????????????????????????: div_ff1_res_pos[4:0] = 5'd28;
    32'b00001???????????????????????????: div_ff1_res_pos[4:0] = 5'd27;
    32'b000001??????????????????????????: div_ff1_res_pos[4:0] = 5'd26;
    32'b0000001?????????????????????????: div_ff1_res_pos[4:0] = 5'd25;
    32'b00000001????????????????????????: div_ff1_res_pos[4:0] = 5'd24;
    32'b000000001???????????????????????: div_ff1_res_pos[4:0] = 5'd23;
    32'b0000000001??????????????????????: div_ff1_res_pos[4:0] = 5'd22;
    32'b00000000001?????????????????????: div_ff1_res_pos[4:0] = 5'd21;
    32'b000000000001????????????????????: div_ff1_res_pos[4:0] = 5'd20;
    32'b0000000000001???????????????????: div_ff1_res_pos[4:0] = 5'd19;
    32'b00000000000001??????????????????: div_ff1_res_pos[4:0] = 5'd18;
    32'b000000000000001?????????????????: div_ff1_res_pos[4:0] = 5'd17;
    32'b0000000000000001????????????????: div_ff1_res_pos[4:0] = 5'd16;
    32'b00000000000000001???????????????: div_ff1_res_pos[4:0] = 5'd15;
    32'b000000000000000001??????????????: div_ff1_res_pos[4:0] = 5'd14;
    32'b0000000000000000001?????????????: div_ff1_res_pos[4:0] = 5'd13;
    32'b00000000000000000001????????????: div_ff1_res_pos[4:0] = 5'd12;
    32'b000000000000000000001???????????: div_ff1_res_pos[4:0] = 5'd11;
    32'b0000000000000000000001??????????: div_ff1_res_pos[4:0] = 5'd10;
    32'b00000000000000000000001?????????: div_ff1_res_pos[4:0] = 5'd9;
    32'b000000000000000000000001????????: div_ff1_res_pos[4:0] = 5'd8;
    32'b0000000000000000000000001???????: div_ff1_res_pos[4:0] = 5'd7;
    32'b00000000000000000000000001??????: div_ff1_res_pos[4:0] = 5'd6;
    32'b000000000000000000000000001?????: div_ff1_res_pos[4:0] = 5'd5;
    32'b0000000000000000000000000001????: div_ff1_res_pos[4:0] = 5'd4;
    32'b00000000000000000000000000001???: div_ff1_res_pos[4:0] = 5'd3;
    32'b000000000000000000000000000001??: div_ff1_res_pos[4:0] = 5'd2;
    32'b0000000000000000000000000000001?: div_ff1_res_pos[4:0] = 5'd1;
    32'b00000000000000000000000000000001: div_ff1_res_pos[4:0] = 5'd0;
    32'b00000000000000000000000000000000: div_ff1_res_pos[4:0] = 5'd0;       // In div, src eq 0 is meanless, don't care.
    default:                              div_ff1_res_pos[4:0] = {5{1'bx}};
  endcase
// &CombEnd; @213
end




assign div_ff1_res_neg[4:0] =
  {5{  div_ff1_src[31]     && !div_ff1_src[30] && !(|div_ff1_src[29:0])}} & 5'd31
| {5{  div_ff1_src[31]     && !div_ff1_src[30] &&  (|div_ff1_src[29:0])}} & 5'd30
| {5{(&div_ff1_src[31:30]) && !div_ff1_src[29] && !(|div_ff1_src[28:0])}} & 5'd30
| {5{(&div_ff1_src[31:30]) && !div_ff1_src[29] &&  (|div_ff1_src[28:0])}} & 5'd29
| {5{(&div_ff1_src[31:29]) && !div_ff1_src[28] && !(|div_ff1_src[27:0])}} & 5'd29
| {5{(&div_ff1_src[31:29]) && !div_ff1_src[28] &&  (|div_ff1_src[27:0])}} & 5'd28
| {5{(&div_ff1_src[31:28]) && !div_ff1_src[27] && !(|div_ff1_src[26:0])}} & 5'd28
| {5{(&div_ff1_src[31:28]) && !div_ff1_src[27] &&  (|div_ff1_src[26:0])}} & 5'd27
| {5{(&div_ff1_src[31:27]) && !div_ff1_src[26] && !(|div_ff1_src[25:0])}} & 5'd27
| {5{(&div_ff1_src[31:27]) && !div_ff1_src[26] &&  (|div_ff1_src[25:0])}} & 5'd26
| {5{(&div_ff1_src[31:26]) && !div_ff1_src[25] && !(|div_ff1_src[24:0])}} & 5'd26
| {5{(&div_ff1_src[31:26]) && !div_ff1_src[25] &&  (|div_ff1_src[24:0])}} & 5'd25
| {5{(&div_ff1_src[31:25]) && !div_ff1_src[24] && !(|div_ff1_src[23:0])}} & 5'd25
| {5{(&div_ff1_src[31:25]) && !div_ff1_src[24] &&  (|div_ff1_src[23:0])}} & 5'd24
| {5{(&div_ff1_src[31:24]) && !div_ff1_src[23] && !(|div_ff1_src[22:0])}} & 5'd24
| {5{(&div_ff1_src[31:24]) && !div_ff1_src[23] &&  (|div_ff1_src[22:0])}} & 5'd23
| {5{(&div_ff1_src[31:23]) && !div_ff1_src[22] && !(|div_ff1_src[21:0])}} & 5'd23
| {5{(&div_ff1_src[31:23]) && !div_ff1_src[22] &&  (|div_ff1_src[21:0])}} & 5'd22
| {5{(&div_ff1_src[31:22]) && !div_ff1_src[21] && !(|div_ff1_src[20:0])}} & 5'd22
| {5{(&div_ff1_src[31:22]) && !div_ff1_src[21] &&  (|div_ff1_src[20:0])}} & 5'd21
| {5{(&div_ff1_src[31:21]) && !div_ff1_src[20] && !(|div_ff1_src[19:0])}} & 5'd21
| {5{(&div_ff1_src[31:21]) && !div_ff1_src[20] &&  (|div_ff1_src[19:0])}} & 5'd20
| {5{(&div_ff1_src[31:20]) && !div_ff1_src[19] && !(|div_ff1_src[18:0])}} & 5'd20
| {5{(&div_ff1_src[31:20]) && !div_ff1_src[19] &&  (|div_ff1_src[18:0])}} & 5'd19
| {5{(&div_ff1_src[31:19]) && !div_ff1_src[18] && !(|div_ff1_src[17:0])}} & 5'd19
| {5{(&div_ff1_src[31:19]) && !div_ff1_src[18] &&  (|div_ff1_src[17:0])}} & 5'd18
| {5{(&div_ff1_src[31:18]) && !div_ff1_src[17] && !(|div_ff1_src[16:0])}} & 5'd18
| {5{(&div_ff1_src[31:18]) && !div_ff1_src[17] &&  (|div_ff1_src[16:0])}} & 5'd17
| {5{(&div_ff1_src[31:17]) && !div_ff1_src[16] && !(|div_ff1_src[15:0])}} & 5'd17
| {5{(&div_ff1_src[31:17]) && !div_ff1_src[16] &&  (|div_ff1_src[15:0])}} & 5'd16
| {5{(&div_ff1_src[31:16]) && !div_ff1_src[15] && !(|div_ff1_src[14:0])}} & 5'd16
| {5{(&div_ff1_src[31:16]) && !div_ff1_src[15] &&  (|div_ff1_src[14:0])}} & 5'd15
| {5{(&div_ff1_src[31:15]) && !div_ff1_src[14] && !(|div_ff1_src[13:0])}} & 5'd15
| {5{(&div_ff1_src[31:15]) && !div_ff1_src[14] &&  (|div_ff1_src[13:0])}} & 5'd14
| {5{(&div_ff1_src[31:14]) && !div_ff1_src[13] && !(|div_ff1_src[12:0])}} & 5'd14
| {5{(&div_ff1_src[31:14]) && !div_ff1_src[13] &&  (|div_ff1_src[12:0])}} & 5'd13
| {5{(&div_ff1_src[31:13]) && !div_ff1_src[12] && !(|div_ff1_src[11:0])}} & 5'd13
| {5{(&div_ff1_src[31:13]) && !div_ff1_src[12] &&  (|div_ff1_src[11:0])}} & 5'd12
| {5{(&div_ff1_src[31:12]) && !div_ff1_src[11] && !(|div_ff1_src[10:0])}} & 5'd12
| {5{(&div_ff1_src[31:12]) && !div_ff1_src[11] &&  (|div_ff1_src[10:0])}} & 5'd11
| {5{(&div_ff1_src[31:11]) && !div_ff1_src[10] && !(|div_ff1_src[9:0])}}  & 5'd11
| {5{(&div_ff1_src[31:11]) && !div_ff1_src[10] &&  (|div_ff1_src[9:0])}}  & 5'd10
| {5{(&div_ff1_src[31:10]) && !div_ff1_src[9]  && !(|div_ff1_src[8:0])}}  & 5'd10
| {5{(&div_ff1_src[31:10]) && !div_ff1_src[9]  &&  (|div_ff1_src[8:0])}}  & 5'd9
| {5{(&div_ff1_src[31:9])  && !div_ff1_src[8]  && !(|div_ff1_src[7:0])}}  & 5'd9
| {5{(&div_ff1_src[31:9])  && !div_ff1_src[8]  &&  (|div_ff1_src[7:0])}}  & 5'd8
| {5{(&div_ff1_src[31:8])  && !div_ff1_src[7]  && !(|div_ff1_src[6:0])}}  & 5'd8
| {5{(&div_ff1_src[31:8])  && !div_ff1_src[7]  &&  (|div_ff1_src[6:0])}}  & 5'd7
| {5{(&div_ff1_src[31:7])  && !div_ff1_src[6]  && !(|div_ff1_src[5:0])}}  & 5'd7
| {5{(&div_ff1_src[31:7])  && !div_ff1_src[6]  &&  (|div_ff1_src[5:0])}}  & 5'd6
| {5{(&div_ff1_src[31:6])  && !div_ff1_src[5]  && !(|div_ff1_src[4:0])}}  & 5'd6
| {5{(&div_ff1_src[31:6])  && !div_ff1_src[5]  &&  (|div_ff1_src[4:0])}}  & 5'd5
| {5{(&div_ff1_src[31:5])  && !div_ff1_src[4]  && !(|div_ff1_src[3:0])}}  & 5'd5
| {5{(&div_ff1_src[31:5])  && !div_ff1_src[4]  &&  (|div_ff1_src[3:0])}}  & 5'd4
| {5{(&div_ff1_src[31:4])  && !div_ff1_src[3]  && !(|div_ff1_src[2:0])}}  & 5'd4
| {5{(&div_ff1_src[31:4])  && !div_ff1_src[3]  &&  (|div_ff1_src[2:0])}}  & 5'd3
| {5{(&div_ff1_src[31:3])  && !div_ff1_src[2]  && !(|div_ff1_src[1:0])}}  & 5'd3
| {5{(&div_ff1_src[31:3])  && !div_ff1_src[2]  &&  (|div_ff1_src[1:0])}}  & 5'd2
| {5{(&div_ff1_src[31:2])  && !div_ff1_src[1]  &&   !div_ff1_src[0]}}     & 5'd2
| {5{(&div_ff1_src[31:2])  && !div_ff1_src[1]  &&    div_ff1_src[0]}}     & 5'd1
| {5{(&div_ff1_src[31:1])  && !div_ff1_src[0]}}                   & 5'd1
| {5{(&div_ff1_src[31:0])}}                               & 5'd0;

assign div_ff1_res[4:0] = div_src_is_neg ? div_ff1_res_neg[4:0]
                                         : div_ff1_res_pos[4:0];


always @ (posedge div_clk)
begin
  if (idu_xx_ex1_warm_up) begin
    div_oper_is_signed_flop   <= 1'b0;
    div_res_sel_quotient_flop <= 1'b0;

    div_divisor_31            <= 1'b0;
  end
  else if (div_prepare_src0) begin
    div_oper_is_signed_flop   <= div_oper_is_signed;
    div_res_sel_quotient_flop <= div_res_sel_quotient;

    div_divisor_31            <= div_divisor[31];
  end
end

assign div_dividend_31 = div_dividend_raw[31];

assign div_res_quotient_neg  = div_oper_is_signed_flop && (div_dividend_31 ^ div_divisor_31);
assign div_res_remainder_neg = div_oper_is_signed_flop && div_dividend_31;



always @ (posedge div_clk)
begin
  if (idu_xx_ex1_warm_up)
    div_divisor_reg[31:0] <= 32'b0;
  else if (div_prepare_src0)
    div_divisor_reg[31:0] <= div_divisor[31:0];
  else if (div_prepare_src1)
    div_divisor_reg[31:0] <= div_abs_res[31:0];
  else if (div_iter_cmplt)
    div_divisor_reg[31:0] <= div_divisor_raw[31:0];
end

assign div_divisor_raw_is_neg = div_oper_is_signed_flop && div_divisor_31;
assign div_divisor_raw[31:0] = div_divisor_raw_is_neg ? ~div_divisor_reg[31:0] + 32'b1
                                                      : div_divisor_reg[31:0];


always @ (posedge div_clk)
begin
  if (idu_xx_ex1_warm_up) begin
    div_quotient_reg[31:0]  <= 32'b0;
    div_remainder_reg[31:0] <= 32'b0;
  end
  else if (div_prepare_src0) begin
    div_quotient_reg[31:0]  <= 32'b0;
    div_remainder_reg[31:0] <= div_abs_res[31:0];
  end
  else if (div_cmplt) begin
    div_quotient_reg[31:0]  <= div_normal_quotient[31:0];
    div_remainder_reg[31:0] <= div_normal_remainder[31:0];
  end
  else if (div_iterating) begin
    div_quotient_reg[31:0]  <= div_quotient_reg_updt[31:0];
    div_remainder_reg[31:0] <= div_remainder_reg_updt[31:0];
  end
end



// &Instance("pa_iu_div_shift2_kernel", "x_pa_iu_div_kernel"); @348
pa_iu_div_shift2_kernel  x_pa_iu_div_kernel (
  .cpurst_b               (cpurst_b              ),
  .div_clk                (div_clk               ),
  .div_divisor_reg        (div_divisor_reg       ),
  .div_ff1_res            (div_ff1_res           ),
  .div_flush              (div_flush             ),
  .div_iter_cmplt         (div_iter_cmplt        ),
  .div_iterating          (div_iterating         ),
  .div_prepare_src0       (div_prepare_src0      ),
  .div_prepare_src1       (div_prepare_src1      ),
  .div_quotient_reg       (div_quotient_reg      ),
  .div_quotient_reg_updt  (div_quotient_reg_updt ),
  .div_remainder_reg      (div_remainder_reg     ),
  .div_remainder_reg_updt (div_remainder_reg_updt)
);



assign div_normal_quotient[31:0]          = div_res_quotient_neg ? ~div_quotient_reg[31:0] + 32'b1
                                                                 : div_quotient_reg[31:0];
assign div_normal_remainder[31:0]         = div_res_remainder_neg ? ~div_remainder_reg[31:0] + 32'b1
                                                                  : div_remainder_reg[31:0];

assign div_quotient_res[31:0]  = div_cmplt ? div_normal_quotient[31:0]
                                           : div_quotient_reg[31:0];
assign div_remainder_res[31:0] = div_cmplt ? div_normal_remainder[31:0]
                                           : div_remainder_reg[31:0];


assign div_ex2_enable_wb  = rtu_iu_ex2_div_wb_en
                         && div_wb_sm_cmplt;
assign div_ex2_res_vld_raw = (div_cmplt || div_wfwb)    // div main state.
                          && div_wb_sm_cmplt;           // div wb state
assign div_ex2_res_vld    = div_ex2_res_vld_raw && rtu_iu_ex2_div_wb_en;
assign div_ex2_res[31:0]  = div_res_sel_quotient_flop ? div_quotient_res[31:0]
                                                      : div_remainder_res[31:0];





parameter WB_IDLE  = 2'b00,
          WB_EX2   = 2'b10,
          WB_CMPLT = 2'b01;

always @ (posedge div_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_cur_state[1:0] <= WB_IDLE;
  else if (div_flush)
    wb_cur_state[1:0] <= WB_IDLE;
  else
    wb_cur_state[1:0] <= wb_nxt_state[1:0];
end

// &CombBeg; @388
always @( div_ex2_res_vld
       or div_iter_start
       or div_ex1_res_vld
       or div_inst_vld
       or wb_cur_state
       or rtu_iu_ex2_stall)
begin
  case(wb_cur_state)
    WB_IDLE:
      if (div_inst_vld)
        if (rtu_iu_ex2_stall || div_ex1_res_vld)
          wb_nxt_state = WB_IDLE;
        else
          wb_nxt_state = WB_EX2;
      else
        wb_nxt_state = WB_IDLE;
    WB_EX2:
      if (rtu_iu_ex2_stall)
        wb_nxt_state = WB_EX2;
      else
        if (div_ex2_res_vld)
          if (div_iter_start && !rtu_iu_ex2_stall)
            wb_nxt_state = WB_EX2;
          else
            wb_nxt_state = WB_IDLE;
        else
          wb_nxt_state = WB_CMPLT;
    WB_CMPLT:
      if (div_ex2_res_vld)
        if (div_iter_start && !rtu_iu_ex2_stall)
          wb_nxt_state = WB_EX2;
        else
          wb_nxt_state = WB_IDLE;
      else
        wb_nxt_state = WB_CMPLT;
    default:
      wb_nxt_state = WB_IDLE;
  endcase
// &CombEnd; @420
end

assign div_wb_sm_idle  = wb_cur_state == WB_IDLE
                      || wb_cur_state == WB_CMPLT && div_ex2_res_vld;
assign div_wb_sm_ex2   = wb_cur_state == WB_EX2;
assign div_wb_sm_cmplt = wb_cur_state == WB_EX2
                      || wb_cur_state == WB_CMPLT;







assign iu_rtu_ex1_div_cmplt      = div_inst_vld && !div_ex1_stall;
// &Force("output", "iu_rtu_ex1_div_cmplt"); @435
assign iu_rtu_ex1_div_wb_vld     = div_ex1_res_vld && iu_rtu_ex1_div_cmplt;
assign iu_rtu_ex1_div_data[31:0] = div_ex1_res[31:0];

assign iu_rtu_ex2_div_wb_vld     = div_ex2_res_vld_raw;
assign iu_rtu_ex2_div_data[31:0] = div_ex2_res[31:0];
assign iu_rtu_ex2_div_preg[4:0]  = div_dst_preg[4:0];












assign div_ex1_stall =  div_inst_vld && !div_is_idle && !div_wb_sm_idle;
assign iu_rtu_div_ex1_stall = div_ex1_stall;




assign div_flush        = rtu_xx_ex1_cancel && div_wb_sm_idle
                       || rtu_xx_ex2_cancel && div_wb_sm_ex2
                       || rtu_yy_xx_async_flush;
assign div_not_cmplt    = div_flush && (div_cur_state != IDLE || div_prepare_src0);
assign div_flush_buffer = div_not_cmplt || idu_xx_ex1_warm_up;





always @ (posedge div_clk)
begin
  if (div_flush_buffer)
    div_dividend_raw[31:0] <= 32'b0;
  else if (div_prepare_src0)
    div_dividend_raw[31:0] <= div_dividend[31:0];
end

assign div_dividend_hit_buffer = div_dividend_raw[31:0] == div_dividend[31:0];
assign div_divisor_hit_buffer  = div_divisor_reg[31:0]  == div_divisor[31:0];
assign div_signed_hit_buffer   = div_oper_is_signed_flop == div_oper_is_signed;

assign div_hit_buffer = div_dividend_hit_buffer
                     && div_divisor_hit_buffer
                     && div_signed_hit_buffer;




assign div_clk_en_raw = div_inst_vld || (div_cur_state != IDLE)
                                     || (wb_cur_state != WB_IDLE);
assign div_ctrl_itering = !div_is_idle;




assign div_clk_en = div_clk_en_raw
                 || idu_xx_ex1_warm_up;

// &Instance("gated_clk_cell", "x_div_clk"); @499
gated_clk_cell  x_div_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (div_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (div_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @500
//          .external_en (1'b0), @501
//          .global_en   (cp0_yy_clk_en), @502
//          .module_en   (1'b0), @503
//          .local_en    (div_clk_en), @504
//          .clk_out     (div_clk)); @505



// &ModuleEnd; @512
endmodule
























// &ModuleBeg; @23
module pa_iu_div_shift2_kernel(
  cpurst_b,
  div_clk,
  div_divisor_reg,
  div_ff1_res,
  div_flush,
  div_iter_cmplt,
  div_iterating,
  div_prepare_src0,
  div_prepare_src1,
  div_quotient_reg,
  div_quotient_reg_updt,
  div_remainder_reg,
  div_remainder_reg_updt
);

// &Ports; @24
input           cpurst_b;
input           div_clk;
input   [31:0]  div_divisor_reg;
input   [4 :0]  div_ff1_res;
input           div_flush;
input           div_iterating;
input           div_prepare_src0;
input           div_prepare_src1;
input   [31:0]  div_quotient_reg;
input   [31:0]  div_remainder_reg;
output          div_iter_cmplt;
output  [31:0]  div_quotient_reg_updt;
output  [31:0]  div_remainder_reg_updt;

// &Regs; @25
reg     [4 :0]  div_iter_count;
reg     [31:0]  div_remainder_reg_updt;
reg     [1 :0]  div_shift_in;

// &Wires; @26
wire            cpurst_b;
wire            div_clk;
wire    [33:0]  div_divisor_01;
wire    [33:0]  div_divisor_10;
wire    [31:0]  div_divisor_reg;
wire    [4 :0]  div_ff1_res;
wire            div_flush;
wire            div_iter_cmplt;
wire    [4 :0]  div_iter_count_updt;
wire            div_iter_count_updt_0;
wire    [4 :0]  div_iter_sub;
wire            div_iterating;
wire            div_prepare_src0;
wire            div_prepare_src1;
wire    [31:0]  div_quotient_reg;
wire    [31:0]  div_quotient_reg_updt;
wire            div_remainder_lt_divisor_01;
wire            div_remainder_lt_divisor_10;
wire            div_remainder_lt_divisor_11;
wire    [31:0]  div_remainder_reg;
wire            div_suber_c1_01;
wire            div_suber_c1_10;
wire            div_suber_c1_11;
wire    [33:0]  div_suber_res1_01;
wire    [33:0]  div_suber_res1_10;
wire    [33:0]  div_suber_res1_11;








// &Force("bus", "div_quotient_reg", 31, 0); @34




assign div_iter_sub[4:0]          = div_prepare_src1 ? div_ff1_res[4:0]
                                                     : div_iterating ? 5'b10
                                                                     : 5'b0;

assign div_iter_count_updt_0 = div_iter_count[4:0] < div_iter_sub[4:0];
assign div_iter_count_updt[4:0] = div_iter_count_updt_0 ? 5'b0
                                                        : div_iter_count[4:0] - div_iter_sub[4:0];

always @ (posedge div_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    div_iter_count[4:0] <= 5'b0;
  else if (div_flush)
    div_iter_count[4:0] <= 5'b0;
  else if (div_prepare_src0)
    div_iter_count[4:0] <= div_ff1_res[4:0];
  else if (div_prepare_src1 || div_iterating)
    div_iter_count[4:0] <= div_iter_count_updt[4:0];
end

assign div_iter_cmplt     = div_iterating && (div_iter_count == 5'b0
                                           || div_iter_count == 5'b1);
// &Force("output", "div_iter_cmplt"); @61






assign div_divisor_01[33:0]                 = {2'b0, div_divisor_reg[31:0]} << {div_iter_count[4:1], 1'b0};
assign div_divisor_10[33:0]                 = {1'b0, div_divisor_reg[31:0], 1'b0} << {div_iter_count[4:1], 1'b0};


assign {div_suber_c1_01, div_suber_res1_01[33:0]} = {3'b0, div_remainder_reg[31:0]} - {1'b0, div_divisor_01[33:0]};
assign {div_suber_c1_10, div_suber_res1_10[33:0]} = {3'b0, div_remainder_reg[31:0]} - {1'b0, div_divisor_10[33:0]};
assign {div_suber_c1_11, div_suber_res1_11[33:0]} = {3'b0, div_remainder_reg[31:0]} - {1'b0, div_divisor_01[33:0]} - {1'b0, div_divisor_10[33:0]};
assign div_remainder_lt_divisor_01          = div_suber_c1_01;
assign div_remainder_lt_divisor_10          = div_suber_c1_10;
assign div_remainder_lt_divisor_11          = div_suber_c1_11;




// &CombBeg; @82
always @( div_remainder_lt_divisor_01
       or div_remainder_lt_divisor_10
       or div_remainder_lt_divisor_11)
begin
  casez({div_remainder_lt_divisor_01, div_remainder_lt_divisor_10, div_remainder_lt_divisor_11})
    3'b1??:  div_shift_in[1:0] = 2'b00;
    3'b01?:  div_shift_in[1:0] = 2'b01;
    3'b001:  div_shift_in[1:0] = 2'b10;
    3'b000:  div_shift_in[1:0] = 2'b11;
    default: div_shift_in[1:0] = {2{1'bx}};
  endcase
// &CombEnd; @90
end

assign div_quotient_reg_updt[31:0]        = {div_quotient_reg[29:0], div_shift_in[1:0]};

// &CombBeg; @94
always @( div_remainder_reg[31:0]
       or div_suber_res1_10[31:0]
       or div_suber_res1_01[31:0]
       or div_remainder_lt_divisor_01
       or div_remainder_lt_divisor_10
       or div_suber_res1_11[31:0]
       or div_remainder_lt_divisor_11)
begin
  casez({div_remainder_lt_divisor_01, div_remainder_lt_divisor_10, div_remainder_lt_divisor_11})
    3'b1??:  div_remainder_reg_updt[31:0] = div_remainder_reg[31:0];
    3'b01?:  div_remainder_reg_updt[31:0] = div_suber_res1_01[31:0];
    3'b001:  div_remainder_reg_updt[31:0] = div_suber_res1_10[31:0];
    3'b000:  div_remainder_reg_updt[31:0] = div_suber_res1_11[31:0];
    default: div_remainder_reg_updt[31:0] = {32{1'bx}};
  endcase
// &CombEnd; @102
end

// &ModuleEnd; @104
endmodule
























// &ModuleBeg; @23
module pa_iu_mul(
  cp0_yy_clk_en,
  forever_cpuclk,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_func,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_mul_high_sel,
  idu_iu_ex1_mul_sel,
  idu_iu_ex1_src0,
  idu_iu_ex1_src1,
  idu_iu_ex1_src2,
  idu_iu_ex1_sub_func,
  idu_xx_ex1_warm_up,
  iu_rtu_ex1_mul_cmplt,
  iu_rtu_ex2_mul_wb_data,
  iu_rtu_ex2_mul_wb_preg,
  pad_yy_gate_clk_en_b,
  rtu_iu_ex2_stall
);

// &Ports; @24
input           cp0_yy_clk_en;
input           forever_cpuclk;
input   [5 :0]  idu_iu_ex1_dst_preg;
input   [4 :0]  idu_iu_ex1_func;
input           idu_iu_ex1_inst_vld;
input           idu_iu_ex1_mul_high_sel;
input           idu_iu_ex1_mul_sel;
input   [31:0]  idu_iu_ex1_src0;
input   [31:0]  idu_iu_ex1_src1;
input   [31:0]  idu_iu_ex1_src2;
input   [4 :0]  idu_iu_ex1_sub_func;
input           idu_xx_ex1_warm_up;
input           pad_yy_gate_clk_en_b;
input           rtu_iu_ex2_stall;
output          iu_rtu_ex1_mul_cmplt;
output  [31:0]  iu_rtu_ex2_mul_wb_data;
output  [5 :0]  iu_rtu_ex2_mul_wb_preg;

// &Regs; @25
reg             mul_ex2_result_low;
reg     [4 :0]  mul_ex2_wb_preg_4_0;
reg     [67:0]  mul_ex2_wb_res_0;
reg     [67:0]  mul_ex2_wb_res_1;
reg     [31:0]  mul_ex2_wb_res_2;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            forever_cpuclk;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_vld;
wire            idu_iu_ex1_mul_high_sel;
wire            idu_iu_ex1_mul_sel;
wire    [31:0]  idu_iu_ex1_src0;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_xx_ex1_warm_up;
wire            iu_rtu_ex1_mul_cmplt;
wire    [31:0]  iu_rtu_ex2_mul_wb_data;
wire    [5 :0]  iu_rtu_ex2_mul_wb_preg;
wire            mul_clk;
wire            mul_clk_en;
wire            mul_ex1_wb_pipe_down;
wire    [4 :0]  mul_func;
wire            mul_high_clk;
wire            mul_high_clk_en;
wire            mul_high_sel;
wire            mul_inst_mul;
wire            mul_low16;
wire            mul_low16_rs1_sign;
wire            mul_low16_rs2_sign;
wire            mul_mula;
wire            mul_muls;
wire    [31:0]  mul_res;
wire    [67:0]  mul_res_raw;
wire    [32:0]  mul_rs1;
wire    [16:0]  mul_rs1_high;
wire    [16:0]  mul_rs1_high_raw;
wire    [15:0]  mul_rs1_low;
wire            mul_rs1_signed;
wire    [32:0]  mul_rs1_tmp0;
wire    [32:0]  mul_rs1_tmp1;
wire    [32:0]  mul_rs2;
wire    [16:0]  mul_rs2_high;
wire    [16:0]  mul_rs2_high_raw;
wire    [15:0]  mul_rs2_low;
wire            mul_rs2_signed;
wire    [31:0]  mul_rs3;
wire    [31:0]  mul_rs3_mula;
wire    [31:0]  mul_rs3_muls;
wire    [31:0]  mul_rs3_raw;
wire            mul_sel;
wire    [32:0]  multiplicand;
wire    [32:0]  multiplier;
wire            pad_yy_gate_clk_en_b;
wire    [67:0]  result_0;
wire    [67:0]  result_1;
wire            rtu_iu_ex2_stall;


assign mul_sel           = idu_iu_ex1_mul_sel;
// &Force("bus", "idu_iu_ex1_sub_func", 4, 0); @29
// &Force("bus", "idu_iu_ex1_src0", 31, 0); @30
// &Force("bus", "idu_iu_ex1_src1", 31, 0); @31
assign mul_inst_mul     = idu_iu_ex1_sub_func[2];

assign mul_rs1_signed = idu_iu_ex1_sub_func[0];
assign mul_rs2_signed = idu_iu_ex1_sub_func[1];

assign mul_rs3_raw[31:0]  = idu_iu_ex1_src2[31:0] & {32{mul_sel}};
assign mul_func[4:0]      = idu_iu_ex1_func[4:0] & {5{idu_iu_ex1_mul_sel}};
assign mul_mula           = mul_func[0];
assign mul_muls           = mul_func[1];
assign mul_high_sel       = idu_iu_ex1_mul_high_sel;
assign mul_low16          = idu_iu_ex1_sub_func[4];

assign mul_low16_rs1_sign     = mul_low16 & mul_rs1_low[15];
assign mul_low16_rs2_sign     = mul_low16 & mul_rs2_low[15];
assign mul_rs1_high[16:0]     =  mul_rs1_high_raw[16:0] | {17{mul_low16_rs1_sign}};
assign mul_rs2_high[16:0]     =  mul_rs2_high_raw[16:0] | {17{mul_low16_rs2_sign}};
assign mul_rs1_high_raw[16:0] = {(mul_rs1_signed && idu_iu_ex1_src0[31]), idu_iu_ex1_src0[31:16]} & {17{mul_high_sel}};
assign mul_rs2_high_raw[16:0] = {(mul_rs2_signed && idu_iu_ex1_src1[31]), idu_iu_ex1_src1[31:16]} & {17{mul_high_sel}};

// &Force("input", "idu_iu_ex1_mul_high_sel"); @53
// &Force("input", "idu_iu_ex1_src2"); &Force("bus", "idu_iu_ex1_src2", 31, 0); @54
assign mul_rs1_low[15:0]  = idu_iu_ex1_src0[15:0] & {16{mul_sel}};
assign mul_rs2_low[15:0]  = idu_iu_ex1_src1[15:0] & {16{mul_sel}};


// &Force("bus", "idu_iu_ex1_sub_func", 4, 0); @62

assign mul_rs1_tmp0[32:0] = {mul_rs1_high[16:0], mul_rs1_low[15:0]};
assign mul_rs2            = {mul_rs2_high[16:0], mul_rs2_low[15:0]};

assign mul_rs3_mula[31:0] = mul_rs3_raw[31:0];
assign mul_rs3_muls[31:0] = mul_rs3_raw[31:0] + mul_rs2[31:0];
assign mul_rs1_tmp1[32:0] = ~mul_rs1_tmp0[32:0];
assign mul_rs1[32:0] = mul_muls ? mul_rs1_tmp1[32:0] : mul_rs1_tmp0[32:0];
assign mul_rs3[31:0] =  {32{mul_mula}} & mul_rs3_mula[31:0] | {32{mul_muls}} & mul_rs3_muls[31:0];

assign multiplicand[32:0] = mul_rs1[32:0];
assign multiplier[32:0]   = mul_rs2[32:0];









// &Force("nonport", "multiplicand"); @88
// &Force("nonport", "multiplier"); @89
// &Force("nonport", "result_0"); @90
// &Force("nonport", "result_1"); @91
DW02_multp #(33,33,68) multiplier_32x32(
  .a(multiplicand),
  .b(multiplier),
  .tc(1'b1),
  .out0(result_0),
  .out1(result_1)
);





assign mul_ex1_wb_pipe_down = !rtu_iu_ex2_stall;

always @ (posedge mul_clk)
begin
  if (mul_sel && mul_ex1_wb_pipe_down || idu_xx_ex1_warm_up) begin
    mul_ex2_wb_preg_4_0[4:0] <= idu_iu_ex1_dst_preg[4:0];
    mul_ex2_wb_res_0[31:0]   <= result_0[31:0];
    mul_ex2_wb_res_1[31:0]   <= result_1[31:0];
    mul_ex2_result_low       <= mul_inst_mul;
    mul_ex2_wb_res_2[31:0]   <=  mul_rs3[31:0];
  end
end
// &Force("bus", "idu_iu_ex1_dst_preg", 5, 0); @118


always @ (posedge mul_high_clk)
begin
  if (mul_sel && mul_ex1_wb_pipe_down && !mul_inst_mul || idu_xx_ex1_warm_up) begin
    mul_ex2_wb_res_0[67:32]   <= result_0[67:32];
    mul_ex2_wb_res_1[67:32]   <= result_1[67:32];
  end
end

assign mul_res_raw[67:0] = mul_ex2_wb_res_0[67:0] + mul_ex2_wb_res_1[67:0] + {36'b0, mul_ex2_wb_res_2[31:0]};


assign mul_res[31:0] = {32{ mul_ex2_result_low}} & mul_res_raw[31:0]
                     | {32{!mul_ex2_result_low}} & mul_res_raw[63:32];




assign mul_clk_en = mul_sel
                 || idu_xx_ex1_warm_up;
// &Instance("gated_clk_cell", "x_mul_clk"); @144
gated_clk_cell  x_mul_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (mul_clk             ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (mul_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @145
//          .external_en (1'b0), @146
//          .global_en   (cp0_yy_clk_en), @147
//          .module_en   (1'b0), @148
//          .local_en    (mul_clk_en), @149
//          .clk_out     (mul_clk)); @150

assign mul_high_clk_en = mul_sel && !mul_inst_mul
                      || idu_xx_ex1_warm_up;
// &Instance("gated_clk_cell", "x_mul_high_clk"); @154
gated_clk_cell  x_mul_high_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (mul_high_clk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (mul_high_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @155
//          .external_en (1'b0), @156
//          .global_en   (cp0_yy_clk_en), @157
//          .module_en   (1'b0), @158
//          .local_en    (mul_high_clk_en), @159
//          .clk_out     (mul_high_clk)); @160




assign iu_rtu_ex1_mul_cmplt      = idu_iu_ex1_inst_vld && mul_sel;
assign iu_rtu_ex2_mul_wb_preg[5:0] = {1'b0, mul_ex2_wb_preg_4_0};
assign iu_rtu_ex2_mul_wb_data[31:0] = mul_res[31:0];

// &ModuleEnd; @169
endmodule
























// &ModuleBeg; @23
module pa_iu_top(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  idu_iu_ex1_ag_imm,
  idu_iu_ex1_alu_sel,
  idu_iu_ex1_bht_pred,
  idu_iu_ex1_bju_depd_lsu_src0,
  idu_iu_ex1_bju_depd_lsu_src1,
  idu_iu_ex1_bju_sel,
  idu_iu_ex1_bju_use_pc,
  idu_iu_ex1_div_sel,
  idu_iu_ex1_dst_preg,
  idu_iu_ex1_func,
  idu_iu_ex1_inst_len,
  idu_iu_ex1_inst_vld,
  idu_iu_ex1_mul_high_sel,
  idu_iu_ex1_mul_sel,
  idu_iu_ex1_split,
  idu_iu_ex1_src0,
  idu_iu_ex1_src0_reg,
  idu_iu_ex1_src1,
  idu_iu_ex1_src2,
  idu_iu_ex1_sub_func,
  idu_iu_ex1_wb_vld,
  idu_iu_tail_fail,
  idu_iu_tail_fail_gate,
  idu_xx_ex1_warm_up,
  ifu_iu_chgflw_pc,
  ifu_iu_chgflw_vld,
  ifu_iu_ex1_pc_pred,
  ifu_iu_reset_vld,
  iu_hpcp_inst_bht_mispred,
  iu_hpcp_inst_condbr,
  iu_hpcp_inst_condbr_gate,
  iu_idu_ex1_src1_update_value,
  iu_ifu_bht_cur_pc,
  iu_ifu_bht_mispred,
  iu_ifu_bht_pred,
  iu_ifu_bht_taken,
  iu_ifu_br_vld,
  iu_ifu_br_vld_gate,
  iu_ifu_ex1_tar_pc,
  iu_ifu_ex1_tar_pc_vld,
  iu_ifu_link_vld,
  iu_ifu_link_vld_gate,
  iu_ifu_pc_mispred,
  iu_ifu_ret_vld,
  iu_ifu_ret_vld_gate,
  iu_rtu_div_ex1_stall,
  iu_rtu_ex1_alu_cmplt,
  iu_rtu_ex1_alu_data,
  iu_rtu_ex1_bju_chgflw_vld,
  iu_rtu_ex1_bju_cmplt,
  iu_rtu_ex1_bju_cmplt_dp,
  iu_rtu_ex1_bju_data,
  iu_rtu_ex1_bju_stall,
  iu_rtu_ex1_bju_wb_vld,
  iu_rtu_ex1_branch_inst,
  iu_rtu_ex1_cur_pc,
  iu_rtu_ex1_div_cmplt,
  iu_rtu_ex1_div_data,
  iu_rtu_ex1_div_wb_vld,
  iu_rtu_ex1_lsu_wb_data,
  iu_rtu_ex1_lsu_wb_preg,
  iu_rtu_ex1_lsu_wb_vld,
  iu_rtu_ex1_mul_cmplt,
  iu_rtu_ex1_next_pc,
  iu_rtu_ex1_split_inst,
  iu_rtu_ex1_wb_preg,
  iu_rtu_ex1_wb_vld,
  iu_rtu_ex2_chgflw_pc,
  iu_rtu_ex2_chgflw_vld,
  iu_rtu_ex2_div_data,
  iu_rtu_ex2_div_preg,
  iu_rtu_ex2_div_wb_vld,
  iu_rtu_ex2_mul_wb_data,
  iu_rtu_ex2_mul_wb_preg,
  iu_xx_no_op,
  lsu_iu_ex1_base_wb,
  lsu_iu_ex1_src1_sel,
  lsu_iu_ex2_data,
  lsu_iu_ex2_data_vld,
  lsu_iu_ex2_data_vld_gate,
  pad_yy_gate_clk_en_b,
  rtu_iu_ex1_stall,
  rtu_iu_ex2_cur_pc,
  rtu_iu_ex2_div_wb_en,
  rtu_iu_ex2_stall,
  rtu_xx_ex1_cancel,
  rtu_xx_ex2_cancel,
  rtu_yy_xx_async_flush,
  rtu_yy_xx_flush,
  sysio_iu_rst_addr
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  idu_iu_ex1_ag_imm;
input           idu_iu_ex1_alu_sel;
input   [1 :0]  idu_iu_ex1_bht_pred;
input           idu_iu_ex1_bju_depd_lsu_src0;
input           idu_iu_ex1_bju_depd_lsu_src1;
input           idu_iu_ex1_bju_sel;
input           idu_iu_ex1_bju_use_pc;
input           idu_iu_ex1_div_sel;
input   [5 :0]  idu_iu_ex1_dst_preg;
input   [4 :0]  idu_iu_ex1_func;
input           idu_iu_ex1_inst_len;
input           idu_iu_ex1_inst_vld;
input           idu_iu_ex1_mul_high_sel;
input           idu_iu_ex1_mul_sel;
input           idu_iu_ex1_split;
input   [31:0]  idu_iu_ex1_src0;
input   [5 :0]  idu_iu_ex1_src0_reg;
input   [31:0]  idu_iu_ex1_src1;
input   [31:0]  idu_iu_ex1_src2;
input   [4 :0]  idu_iu_ex1_sub_func;
input           idu_iu_ex1_wb_vld;
input           idu_iu_tail_fail;
input           idu_iu_tail_fail_gate;
input           idu_xx_ex1_warm_up;
input   [31:0]  ifu_iu_chgflw_pc;
input           ifu_iu_chgflw_vld;
input   [31:0]  ifu_iu_ex1_pc_pred;
input           ifu_iu_reset_vld;
input           lsu_iu_ex1_base_wb;
input           lsu_iu_ex1_src1_sel;
input   [31:0]  lsu_iu_ex2_data;
input           lsu_iu_ex2_data_vld;
input           lsu_iu_ex2_data_vld_gate;
input           pad_yy_gate_clk_en_b;
input           rtu_iu_ex1_stall;
input   [31:0]  rtu_iu_ex2_cur_pc;
input           rtu_iu_ex2_div_wb_en;
input           rtu_iu_ex2_stall;
input           rtu_xx_ex1_cancel;
input           rtu_xx_ex2_cancel;
input           rtu_yy_xx_async_flush;
input           rtu_yy_xx_flush;
input   [31:0]  sysio_iu_rst_addr;
output          iu_hpcp_inst_bht_mispred;
output          iu_hpcp_inst_condbr;
output          iu_hpcp_inst_condbr_gate;
output  [31:0]  iu_idu_ex1_src1_update_value;
output  [31:0]  iu_ifu_bht_cur_pc;
output          iu_ifu_bht_mispred;
output  [1 :0]  iu_ifu_bht_pred;
output          iu_ifu_bht_taken;
output          iu_ifu_br_vld;
output          iu_ifu_br_vld_gate;
output  [31:0]  iu_ifu_ex1_tar_pc;
output          iu_ifu_ex1_tar_pc_vld;
output          iu_ifu_link_vld;
output          iu_ifu_link_vld_gate;
output          iu_ifu_pc_mispred;
output          iu_ifu_ret_vld;
output          iu_ifu_ret_vld_gate;
output          iu_rtu_div_ex1_stall;
output          iu_rtu_ex1_alu_cmplt;
output  [31:0]  iu_rtu_ex1_alu_data;
output          iu_rtu_ex1_bju_chgflw_vld;
output          iu_rtu_ex1_bju_cmplt;
output          iu_rtu_ex1_bju_cmplt_dp;
output  [31:0]  iu_rtu_ex1_bju_data;
output          iu_rtu_ex1_bju_stall;
output          iu_rtu_ex1_bju_wb_vld;
output          iu_rtu_ex1_branch_inst;
output  [31:0]  iu_rtu_ex1_cur_pc;
output          iu_rtu_ex1_div_cmplt;
output  [31:0]  iu_rtu_ex1_div_data;
output          iu_rtu_ex1_div_wb_vld;
output  [31:0]  iu_rtu_ex1_lsu_wb_data;
output  [5 :0]  iu_rtu_ex1_lsu_wb_preg;
output          iu_rtu_ex1_lsu_wb_vld;
output          iu_rtu_ex1_mul_cmplt;
output  [31:0]  iu_rtu_ex1_next_pc;
output          iu_rtu_ex1_split_inst;
output  [5 :0]  iu_rtu_ex1_wb_preg;
output          iu_rtu_ex1_wb_vld;
output  [31:0]  iu_rtu_ex2_chgflw_pc;
output          iu_rtu_ex2_chgflw_vld;
output  [31:0]  iu_rtu_ex2_div_data;
output  [4 :0]  iu_rtu_ex2_div_preg;
output          iu_rtu_ex2_div_wb_vld;
output  [31:0]  iu_rtu_ex2_mul_wb_data;
output  [5 :0]  iu_rtu_ex2_mul_wb_preg;
output          iu_xx_no_op;

// &Regs; @25

// &Wires; @26
wire    [31:0]  ag_bju_pc;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            div_ctrl_itering;
wire            forever_cpuclk;
wire    [31:0]  idu_iu_ex1_ag_imm;
wire            idu_iu_ex1_alu_sel;
wire    [1 :0]  idu_iu_ex1_bht_pred;
wire            idu_iu_ex1_bju_depd_lsu_src0;
wire            idu_iu_ex1_bju_depd_lsu_src1;
wire            idu_iu_ex1_bju_sel;
wire            idu_iu_ex1_bju_use_pc;
wire            idu_iu_ex1_div_sel;
wire    [5 :0]  idu_iu_ex1_dst_preg;
wire    [4 :0]  idu_iu_ex1_func;
wire            idu_iu_ex1_inst_len;
wire            idu_iu_ex1_inst_vld;
wire            idu_iu_ex1_mul_high_sel;
wire            idu_iu_ex1_mul_sel;
wire            idu_iu_ex1_split;
wire    [31:0]  idu_iu_ex1_src0;
wire    [5 :0]  idu_iu_ex1_src0_reg;
wire    [31:0]  idu_iu_ex1_src1;
wire    [31:0]  idu_iu_ex1_src2;
wire    [4 :0]  idu_iu_ex1_sub_func;
wire            idu_iu_ex1_wb_vld;
wire            idu_iu_tail_fail;
wire            idu_iu_tail_fail_gate;
wire            idu_xx_ex1_warm_up;
wire    [31:0]  ifu_iu_chgflw_pc;
wire            ifu_iu_chgflw_vld;
wire    [31:0]  ifu_iu_ex1_pc_pred;
wire            ifu_iu_reset_vld;
wire    [31:0]  iu_ex1_cur_pc;
wire            iu_hpcp_inst_bht_mispred;
wire            iu_hpcp_inst_condbr;
wire            iu_hpcp_inst_condbr_gate;
wire    [31:0]  iu_idu_ex1_src1_update_value;
wire    [31:0]  iu_ifu_bht_cur_pc;
wire            iu_ifu_bht_mispred;
wire    [1 :0]  iu_ifu_bht_pred;
wire            iu_ifu_bht_taken;
wire            iu_ifu_br_vld;
wire            iu_ifu_br_vld_gate;
wire    [31:0]  iu_ifu_ex1_tar_pc;
wire            iu_ifu_ex1_tar_pc_vld;
wire            iu_ifu_link_vld;
wire            iu_ifu_link_vld_gate;
wire            iu_ifu_pc_mispred;
wire            iu_ifu_ret_vld;
wire            iu_ifu_ret_vld_gate;
wire            iu_rtu_div_ex1_stall;
wire            iu_rtu_ex1_alu_cmplt;
wire    [31:0]  iu_rtu_ex1_alu_data;
wire            iu_rtu_ex1_bju_chgflw_vld;
wire            iu_rtu_ex1_bju_cmplt;
wire            iu_rtu_ex1_bju_cmplt_dp;
wire    [31:0]  iu_rtu_ex1_bju_data;
wire            iu_rtu_ex1_bju_stall;
wire            iu_rtu_ex1_bju_wb_vld;
wire            iu_rtu_ex1_branch_inst;
wire    [31:0]  iu_rtu_ex1_cur_pc;
wire            iu_rtu_ex1_div_cmplt;
wire    [31:0]  iu_rtu_ex1_div_data;
wire            iu_rtu_ex1_div_wb_vld;
wire    [31:0]  iu_rtu_ex1_lsu_wb_data;
wire    [5 :0]  iu_rtu_ex1_lsu_wb_preg;
wire            iu_rtu_ex1_lsu_wb_vld;
wire            iu_rtu_ex1_mul_cmplt;
wire    [31:0]  iu_rtu_ex1_next_pc;
wire            iu_rtu_ex1_split_inst;
wire    [5 :0]  iu_rtu_ex1_wb_preg;
wire            iu_rtu_ex1_wb_vld;
wire    [31:0]  iu_rtu_ex2_chgflw_pc;
wire            iu_rtu_ex2_chgflw_vld;
wire    [31:0]  iu_rtu_ex2_div_data;
wire    [4 :0]  iu_rtu_ex2_div_preg;
wire            iu_rtu_ex2_div_wb_vld;
wire    [31:0]  iu_rtu_ex2_mul_wb_data;
wire    [5 :0]  iu_rtu_ex2_mul_wb_preg;
wire            iu_xx_no_op;
wire            lsu_iu_ex1_base_wb;
wire            lsu_iu_ex1_src1_sel;
wire    [31:0]  lsu_iu_ex2_data;
wire            lsu_iu_ex2_data_vld;
wire            lsu_iu_ex2_data_vld_gate;
wire            pad_yy_gate_clk_en_b;
wire            rtu_iu_ex1_stall;
wire    [31:0]  rtu_iu_ex2_cur_pc;
wire            rtu_iu_ex2_div_wb_en;
wire            rtu_iu_ex2_stall;
wire            rtu_xx_ex1_cancel;
wire            rtu_xx_ex2_cancel;
wire            rtu_yy_xx_async_flush;
wire            rtu_yy_xx_flush;
wire    [31:0]  sysio_iu_rst_addr;


// &Instance("pa_iu_alu"); @28
pa_iu_alu  x_pa_iu_alu (
  .idu_iu_ex1_ag_imm    (idu_iu_ex1_ag_imm   ),
  .idu_iu_ex1_alu_sel   (idu_iu_ex1_alu_sel  ),
  .idu_iu_ex1_func      (idu_iu_ex1_func     ),
  .idu_iu_ex1_inst_vld  (idu_iu_ex1_inst_vld ),
  .idu_iu_ex1_src0      (idu_iu_ex1_src0     ),
  .idu_iu_ex1_src1      (idu_iu_ex1_src1     ),
  .idu_iu_ex1_src2      (idu_iu_ex1_src2     ),
  .idu_iu_ex1_sub_func  (idu_iu_ex1_sub_func ),
  .iu_rtu_ex1_alu_cmplt (iu_rtu_ex1_alu_cmplt),
  .iu_rtu_ex1_alu_data  (iu_rtu_ex1_alu_data )
);


// &Instance("pa_iu_mul"); @30
pa_iu_mul  x_pa_iu_mul (
  .cp0_yy_clk_en           (cp0_yy_clk_en          ),
  .forever_cpuclk          (forever_cpuclk         ),
  .idu_iu_ex1_dst_preg     (idu_iu_ex1_dst_preg    ),
  .idu_iu_ex1_func         (idu_iu_ex1_func        ),
  .idu_iu_ex1_inst_vld     (idu_iu_ex1_inst_vld    ),
  .idu_iu_ex1_mul_high_sel (idu_iu_ex1_mul_high_sel),
  .idu_iu_ex1_mul_sel      (idu_iu_ex1_mul_sel     ),
  .idu_iu_ex1_src0         (idu_iu_ex1_src0        ),
  .idu_iu_ex1_src1         (idu_iu_ex1_src1        ),
  .idu_iu_ex1_src2         (idu_iu_ex1_src2        ),
  .idu_iu_ex1_sub_func     (idu_iu_ex1_sub_func    ),
  .idu_xx_ex1_warm_up      (idu_xx_ex1_warm_up     ),
  .iu_rtu_ex1_mul_cmplt    (iu_rtu_ex1_mul_cmplt   ),
  .iu_rtu_ex2_mul_wb_data  (iu_rtu_ex2_mul_wb_data ),
  .iu_rtu_ex2_mul_wb_preg  (iu_rtu_ex2_mul_wb_preg ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   ),
  .rtu_iu_ex2_stall        (rtu_iu_ex2_stall       )
);


// &Instance("pa_iu_div"); @32
pa_iu_div  x_pa_iu_div (
  .cp0_yy_clk_en         (cp0_yy_clk_en        ),
  .cpurst_b              (cpurst_b             ),
  .div_ctrl_itering      (div_ctrl_itering     ),
  .forever_cpuclk        (forever_cpuclk       ),
  .idu_iu_ex1_div_sel    (idu_iu_ex1_div_sel   ),
  .idu_iu_ex1_dst_preg   (idu_iu_ex1_dst_preg  ),
  .idu_iu_ex1_inst_vld   (idu_iu_ex1_inst_vld  ),
  .idu_iu_ex1_src0       (idu_iu_ex1_src0      ),
  .idu_iu_ex1_src1       (idu_iu_ex1_src1      ),
  .idu_iu_ex1_sub_func   (idu_iu_ex1_sub_func  ),
  .idu_xx_ex1_warm_up    (idu_xx_ex1_warm_up   ),
  .iu_rtu_div_ex1_stall  (iu_rtu_div_ex1_stall ),
  .iu_rtu_ex1_div_cmplt  (iu_rtu_ex1_div_cmplt ),
  .iu_rtu_ex1_div_data   (iu_rtu_ex1_div_data  ),
  .iu_rtu_ex1_div_wb_vld (iu_rtu_ex1_div_wb_vld),
  .iu_rtu_ex2_div_data   (iu_rtu_ex2_div_data  ),
  .iu_rtu_ex2_div_preg   (iu_rtu_ex2_div_preg  ),
  .iu_rtu_ex2_div_wb_vld (iu_rtu_ex2_div_wb_vld),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rtu_iu_ex2_div_wb_en  (rtu_iu_ex2_div_wb_en ),
  .rtu_iu_ex2_stall      (rtu_iu_ex2_stall     ),
  .rtu_xx_ex1_cancel     (rtu_xx_ex1_cancel    ),
  .rtu_xx_ex2_cancel     (rtu_xx_ex2_cancel    ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush)
);


// &Instance("pa_iu_bju"); @34
pa_iu_bju  x_pa_iu_bju (
  .ag_bju_pc                    (ag_bju_pc                   ),
  .cp0_yy_clk_en                (cp0_yy_clk_en               ),
  .cpurst_b                     (cpurst_b                    ),
  .forever_cpuclk               (forever_cpuclk              ),
  .idu_iu_ex1_bht_pred          (idu_iu_ex1_bht_pred         ),
  .idu_iu_ex1_bju_depd_lsu_src0 (idu_iu_ex1_bju_depd_lsu_src0),
  .idu_iu_ex1_bju_depd_lsu_src1 (idu_iu_ex1_bju_depd_lsu_src1),
  .idu_iu_ex1_bju_sel           (idu_iu_ex1_bju_sel          ),
  .idu_iu_ex1_dst_preg          (idu_iu_ex1_dst_preg         ),
  .idu_iu_ex1_func              (idu_iu_ex1_func             ),
  .idu_iu_ex1_inst_len          (idu_iu_ex1_inst_len         ),
  .idu_iu_ex1_inst_vld          (idu_iu_ex1_inst_vld         ),
  .idu_iu_ex1_split             (idu_iu_ex1_split            ),
  .idu_iu_ex1_src0              (idu_iu_ex1_src0             ),
  .idu_iu_ex1_src0_reg          (idu_iu_ex1_src0_reg         ),
  .idu_iu_ex1_src1              (idu_iu_ex1_src1             ),
  .idu_iu_ex1_sub_func          (idu_iu_ex1_sub_func         ),
  .idu_iu_ex1_wb_vld            (idu_iu_ex1_wb_vld           ),
  .idu_iu_tail_fail             (idu_iu_tail_fail            ),
  .idu_iu_tail_fail_gate        (idu_iu_tail_fail_gate       ),
  .idu_xx_ex1_warm_up           (idu_xx_ex1_warm_up          ),
  .ifu_iu_chgflw_pc             (ifu_iu_chgflw_pc            ),
  .ifu_iu_chgflw_vld            (ifu_iu_chgflw_vld           ),
  .ifu_iu_ex1_pc_pred           (ifu_iu_ex1_pc_pred          ),
  .ifu_iu_reset_vld             (ifu_iu_reset_vld            ),
  .iu_ex1_cur_pc                (iu_ex1_cur_pc               ),
  .iu_hpcp_inst_bht_mispred     (iu_hpcp_inst_bht_mispred    ),
  .iu_hpcp_inst_condbr          (iu_hpcp_inst_condbr         ),
  .iu_hpcp_inst_condbr_gate     (iu_hpcp_inst_condbr_gate    ),
  .iu_ifu_bht_cur_pc            (iu_ifu_bht_cur_pc           ),
  .iu_ifu_bht_mispred           (iu_ifu_bht_mispred          ),
  .iu_ifu_bht_pred              (iu_ifu_bht_pred             ),
  .iu_ifu_bht_taken             (iu_ifu_bht_taken            ),
  .iu_ifu_br_vld                (iu_ifu_br_vld               ),
  .iu_ifu_br_vld_gate           (iu_ifu_br_vld_gate          ),
  .iu_ifu_ex1_tar_pc            (iu_ifu_ex1_tar_pc           ),
  .iu_ifu_ex1_tar_pc_vld        (iu_ifu_ex1_tar_pc_vld       ),
  .iu_ifu_link_vld              (iu_ifu_link_vld             ),
  .iu_ifu_link_vld_gate         (iu_ifu_link_vld_gate        ),
  .iu_ifu_pc_mispred            (iu_ifu_pc_mispred           ),
  .iu_ifu_ret_vld               (iu_ifu_ret_vld              ),
  .iu_ifu_ret_vld_gate          (iu_ifu_ret_vld_gate         ),
  .iu_rtu_ex1_bju_chgflw_vld    (iu_rtu_ex1_bju_chgflw_vld   ),
  .iu_rtu_ex1_bju_cmplt         (iu_rtu_ex1_bju_cmplt        ),
  .iu_rtu_ex1_bju_cmplt_dp      (iu_rtu_ex1_bju_cmplt_dp     ),
  .iu_rtu_ex1_bju_data          (iu_rtu_ex1_bju_data         ),
  .iu_rtu_ex1_bju_stall         (iu_rtu_ex1_bju_stall        ),
  .iu_rtu_ex1_bju_wb_vld        (iu_rtu_ex1_bju_wb_vld       ),
  .iu_rtu_ex1_branch_inst       (iu_rtu_ex1_branch_inst      ),
  .iu_rtu_ex1_cur_pc            (iu_rtu_ex1_cur_pc           ),
  .iu_rtu_ex1_next_pc           (iu_rtu_ex1_next_pc          ),
  .iu_rtu_ex2_chgflw_pc         (iu_rtu_ex2_chgflw_pc        ),
  .iu_rtu_ex2_chgflw_vld        (iu_rtu_ex2_chgflw_vld       ),
  .lsu_iu_ex2_data              (lsu_iu_ex2_data             ),
  .lsu_iu_ex2_data_vld          (lsu_iu_ex2_data_vld         ),
  .lsu_iu_ex2_data_vld_gate     (lsu_iu_ex2_data_vld_gate    ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        ),
  .rtu_iu_ex1_stall             (rtu_iu_ex1_stall            ),
  .rtu_iu_ex2_cur_pc            (rtu_iu_ex2_cur_pc           ),
  .rtu_iu_ex2_stall             (rtu_iu_ex2_stall            ),
  .rtu_yy_xx_flush              (rtu_yy_xx_flush             ),
  .sysio_iu_rst_addr            (sysio_iu_rst_addr           )
);


// &Instance("pa_iu_addr_gen"); @36
pa_iu_addr_gen  x_pa_iu_addr_gen (
  .ag_bju_pc                    (ag_bju_pc                   ),
  .idu_iu_ex1_ag_imm            (idu_iu_ex1_ag_imm           ),
  .idu_iu_ex1_bju_sel           (idu_iu_ex1_bju_sel          ),
  .idu_iu_ex1_bju_use_pc        (idu_iu_ex1_bju_use_pc       ),
  .idu_iu_ex1_src0              (idu_iu_ex1_src0             ),
  .idu_iu_ex1_src0_reg          (idu_iu_ex1_src0_reg         ),
  .idu_iu_ex1_src1              (idu_iu_ex1_src1             ),
  .iu_ex1_cur_pc                (iu_ex1_cur_pc               ),
  .iu_idu_ex1_src1_update_value (iu_idu_ex1_src1_update_value),
  .iu_rtu_ex1_lsu_wb_data       (iu_rtu_ex1_lsu_wb_data      ),
  .iu_rtu_ex1_lsu_wb_preg       (iu_rtu_ex1_lsu_wb_preg      ),
  .iu_rtu_ex1_lsu_wb_vld        (iu_rtu_ex1_lsu_wb_vld       ),
  .lsu_iu_ex1_base_wb           (lsu_iu_ex1_base_wb          ),
  .lsu_iu_ex1_src1_sel          (lsu_iu_ex1_src1_sel         )
);


// &Instance("pa_iu_ctrl"); @38
pa_iu_ctrl  x_pa_iu_ctrl (
  .div_ctrl_itering      (div_ctrl_itering     ),
  .idu_iu_ex1_dst_preg   (idu_iu_ex1_dst_preg  ),
  .idu_iu_ex1_inst_vld   (idu_iu_ex1_inst_vld  ),
  .idu_iu_ex1_split      (idu_iu_ex1_split     ),
  .idu_iu_ex1_wb_vld     (idu_iu_ex1_wb_vld    ),
  .iu_rtu_ex1_split_inst (iu_rtu_ex1_split_inst),
  .iu_rtu_ex1_wb_preg    (iu_rtu_ex1_wb_preg   ),
  .iu_rtu_ex1_wb_vld     (iu_rtu_ex1_wb_vld    ),
  .iu_xx_no_op           (iu_xx_no_op          )
);




// &ModuleEnd; @84
endmodule




















// &Depend("cpu_cfig.h"); @19

// &ModuleBeg; @21
module pa_lsu_ag(
  ag_dc_addr,
  ag_dc_buf,
  ag_dc_bytes_vld,
  ag_dc_ca,
  ag_dc_dcache_grant,
  ag_dc_dest_reg,
  ag_dc_fls,
  ag_dc_func,
  ag_dc_inst_vld,
  ag_dc_inst_vld_gate,
  ag_dc_lm_pass,
  ag_dc_ori_size,
  ag_dc_pmp_expt,
  ag_dc_sign_ext,
  ag_dc_size,
  ag_dc_so,
  ag_dc_split,
  ag_dc_split_first,
  ag_dc_split_last,
  ag_dc_src1_depd,
  ag_dc_src1_reg,
  ag_dc_st_data,
  ag_dc_warm_up,
  ag_dc_wdata_shift,
  ag_ncb_addr,
  ag_ncb_inst_vld,
  ag_ncb_inst_vld_dp,
  ag_ncb_src1_reg,
  ag_ncb_st_data,
  ag_xx_inst_abort,
  ag_xx_split_done,
  arb_icc_data_grant,
  arb_rdl_data_grant,
  arb_stb_xx_grant,
  cp0_lsu_mm,
  cpurst_b,
  dc_ag_async_expt_vld,
  dc_ag_async_ld_inst,
  dc_ag_async_mtval,
  dc_ag_cache_stall,
  dc_ag_dcache_addr,
  dc_ag_dcache_req,
  dc_ag_dcache_size,
  dc_ag_empty,
  dc_ag_func,
  dc_ag_stall,
  dcache_data_cen_way0_bank0,
  dcache_data_cen_way0_bank1,
  dcache_data_cen_way1_bank0,
  dcache_data_cen_way1_bank1,
  dcache_data_din,
  dcache_data_idx,
  dcache_data_wen,
  dcache_dirty_cen,
  dcache_dirty_din,
  dcache_dirty_idx,
  dcache_dirty_wen,
  dcache_tag_cen,
  dcache_tag_din,
  dcache_tag_idx,
  dcache_tag_wen,
  forever_cpuclk,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  icc_arb_data_bank,
  icc_arb_data_din,
  icc_arb_data_idx,
  icc_arb_data_req,
  icc_arb_data_way,
  icc_arb_data_wen,
  icc_arb_dirty_din,
  icc_arb_dirty_idx,
  icc_arb_dirty_req,
  icc_arb_dirty_wen,
  icc_arb_tag_din,
  icc_arb_tag_idx,
  icc_arb_tag_req,
  icc_arb_tag_wen,
  idu_lsu_ex1_ag_imm,
  idu_lsu_ex1_base,
  idu_lsu_ex1_base_sel,
  idu_lsu_ex1_base_wb,
  idu_lsu_ex1_data,
  idu_lsu_ex1_dest_reg,
  idu_lsu_ex1_dest_vld,
  idu_lsu_ex1_fls,
  idu_lsu_ex1_func,
  idu_lsu_ex1_mls,
  idu_lsu_ex1_offset_sel,
  idu_lsu_ex1_sel,
  idu_lsu_ex1_sign_extend,
  idu_lsu_ex1_size,
  idu_lsu_ex1_src1_depd,
  idu_lsu_ex1_src1_reg,
  idu_xx_ex1_warm_up,
  lfb_arb_data_bank,
  lfb_arb_data_din,
  lfb_arb_data_idx,
  lfb_arb_data_req,
  lfb_arb_data_way,
  lfb_arb_data_wen,
  lfb_arb_dcache_sel,
  lfb_arb_dirty_din,
  lfb_arb_dirty_idx,
  lfb_arb_dirty_req,
  lfb_arb_dirty_wen,
  lfb_arb_tag_din,
  lfb_arb_tag_idx,
  lfb_arb_tag_req,
  lfb_arb_tag_wen,
  lm_clr,
  lm_lr_bus,
  lm_pass,
  lm_sc_bus,
  lm_set,
  lm_set_gate,
  lsu_biu_async_expt_ack,
  lsu_hpcp_inst_store,
  lsu_hpcp_inst_store_gate,
  lsu_idu_ex1_src1_update_en,
  lsu_idu_ex1_src1_update_en_gate,
  lsu_idu_update_addr,
  lsu_idu_update_en,
  lsu_idu_update_en_gate,
  lsu_idu_update_offset,
  lsu_iu_ex1_base_wb,
  lsu_iu_ex1_src1_sel,
  lsu_pad_sc_pass,
  lsu_pmp_addr,
  lsu_pmp_write,
  lsu_rtu_async_expt_vld,
  lsu_rtu_async_ld_inst,
  lsu_rtu_async_mtval,
  lsu_rtu_ex1_bkpta_trap,
  lsu_rtu_ex1_bkptb_trap,
  lsu_rtu_ex1_bkptc_trap,
  lsu_rtu_ex1_bkptd_trap,
  lsu_rtu_ex1_bkpte_trap,
  lsu_rtu_ex1_cmplt,
  lsu_rtu_ex1_cmplt_dp,
  lsu_rtu_ex1_expt_vec,
  lsu_rtu_ex1_expt_vld,
  lsu_rtu_ex1_inst_ld,
  lsu_rtu_ex1_mtval,
  lsu_rtu_ex1_stall,
  lsu_rtu_pmp_deny,
  lsu_sysmap_pa,
  ncb_ag_async_expt_vld,
  ncb_ag_async_ld_inst,
  ncb_ag_async_mtval,
  ncb_ag_stall,
  ncb_xx_no_op,
  pad_yy_gate_clk_en_b,
  pmp_lsu_acc_deny,
  rdl_arb_data_bank,
  rdl_arb_data_din,
  rdl_arb_data_idx,
  rdl_arb_data_req,
  rdl_arb_data_way,
  rdl_arb_data_wen,
  rdl_arb_dcache_sel,
  rdl_arb_dirty_din,
  rdl_arb_dirty_idx,
  rdl_arb_dirty_req,
  rdl_arb_dirty_wen,
  rdl_arb_tag_din,
  rdl_arb_tag_idx,
  rdl_arb_tag_req,
  rdl_arb_tag_wen,
  rtu_lsu_async_expt_ack,
  rtu_lsu_ex1_cancel,
  rtu_lsu_ex2_stall,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  stb_arb_data_bank,
  stb_arb_data_din,
  stb_arb_data_idx,
  stb_arb_data_req,
  stb_arb_data_way,
  stb_arb_data_wen,
  stb_arb_dcache_sel,
  stb_arb_dirty_din,
  stb_arb_dirty_idx,
  stb_arb_dirty_req,
  stb_arb_dirty_wen,
  sysmap_lsu_flg
);

// &Ports; @22
input           cp0_lsu_mm;
input           cpurst_b;
input           dc_ag_async_expt_vld;
input           dc_ag_async_ld_inst;
input   [31:0]  dc_ag_async_mtval;
input           dc_ag_cache_stall;
input   [31:0]  dc_ag_dcache_addr;
input           dc_ag_dcache_req;
input   [1 :0]  dc_ag_dcache_size;
input           dc_ag_empty;
input   [3 :0]  dc_ag_func;
input           dc_ag_stall;
input           forever_cpuclk;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input   [1 :0]  icc_arb_data_bank;
input   [63:0]  icc_arb_data_din;
input   [11:0]  icc_arb_data_idx;
input           icc_arb_data_req;
input   [1 :0]  icc_arb_data_way;
input   [3 :0]  icc_arb_data_wen;
input   [2 :0]  icc_arb_dirty_din;
input   [9 :0]  icc_arb_dirty_idx;
input           icc_arb_dirty_req;
input   [2 :0]  icc_arb_dirty_wen;
input   [22:0]  icc_arb_tag_din;
input   [9 :0]  icc_arb_tag_idx;
input           icc_arb_tag_req;
input   [1 :0]  icc_arb_tag_wen;
input   [31:0]  idu_lsu_ex1_ag_imm;
input   [31:0]  idu_lsu_ex1_base;
input           idu_lsu_ex1_base_sel;
input           idu_lsu_ex1_base_wb;
input   [31:0]  idu_lsu_ex1_data;
input   [5 :0]  idu_lsu_ex1_dest_reg;
input           idu_lsu_ex1_dest_vld;
input           idu_lsu_ex1_fls;
input   [3 :0]  idu_lsu_ex1_func;
input           idu_lsu_ex1_mls;
input           idu_lsu_ex1_offset_sel;
input           idu_lsu_ex1_sel;
input           idu_lsu_ex1_sign_extend;
input   [1 :0]  idu_lsu_ex1_size;
input           idu_lsu_ex1_src1_depd;
input   [5 :0]  idu_lsu_ex1_src1_reg;
input           idu_xx_ex1_warm_up;
input   [1 :0]  lfb_arb_data_bank;
input   [63:0]  lfb_arb_data_din;
input   [11:0]  lfb_arb_data_idx;
input           lfb_arb_data_req;
input   [1 :0]  lfb_arb_data_way;
input   [3 :0]  lfb_arb_data_wen;
input           lfb_arb_dcache_sel;
input   [2 :0]  lfb_arb_dirty_din;
input   [9 :0]  lfb_arb_dirty_idx;
input           lfb_arb_dirty_req;
input   [2 :0]  lfb_arb_dirty_wen;
input   [22:0]  lfb_arb_tag_din;
input   [9 :0]  lfb_arb_tag_idx;
input           lfb_arb_tag_req;
input   [1 :0]  lfb_arb_tag_wen;
input           lm_pass;
input           ncb_ag_async_expt_vld;
input           ncb_ag_async_ld_inst;
input   [31:0]  ncb_ag_async_mtval;
input           ncb_ag_stall;
input           ncb_xx_no_op;
input           pad_yy_gate_clk_en_b;
input           pmp_lsu_acc_deny;
input   [1 :0]  rdl_arb_data_bank;
input   [63:0]  rdl_arb_data_din;
input   [11:0]  rdl_arb_data_idx;
input           rdl_arb_data_req;
input   [1 :0]  rdl_arb_data_way;
input   [3 :0]  rdl_arb_data_wen;
input           rdl_arb_dcache_sel;
input   [2 :0]  rdl_arb_dirty_din;
input   [9 :0]  rdl_arb_dirty_idx;
input           rdl_arb_dirty_req;
input   [2 :0]  rdl_arb_dirty_wen;
input   [22:0]  rdl_arb_tag_din;
input   [9 :0]  rdl_arb_tag_idx;
input           rdl_arb_tag_req;
input   [1 :0]  rdl_arb_tag_wen;
input           rtu_lsu_async_expt_ack;
input           rtu_lsu_ex1_cancel;
input           rtu_lsu_ex2_stall;
input   [31:0]  rtu_lsu_wb_fwd_data;
input           rtu_lsu_wb_fwd_fls;
input   [5 :0]  rtu_lsu_wb_fwd_reg;
input           rtu_lsu_wb_fwd_vld;
input   [1 :0]  stb_arb_data_bank;
input   [63:0]  stb_arb_data_din;
input   [11:0]  stb_arb_data_idx;
input           stb_arb_data_req;
input   [1 :0]  stb_arb_data_way;
input   [3 :0]  stb_arb_data_wen;
input           stb_arb_dcache_sel;
input   [2 :0]  stb_arb_dirty_din;
input   [9 :0]  stb_arb_dirty_idx;
input           stb_arb_dirty_req;
input   [2 :0]  stb_arb_dirty_wen;
input   [4 :0]  sysmap_lsu_flg;
output  [31:0]  ag_dc_addr;
output          ag_dc_buf;
output  [3 :0]  ag_dc_bytes_vld;
output          ag_dc_ca;
output          ag_dc_dcache_grant;
output  [5 :0]  ag_dc_dest_reg;
output          ag_dc_fls;
output  [3 :0]  ag_dc_func;
output          ag_dc_inst_vld;
output          ag_dc_inst_vld_gate;
output          ag_dc_lm_pass;
output  [1 :0]  ag_dc_ori_size;
output          ag_dc_pmp_expt;
output          ag_dc_sign_ext;
output  [1 :0]  ag_dc_size;
output          ag_dc_so;
output          ag_dc_split;
output          ag_dc_split_first;
output          ag_dc_split_last;
output          ag_dc_src1_depd;
output  [5 :0]  ag_dc_src1_reg;
output  [31:0]  ag_dc_st_data;
output          ag_dc_warm_up;
output  [2 :0]  ag_dc_wdata_shift;
output  [31:0]  ag_ncb_addr;
output          ag_ncb_inst_vld;
output          ag_ncb_inst_vld_dp;
output  [5 :0]  ag_ncb_src1_reg;
output  [31:0]  ag_ncb_st_data;
output          ag_xx_inst_abort;
output          ag_xx_split_done;
output          arb_icc_data_grant;
output          arb_rdl_data_grant;
output          arb_stb_xx_grant;
output          dcache_data_cen_way0_bank0;
output          dcache_data_cen_way0_bank1;
output          dcache_data_cen_way1_bank0;
output          dcache_data_cen_way1_bank1;
output  [63:0]  dcache_data_din;
output  [11:0]  dcache_data_idx;
output  [3 :0]  dcache_data_wen;
output          dcache_dirty_cen;
output  [2 :0]  dcache_dirty_din;
output  [9 :0]  dcache_dirty_idx;
output  [2 :0]  dcache_dirty_wen;
output          dcache_tag_cen;
output  [22:0]  dcache_tag_din;
output  [9 :0]  dcache_tag_idx;
output  [1 :0]  dcache_tag_wen;
output          lm_clr;
output  [33:0]  lm_lr_bus;
output  [33:0]  lm_sc_bus;
output          lm_set;
output          lm_set_gate;
output          lsu_biu_async_expt_ack;
output          lsu_hpcp_inst_store;
output          lsu_hpcp_inst_store_gate;
output          lsu_idu_ex1_src1_update_en;
output          lsu_idu_ex1_src1_update_en_gate;
output  [31:0]  lsu_idu_update_addr;
output          lsu_idu_update_en;
output          lsu_idu_update_en_gate;
output  [31:0]  lsu_idu_update_offset;
output          lsu_iu_ex1_base_wb;
output          lsu_iu_ex1_src1_sel;
output          lsu_pad_sc_pass;
output  [31:0]  lsu_pmp_addr;
output          lsu_pmp_write;
output          lsu_rtu_async_expt_vld;
output          lsu_rtu_async_ld_inst;
output  [31:0]  lsu_rtu_async_mtval;
output          lsu_rtu_ex1_bkpta_trap;
output          lsu_rtu_ex1_bkptb_trap;
output          lsu_rtu_ex1_bkptc_trap;
output          lsu_rtu_ex1_bkptd_trap;
output          lsu_rtu_ex1_bkpte_trap;
output          lsu_rtu_ex1_cmplt;
output          lsu_rtu_ex1_cmplt_dp;
output  [3 :0]  lsu_rtu_ex1_expt_vec;
output          lsu_rtu_ex1_expt_vld;
output          lsu_rtu_ex1_inst_ld;
output  [31:0]  lsu_rtu_ex1_mtval;
output          lsu_rtu_ex1_stall;
output          lsu_rtu_pmp_deny;
output  [31:0]  lsu_sysmap_pa;

// &Regs; @23
reg     [2 :0]  ag_addr_ff;
reg     [3 :0]  ag_bytes_vld;
reg             ag_misalign;
reg             async_cur_state;
reg             async_ld_inst_f;
reg     [31:0]  async_mtval_f;
reg             async_next_state;
reg             split_bkpta_trap;
reg             split_bkptb_trap;
reg             split_bkptc_trap;
reg             split_bkptd_trap;
reg             split_bkpte_trap;
reg     [2 :0]  split_cur_state;
reg     [2 :0]  split_next_state;
reg     [2 :0]  split_wdata_shift;
reg             target_ca_ff;

// &Wires; @24
wire            acc_deny_vld;
wire    [31:0]  ag_addr;
wire    [31:0]  ag_addr_after_maska;
wire    [31:0]  ag_addr_after_maskb;
wire    [31:0]  ag_addr_after_maskc;
wire    [31:0]  ag_addr_after_maskd;
wire    [31:0]  ag_addr_after_maske;
wire    [1 :0]  ag_arb_data_bank;
wire    [63:0]  ag_arb_data_din;
wire    [11:0]  ag_arb_data_idx;
wire            ag_arb_data_req;
wire            ag_arb_data_req_dp;
wire    [3 :0]  ag_arb_data_wen;
wire    [2 :0]  ag_arb_dirty_din;
wire    [9 :0]  ag_arb_dirty_idx;
wire            ag_arb_dirty_req;
wire            ag_arb_dirty_req_dp;
wire    [2 :0]  ag_arb_dirty_wen;
wire    [22:0]  ag_arb_tag_din;
wire    [9 :0]  ag_arb_tag_idx;
wire            ag_arb_tag_req;
wire            ag_arb_tag_req_dp;
wire    [1 :0]  ag_arb_tag_wen;
wire            ag_clk;
wire            ag_clk_en;
wire    [31:0]  ag_dc_addr;
wire            ag_dc_bkpta_trap;
wire            ag_dc_bkptb_trap;
wire            ag_dc_bkptc_trap;
wire            ag_dc_bkptd_trap;
wire            ag_dc_bkpte_trap;
wire            ag_dc_buf;
wire    [3 :0]  ag_dc_bytes_vld;
wire            ag_dc_ca;
wire            ag_dc_dcache_grant;
wire    [5 :0]  ag_dc_dest_reg;
wire            ag_dc_fls;
wire    [3 :0]  ag_dc_func;
wire            ag_dc_inst_vld;
wire            ag_dc_inst_vld_gate;
wire            ag_dc_lm_pass;
wire            ag_dc_misalign;
wire    [1 :0]  ag_dc_ori_size;
wire            ag_dc_pmp_expt;
wire            ag_dc_sign_ext;
wire    [1 :0]  ag_dc_size;
wire            ag_dc_so;
wire            ag_dc_split;
wire            ag_dc_split_first;
wire            ag_dc_split_last;
wire            ag_dc_src1_depd;
wire    [5 :0]  ag_dc_src1_reg;
wire    [31:0]  ag_dc_st_data;
wire            ag_dc_warm_up;
wire    [2 :0]  ag_dc_wdata_shift;
wire            ag_fwd_fpu;
wire    [31:0]  ag_fwd_fpu_data;
wire            ag_fwd_lsu;
wire            ag_inst_dca;
wire            ag_inst_dca_st;
wire            ag_inst_vld;
wire            ag_inst_vld_aft_cancel;
wire            ag_lr_inst;
wire            ag_misalign_final;
wire            ag_mls;
wire    [31:0]  ag_ncb_addr;
wire            ag_ncb_inst_vld;
wire            ag_ncb_inst_vld_dp;
wire    [5 :0]  ag_ncb_src1_reg;
wire    [31:0]  ag_ncb_st_data;
wire            ag_sc_inst;
wire            ag_size_dw;
wire            ag_size_half;
wire            ag_size_word;
wire            ag_split_req;
wire            ag_split_req_gate;
wire            ag_split_sel;
wire    [31:0]  ag_st_fwd_data;
wire            ag_st_fwd_vld;
wire            ag_stall;
wire            ag_stall_final;
wire            ag_xx_inst_abort;
wire            ag_xx_split_done;
wire            arb_ag_grant;
wire            arb_icc_data_grant;
wire            arb_rdl_data_grant;
wire            arb_stb_xx_grant;
wire            async_expt_vld;
wire            async_expt_vld_f;
wire            async_ld_inst;
wire    [31:0]  async_mtval;
wire    [31:0]  bkpta_after_mask;
wire            bkpta_trap;
wire    [31:0]  bkptb_after_mask;
wire            bkptb_trap;
wire    [31:0]  bkptc_after_mask;
wire            bkptc_trap;
wire    [31:0]  bkptd_after_mask;
wire            bkptd_trap;
wire    [31:0]  bkpte_after_mask;
wire            bkpte_trap;
wire            cp0_lsu_mm;
wire            cpurst_b;
wire            dc_ag_async_expt_vld;
wire            dc_ag_async_ld_inst;
wire    [31:0]  dc_ag_async_mtval;
wire            dc_ag_cache_stall;
wire    [31:0]  dc_ag_dcache_addr;
wire            dc_ag_dcache_req;
wire    [1 :0]  dc_ag_dcache_size;
wire            dc_ag_empty;
wire    [3 :0]  dc_ag_func;
wire            dc_ag_stall;
wire            dcache_data_cen_way0_bank0;
wire            dcache_data_cen_way0_bank1;
wire            dcache_data_cen_way1_bank0;
wire            dcache_data_cen_way1_bank1;
wire    [63:0]  dcache_data_din;
wire    [11:0]  dcache_data_idx;
wire    [3 :0]  dcache_data_wen;
wire            dcache_dirty_cen;
wire    [2 :0]  dcache_dirty_din;
wire    [9 :0]  dcache_dirty_idx;
wire    [2 :0]  dcache_dirty_wen;
wire    [12:0]  dcache_index;
wire    [1 :0]  dcache_size;
wire            dcache_tag_cen;
wire    [22:0]  dcache_tag_din;
wire    [9 :0]  dcache_tag_idx;
wire    [1 :0]  dcache_tag_wen;
wire            expt_clk;
wire            expt_clk_en;
wire            forever_cpuclk;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire    [1 :0]  icc_arb_data_bank;
wire    [63:0]  icc_arb_data_din;
wire    [11:0]  icc_arb_data_idx;
wire            icc_arb_data_req;
wire    [1 :0]  icc_arb_data_way;
wire    [3 :0]  icc_arb_data_wen;
wire    [2 :0]  icc_arb_dirty_din;
wire    [9 :0]  icc_arb_dirty_idx;
wire            icc_arb_dirty_req;
wire    [2 :0]  icc_arb_dirty_wen;
wire    [22:0]  icc_arb_tag_din;
wire    [9 :0]  icc_arb_tag_idx;
wire            icc_arb_tag_req;
wire    [1 :0]  icc_arb_tag_wen;
wire    [31:0]  idu_lsu_ex1_ag_imm;
wire    [31:0]  idu_lsu_ex1_base;
wire            idu_lsu_ex1_base_sel;
wire            idu_lsu_ex1_base_wb;
wire    [31:0]  idu_lsu_ex1_data;
wire    [5 :0]  idu_lsu_ex1_dest_reg;
wire            idu_lsu_ex1_fls;
wire    [3 :0]  idu_lsu_ex1_func;
wire            idu_lsu_ex1_mls;
wire            idu_lsu_ex1_offset_sel;
wire            idu_lsu_ex1_sel;
wire            idu_lsu_ex1_sign_extend;
wire    [1 :0]  idu_lsu_ex1_size;
wire            idu_lsu_ex1_src1_depd;
wire    [5 :0]  idu_lsu_ex1_src1_reg;
wire            idu_xx_ex1_warm_up;
wire    [1 :0]  lfb_arb_data_bank;
wire    [63:0]  lfb_arb_data_din;
wire    [11:0]  lfb_arb_data_idx;
wire            lfb_arb_data_req;
wire    [1 :0]  lfb_arb_data_way;
wire    [3 :0]  lfb_arb_data_wen;
wire            lfb_arb_dcache_sel;
wire    [2 :0]  lfb_arb_dirty_din;
wire    [9 :0]  lfb_arb_dirty_idx;
wire            lfb_arb_dirty_req;
wire    [2 :0]  lfb_arb_dirty_wen;
wire    [22:0]  lfb_arb_tag_din;
wire    [9 :0]  lfb_arb_tag_idx;
wire            lfb_arb_tag_req;
wire    [1 :0]  lfb_arb_tag_wen;
wire            lm_clr;
wire    [33:0]  lm_lr_bus;
wire            lm_pass;
wire    [33:0]  lm_sc_bus;
wire            lm_set;
wire            lm_set_gate;
wire            lsu_biu_async_expt_ack;
wire            lsu_hpcp_inst_store;
wire            lsu_hpcp_inst_store_gate;
wire            lsu_idu_ex1_src1_update_en;
wire            lsu_idu_ex1_src1_update_en_gate;
wire    [31:0]  lsu_idu_update_addr;
wire            lsu_idu_update_en;
wire            lsu_idu_update_en_gate;
wire    [31:0]  lsu_idu_update_offset;
wire            lsu_iu_ex1_base_wb;
wire            lsu_iu_ex1_src1_sel;
wire            lsu_pad_sc_pass;
wire    [31:0]  lsu_pmp_addr;
wire            lsu_pmp_write;
wire            lsu_rtu_async_expt_vld;
wire            lsu_rtu_async_ld_inst;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_ex1_bkpta_trap;
wire            lsu_rtu_ex1_bkptb_trap;
wire            lsu_rtu_ex1_bkptc_trap;
wire            lsu_rtu_ex1_bkptd_trap;
wire            lsu_rtu_ex1_bkpte_trap;
wire            lsu_rtu_ex1_cmplt;
wire            lsu_rtu_ex1_cmplt_dp;
wire    [3 :0]  lsu_rtu_ex1_expt_vec;
wire            lsu_rtu_ex1_expt_vld;
wire            lsu_rtu_ex1_inst_ld;
wire    [31:0]  lsu_rtu_ex1_mtval;
wire            lsu_rtu_ex1_stall;
wire            lsu_rtu_pmp_deny;
wire    [31:0]  lsu_sysmap_pa;
wire    [3 :0]  misalign_expt_vec;
wire            ncb_ag_async_expt_vld;
wire            ncb_ag_async_ld_inst;
wire    [31:0]  ncb_ag_async_mtval;
wire            ncb_ag_stall;
wire            ncb_xx_no_op;
wire            pad_yy_gate_clk_en_b;
wire            pmp_deny_ld_inst;
wire    [31:0]  pmp_deny_mtval;
wire            pmp_lsu_acc_deny;
wire            pmp_mtval_from_async;
wire            pmp_mtval_save_en;
wire    [1 :0]  rdl_arb_data_bank;
wire    [63:0]  rdl_arb_data_din;
wire    [11:0]  rdl_arb_data_idx;
wire            rdl_arb_data_req;
wire    [1 :0]  rdl_arb_data_way;
wire    [3 :0]  rdl_arb_data_wen;
wire            rdl_arb_dcache_sel;
wire    [2 :0]  rdl_arb_dirty_din;
wire    [9 :0]  rdl_arb_dirty_idx;
wire            rdl_arb_dirty_req;
wire    [2 :0]  rdl_arb_dirty_wen;
wire    [22:0]  rdl_arb_tag_din;
wire    [9 :0]  rdl_arb_tag_idx;
wire            rdl_arb_tag_req;
wire    [1 :0]  rdl_arb_tag_wen;
wire            rtu_lsu_async_expt_ack;
wire            rtu_lsu_ex1_cancel;
wire            rtu_lsu_ex2_stall;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire    [2 :0]  size_onehot;
wire            split_acc_deny;
wire            split_busy;
wire            split_clk;
wire            split_clk_en;
wire            split_cur_abort;
wire            split_cur_busy;
wire            split_cur_first;
wire            split_cur_forth;
wire            split_cur_secd;
wire            split_cur_thrd;
wire            split_first;
wire    [1 :0]  split_first_size;
wire            split_first_size_half;
wire            split_first_size_word;
wire            split_flush;
wire    [1 :0]  split_forth_size;
wire            split_last;
wire            split_secd_last;
wire    [1 :0]  split_secd_size;
wire            split_secd_size_byte;
wire            split_secd_size_word;
wire    [1 :0]  split_size;
wire            split_thrd_last;
wire    [1 :0]  split_thrd_size;
wire            split_thrd_size_byte;
wire            split_thrd_size_word;
wire    [31:0]  st_ex1_data;
wire    [1 :0]  stb_arb_data_bank;
wire    [63:0]  stb_arb_data_din;
wire    [11:0]  stb_arb_data_idx;
wire            stb_arb_data_req;
wire    [1 :0]  stb_arb_data_way;
wire    [3 :0]  stb_arb_data_wen;
wire            stb_arb_dcache_sel;
wire    [2 :0]  stb_arb_dirty_din;
wire    [9 :0]  stb_arb_dirty_idx;
wire            stb_arb_dirty_req;
wire    [2 :0]  stb_arb_dirty_wen;
wire    [4 :0]  sysmap_lsu_flg;
wire            target_ca;
wire    [2 :0]  update_offset;
wire    [2 :0]  wdata_shift;


parameter DATAW = `FLEN;

parameter BYTE  = 2'b00;
parameter HALF  = 2'b01;
parameter WORD  = 2'b10;
parameter DWORD = 2'b11;

// &Force("output", "ag_dc_addr"); @33
// &Force("output", "ag_dc_func"); @34
// &Force("output", "ag_dc_size"); @35
// &Force("input", "idu_lsu_ex1_dest_vld"); @36




assign ag_addr[31:0] = ({32{idu_lsu_ex1_base_sel}} & idu_lsu_ex1_base[31:0])
                     + ({32{idu_lsu_ex1_offset_sel}} & idu_lsu_ex1_ag_imm[31:0]);

assign lsu_iu_ex1_base_wb = idu_lsu_ex1_sel & idu_lsu_ex1_base_wb;





assign lsu_iu_ex1_src1_sel             = !split_cur_first & idu_lsu_ex1_base_wb;
assign lsu_idu_ex1_src1_update_en      =  split_cur_first & ag_split_req & idu_lsu_ex1_base_wb & !ag_stall;
assign lsu_idu_ex1_src1_update_en_gate =  split_cur_first & ag_split_req_gate & idu_lsu_ex1_base_wb;




assign lsu_idu_update_en      = !ag_stall &
                                (split_cur_first & ag_split_req |
                                 split_cur_busy  & !split_last);
assign lsu_idu_update_en_gate =  split_cur_first & ag_split_req_gate |
                                 split_cur_busy  & !split_last;

assign update_offset[2:0] = (split_size[1:0] == BYTE)
                          ? 3'b1
                          : ((split_size[1:0] == HALF) ? 3'b010 : 3'b100);

assign lsu_idu_update_addr[31:0]   = ag_addr[31:0];
assign lsu_idu_update_offset[31:0] = {29'b0,update_offset[2:0]};





assign ag_inst_vld            = idu_lsu_ex1_sel & !acc_deny_vld;// & !async_expt_vld_f;
assign ag_inst_vld_aft_cancel = ag_inst_vld &
                               !rtu_lsu_ex1_cancel &
                               !ag_dc_misalign;

assign ag_dc_addr[31:0]     = ag_addr[31:0] & {32{target_ca_ff}};
assign ag_ncb_addr[31:0]    = ag_addr[31:0] & {32{!target_ca_ff}};
assign ag_dc_func[3:0]      = idu_lsu_ex1_func[3:0];
assign ag_mls               = idu_lsu_ex1_mls;
assign ag_dc_fls            = 1'b0;

assign ag_dc_split          = ag_split_sel;
assign ag_dc_split_last     = split_last;
assign ag_dc_split_first    = split_first;
assign ag_dc_size[1:0]      = split_size[1:0];// : idu_lsu_ex1_size[1:0];
assign ag_dc_ori_size[1:0]  = idu_lsu_ex1_size[1:0];
assign ag_dc_sign_ext       = idu_lsu_ex1_sign_extend;
assign ag_dc_dest_reg[5:0]  = idu_lsu_ex1_dest_reg[5:0];
assign ag_dc_src1_depd      = idu_lsu_ex1_src1_depd & !ag_st_fwd_vld;
assign ag_dc_src1_reg[5:0]  = idu_lsu_ex1_src1_reg[5:0] & {6{target_ca_ff}};
assign ag_ncb_src1_reg[5:0] = idu_lsu_ex1_src1_reg[5:0] & {6{!target_ca_ff}};
assign ag_dc_st_data[DATAW-1:0]  = st_ex1_data[DATAW-1:0] & {DATAW{target_ca_ff}};
assign ag_ncb_st_data[DATAW-1:0] = st_ex1_data[DATAW-1:0] & {DATAW{!target_ca_ff}};





assign ag_fwd_lsu   = rtu_lsu_wb_fwd_vld &

                      (idu_lsu_ex1_fls == rtu_lsu_wb_fwd_fls) &
                      (idu_lsu_ex1_src1_reg[5:0] == rtu_lsu_wb_fwd_reg[5:0]);
assign ag_fwd_fpu   = 1'b0;
assign ag_fwd_fpu_data[DATAW-1:0] = {DATAW{1'b0}};

assign ag_st_fwd_vld = idu_lsu_ex1_src1_depd & (ag_fwd_lsu | ag_fwd_fpu);
assign ag_st_fwd_data[DATAW-1:0]
                     = ag_fwd_fpu ? ag_fwd_fpu_data[DATAW-1:0] : rtu_lsu_wb_fwd_data[DATAW-1:0];

assign st_ex1_data[DATAW-1:0] = ag_st_fwd_vld ? ag_st_fwd_data[DATAW-1:0] : idu_lsu_ex1_data[DATAW-1:0];


assign ag_dc_warm_up        = idu_xx_ex1_warm_up;
assign ag_dc_wdata_shift[2:0] = wdata_shift[2:0];

// &CombBeg; @147
always @( ag_addr[1:0]
       or ag_dc_size[1:0])
begin
  casez({ag_dc_size[1:0],ag_addr[1:0]})
    4'b0000: ag_bytes_vld[3:0] = 4'b0001;
    4'b0001: ag_bytes_vld[3:0] = 4'b0010;
    4'b0010: ag_bytes_vld[3:0] = 4'b0100;
    4'b0011: ag_bytes_vld[3:0] = 4'b1000;
    4'b0100: ag_bytes_vld[3:0] = 4'b0011;
    4'b0110: ag_bytes_vld[3:0] = 4'b1100;
    4'b1?00: ag_bytes_vld[3:0] = 4'b1111;
    default: ag_bytes_vld[3:0] = 4'b1111;
  endcase
// &CombEnd; @158
end

assign ag_dc_bytes_vld[3:0] = ag_bytes_vld[3:0];




assign ag_addr_after_maska[31:0] = {ag_addr[31:8],
                                    ag_addr[7:0] & had_yy_xx_bkpta_mask[7:0]};
assign ag_addr_after_maskb[31:0] = {ag_addr[31:8],
                                    ag_addr[7:0] & had_yy_xx_bkptb_mask[7:0]};
assign bkpta_after_mask[31:0]    = {had_yy_xx_bkpta_base[31:8],
                                    had_yy_xx_bkpta_base[7:0] &  had_yy_xx_bkpta_mask[7:0]};
assign bkptb_after_mask[31:0]    = {had_yy_xx_bkptb_base[31:8],
                                    had_yy_xx_bkptb_base[7:0] &  had_yy_xx_bkptb_mask[7:0]};
assign ag_addr_after_maskc[31:0] = {ag_addr[31:8],
                                    ag_addr[7:0] & had_yy_xx_bkptc_mask[7:0]};
assign ag_addr_after_maskd[31:0] = {ag_addr[31:8],
                                    ag_addr[7:0] & had_yy_xx_bkptd_mask[7:0]};
assign ag_addr_after_maske[31:0] = {ag_addr[31:8],
                                    ag_addr[7:0] & had_yy_xx_bkpte_mask[7:0]};
assign bkptc_after_mask[31:0]    = {had_yy_xx_bkptc_base[31:8],
                                    had_yy_xx_bkptc_base[7:0] &  had_yy_xx_bkptc_mask[7:0]};
assign bkptd_after_mask[31:0]    = {had_yy_xx_bkptd_base[31:8],
                                    had_yy_xx_bkptd_base[7:0] &  had_yy_xx_bkptd_mask[7:0]};
assign bkpte_after_mask[31:0]    = {had_yy_xx_bkpte_base[31:8],
                                    had_yy_xx_bkpte_base[7:0] &  had_yy_xx_bkpte_mask[7:0]};

assign ag_dc_bkpta_trap    = had_yy_xx_bkpta_rc
                             ^ (bkpta_after_mask[31:0]
                               ==  ag_addr_after_maska[31:0]);
assign ag_dc_bkptb_trap    = had_yy_xx_bkptb_rc
                             ^ (bkptb_after_mask[31:0]
                               ==  ag_addr_after_maskb[31:0]);
assign ag_dc_bkptc_trap    = bkptc_after_mask[31:0] ==  ag_addr_after_maskc[31:0];
assign ag_dc_bkptd_trap    = bkptd_after_mask[31:0] ==  ag_addr_after_maskd[31:0];
assign ag_dc_bkpte_trap    = bkpte_after_mask[31:0] ==  ag_addr_after_maske[31:0];




assign lsu_pmp_write       = idu_lsu_ex1_func[0];
assign lsu_pmp_addr[31:0]  = ag_addr[31:0];
assign ag_dc_pmp_expt      = pmp_lsu_acc_deny;





// &Force("bus","sysmap_lsu_flg",4,0); @251
// &Force("output", "ag_dc_ca"); @252
// &Force("output", "ag_dc_so"); @253

assign lsu_sysmap_pa[31:0] = ag_addr[31:0];
assign ag_dc_ca            = sysmap_lsu_flg[3];
assign ag_dc_buf           = sysmap_lsu_flg[2];
assign ag_dc_so            = sysmap_lsu_flg[4];




// &CombBeg; @279
// &CombEnd; @313
// &Instance("gated_clk_cell", "x_pa_lsu_ag_gated_clk"); @329
// &Connect(.clk_in      (forever_cpuclk), @330
//          .external_en (1'b0), @331
//          .global_en   (1'b1), @332
//          .module_en   (1'b0), @333
//          .local_en    (ag_clk_en), @334
//          .clk_out     (ag_clk)); @335
assign acc_deny_vld         = 1'b0;
assign pmp_mtval_save_en    = 1'b0;
assign pmp_mtval_from_async = 1'b0;
assign pmp_deny_mtval[31:0] = 32'b0;
assign pmp_deny_ld_inst     = 1'b0;
assign ag_clk_en = idu_lsu_ex1_sel;
// &Instance("gated_clk_cell", "x_pa_lsu_ag_gated_clk"); @344
gated_clk_cell  x_pa_lsu_ag_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ag_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ag_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @345
//          .external_en (1'b0), @346
//          .global_en   (1'b1), @347
//          .module_en   (1'b0), @348
//          .local_en    (ag_clk_en), @349
//          .clk_out     (ag_clk)); @350

assign lsu_rtu_pmp_deny = acc_deny_vld & !async_expt_vld_f;




assign expt_clk_en = async_expt_vld | async_expt_vld_f | pmp_mtval_save_en;
// &Instance("gated_clk_cell", "x_pa_lsu_expt_gated_clk"); @360
gated_clk_cell  x_pa_lsu_expt_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (expt_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (expt_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @361
//          .external_en (1'b0), @362
//          .global_en   (1'b1), @363
//          .module_en   (1'b0), @364
//          .local_en    (expt_clk_en), @365
//          .clk_out     (expt_clk)); @366

assign async_expt_vld    = ncb_ag_async_expt_vld | dc_ag_async_expt_vld;
assign async_mtval[31:0] = ncb_ag_async_expt_vld ? ncb_ag_async_mtval[31:0]
                                                 : dc_ag_async_mtval[31:0];
assign async_ld_inst     = ncb_ag_async_expt_vld ? ncb_ag_async_ld_inst
                                                 : dc_ag_async_ld_inst;

parameter ASYNC_IDLE = 1'b0;
parameter ASYNC_VLD  = 1'b1;

always@(posedge expt_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    async_cur_state <= ASYNC_IDLE;
  else
    async_cur_state <= async_next_state;
end

// &CombBeg; @385
always @( async_cur_state
       or async_expt_vld
       or rtu_lsu_async_expt_ack)
begin
  case (async_cur_state)
  ASYNC_IDLE: begin
    if (async_expt_vld)
      async_next_state = ASYNC_VLD;
    else
      async_next_state = ASYNC_IDLE;
  end
  ASYNC_VLD: begin
    if (rtu_lsu_async_expt_ack)
      async_next_state = ASYNC_IDLE;
    else
      async_next_state = ASYNC_VLD;
  end
  default: async_next_state = ASYNC_IDLE;
  endcase
// &CombEnd; @401
end

assign lsu_biu_async_expt_ack = rtu_lsu_async_expt_ack;

assign async_expt_vld_f = async_cur_state == ASYNC_VLD;

always@(posedge expt_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    async_mtval_f[31:0] <= 32'b0;
    async_ld_inst_f     <= 1'b0;
  end
  else if (async_expt_vld & (!async_expt_vld_f | rtu_lsu_async_expt_ack)) begin
    async_mtval_f[31:0] <= async_mtval[31:0];
    async_ld_inst_f     <= async_ld_inst;
  end
  else if (pmp_mtval_save_en & rtu_lsu_ex2_stall & !async_expt_vld_f) begin
    async_mtval_f[31:0] <= pmp_deny_mtval[31:0];
    async_ld_inst_f     <= pmp_deny_ld_inst;
  end
end

assign lsu_rtu_async_expt_vld    = async_expt_vld_f;
assign lsu_rtu_async_mtval[31:0] = (async_expt_vld_f | pmp_mtval_from_async) ? async_mtval_f[31:0] : pmp_deny_mtval[31:0];
assign lsu_rtu_async_ld_inst     = (async_expt_vld_f | pmp_mtval_from_async) ? async_ld_inst_f     : pmp_deny_ld_inst;




// &Force("output", "ag_dc_lm_pass"); @430
assign ag_lr_inst = ag_dc_func[3:0] == 4'b0010;
assign ag_sc_inst = ag_dc_func[3:0] == 4'b0011;
assign lm_set = ag_inst_vld_aft_cancel &  ag_lr_inst & !ag_stall;
assign lm_clr = ag_inst_vld_aft_cancel & !ag_lr_inst & !ag_stall;
assign lm_set_gate = ag_inst_vld & ag_lr_inst;
assign lm_lr_bus[33:0] = {ag_addr[31:0], ag_dc_size[1:0]} & {34{ag_lr_inst}};
assign lm_sc_bus[33:0] = {ag_addr[31:0], ag_dc_size[1:0]} & {34{ag_sc_inst}};
assign ag_dc_lm_pass   = ag_sc_inst & lm_pass;
assign lsu_pad_sc_pass = ag_dc_lm_pass;









// &CombBeg; @449
always @( idu_lsu_ex1_size[1:0]
       or ag_addr[2:0])
begin
  case(idu_lsu_ex1_size[1:0])
    HALF : ag_misalign = ag_addr[0];
    WORD : ag_misalign = |ag_addr[1:0];
    DWORD: ag_misalign = |ag_addr[2:0];
    default : ag_misalign = 1'b0;
  endcase
// &CombEnd; @456
end

assign ag_misalign_final = ag_misalign & (
                          !cp0_lsu_mm |
                           ag_dc_so |
                           ag_dc_func[2] | ag_dc_func[1] | ag_mls);

assign ag_dc_misalign = split_cur_first & !ag_dc_func[3] & ag_misalign_final |
                       !split_cur_first & ag_dc_so & !split_acc_deny;

// &Force("nonport", "ag_mls"); @468

assign misalign_expt_vec[3:0] = (ag_dc_func[2] | ag_dc_func[1] | ag_dc_func[0]) ? 4'b0110 : 4'b0100;




parameter S_FIRST  = 3'b000;
parameter S_SECD   = 3'b001;
parameter S_THIRD  = 3'b010;
parameter S_FOURTH = 3'b011;
parameter S_ABORT  = 3'b100;

assign split_flush = split_cur_busy & !split_last & !ag_stall &
                    (pmp_lsu_acc_deny | ag_dc_so);

always@(posedge split_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    split_cur_state[2:0] <= S_FIRST;
  else if (split_flush)
    split_cur_state[2:0] <= S_ABORT;
  else
    split_cur_state[2:0] <= split_next_state[2:0];
end

assign ag_split_req      = ag_inst_vld & !ag_dc_func[3] &
                           ag_misalign & !ag_misalign_final;
assign ag_split_req_gate = ag_inst_vld & !ag_dc_func[3] &
                           ag_misalign;

// &CombBeg; @502
always @( ag_split_req
       or split_secd_last
       or split_thrd_last
       or pmp_lsu_acc_deny
       or split_cur_state
       or ag_stall
       or rtu_lsu_ex1_cancel)
begin
  case(split_cur_state)
  S_FIRST: begin
    if (ag_split_req & !ag_stall & !rtu_lsu_ex1_cancel)
      split_next_state = pmp_lsu_acc_deny ? S_ABORT : S_SECD;
    else
      split_next_state = S_FIRST;
  end
  S_SECD: begin
    if (!ag_stall) begin
      if (split_secd_last)
        split_next_state = S_FIRST;
      else
        split_next_state = S_THIRD;
      end
    else
      split_next_state = S_SECD;
  end
  S_THIRD:begin
    if (!ag_stall) begin
      if (split_thrd_last)
        split_next_state = S_FIRST;
      else
        split_next_state = S_FOURTH;
      end
    else
      split_next_state = S_THIRD;
  end
  S_FOURTH:begin
    if (!ag_stall)
      split_next_state = S_FIRST;
    else
      split_next_state = S_FOURTH;
  end
  S_ABORT:begin
    if (!ag_stall)
      split_next_state = S_FIRST;
    else
      split_next_state = S_ABORT;
  end
  default:split_next_state = S_FIRST;
  endcase
// &CombEnd; @544
end

assign split_cur_first = split_cur_state == S_FIRST;
assign split_cur_secd  = split_cur_state == S_SECD;
assign split_cur_thrd  = split_cur_state == S_THIRD;
assign split_cur_forth = split_cur_state == S_FOURTH;
assign split_cur_abort = split_cur_state == S_ABORT;

assign split_cur_busy  = split_cur_secd |
                         split_cur_thrd |
                         split_cur_forth;

assign ag_split_sel    = split_cur_first & ag_split_req |
                         split_cur_busy;

assign split_last      = split_cur_secd & split_secd_last |
                         split_cur_thrd & split_thrd_last |
                         split_cur_forth;
assign split_first     = split_cur_first;

assign split_secd_last = ag_size_half |
                         ag_size_word & !ag_addr_ff[0] |
                         ag_size_dw   & !ag_addr_ff[1] & !ag_addr_ff[0];
assign split_thrd_last = ag_size_word |
                         ag_size_dw & !ag_addr_ff[0];




assign ag_size_half = idu_lsu_ex1_size[1:0] == HALF;
assign ag_size_word = idu_lsu_ex1_size[1:0] == WORD;
assign ag_size_dw   = idu_lsu_ex1_size[1:0] == DWORD;

assign split_first_size_half = ag_size_word & !ag_addr[0] |
                               ag_size_dw   & ag_addr[1] & !ag_addr[0];
assign split_first_size_word = ag_size_dw   & (ag_addr[2:0] == 3'b100);
assign split_first_size[1:0] = ag_misalign
                             ? (split_first_size_word ? WORD
                                                      : (split_first_size_half ? HALF : BYTE))
                             : idu_lsu_ex1_size[1:0];

assign split_secd_size_byte = ag_size_half & ag_addr_ff[0];
assign split_secd_size_word = ag_size_dw   & (ag_addr_ff[1:0] != 2'b01);
assign split_secd_size[1:0] = split_secd_size_byte
                            ? BYTE
                            : split_secd_size_word ? WORD : HALF;

assign split_thrd_size_byte = ag_size_word;
assign split_thrd_size_word = ag_size_dw & (ag_addr_ff[1:0] == 2'b01);
assign split_thrd_size[1:0] = split_thrd_size_word
                            ? WORD
                            : (split_thrd_size_byte ? BYTE : HALF);

assign split_forth_size[1:0] = BYTE;
assign split_size[1:0] = {2{split_cur_first}} & split_first_size[1:0] |
                         {2{split_cur_secd}}  & split_secd_size[1:0]  |
                         {2{split_cur_thrd}}  & split_thrd_size[1:0]  |
                         {2{split_cur_forth}} & split_forth_size[1:0];

always@(posedge split_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    ag_addr_ff[2:0] <= 3'b0;
  else if (split_cur_first & ag_split_req & !ag_stall)
    ag_addr_ff[2:0] <= ag_addr[2:0];
end












assign ag_xx_inst_abort = split_cur_abort | split_last & (pmp_lsu_acc_deny | ag_dc_so);







assign ag_xx_split_done = split_last & !ag_stall & !pmp_lsu_acc_deny & !ag_dc_so;

// &Instance("gated_clk_cell", "x_pa_lsu_split_err_gated_clk"); @665
// &Connect(.clk_in      (forever_cpuclk), @666
//          .external_en (1'b0), @667
//          .global_en   (1'b1), @668
//          .module_en   (1'b0), @669
//          .local_en    (split_acc_clk_en), @670
//          .clk_out     (split_err_clk)); @671
assign split_acc_deny = 1'b0;




assign split_clk_en = ag_split_req_gate | !split_cur_first;

// &Instance("gated_clk_cell", "x_pa_lsu_ag_split_gated_clk"); @681
gated_clk_cell  x_pa_lsu_ag_split_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (split_clk           ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (split_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @682
//          .external_en (1'b0), @683
//          .global_en   (1'b1), @684
//          .module_en   (1'b0), @685
//          .local_en    (split_clk_en), @686
//          .clk_out     (split_clk)); @687





always@(posedge split_clk or negedge cpurst_b)
begin
  if (!cpurst_b)begin
    split_bkpta_trap <= 1'b0;
    split_bkptb_trap <= 1'b0;
    split_bkptc_trap <= 1'b0;
    split_bkptd_trap <= 1'b0;
    split_bkpte_trap <= 1'b0;
  end
  else if (!ag_stall & ag_split_sel) begin
    split_bkpta_trap <= bkpta_trap;
    split_bkptb_trap <= bkptb_trap;
    split_bkptc_trap <= bkptc_trap;
    split_bkptd_trap <= bkptd_trap;
    split_bkpte_trap <= bkpte_trap;
  end
end

assign bkpta_trap = ag_dc_bkpta_trap | split_bkpta_trap & !split_cur_first;
assign bkptb_trap = ag_dc_bkptb_trap | split_bkptb_trap & !split_cur_first;
assign bkptc_trap = ag_dc_bkptc_trap | split_bkptc_trap & !split_cur_first;
assign bkptd_trap = ag_dc_bkptd_trap | split_bkptd_trap & !split_cur_first;
assign bkpte_trap = ag_dc_bkpte_trap | split_bkpte_trap & !split_cur_first;




assign size_onehot[2:0] = ag_dc_size[1:0] == BYTE
                        ? 3'b001
                        : ag_dc_size[1:0] == HALF ? 3'b010 : 3'b100;

always@(posedge split_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    split_wdata_shift[2:0] <= 3'b0;
  else if (!ag_stall & ag_split_sel)
    split_wdata_shift[2:0] <= wdata_shift[2:0] + size_onehot[2:0];
end



assign wdata_shift[2:0] = split_cur_first
                        ? 3'b000
                        : split_wdata_shift[2:0];






// &Force("output", "lsu_rtu_ex1_cmplt"); @810
assign target_ca = ag_dc_ca;// & cp0_lsu_dcache_en | ag_dc_func[3];
always@(posedge ag_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    target_ca_ff <= 1'b0;
  else if (idu_lsu_ex1_sel)
    target_ca_ff <= target_ca;
end


assign ag_dc_inst_vld  = ag_inst_vld & target_ca & target_ca_ff &
                        !split_cur_abort &
                        !ag_dc_misalign &
                        !rtu_lsu_ex1_cancel &
                         arb_ag_grant & ncb_xx_no_op;

assign ag_dc_inst_vld_gate = ag_inst_vld & target_ca_ff &
                            !split_cur_abort &
                             arb_ag_grant & ncb_xx_no_op;


assign ag_ncb_inst_vld    = ag_inst_vld & !target_ca & !target_ca_ff &
                           !split_cur_abort &
                           !ag_dc_misalign &
                           !rtu_lsu_ex1_cancel &
                            dc_ag_empty;

assign ag_ncb_inst_vld_dp = ag_inst_vld & !target_ca_ff &
                           !split_cur_abort &
                            dc_ag_empty;



assign ag_stall        = target_ca ? (dc_ag_stall | !arb_ag_grant | !target_ca_ff | !ncb_xx_no_op)
                                   : (ncb_ag_stall | target_ca_ff | !dc_ag_empty );
assign split_busy     = split_cur_first & ag_split_req |
                        split_cur_busy  & !split_last;
assign ag_stall_final = split_busy ? 1'b1 : ag_stall;

assign lsu_rtu_ex1_stall         = idu_lsu_ex1_sel &  ag_stall_final;
assign lsu_rtu_ex1_cmplt         = idu_lsu_ex1_sel & !ag_stall_final;
assign lsu_rtu_ex1_cmplt_dp      = idu_lsu_ex1_sel;

assign lsu_rtu_ex1_expt_vld      = idu_lsu_ex1_sel & ag_dc_misalign;
assign lsu_rtu_ex1_expt_vec[3:0] = misalign_expt_vec[3:0];
assign lsu_rtu_ex1_bkpta_trap    = bkpta_trap;
assign lsu_rtu_ex1_bkptb_trap    = bkptb_trap;
assign lsu_rtu_ex1_bkptc_trap    = bkptc_trap;
assign lsu_rtu_ex1_bkptd_trap    = bkptd_trap;
assign lsu_rtu_ex1_bkpte_trap    = bkpte_trap;
assign lsu_rtu_ex1_inst_ld       = !ag_dc_func[0] & !ag_dc_func[3];
assign lsu_rtu_ex1_mtval[31:0]   = ag_addr[31:0];




// &Force("bus","dc_ag_dcache_addr",31,0); @890
// &Force("bus","dc_ag_func",3,0); @891

parameter D_DATA_INDEX_LEN = `D_DATA_INDEX_WIDTH;
parameter D_TAG_TAG_LEN    = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;

assign dcache_size[1:0]
                      = dc_ag_dcache_req
                      ? dc_ag_dcache_size[1:0]
                      : ag_dc_size[1:0];
assign dcache_index[12:0]
                      = dc_ag_dcache_req
                      ? dc_ag_dcache_addr[14:2]
		      : ag_dc_addr[14:2];
assign ag_inst_dca_st = dc_ag_dcache_req
                      ? (dc_ag_func[3] | dc_ag_func[0])
                      : (ag_dc_func[3] | ag_dc_func[0]);
assign ag_inst_dca    = dc_ag_dcache_req
                      ? dc_ag_func[3]
                      : ag_dc_func[3];

assign ag_arb_tag_req       = dc_ag_dcache_req |
                              ag_inst_vld & target_ca_ff & !dc_ag_cache_stall;
assign ag_arb_tag_req_dp    = ag_arb_tag_req;
assign ag_arb_tag_wen[1:0]  = 2'b0;
assign ag_arb_tag_din[22:0] = 23'b0;
assign ag_arb_tag_idx[9:0]  = dcache_index[12:3];

assign ag_arb_dirty_req      = ag_arb_tag_req & ag_inst_dca;
assign ag_arb_dirty_req_dp   = ag_arb_tag_req_dp & ag_inst_dca;
assign ag_arb_dirty_wen[2:0] = 3'b0;
assign ag_arb_dirty_din[2:0] = 3'b0;
assign ag_arb_dirty_idx[9:0] = dcache_index[12:3];

assign ag_arb_data_req       = ag_arb_tag_req & !ag_inst_dca_st;
assign ag_arb_data_req_dp    = ag_arb_tag_req_dp & !ag_inst_dca_st;
assign ag_arb_data_wen[3:0]  = 4'b0;
assign ag_arb_data_din[63:0] = 64'b0;
assign ag_arb_data_idx[11:0] = dcache_index[12:1];
assign ag_arb_data_bank[1]   = dcache_size[1:0] == 2'b11 |  dcache_index[0];
assign ag_arb_data_bank[0]   = dcache_size[1:0] == 2'b11 | ~dcache_index[0];
assign ag_dc_dcache_grant = arb_ag_grant;

// &Instance("pa_lsu_arb", "x_pa_lsu_arb"); @934
pa_lsu_arb  x_pa_lsu_arb (
  .ag_arb_data_bank           (ag_arb_data_bank          ),
  .ag_arb_data_din            (ag_arb_data_din           ),
  .ag_arb_data_idx            (ag_arb_data_idx           ),
  .ag_arb_data_req            (ag_arb_data_req           ),
  .ag_arb_data_req_dp         (ag_arb_data_req_dp        ),
  .ag_arb_data_wen            (ag_arb_data_wen           ),
  .ag_arb_dirty_din           (ag_arb_dirty_din          ),
  .ag_arb_dirty_idx           (ag_arb_dirty_idx          ),
  .ag_arb_dirty_req           (ag_arb_dirty_req          ),
  .ag_arb_dirty_req_dp        (ag_arb_dirty_req_dp       ),
  .ag_arb_dirty_wen           (ag_arb_dirty_wen          ),
  .ag_arb_tag_din             (ag_arb_tag_din            ),
  .ag_arb_tag_idx             (ag_arb_tag_idx            ),
  .ag_arb_tag_req             (ag_arb_tag_req            ),
  .ag_arb_tag_wen             (ag_arb_tag_wen            ),
  .arb_ag_grant               (arb_ag_grant              ),
  .arb_icc_data_grant         (arb_icc_data_grant        ),
  .arb_rdl_data_grant         (arb_rdl_data_grant        ),
  .arb_stb_xx_grant           (arb_stb_xx_grant          ),
  .dcache_data_cen_way0_bank0 (dcache_data_cen_way0_bank0),
  .dcache_data_cen_way0_bank1 (dcache_data_cen_way0_bank1),
  .dcache_data_cen_way1_bank0 (dcache_data_cen_way1_bank0),
  .dcache_data_cen_way1_bank1 (dcache_data_cen_way1_bank1),
  .dcache_data_din            (dcache_data_din           ),
  .dcache_data_idx            (dcache_data_idx           ),
  .dcache_data_wen            (dcache_data_wen           ),
  .dcache_dirty_cen           (dcache_dirty_cen          ),
  .dcache_dirty_din           (dcache_dirty_din          ),
  .dcache_dirty_idx           (dcache_dirty_idx          ),
  .dcache_dirty_wen           (dcache_dirty_wen          ),
  .dcache_tag_cen             (dcache_tag_cen            ),
  .dcache_tag_din             (dcache_tag_din            ),
  .dcache_tag_idx             (dcache_tag_idx            ),
  .dcache_tag_wen             (dcache_tag_wen            ),
  .icc_arb_data_bank          (icc_arb_data_bank         ),
  .icc_arb_data_din           (icc_arb_data_din          ),
  .icc_arb_data_idx           (icc_arb_data_idx          ),
  .icc_arb_data_req           (icc_arb_data_req          ),
  .icc_arb_data_way           (icc_arb_data_way          ),
  .icc_arb_data_wen           (icc_arb_data_wen          ),
  .icc_arb_dirty_din          (icc_arb_dirty_din         ),
  .icc_arb_dirty_idx          (icc_arb_dirty_idx         ),
  .icc_arb_dirty_req          (icc_arb_dirty_req         ),
  .icc_arb_dirty_wen          (icc_arb_dirty_wen         ),
  .icc_arb_tag_din            (icc_arb_tag_din           ),
  .icc_arb_tag_idx            (icc_arb_tag_idx           ),
  .icc_arb_tag_req            (icc_arb_tag_req           ),
  .icc_arb_tag_wen            (icc_arb_tag_wen           ),
  .lfb_arb_data_bank          (lfb_arb_data_bank         ),
  .lfb_arb_data_din           (lfb_arb_data_din          ),
  .lfb_arb_data_idx           (lfb_arb_data_idx          ),
  .lfb_arb_data_req           (lfb_arb_data_req          ),
  .lfb_arb_data_way           (lfb_arb_data_way          ),
  .lfb_arb_data_wen           (lfb_arb_data_wen          ),
  .lfb_arb_dcache_sel         (lfb_arb_dcache_sel        ),
  .lfb_arb_dirty_din          (lfb_arb_dirty_din         ),
  .lfb_arb_dirty_idx          (lfb_arb_dirty_idx         ),
  .lfb_arb_dirty_req          (lfb_arb_dirty_req         ),
  .lfb_arb_dirty_wen          (lfb_arb_dirty_wen         ),
  .lfb_arb_tag_din            (lfb_arb_tag_din           ),
  .lfb_arb_tag_idx            (lfb_arb_tag_idx           ),
  .lfb_arb_tag_req            (lfb_arb_tag_req           ),
  .lfb_arb_tag_wen            (lfb_arb_tag_wen           ),
  .rdl_arb_data_bank          (rdl_arb_data_bank         ),
  .rdl_arb_data_din           (rdl_arb_data_din          ),
  .rdl_arb_data_idx           (rdl_arb_data_idx          ),
  .rdl_arb_data_req           (rdl_arb_data_req          ),
  .rdl_arb_data_way           (rdl_arb_data_way          ),
  .rdl_arb_data_wen           (rdl_arb_data_wen          ),
  .rdl_arb_dcache_sel         (rdl_arb_dcache_sel        ),
  .rdl_arb_dirty_din          (rdl_arb_dirty_din         ),
  .rdl_arb_dirty_idx          (rdl_arb_dirty_idx         ),
  .rdl_arb_dirty_req          (rdl_arb_dirty_req         ),
  .rdl_arb_dirty_wen          (rdl_arb_dirty_wen         ),
  .rdl_arb_tag_din            (rdl_arb_tag_din           ),
  .rdl_arb_tag_idx            (rdl_arb_tag_idx           ),
  .rdl_arb_tag_req            (rdl_arb_tag_req           ),
  .rdl_arb_tag_wen            (rdl_arb_tag_wen           ),
  .stb_arb_data_bank          (stb_arb_data_bank         ),
  .stb_arb_data_din           (stb_arb_data_din          ),
  .stb_arb_data_idx           (stb_arb_data_idx          ),
  .stb_arb_data_req           (stb_arb_data_req          ),
  .stb_arb_data_way           (stb_arb_data_way          ),
  .stb_arb_data_wen           (stb_arb_data_wen          ),
  .stb_arb_dcache_sel         (stb_arb_dcache_sel        ),
  .stb_arb_dirty_din          (stb_arb_dirty_din         ),
  .stb_arb_dirty_idx          (stb_arb_dirty_idx         ),
  .stb_arb_dirty_req          (stb_arb_dirty_req         ),
  .stb_arb_dirty_wen          (stb_arb_dirty_wen         )
);






assign lsu_hpcp_inst_store = 1'b0;
assign lsu_hpcp_inst_store_gate = 1'b0;

// &ModuleEnd; @950
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_arb(
  ag_arb_data_bank,
  ag_arb_data_din,
  ag_arb_data_idx,
  ag_arb_data_req,
  ag_arb_data_req_dp,
  ag_arb_data_wen,
  ag_arb_dirty_din,
  ag_arb_dirty_idx,
  ag_arb_dirty_req,
  ag_arb_dirty_req_dp,
  ag_arb_dirty_wen,
  ag_arb_tag_din,
  ag_arb_tag_idx,
  ag_arb_tag_req,
  ag_arb_tag_wen,
  arb_ag_grant,
  arb_icc_data_grant,
  arb_rdl_data_grant,
  arb_stb_xx_grant,
  dcache_data_cen_way0_bank0,
  dcache_data_cen_way0_bank1,
  dcache_data_cen_way1_bank0,
  dcache_data_cen_way1_bank1,
  dcache_data_din,
  dcache_data_idx,
  dcache_data_wen,
  dcache_dirty_cen,
  dcache_dirty_din,
  dcache_dirty_idx,
  dcache_dirty_wen,
  dcache_tag_cen,
  dcache_tag_din,
  dcache_tag_idx,
  dcache_tag_wen,
  icc_arb_data_bank,
  icc_arb_data_din,
  icc_arb_data_idx,
  icc_arb_data_req,
  icc_arb_data_way,
  icc_arb_data_wen,
  icc_arb_dirty_din,
  icc_arb_dirty_idx,
  icc_arb_dirty_req,
  icc_arb_dirty_wen,
  icc_arb_tag_din,
  icc_arb_tag_idx,
  icc_arb_tag_req,
  icc_arb_tag_wen,
  lfb_arb_data_bank,
  lfb_arb_data_din,
  lfb_arb_data_idx,
  lfb_arb_data_req,
  lfb_arb_data_way,
  lfb_arb_data_wen,
  lfb_arb_dcache_sel,
  lfb_arb_dirty_din,
  lfb_arb_dirty_idx,
  lfb_arb_dirty_req,
  lfb_arb_dirty_wen,
  lfb_arb_tag_din,
  lfb_arb_tag_idx,
  lfb_arb_tag_req,
  lfb_arb_tag_wen,
  rdl_arb_data_bank,
  rdl_arb_data_din,
  rdl_arb_data_idx,
  rdl_arb_data_req,
  rdl_arb_data_way,
  rdl_arb_data_wen,
  rdl_arb_dcache_sel,
  rdl_arb_dirty_din,
  rdl_arb_dirty_idx,
  rdl_arb_dirty_req,
  rdl_arb_dirty_wen,
  rdl_arb_tag_din,
  rdl_arb_tag_idx,
  rdl_arb_tag_req,
  rdl_arb_tag_wen,
  stb_arb_data_bank,
  stb_arb_data_din,
  stb_arb_data_idx,
  stb_arb_data_req,
  stb_arb_data_way,
  stb_arb_data_wen,
  stb_arb_dcache_sel,
  stb_arb_dirty_din,
  stb_arb_dirty_idx,
  stb_arb_dirty_req,
  stb_arb_dirty_wen
);

// &Ports; @21
input   [1 :0]  ag_arb_data_bank;
input   [63:0]  ag_arb_data_din;
input   [11:0]  ag_arb_data_idx;
input           ag_arb_data_req;
input           ag_arb_data_req_dp;
input   [3 :0]  ag_arb_data_wen;
input   [2 :0]  ag_arb_dirty_din;
input   [9 :0]  ag_arb_dirty_idx;
input           ag_arb_dirty_req;
input           ag_arb_dirty_req_dp;
input   [2 :0]  ag_arb_dirty_wen;
input   [22:0]  ag_arb_tag_din;
input   [9 :0]  ag_arb_tag_idx;
input           ag_arb_tag_req;
input   [1 :0]  ag_arb_tag_wen;
input   [1 :0]  icc_arb_data_bank;
input   [63:0]  icc_arb_data_din;
input   [11:0]  icc_arb_data_idx;
input           icc_arb_data_req;
input   [1 :0]  icc_arb_data_way;
input   [3 :0]  icc_arb_data_wen;
input   [2 :0]  icc_arb_dirty_din;
input   [9 :0]  icc_arb_dirty_idx;
input           icc_arb_dirty_req;
input   [2 :0]  icc_arb_dirty_wen;
input   [22:0]  icc_arb_tag_din;
input   [9 :0]  icc_arb_tag_idx;
input           icc_arb_tag_req;
input   [1 :0]  icc_arb_tag_wen;
input   [1 :0]  lfb_arb_data_bank;
input   [63:0]  lfb_arb_data_din;
input   [11:0]  lfb_arb_data_idx;
input           lfb_arb_data_req;
input   [1 :0]  lfb_arb_data_way;
input   [3 :0]  lfb_arb_data_wen;
input           lfb_arb_dcache_sel;
input   [2 :0]  lfb_arb_dirty_din;
input   [9 :0]  lfb_arb_dirty_idx;
input           lfb_arb_dirty_req;
input   [2 :0]  lfb_arb_dirty_wen;
input   [22:0]  lfb_arb_tag_din;
input   [9 :0]  lfb_arb_tag_idx;
input           lfb_arb_tag_req;
input   [1 :0]  lfb_arb_tag_wen;
input   [1 :0]  rdl_arb_data_bank;
input   [63:0]  rdl_arb_data_din;
input   [11:0]  rdl_arb_data_idx;
input           rdl_arb_data_req;
input   [1 :0]  rdl_arb_data_way;
input   [3 :0]  rdl_arb_data_wen;
input           rdl_arb_dcache_sel;
input   [2 :0]  rdl_arb_dirty_din;
input   [9 :0]  rdl_arb_dirty_idx;
input           rdl_arb_dirty_req;
input   [2 :0]  rdl_arb_dirty_wen;
input   [22:0]  rdl_arb_tag_din;
input   [9 :0]  rdl_arb_tag_idx;
input           rdl_arb_tag_req;
input   [1 :0]  rdl_arb_tag_wen;
input   [1 :0]  stb_arb_data_bank;
input   [63:0]  stb_arb_data_din;
input   [11:0]  stb_arb_data_idx;
input           stb_arb_data_req;
input   [1 :0]  stb_arb_data_way;
input   [3 :0]  stb_arb_data_wen;
input           stb_arb_dcache_sel;
input   [2 :0]  stb_arb_dirty_din;
input   [9 :0]  stb_arb_dirty_idx;
input           stb_arb_dirty_req;
input   [2 :0]  stb_arb_dirty_wen;
output          arb_ag_grant;
output          arb_icc_data_grant;
output          arb_rdl_data_grant;
output          arb_stb_xx_grant;
output          dcache_data_cen_way0_bank0;
output          dcache_data_cen_way0_bank1;
output          dcache_data_cen_way1_bank0;
output          dcache_data_cen_way1_bank1;
output  [63:0]  dcache_data_din;
output  [11:0]  dcache_data_idx;
output  [3 :0]  dcache_data_wen;
output          dcache_dirty_cen;
output  [2 :0]  dcache_dirty_din;
output  [9 :0]  dcache_dirty_idx;
output  [2 :0]  dcache_dirty_wen;
output          dcache_tag_cen;
output  [22:0]  dcache_tag_din;
output  [9 :0]  dcache_tag_idx;
output  [1 :0]  dcache_tag_wen;

// &Regs; @22
reg     [1 :0]  dcache_data_bank;
reg     [63:0]  dcache_data_din;
reg     [11:0]  dcache_data_idx;
reg     [1 :0]  dcache_data_way;
reg     [3 :0]  dcache_data_wen;
reg     [2 :0]  dcache_dirty_din;
reg     [9 :0]  dcache_dirty_idx;
reg     [2 :0]  dcache_dirty_wen;
reg     [22:0]  dcache_tag_din;
reg     [9 :0]  dcache_tag_idx;
reg     [1 :0]  dcache_tag_wen;

// &Wires; @23
wire    [1 :0]  ag_arb_data_bank;
wire    [63:0]  ag_arb_data_din;
wire    [11:0]  ag_arb_data_idx;
wire            ag_arb_data_req;
wire            ag_arb_data_req_dp;
wire    [3 :0]  ag_arb_data_wen;
wire    [2 :0]  ag_arb_dirty_din;
wire    [9 :0]  ag_arb_dirty_idx;
wire            ag_arb_dirty_req;
wire            ag_arb_dirty_req_dp;
wire    [2 :0]  ag_arb_dirty_wen;
wire    [22:0]  ag_arb_tag_din;
wire    [9 :0]  ag_arb_tag_idx;
wire            ag_arb_tag_req;
wire    [1 :0]  ag_arb_tag_wen;
wire            ag_data_dirty_sel;
wire            arb_ag_grant;
wire            arb_icc_data_grant;
wire            arb_rdl_data_grant;
wire            arb_stb_xx_grant;
wire            dcache_data_cen_way0_bank0;
wire            dcache_data_cen_way0_bank1;
wire            dcache_data_cen_way1_bank0;
wire            dcache_data_cen_way1_bank1;
wire            dcache_data_req;
wire    [4 :0]  dcache_data_sel;
wire            dcache_dirty_cen;
wire    [3 :0]  dcache_dirty_sel;
wire            dcache_tag_cen;
wire    [2 :0]  dcache_tag_sel;
wire    [1 :0]  icc_arb_data_bank;
wire    [63:0]  icc_arb_data_din;
wire    [11:0]  icc_arb_data_idx;
wire            icc_arb_data_req;
wire    [1 :0]  icc_arb_data_way;
wire    [3 :0]  icc_arb_data_wen;
wire    [2 :0]  icc_arb_dirty_din;
wire    [9 :0]  icc_arb_dirty_idx;
wire            icc_arb_dirty_req;
wire    [2 :0]  icc_arb_dirty_wen;
wire    [22:0]  icc_arb_tag_din;
wire    [9 :0]  icc_arb_tag_idx;
wire            icc_arb_tag_req;
wire    [1 :0]  icc_arb_tag_wen;
wire    [1 :0]  lfb_arb_data_bank;
wire    [63:0]  lfb_arb_data_din;
wire    [11:0]  lfb_arb_data_idx;
wire            lfb_arb_data_req;
wire    [1 :0]  lfb_arb_data_way;
wire    [3 :0]  lfb_arb_data_wen;
wire            lfb_arb_dcache_sel;
wire    [2 :0]  lfb_arb_dirty_din;
wire    [9 :0]  lfb_arb_dirty_idx;
wire            lfb_arb_dirty_req;
wire    [2 :0]  lfb_arb_dirty_wen;
wire    [22:0]  lfb_arb_tag_din;
wire    [9 :0]  lfb_arb_tag_idx;
wire            lfb_arb_tag_req;
wire    [1 :0]  lfb_arb_tag_wen;
wire    [1 :0]  rdl_arb_data_bank;
wire    [63:0]  rdl_arb_data_din;
wire    [11:0]  rdl_arb_data_idx;
wire            rdl_arb_data_req;
wire    [1 :0]  rdl_arb_data_way;
wire    [3 :0]  rdl_arb_data_wen;
wire            rdl_arb_dcache_sel;
wire    [2 :0]  rdl_arb_dirty_din;
wire    [9 :0]  rdl_arb_dirty_idx;
wire            rdl_arb_dirty_req;
wire    [2 :0]  rdl_arb_dirty_wen;
wire    [22:0]  rdl_arb_tag_din;
wire    [9 :0]  rdl_arb_tag_idx;
wire            rdl_arb_tag_req;
wire    [1 :0]  rdl_arb_tag_wen;
wire    [1 :0]  stb_arb_data_bank;
wire    [63:0]  stb_arb_data_din;
wire    [11:0]  stb_arb_data_idx;
wire            stb_arb_data_req;
wire    [1 :0]  stb_arb_data_way;
wire    [3 :0]  stb_arb_data_wen;
wire            stb_arb_dcache_sel;
wire    [2 :0]  stb_arb_dirty_din;
wire    [9 :0]  stb_arb_dirty_idx;
wire            stb_arb_dirty_req;
wire    [2 :0]  stb_arb_dirty_wen;


parameter D_DATA_INDEX_LEN = `D_DATA_INDEX_WIDTH;
parameter D_TAG_TAG_WIDTH  = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;

assign ag_data_dirty_sel  = ag_arb_data_req_dp | ag_arb_dirty_req_dp;

assign arb_ag_grant       = ~(lfb_arb_dcache_sel | rdl_arb_dcache_sel);
assign arb_icc_data_grant = 1'b1;
assign arb_rdl_data_grant = 1'b1;
assign arb_stb_xx_grant   = ~(lfb_arb_dcache_sel | rdl_arb_dcache_sel |
                              ag_data_dirty_sel);

assign dcache_tag_cen = ~(ag_arb_tag_req |
                          lfb_arb_tag_req |
                          rdl_arb_tag_req |
                          icc_arb_tag_req);

assign dcache_tag_sel[2:0] = {rdl_arb_dcache_sel,
                              lfb_arb_dcache_sel,
                              ag_arb_tag_req};

// &CombBeg; @46
always @( ag_arb_tag_din[22:0]
       or rdl_arb_tag_idx[9:0]
       or dcache_tag_sel[2:0]
       or icc_arb_tag_wen[1:0]
       or icc_arb_tag_din[22:0]
       or lfb_arb_tag_din[22:0]
       or ag_arb_tag_idx[9:0]
       or icc_arb_tag_idx[9:0]
       or lfb_arb_tag_idx[9:0]
       or lfb_arb_tag_wen[1:0]
       or rdl_arb_tag_wen[1:0]
       or rdl_arb_tag_din[22:0]
       or ag_arb_tag_wen[1:0])
begin
  casez (dcache_tag_sel[2:0])
    3'b1?? : begin
             dcache_tag_wen[1:0]  = ~rdl_arb_tag_wen[1:0];
             dcache_tag_din[22:0] = rdl_arb_tag_din[22:0];
             dcache_tag_idx[9:0]  = rdl_arb_tag_idx[9:0];
             end
    3'b01? : begin
             dcache_tag_wen[1:0]  = ~lfb_arb_tag_wen[1:0];
             dcache_tag_din[22:0] = lfb_arb_tag_din[22:0];
             dcache_tag_idx[9:0]  = lfb_arb_tag_idx[9:0];
             end
    3'b001 : begin
             dcache_tag_wen[1:0]  = ~ag_arb_tag_wen[1:0];
             dcache_tag_din[22:0] = ag_arb_tag_din[22:0];
             dcache_tag_idx[9:0]  = ag_arb_tag_idx[9:0];
             end
    default: begin
             dcache_tag_wen[1:0]  = ~icc_arb_tag_wen[1:0];
             dcache_tag_din[22:0] = icc_arb_tag_din[22:0];
             dcache_tag_idx[9:0]  = icc_arb_tag_idx[9:0];
             end
  endcase
// &CombEnd; @69
end

assign dcache_dirty_cen = ~(lfb_arb_dirty_req |
                            rdl_arb_dirty_req |
                            stb_arb_dirty_req |
                            ag_arb_dirty_req  |
                            icc_arb_dirty_req);

assign dcache_dirty_sel[3:0] = {rdl_arb_dcache_sel,
                                lfb_arb_dcache_sel,
                                ag_arb_dirty_req,
                                stb_arb_dcache_sel};

// &CombBeg; @82
always @( rdl_arb_dirty_wen[2:0]
       or rdl_arb_dirty_din[2:0]
       or icc_arb_dirty_din[2:0]
       or ag_arb_dirty_wen[2:0]
       or rdl_arb_dirty_idx[9:0]
       or stb_arb_dirty_din[2:0]
       or icc_arb_dirty_wen[2:0]
       or lfb_arb_dirty_din[2:0]
       or dcache_dirty_sel[3:0]
       or ag_arb_dirty_din[2:0]
       or lfb_arb_dirty_idx[9:0]
       or ag_arb_dirty_idx[9:0]
       or stb_arb_dirty_wen[2:0]
       or icc_arb_dirty_idx[9:0]
       or lfb_arb_dirty_wen[2:0]
       or stb_arb_dirty_idx[9:0])
begin
  casez (dcache_dirty_sel[3:0])
    4'b1???: begin
             dcache_dirty_wen[2:0] = ~rdl_arb_dirty_wen[2:0];
             dcache_dirty_din[2:0] =  rdl_arb_dirty_din[2:0];
             dcache_dirty_idx[9:0] = rdl_arb_dirty_idx[9:0];
             end
    4'b01??: begin
             dcache_dirty_wen[2:0] = ~lfb_arb_dirty_wen[2:0];
             dcache_dirty_din[2:0] =  lfb_arb_dirty_din[2:0];
             dcache_dirty_idx[9:0] = lfb_arb_dirty_idx[9:0];
             end
    4'b001?: begin
             dcache_dirty_wen[2:0] = ~ag_arb_dirty_wen[2:0];
             dcache_dirty_din[2:0] =  ag_arb_dirty_din[2:0];
             dcache_dirty_idx[9:0] = ag_arb_dirty_idx[9:0];
             end
    4'b0001: begin
             dcache_dirty_wen[2:0] = ~stb_arb_dirty_wen[2:0];
             dcache_dirty_din[2:0] =  stb_arb_dirty_din[2:0];
             dcache_dirty_idx[9:0] = stb_arb_dirty_idx[9:0];
             end
    default: begin
             dcache_dirty_wen[2:0] = ~icc_arb_dirty_wen[2:0];
             dcache_dirty_din[2:0] =  icc_arb_dirty_din[2:0];
             dcache_dirty_idx[9:0] = icc_arb_dirty_idx[9:0];
             end
  endcase
// &CombEnd; @110
end

assign dcache_data_req = rdl_arb_data_req |
                         lfb_arb_data_req |
                         ag_arb_data_req |
                         stb_arb_data_req |
                         icc_arb_data_req;

assign dcache_data_cen_way0_bank0 = ~(dcache_data_req & dcache_data_way[0] & dcache_data_bank[0]);
assign dcache_data_cen_way0_bank1 = ~(dcache_data_req & dcache_data_way[0] & dcache_data_bank[1]);
assign dcache_data_cen_way1_bank0 = ~(dcache_data_req & dcache_data_way[1] & dcache_data_bank[0]);
assign dcache_data_cen_way1_bank1 = ~(dcache_data_req & dcache_data_way[1] & dcache_data_bank[1]);

assign dcache_data_sel[4:0] = {rdl_arb_dcache_sel,
                               lfb_arb_dcache_sel,
                               ag_data_dirty_sel,
                               stb_arb_dcache_sel,
                               icc_arb_data_req};

// &CombBeg; @129
always @( icc_arb_data_way[1:0]
       or lfb_arb_data_idx[11:0]
       or ag_arb_data_bank[1:0]
       or stb_arb_data_way[1:0]
       or ag_arb_data_din[63:0]
       or dcache_data_sel[4:0]
       or rdl_arb_data_idx[11:0]
       or lfb_arb_data_bank[1:0]
       or ag_arb_data_idx[11:0]
       or icc_arb_data_bank[1:0]
       or lfb_arb_data_wen[3:0]
       or icc_arb_data_din[63:0]
       or icc_arb_data_wen[3:0]
       or stb_arb_data_bank[1:0]
       or rdl_arb_data_way[1:0]
       or rdl_arb_data_wen[3:0]
       or rdl_arb_data_bank[1:0]
       or ag_arb_data_wen[3:0]
       or stb_arb_data_wen[3:0]
       or icc_arb_data_idx[11:0]
       or stb_arb_data_idx[11:0]
       or rdl_arb_data_din[63:0]
       or lfb_arb_data_din[63:0]
       or stb_arb_data_din[63:0]
       or lfb_arb_data_way[1:0])
begin
  casez (dcache_data_sel[4:0])
    5'b1????:begin
             dcache_data_way[1:0]  = rdl_arb_data_way[1:0];
             dcache_data_bank[1:0] = rdl_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~rdl_arb_data_wen[3:0];
             dcache_data_din[63:0] = rdl_arb_data_din[63:0];
             dcache_data_idx[11:0] = rdl_arb_data_idx[11:0];
             end
    5'b01???:begin
             dcache_data_way[1:0]  = lfb_arb_data_way[1:0];
             dcache_data_bank[1:0] = lfb_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~lfb_arb_data_wen[3:0];
             dcache_data_din[63:0] = lfb_arb_data_din[63:0];
             dcache_data_idx[11:0] = lfb_arb_data_idx[11:0];
             end
    5'b001??:begin
             dcache_data_way[1:0]  = 2'b11;
             dcache_data_bank[1:0] = ag_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~ag_arb_data_wen[3:0];
             dcache_data_din[63:0] = ag_arb_data_din[63:0];
             dcache_data_idx[11:0] = ag_arb_data_idx[11:0];
             end
    5'b0001?:begin
             dcache_data_way[1:0]  = stb_arb_data_way[1:0];
             dcache_data_bank[1:0] = stb_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~stb_arb_data_wen[3:0];
             dcache_data_din[63:0] = stb_arb_data_din[63:0];
             dcache_data_idx[11:0] = stb_arb_data_idx[11:0];
             end
    5'b00001:begin
             dcache_data_way[1:0]  = icc_arb_data_way[1:0];
             dcache_data_bank[1:0] = icc_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~icc_arb_data_wen[3:0];
             dcache_data_din[63:0] = icc_arb_data_din[63:0];
             dcache_data_idx[11:0] = icc_arb_data_idx[11:0];
             end
    default:begin
             dcache_data_way[1:0]  = 2'b11;
             dcache_data_bank[1:0] = ag_arb_data_bank[1:0];
             dcache_data_wen[3:0]  = ~ag_arb_data_wen[3:0];
             dcache_data_din[63:0] = ag_arb_data_din[63:0];
             dcache_data_idx[11:0] = ag_arb_data_idx[11:0];
             end
  endcase
// &CombEnd; @174
end


// &ModuleEnd; @177
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_dahbif(
  bmu_lsu_acc_err,
  bmu_lsu_grant,
  bmu_lsu_rdata,
  bmu_lsu_trans_cmplt,
  cpurst_b,
  dahbif_lfb_acc_err,
  dahbif_lfb_cmplt,
  dahbif_lfb_data,
  dahbif_lfb_grant,
  dahbif_ncb_acc_err,
  dahbif_ncb_cmplt,
  dahbif_ncb_data,
  dahbif_ncb_grant,
  dahbif_ncb_grant_2,
  dahbif_stb_acc_ecc,
  dahbif_stb_cmplt,
  dahbif_stb_grant,
  dahbif_stb_grant_2,
  dahbif_vb_acc_ecc,
  dahbif_vb_cmplt,
  dahbif_vb_grant,
  forever_cpuclk,
  lfb_dahbif_addr,
  lfb_dahbif_burst,
  lfb_dahbif_lock,
  lfb_dahbif_lr_inst,
  lfb_dahbif_prot,
  lfb_dahbif_req,
  lfb_dahbif_size,
  lsu_bmu_acc_deny,
  lsu_bmu_addr,
  lsu_bmu_burst,
  lsu_bmu_lock,
  lsu_bmu_lrsc,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_dp,
  lsu_bmu_seq,
  lsu_bmu_size,
  lsu_bmu_wdata,
  lsu_bmu_write,
  ncb_dahbif_acc_deny,
  ncb_dahbif_lock,
  ncb_dahbif_lrsc,
  ncb_dahbif_ncb_wb_addr,
  ncb_dahbif_ncb_wb_sel,
  ncb_dahbif_prot,
  ncb_dahbif_req,
  ncb_dahbif_req_dp,
  ncb_dahbif_size,
  ncb_dahbif_uc_ld_addr,
  ncb_dahbif_wdata,
  ncb_dahbif_write,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_async_flush,
  stb_dahbif_addr,
  stb_dahbif_data,
  stb_dahbif_lock,
  stb_dahbif_prot,
  stb_dahbif_req,
  stb_dahbif_sc_inst,
  stb_dahbif_size,
  vb_dahbif_addr,
  vb_dahbif_data,
  vb_dahbif_prot,
  vb_dahbif_req
);

// &Ports; @21
input           bmu_lsu_acc_err;
input           bmu_lsu_grant;
input   [31:0]  bmu_lsu_rdata;
input           bmu_lsu_trans_cmplt;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  lfb_dahbif_addr;
input   [2 :0]  lfb_dahbif_burst;
input           lfb_dahbif_lock;
input           lfb_dahbif_lr_inst;
input   [3 :0]  lfb_dahbif_prot;
input           lfb_dahbif_req;
input   [1 :0]  lfb_dahbif_size;
input           ncb_dahbif_acc_deny;
input           ncb_dahbif_lock;
input           ncb_dahbif_lrsc;
input   [31:0]  ncb_dahbif_ncb_wb_addr;
input           ncb_dahbif_ncb_wb_sel;
input   [3 :0]  ncb_dahbif_prot;
input           ncb_dahbif_req;
input           ncb_dahbif_req_dp;
input   [1 :0]  ncb_dahbif_size;
input   [31:0]  ncb_dahbif_uc_ld_addr;
input   [31:0]  ncb_dahbif_wdata;
input           ncb_dahbif_write;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input   [31:0]  stb_dahbif_addr;
input   [31:0]  stb_dahbif_data;
input           stb_dahbif_lock;
input   [3 :0]  stb_dahbif_prot;
input           stb_dahbif_req;
input           stb_dahbif_sc_inst;
input   [1 :0]  stb_dahbif_size;
input   [31:0]  vb_dahbif_addr;
input   [31:0]  vb_dahbif_data;
input   [3 :0]  vb_dahbif_prot;
input           vb_dahbif_req;
output          dahbif_lfb_acc_err;
output          dahbif_lfb_cmplt;
output  [31:0]  dahbif_lfb_data;
output          dahbif_lfb_grant;
output          dahbif_ncb_acc_err;
output          dahbif_ncb_cmplt;
output  [31:0]  dahbif_ncb_data;
output          dahbif_ncb_grant;
output          dahbif_ncb_grant_2;
output          dahbif_stb_acc_ecc;
output          dahbif_stb_cmplt;
output          dahbif_stb_grant;
output          dahbif_stb_grant_2;
output          dahbif_vb_acc_ecc;
output          dahbif_vb_cmplt;
output          dahbif_vb_grant;
output          lsu_bmu_acc_deny;
output  [31:0]  lsu_bmu_addr;
output  [2 :0]  lsu_bmu_burst;
output          lsu_bmu_lock;
output          lsu_bmu_lrsc;
output  [3 :0]  lsu_bmu_prot;
output          lsu_bmu_req;
output          lsu_bmu_req_dp;
output          lsu_bmu_seq;
output  [1 :0]  lsu_bmu_size;
output  [31:0]  lsu_bmu_wdata;
output          lsu_bmu_write;

// &Regs; @22
reg     [1 :0]  dahbif_cur_state;
reg     [1 :0]  dahbif_next_state;
reg     [2 :0]  data_cnt;
reg     [31:0]  req_addr;
reg     [2 :0]  req_burst;
reg     [2 :0]  req_burst_ff;
reg     [2 :0]  req_cnt;
reg             req_lock;
reg             req_lrsc;
reg     [2 :0]  req_offset_ff;
reg     [3 :0]  req_prot;
reg     [3 :0]  req_sel;
reg     [1 :0]  req_size;
reg             req_write;

// &Wires; @23
wire            bmu_lsu_acc_err;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire            ca_req_vld;
wire            cpurst_b;
wire            dahbif_clk_en;
wire            dahbif_cur_busy;
wire            dahbif_fsm_clk;
wire            dahbif_lfb_acc_err;
wire            dahbif_lfb_cmplt;
wire    [31:0]  dahbif_lfb_data;
wire            dahbif_lfb_grant;
wire            dahbif_ncb_acc_err;
wire            dahbif_ncb_cmplt;
wire    [31:0]  dahbif_ncb_data;
wire            dahbif_ncb_grant;
wire            dahbif_ncb_grant_2;
wire            dahbif_stb_acc_ecc;
wire            dahbif_stb_cmplt;
wire            dahbif_stb_grant;
wire            dahbif_stb_grant_2;
wire            dahbif_vb_acc_ecc;
wire            dahbif_vb_cmplt;
wire            dahbif_vb_grant;
wire    [2 :0]  data_cnt_inc;
wire            data_cnt_inc_en;
wire            data_cnt_start;
wire            data_last;
wire            forever_cpuclk;
wire    [31:0]  lfb_dahbif_addr;
wire    [2 :0]  lfb_dahbif_burst;
wire            lfb_dahbif_lock;
wire            lfb_dahbif_lr_inst;
wire    [3 :0]  lfb_dahbif_prot;
wire            lfb_dahbif_req;
wire    [1 :0]  lfb_dahbif_size;
wire            lfb_req;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire            ncb_dahbif_acc_deny;
wire            ncb_dahbif_lock;
wire            ncb_dahbif_lrsc;
wire    [31:0]  ncb_dahbif_ncb_wb_addr;
wire            ncb_dahbif_ncb_wb_sel;
wire    [3 :0]  ncb_dahbif_prot;
wire            ncb_dahbif_req;
wire            ncb_dahbif_req_dp;
wire    [1 :0]  ncb_dahbif_size;
wire    [31:0]  ncb_dahbif_uc_ld_addr;
wire    [31:0]  ncb_dahbif_wdata;
wire            ncb_dahbif_write;
wire            ncb_req;
wire            pad_yy_gate_clk_en_b;
wire            req_acc_deny;
wire    [31:0]  req_addr_post;
wire            req_burst_vld;
wire            req_burst_vld_ff;
wire            req_cnt_init;
wire            req_create_en;
wire            req_done;
wire            req_first;
wire            req_idle;
wire            req_idle_dp;
wire            req_inc2_ff;
wire    [2 :0]  req_offset;
wire    [3 :0]  req_sel_final;
wire            req_seq;
wire    [3 :0]  req_valid;
wire    [3 :0]  req_valid_dp;
wire            req_vld;
wire            req_vld_dp;
wire    [31:0]  req_wdata;
wire            rtu_yy_xx_async_flush;
wire    [31:0]  stb_dahbif_addr;
wire    [31:0]  stb_dahbif_data;
wire            stb_dahbif_lock;
wire    [3 :0]  stb_dahbif_prot;
wire            stb_dahbif_req;
wire            stb_dahbif_sc_inst;
wire    [1 :0]  stb_dahbif_size;
wire            stb_req;
wire    [31:0]  vb_dahbif_addr;
wire    [31:0]  vb_dahbif_data;
wire    [3 :0]  vb_dahbif_prot;
wire            vb_dahbif_req;
wire            vb_req;


parameter REQ = 2'b00;
parameter WFG = 2'b01;
parameter WFC = 2'b10;

always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dahbif_cur_state[1:0] <= REQ;
  else if (rtu_yy_xx_async_flush)
    dahbif_cur_state[1:0] <= REQ;
  else
    dahbif_cur_state[1:0] <= dahbif_next_state[1:0];
end

// &CombBeg; @39
always @( req_vld
       or dahbif_cur_state
       or bmu_lsu_grant
       or bmu_lsu_acc_err
       or bmu_lsu_trans_cmplt
       or data_last)
begin
  case(dahbif_cur_state)
    REQ: begin
      if (req_vld)
        dahbif_next_state = bmu_lsu_grant ? WFC : WFG;
      else
        dahbif_next_state = REQ;
    end
    WFG: begin
      if (bmu_lsu_grant)
        dahbif_next_state = WFC;
      else
        dahbif_next_state = WFG;
    end
    WFC: begin
      if (bmu_lsu_trans_cmplt & data_last & !bmu_lsu_acc_err)
        dahbif_next_state = req_vld ? (bmu_lsu_grant ? WFC : WFG)
                                    : REQ;
      else if (bmu_lsu_trans_cmplt & bmu_lsu_acc_err)
        dahbif_next_state = REQ;
      else
        dahbif_next_state = WFC;
    end
    default: dahbif_next_state = REQ;
  endcase
// &CombEnd; @64
end

assign dahbif_cur_busy = dahbif_cur_state != REQ;

assign req_vld    = vb_dahbif_req | lfb_dahbif_req | stb_dahbif_req | ncb_dahbif_req;
assign req_vld_dp = vb_dahbif_req | lfb_dahbif_req | stb_dahbif_req | ncb_dahbif_req_dp;





assign req_idle_dp = (dahbif_cur_state == REQ) |
                     (dahbif_cur_state == WFC) & req_done & data_last;

assign req_idle = (dahbif_cur_state == REQ) |
                  (dahbif_cur_state == WFC) & bmu_lsu_trans_cmplt & req_done & data_last;

assign req_create_en = req_vld & req_idle;

assign req_first = req_idle | (dahbif_cur_state == WFG);




assign lfb_req =  lfb_dahbif_req;
assign vb_req  = !lfb_dahbif_req &  vb_dahbif_req;
assign stb_req = !lfb_dahbif_req & !vb_dahbif_req & stb_dahbif_req;
assign ncb_req = ncb_dahbif_req;

assign req_valid[3:0] = {ncb_req,stb_req,lfb_req,vb_req};

always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_sel[3:0] <= 4'b0;
  else if (req_create_en)
    req_sel[3:0] <= req_valid[3:0];
end




always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_burst_ff[2:0] <= 3'b000;
  else if (req_create_en)
    req_burst_ff[2:0] <= req_burst[2:0];
end

assign req_burst_vld_ff = req_burst_ff[2:0] != 3'b000;
assign req_inc2_ff = req_burst_ff[2:0] == 3'b001;




assign req_cnt_init = req_create_en & req_burst_vld;

always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_cnt[2:0] <= 3'b000;
  else if (req_cnt_init)
    req_cnt[2:0] <= bmu_lsu_grant ? 3'b001 : 3'b000;
  else if (dahbif_cur_busy & bmu_lsu_grant & req_burst_vld_ff)
    req_cnt[2:0] <= req_cnt[2:0] + 3'b001;
  else if (bmu_lsu_acc_err)
    req_cnt[2:0] <= 3'b000;
end

assign req_done = !req_burst_vld_ff | (req_cnt[2:0] == 3'b000) | req_inc2_ff & (req_cnt[2:0] == 3'b010);
assign req_seq  = req_burst_vld_ff & (req_cnt[2:0] != 3'b000);




assign data_cnt_start  = req_create_en;
assign data_cnt_inc_en = (dahbif_cur_state == WFC) & bmu_lsu_trans_cmplt;

always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    data_cnt[2:0] <= 3'b000;
  else if (data_cnt_start)
    data_cnt[2:0] <= req_burst_vld ? 3'b000 : 3'b111;
  else if (data_cnt_inc_en)
    data_cnt[2:0] <= data_cnt_inc[2:0];
end

assign data_cnt_inc[2:0] = data_cnt[2:0] + 3'b001;
assign data_last = req_inc2_ff ? (data_cnt[2:0] == 3'b001) : (data_cnt[2:0] == 3'b111);




always@(posedge dahbif_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_offset_ff[2:0] <= 3'b000;
  else if (req_create_en)
    req_offset_ff[2:0] <= bmu_lsu_grant ? (req_addr_post[4:2] + 3'b001) : req_addr_post[4:2];
  else if (dahbif_cur_busy & bmu_lsu_grant & req_burst_vld_ff)
    req_offset_ff[2:0] <= req_offset_ff[2:0] + 3'b001;
end

assign req_offset[2:0] = req_idle_dp
                       ? req_addr_post[4:2]
                       : req_offset_ff[2:0];




assign req_valid_dp[3:0] = {ncb_dahbif_req_dp,stb_req,lfb_req,vb_req};
assign req_sel_final[3:0] = req_idle_dp ? req_valid_dp[3:0] : req_sel[3:0];

// &CombBeg; @179
always @( lfb_dahbif_addr[31:0]
       or stb_dahbif_prot[3:0]
       or stb_dahbif_addr[31:0]
       or lfb_dahbif_lock
       or ncb_dahbif_lock
       or req_sel_final[2:0]
       or ncb_dahbif_lrsc
       or stb_dahbif_lock
       or ncb_dahbif_size[1:0]
       or lfb_dahbif_burst[2:0]
       or ncb_dahbif_prot[3:0]
       or stb_dahbif_sc_inst
       or ncb_dahbif_ncb_wb_addr[31:0]
       or lfb_dahbif_prot[3:0]
       or lfb_dahbif_lr_inst
       or ncb_dahbif_write
       or stb_dahbif_size[1:0]
       or lfb_dahbif_size[1:0]
       or vb_dahbif_addr[31:0]
       or vb_dahbif_prot[3:0])
begin
  case(req_sel_final[2:0])
    3'b001: begin
            req_addr[31:0] = vb_dahbif_addr[31:0];
            req_prot[3:0]  = vb_dahbif_prot[3:0];
            req_size[1:0]  = 2'b10;
            req_write      = 1'b1;
            req_burst[2:0] = 3'b101; //INCR8
            req_lock       = 1'b0;
            req_lrsc       = 1'b0;
            end
    3'b010: begin
            req_addr[31:0] = lfb_dahbif_addr[31:0];
            req_prot[3:0]  = lfb_dahbif_prot[3:0];
            req_size[1:0]  = lfb_dahbif_size[1:0];
            req_write      = 1'b0;
            req_burst[2:0] = lfb_dahbif_burst[2:0];
            req_lock       = lfb_dahbif_lock;
            req_lrsc       = lfb_dahbif_lr_inst;
            end
    3'b100: begin
            req_addr[31:0] = stb_dahbif_addr[31:0];
            req_prot[3:0]  = stb_dahbif_prot[3:0];
            req_size[1:0]  = stb_dahbif_size[1:0];
            req_write      = 1'b1;
            req_burst[2:0] = (stb_dahbif_size[1:0] == 2'b11) ? 3'b001 : 3'b000;
            req_lock       = stb_dahbif_lock;
            req_lrsc       = stb_dahbif_sc_inst;
            end
    default:begin
            req_addr[31:0] = ncb_dahbif_ncb_wb_addr[31:0];
            req_prot[3:0]  = ncb_dahbif_prot[3:0];
            req_size[1:0]  = ncb_dahbif_size[1:0];
            req_write      = ncb_dahbif_write;
            req_burst[2:0] = (ncb_dahbif_size[1:0] == 2'b11) ? 3'b001 : 3'b000;
            req_lock       = ncb_dahbif_lock;
            req_lrsc       = ncb_dahbif_lrsc;
            end
  endcase
// &CombEnd; @218
end

assign req_burst_vld = req_burst[2:0] != 3'b000;

assign ca_req_vld          = |req_sel_final[2:0];
assign req_addr_post[31:0] = ca_req_vld | ncb_dahbif_ncb_wb_sel
                           ? req_addr[31:0]
                           : ncb_dahbif_uc_ld_addr[31:0];
assign req_acc_deny        = !ca_req_vld & ncb_dahbif_acc_deny;

assign req_wdata[31:0]     = {32{req_sel[0]}} & vb_dahbif_data[31:0] |
                             {32{req_sel[2]}} & stb_dahbif_data[31:0] |
                             {32{req_sel[3]}} & ncb_dahbif_wdata[31:0];

assign lsu_bmu_req        = req_idle_dp & req_vld |
                           (dahbif_cur_state == WFG) |
                           (dahbif_cur_state ==WFC) & !req_done;
assign lsu_bmu_req_dp     = req_idle_dp & req_vld_dp |
                           (dahbif_cur_state == WFG) |
                           (dahbif_cur_state ==WFC) & !req_done;
assign lsu_bmu_write      = req_write;
assign lsu_bmu_addr[31:0] = {req_addr_post[31:5], req_offset[2:0], req_addr_post[1:0]} ;
assign lsu_bmu_prot[3:0]  = req_prot[3:0];
assign lsu_bmu_size[1:0]  = (req_size[1:0] == 2'b11) ? 2'b10 : req_size[1:0];
assign lsu_bmu_wdata[31:0]= req_wdata[31:0];
assign lsu_bmu_acc_deny   = req_acc_deny;
assign lsu_bmu_lock       = req_lock;
assign lsu_bmu_lrsc       = req_lrsc;
assign lsu_bmu_seq        = (dahbif_cur_state ==WFC) & req_seq;
assign lsu_bmu_burst[2:0] = req_burst[2] ? req_burst[2:0] : 3'b000;

assign dahbif_ncb_grant   = req_sel_final[3] & req_first & bmu_lsu_grant;
assign dahbif_ncb_grant_2 = req_sel_final[3] & !req_first & bmu_lsu_grant;
assign dahbif_ncb_cmplt   = req_sel[3] & bmu_lsu_trans_cmplt;
assign dahbif_ncb_acc_err = req_sel[3] & bmu_lsu_acc_err;
assign dahbif_ncb_data[31:0] = bmu_lsu_rdata[31:0];

assign dahbif_stb_grant   = req_sel_final[2] & req_first & bmu_lsu_grant;
assign dahbif_stb_grant_2 = req_sel_final[2] & !req_first & bmu_lsu_grant;
assign dahbif_stb_cmplt   = req_sel[2] & bmu_lsu_trans_cmplt;
assign dahbif_stb_acc_ecc = req_sel[2] & bmu_lsu_acc_err;

assign dahbif_lfb_grant   = req_sel_final[1] & req_first & bmu_lsu_grant;
assign dahbif_lfb_cmplt   = req_sel[1] & bmu_lsu_trans_cmplt;
assign dahbif_lfb_acc_err = req_sel[1] & bmu_lsu_acc_err;
assign dahbif_lfb_data[31:0] = bmu_lsu_rdata[31:0];

assign dahbif_vb_grant    = req_sel_final[0] & req_first & bmu_lsu_grant;
assign dahbif_vb_cmplt    = req_sel[0] & bmu_lsu_trans_cmplt;
assign dahbif_vb_acc_ecc  = req_sel[0] & bmu_lsu_acc_err;

assign dahbif_clk_en = req_vld_dp | ~(dahbif_cur_state == REQ);
// &Instance("gated_clk_cell", "x_pa_lsu_dahbif_gated_clk"); @270
gated_clk_cell  x_pa_lsu_dahbif_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dahbif_fsm_clk      ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dahbif_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @271
//          .external_en (1'b0), @272
//          .global_en   (1'b1), @273
//          .module_en   (1'b0), @274
//          .local_en    (dahbif_clk_en), @275
//          .clk_out     (dahbif_fsm_clk)); @276


// &ModuleEnd; @282
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_dc(
  ag_dc_addr,
  ag_dc_buf,
  ag_dc_bytes_vld,
  ag_dc_ca,
  ag_dc_dcache_grant,
  ag_dc_dest_reg,
  ag_dc_fls,
  ag_dc_func,
  ag_dc_inst_vld,
  ag_dc_inst_vld_gate,
  ag_dc_lm_pass,
  ag_dc_ori_size,
  ag_dc_pmp_expt,
  ag_dc_sign_ext,
  ag_dc_size,
  ag_dc_split,
  ag_dc_split_first,
  ag_dc_split_last,
  ag_dc_src1_depd,
  ag_dc_src1_reg,
  ag_dc_st_data,
  ag_dc_warm_up,
  ag_dc_wdata_shift,
  cp0_lsu_dcache_en,
  cp0_lsu_dcache_wa,
  cpurst_b,
  dc_ag_async_expt_vld,
  dc_ag_async_ld_inst,
  dc_ag_async_mtval,
  dc_ag_cache_stall,
  dc_ag_dcache_addr,
  dc_ag_dcache_req,
  dc_ag_dcache_size,
  dc_ag_func,
  dc_ag_stall,
  dc_icc_way0_data,
  dc_icc_way0_dirty,
  dc_icc_way0_tag,
  dc_icc_way1_data,
  dc_icc_way1_dirty,
  dc_icc_way1_tag,
  dc_idle,
  dc_lfb_addr,
  dc_lfb_buf,
  dc_lfb_ca,
  dc_lfb_ca_raw,
  dc_lfb_create_en,
  dc_lfb_create_en_gate,
  dc_lfb_inst_ld,
  dc_lfb_lock_trans,
  dc_lfb_lr_inst,
  dc_lfb_size,
  dc_lfb_warm_up,
  dc_rdl_fifo,
  dc_rdl_way0_data,
  dc_rdl_way0_dirty,
  dc_rdl_way0_tag,
  dc_rdl_way0_vld,
  dc_rdl_way1_data,
  dc_rdl_way1_dirty,
  dc_rdl_way1_tag,
  dc_rdl_way1_vld,
  dc_stb_addr,
  dc_stb_attr,
  dc_stb_bytes_vld,
  dc_stb_cache_hit,
  dc_stb_create_en,
  dc_stb_create_en_gate,
  dc_stb_data,
  dc_stb_dcache_dirty,
  dc_stb_dcache_inst,
  dc_stb_dcache_type,
  dc_stb_dcache_way,
  dc_stb_fls,
  dc_stb_lock_trans,
  dc_stb_sc_inst,
  dc_stb_shift,
  dc_stb_size,
  dc_stb_split_first,
  dc_stb_src1_depd,
  dc_stb_src1_reg,
  dc_stb_wait_lfb,
  dc_stb_warm_up,
  dc_vb_st_amold,
  dc_xx_addr,
  dc_xx_bytes_vld,
  dcache_data_dout_way0,
  dcache_data_dout_way1,
  dcache_dirty_dout,
  dcache_tag_dout,
  forever_cpuclk,
  ifu_xx_warm_up_clk,
  lfb_dc_async_expt,
  lfb_dc_busy,
  lfb_dc_hit_idx,
  lfb_dc_ld_cmplt,
  lfb_dc_ld_data,
  lfb_dc_ld_data_vld,
  lfb_dc_pop_en,
  lsu_hpcp_cache_read_access,
  lsu_hpcp_cache_read_access_gate,
  lsu_hpcp_cache_read_miss,
  lsu_hpcp_cache_read_miss_gate,
  lsu_hpcp_cache_write_access,
  lsu_hpcp_cache_write_access_gate,
  lsu_hpcp_cache_write_miss,
  lsu_hpcp_cache_write_miss_gate,
  lsu_mb_ex2_ca_addr_2,
  lsu_mb_ex2_ca_bytes_vld,
  lsu_mb_ex2_ca_data,
  lsu_mb_ex2_ca_data_vld,
  lsu_mb_ex2_ca_data_vld_gate,
  lsu_mb_ex2_ca_dest_reg,
  lsu_mb_ex2_ca_fld,
  lsu_mb_ex2_ca_fls,
  lsu_mb_ex2_ca_lock,
  lsu_mb_ex2_ca_sign_ext,
  lsu_mb_ex2_ca_size,
  lsu_mb_ex2_ca_split,
  lsu_mb_ex2_ca_split_last,
  lsu_mb_ex2_ca_stall,
  lsu_mb_ex2_ca_vld,
  lsu_top_dc_vld,
  lsu_xx_ex2_ca_flush,
  pad_yy_gate_clk_en_b,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_yy_xx_async_flush,
  stb_dc_async_expt,
  stb_dc_busy,
  stb_dc_full,
  stb_dc_hit_addr,
  stb_dc_hit_dca,
  stb_dc_hit_idx,
  stb_dc_ld_data,
  stb_dc_ld_fwd_vld,
  stb_dc_mtval,
  stb_dc_multi_or_part_hit,
  stb_dc_pop_en,
  vb_dc_hit_dirty,
  vb_dc_ld_data,
  vb_dc_ld_fwd_vld,
  vb_dc_pop_en
);

// &Ports; @21
input   [31:0]  ag_dc_addr;
input           ag_dc_buf;
input   [3 :0]  ag_dc_bytes_vld;
input           ag_dc_ca;
input           ag_dc_dcache_grant;
input   [5 :0]  ag_dc_dest_reg;
input           ag_dc_fls;
input   [3 :0]  ag_dc_func;
input           ag_dc_inst_vld;
input           ag_dc_inst_vld_gate;
input           ag_dc_lm_pass;
input   [1 :0]  ag_dc_ori_size;
input           ag_dc_pmp_expt;
input           ag_dc_sign_ext;
input   [1 :0]  ag_dc_size;
input           ag_dc_split;
input           ag_dc_split_first;
input           ag_dc_split_last;
input           ag_dc_src1_depd;
input   [5 :0]  ag_dc_src1_reg;
input   [31:0]  ag_dc_st_data;
input           ag_dc_warm_up;
input   [2 :0]  ag_dc_wdata_shift;
input           cp0_lsu_dcache_en;
input           cp0_lsu_dcache_wa;
input           cpurst_b;
input   [63:0]  dcache_data_dout_way0;
input   [63:0]  dcache_data_dout_way1;
input   [2 :0]  dcache_dirty_dout;
input   [45:0]  dcache_tag_dout;
input           forever_cpuclk;
input           ifu_xx_warm_up_clk;
input           lfb_dc_async_expt;
input           lfb_dc_busy;
input           lfb_dc_hit_idx;
input           lfb_dc_ld_cmplt;
input   [31:0]  lfb_dc_ld_data;
input           lfb_dc_ld_data_vld;
input           lfb_dc_pop_en;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_lsu_wb_fwd_data;
input           rtu_lsu_wb_fwd_fls;
input   [5 :0]  rtu_lsu_wb_fwd_reg;
input           rtu_lsu_wb_fwd_vld;
input           rtu_yy_xx_async_flush;
input           stb_dc_async_expt;
input           stb_dc_busy;
input           stb_dc_full;
input           stb_dc_hit_addr;
input           stb_dc_hit_dca;
input           stb_dc_hit_idx;
input   [31:0]  stb_dc_ld_data;
input           stb_dc_ld_fwd_vld;
input   [31:0]  stb_dc_mtval;
input           stb_dc_multi_or_part_hit;
input           stb_dc_pop_en;
input           vb_dc_hit_dirty;
input   [31:0]  vb_dc_ld_data;
input           vb_dc_ld_fwd_vld;
input           vb_dc_pop_en;
output          dc_ag_async_expt_vld;
output          dc_ag_async_ld_inst;
output  [31:0]  dc_ag_async_mtval;
output          dc_ag_cache_stall;
output  [31:0]  dc_ag_dcache_addr;
output          dc_ag_dcache_req;
output  [1 :0]  dc_ag_dcache_size;
output  [3 :0]  dc_ag_func;
output          dc_ag_stall;
output  [63:0]  dc_icc_way0_data;
output          dc_icc_way0_dirty;
output  [21:0]  dc_icc_way0_tag;
output  [63:0]  dc_icc_way1_data;
output          dc_icc_way1_dirty;
output  [21:0]  dc_icc_way1_tag;
output          dc_idle;
output  [31:0]  dc_lfb_addr;
output          dc_lfb_buf;
output          dc_lfb_ca;
output          dc_lfb_ca_raw;
output          dc_lfb_create_en;
output          dc_lfb_create_en_gate;
output          dc_lfb_inst_ld;
output          dc_lfb_lock_trans;
output          dc_lfb_lr_inst;
output  [1 :0]  dc_lfb_size;
output          dc_lfb_warm_up;
output          dc_rdl_fifo;
output  [63:0]  dc_rdl_way0_data;
output          dc_rdl_way0_dirty;
output  [21:0]  dc_rdl_way0_tag;
output          dc_rdl_way0_vld;
output  [63:0]  dc_rdl_way1_data;
output          dc_rdl_way1_dirty;
output  [21:0]  dc_rdl_way1_tag;
output          dc_rdl_way1_vld;
output  [31:0]  dc_stb_addr;
output  [1 :0]  dc_stb_attr;
output  [3 :0]  dc_stb_bytes_vld;
output          dc_stb_cache_hit;
output          dc_stb_create_en;
output          dc_stb_create_en_gate;
output  [31:0]  dc_stb_data;
output          dc_stb_dcache_dirty;
output          dc_stb_dcache_inst;
output  [1 :0]  dc_stb_dcache_type;
output          dc_stb_dcache_way;
output          dc_stb_fls;
output          dc_stb_lock_trans;
output          dc_stb_sc_inst;
output  [2 :0]  dc_stb_shift;
output  [1 :0]  dc_stb_size;
output          dc_stb_split_first;
output          dc_stb_src1_depd;
output  [4 :0]  dc_stb_src1_reg;
output          dc_stb_wait_lfb;
output          dc_stb_warm_up;
output          dc_vb_st_amold;
output  [31:0]  dc_xx_addr;
output  [7 :0]  dc_xx_bytes_vld;
output          lsu_hpcp_cache_read_access;
output          lsu_hpcp_cache_read_access_gate;
output          lsu_hpcp_cache_read_miss;
output          lsu_hpcp_cache_read_miss_gate;
output          lsu_hpcp_cache_write_access;
output          lsu_hpcp_cache_write_access_gate;
output          lsu_hpcp_cache_write_miss;
output          lsu_hpcp_cache_write_miss_gate;
output          lsu_mb_ex2_ca_addr_2;
output  [3 :0]  lsu_mb_ex2_ca_bytes_vld;
output  [31:0]  lsu_mb_ex2_ca_data;
output          lsu_mb_ex2_ca_data_vld;
output          lsu_mb_ex2_ca_data_vld_gate;
output  [5 :0]  lsu_mb_ex2_ca_dest_reg;
output          lsu_mb_ex2_ca_fld;
output          lsu_mb_ex2_ca_fls;
output          lsu_mb_ex2_ca_lock;
output          lsu_mb_ex2_ca_sign_ext;
output  [1 :0]  lsu_mb_ex2_ca_size;
output          lsu_mb_ex2_ca_split;
output          lsu_mb_ex2_ca_split_last;
output          lsu_mb_ex2_ca_stall;
output          lsu_mb_ex2_ca_vld;
output          lsu_top_dc_vld;
output          lsu_xx_ex2_ca_flush;

// &Regs; @22
reg     [31:0]  dc_addr;
reg             dc_buf;
reg     [3 :0]  dc_bytes_vld;
reg             dc_ca;
reg     [2 :0]  dc_cur_state;
reg     [5 :0]  dc_dest_reg;
reg             dc_fls;
reg     [3 :0]  dc_func;
reg             dc_lm_pass;
reg     [2 :0]  dc_next_state;
reg     [1 :0]  dc_ori_size;
reg             dc_pmp_deny;
reg             dc_sign_ext;
reg     [1 :0]  dc_size;
reg             dc_split;
reg             dc_split_first;
reg             dc_split_last;
reg             dc_src1_depd;
reg     [5 :0]  dc_src1_reg;
reg     [31:0]  dc_st_data_pre;
reg             dc_warm_up;
reg     [2 :0]  dc_wdata_shift;

// &Wires; @23
wire    [31:0]  ag_dc_addr;
wire            ag_dc_buf;
wire    [3 :0]  ag_dc_bytes_vld;
wire            ag_dc_ca;
wire            ag_dc_create_vld;
wire            ag_dc_dcache_grant;
wire    [5 :0]  ag_dc_dest_reg;
wire            ag_dc_fls;
wire    [3 :0]  ag_dc_func;
wire            ag_dc_inst_vld;
wire            ag_dc_inst_vld_gate;
wire            ag_dc_lm_pass;
wire    [1 :0]  ag_dc_ori_size;
wire            ag_dc_pmp_expt;
wire            ag_dc_sign_ext;
wire    [1 :0]  ag_dc_size;
wire            ag_dc_split;
wire            ag_dc_split_first;
wire            ag_dc_split_last;
wire            ag_dc_src1_depd;
wire    [5 :0]  ag_dc_src1_reg;
wire            ag_dc_st_create_vld;
wire    [31:0]  ag_dc_st_data;
wire            ag_dc_warm_up;
wire    [2 :0]  ag_dc_wdata_shift;
wire            ag_st_inst;
wire            async_expt_vld;
wire            async_ld_inst;
wire    [31:0]  async_mtval;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cpurst_b;
wire            dc_ag_async_expt_vld;
wire            dc_ag_async_ld_inst;
wire    [31:0]  dc_ag_async_mtval;
wire            dc_ag_cache_stall;
wire    [31:0]  dc_ag_dcache_addr;
wire            dc_ag_dcache_req;
wire    [1 :0]  dc_ag_dcache_size;
wire    [3 :0]  dc_ag_func;
wire            dc_ag_stall;
wire    [1 :0]  dc_attr;
wire            dc_ca_after;
wire            dc_cache_hit;
wire            dc_clk;
wire            dc_clk_en;
wire            dc_cmplt;
wire            dc_data_sel;
wire            dc_dca_inst;
wire            dc_dcache_reply;
wire            dc_dp_clk;
wire            dc_dp_clk_en;
wire            dc_expt_vld;
wire            dc_fld_inst;
wire            dc_fwd_lsu;
wire    [63:0]  dc_icc_way0_data;
wire            dc_icc_way0_dirty;
wire    [21:0]  dc_icc_way0_tag;
wire    [63:0]  dc_icc_way1_data;
wire            dc_icc_way1_dirty;
wire    [21:0]  dc_icc_way1_tag;
wire            dc_idle;
wire            dc_inst_vld;
wire            dc_ld_cmplt;
wire    [31:0]  dc_ld_data_from_dcache;
wire    [31:0]  dc_ld_data_fwd;
wire            dc_ld_data_vld;
wire            dc_ld_fwd_sel;
wire            dc_ld_inst;
wire            dc_ld_reply;
wire    [31:0]  dc_lfb_addr;
wire            dc_lfb_buf;
wire            dc_lfb_ca;
wire            dc_lfb_ca_raw;
wire            dc_lfb_create_en;
wire            dc_lfb_create_en_gate;
wire            dc_lfb_inst_ld;
wire            dc_lfb_lock_trans;
wire            dc_lfb_lr_inst;
wire    [1 :0]  dc_lfb_size;
wire            dc_lfb_warm_up;
wire            dc_lock_trans;
wire            dc_lr_inst;
wire            dc_rdl_fifo;
wire    [63:0]  dc_rdl_way0_data;
wire            dc_rdl_way0_dirty;
wire    [21:0]  dc_rdl_way0_tag;
wire            dc_rdl_way0_vld;
wire    [63:0]  dc_rdl_way1_data;
wire            dc_rdl_way1_dirty;
wire    [21:0]  dc_rdl_way1_tag;
wire            dc_rdl_way1_vld;
wire            dc_reply;
wire            dc_sc_data_sel;
wire            dc_sc_data_vld;
wire            dc_sc_inst;
wire            dc_st_alct;
wire            dc_st_cmplt;
wire            dc_st_dp_clk;
wire            dc_st_dp_clk_en;
wire    [31:0]  dc_st_fwd_data;
wire            dc_st_fwd_vld;
wire            dc_st_inst;
wire    [31:0]  dc_st_rdata;
wire            dc_st_reply;
wire    [31:0]  dc_st_wdata;
wire            dc_stage_pipedown;
wire            dc_stage_vld;
wire    [31:0]  dc_stb_addr;
wire    [1 :0]  dc_stb_attr;
wire    [3 :0]  dc_stb_bytes_vld;
wire            dc_stb_cache_hit;
wire            dc_stb_create_en;
wire            dc_stb_create_en_gate;
wire    [31:0]  dc_stb_data;
wire            dc_stb_dcache_dirty;
wire            dc_stb_dcache_inst;
wire    [1 :0]  dc_stb_dcache_type;
wire            dc_stb_dcache_way;
wire            dc_stb_fls;
wire            dc_stb_lock_trans;
wire            dc_stb_sc_inst;
wire    [2 :0]  dc_stb_shift;
wire    [1 :0]  dc_stb_size;
wire            dc_stb_split_first;
wire            dc_stb_src1_depd;
wire    [4 :0]  dc_stb_src1_reg;
wire            dc_stb_wait_lfb;
wire            dc_stb_warm_up;
wire            dc_vb_st_amold;
wire            dc_wakeup;
wire    [31:0]  dc_way0_data_dout;
wire    [31:0]  dc_way1_data_dout;
wire    [31:0]  dc_xx_addr;
wire    [7 :0]  dc_xx_bytes_vld;
wire    [63:0]  dcache_data_dout_way0;
wire    [63:0]  dcache_data_dout_way1;
wire    [2 :0]  dcache_dirty_dout;
wire            dcache_hit_way;
wire            dcache_hit_way_dirty;
wire    [45:0]  dcache_tag_dout;
wire            fifo;
wire            forever_cpuclk;
wire            ifu_xx_warm_up_clk;
wire            ld_fwd_vld;
wire            lfb_data_sel;
wire            lfb_dc_async_expt;
wire            lfb_dc_busy;
wire    [31:0]  lfb_dc_data;
wire            lfb_dc_hit_idx;
wire            lfb_dc_ld_cmplt;
wire    [31:0]  lfb_dc_ld_data;
wire            lfb_dc_ld_data_vld;
wire            lfb_dc_pop_en;
wire            lfb_dc_sc_ldfwd_sel;
wire    [31:0]  lsu_ex2_data;
wire            lsu_ex2_data_vld;
wire            lsu_hpcp_cache_read_access;
wire            lsu_hpcp_cache_read_access_gate;
wire            lsu_hpcp_cache_read_miss;
wire            lsu_hpcp_cache_read_miss_gate;
wire            lsu_hpcp_cache_write_access;
wire            lsu_hpcp_cache_write_access_gate;
wire            lsu_hpcp_cache_write_miss;
wire            lsu_hpcp_cache_write_miss_gate;
wire            lsu_mb_ex2_ca_addr_2;
wire    [3 :0]  lsu_mb_ex2_ca_bytes_vld;
wire    [31:0]  lsu_mb_ex2_ca_data;
wire            lsu_mb_ex2_ca_data_vld;
wire            lsu_mb_ex2_ca_data_vld_gate;
wire    [5 :0]  lsu_mb_ex2_ca_dest_reg;
wire            lsu_mb_ex2_ca_fld;
wire            lsu_mb_ex2_ca_fls;
wire            lsu_mb_ex2_ca_lock;
wire            lsu_mb_ex2_ca_sign_ext;
wire    [1 :0]  lsu_mb_ex2_ca_size;
wire            lsu_mb_ex2_ca_split;
wire            lsu_mb_ex2_ca_split_last;
wire            lsu_mb_ex2_ca_stall;
wire            lsu_mb_ex2_ca_vld;
wire            lsu_top_dc_vld;
wire            lsu_xx_ex2_ca_flush;
wire            pad_yy_gate_clk_en_b;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_yy_xx_async_flush;
wire            stb_dc_async_expt;
wire            stb_dc_busy;
wire            stb_dc_full;
wire            stb_dc_hit_addr;
wire            stb_dc_hit_dca;
wire            stb_dc_hit_idx;
wire    [31:0]  stb_dc_ld_data;
wire            stb_dc_ld_fwd_vld;
wire    [31:0]  stb_dc_mtval;
wire            stb_dc_multi_or_part_hit;
wire            stb_dc_pop_en;
wire            vb_dc_hit_dirty;
wire    [31:0]  vb_dc_ld_data;
wire            vb_dc_ld_fwd_vld;
wire            vb_dc_pop_en;
wire    [63:0]  way0_data_dout;
wire            way0_dirty;
wire            way0_tag_hit;
wire            way0_tag_vld;
wire    [63:0]  way1_data_dout;
wire            way1_dirty;
wire            way1_tag_hit;
wire            way1_tag_vld;


parameter D_TAG_TAG_LEN = `D_TAG_TAG_WIDTH;
parameter DATAW         = `FLEN;




assign way0_dirty = dcache_dirty_dout[0];
assign way1_dirty = dcache_dirty_dout[1];
assign fifo       = dcache_dirty_dout[2];

assign way0_tag_vld = dcache_tag_dout[22];
assign way1_tag_vld = dcache_tag_dout[45];

assign way0_data_dout[63:0] = dcache_data_dout_way0[63:0];
assign way1_data_dout[63:0] = dcache_data_dout_way1[63:0];




assign dc_way0_data_dout[31:0] = dc_addr[2] ? way0_data_dout[63:32] : way0_data_dout[31:0];
assign dc_way1_data_dout[31:0] = dc_addr[2] ? way1_data_dout[63:32] : way1_data_dout[31:0];



assign dc_icc_way0_dirty      = way0_tag_vld & way0_dirty;
assign dc_icc_way1_dirty      = way1_tag_vld & way1_dirty;
assign dc_icc_way0_data[63:0] = way0_data_dout[63:0];
assign dc_icc_way1_data[63:0] = way1_data_dout[63:0];
assign dc_icc_way0_tag[21:0]  = dcache_tag_dout[21:0];
assign dc_icc_way1_tag[21:0]  = dcache_tag_dout[44:23];




assign dc_rdl_way0_vld   = way0_tag_vld;
assign dc_rdl_way1_vld   = way1_tag_vld;
assign dc_rdl_way0_dirty = way0_dirty;
assign dc_rdl_way1_dirty = way1_dirty;
assign dc_rdl_fifo       = fifo;
assign dc_rdl_way0_data[63:0] = way0_data_dout[63:0];
assign dc_rdl_way1_data[63:0] = way1_data_dout[63:0];
assign dc_rdl_way0_tag[21:0]  = dcache_tag_dout[21:0];
assign dc_rdl_way1_tag[21:0]  = dcache_tag_dout[44:23];




parameter IDLE  = 3'b000;
parameter DCS   = 3'b001;
parameter FRZ   = 3'b010;
parameter REPLY = 3'b011;
parameter WFC   = 3'b100;

always@(posedge dc_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dc_cur_state[2:0] <= IDLE;
  else if (rtu_yy_xx_async_flush)
    dc_cur_state[2:0] <= IDLE;
  else
    dc_cur_state[2:0] <= dc_next_state[2:0];
end

// &CombBeg; @93
always @( ag_dc_dcache_grant
       or dc_cur_state
       or dc_wakeup
       or dc_reply
       or lfb_dc_ld_cmplt
       or ag_dc_inst_vld
       or dc_cmplt)
begin
  case(dc_cur_state)
  IDLE: begin
    if (ag_dc_inst_vld)
      dc_next_state = DCS;
    else
      dc_next_state = IDLE;
  end
  DCS: begin
    if (dc_cmplt)
      dc_next_state = ag_dc_inst_vld ? DCS : IDLE;
    else if (dc_reply & !dc_wakeup)
      dc_next_state = FRZ;
    else if (dc_reply)
      dc_next_state = REPLY;
    else
      dc_next_state = WFC;
  end
  WFC: begin
    if (lfb_dc_ld_cmplt)
      dc_next_state = ag_dc_inst_vld ? DCS : IDLE;
    else
      dc_next_state = WFC;
  end
  FRZ: begin
    if (dc_wakeup)
      dc_next_state = REPLY;
    else
      dc_next_state = FRZ;
  end
  REPLY: begin
    if(ag_dc_dcache_grant)
      dc_next_state = DCS;
    else
      dc_next_state = REPLY;
  end
  default: dc_next_state = IDLE;
  endcase
// &CombEnd; @131
end


assign dc_stage_vld      =!(dc_cur_state == IDLE);
assign dc_inst_vld       = (dc_cur_state == DCS) & !dc_pmp_deny;
assign dc_expt_vld       = (dc_cur_state == DCS) & dc_pmp_deny;

assign dc_stage_pipedown = (dc_cur_state == IDLE) |
                           (dc_cur_state == DCS) & dc_cmplt |
                           (dc_cur_state == WFC) & lfb_dc_ld_cmplt;
assign dc_idle = !dc_stage_vld;

assign lsu_xx_ex2_ca_flush = dc_expt_vld & dc_func[3:0] == 4'b0101;




assign dc_ag_stall       = !dc_stage_pipedown;
assign dc_ag_cache_stall = dc_cur_state == FRZ |
                           dc_cur_state == REPLY |
                           dc_cur_state == WFC & !lfb_dc_ld_cmplt;
assign lsu_mb_ex2_ca_stall = !dc_stage_pipedown;// & (!cp0_xx_async_expt_en | dc_lock_trans);
assign lsu_mb_ex2_ca_lock  = dc_lock_trans;
assign lsu_mb_ex2_ca_vld   = dc_stage_vld;




assign dc_ag_dcache_req        = dc_cur_state == REPLY;
assign dc_ag_dcache_addr[31:0] = dc_addr[31:0];
assign dc_ag_dcache_size[1:0]  = dc_size[1:0];
assign dc_ag_func[3:0]         = dc_func[3:0];





assign ag_dc_create_vld = dc_stage_pipedown & ag_dc_inst_vld;

always@(posedge dc_dp_clk)
begin
  if (ag_dc_create_vld | ag_dc_warm_up) begin
    dc_addr[31:0]    <= ag_dc_addr[31:0];
    dc_func[3:0]     <= ag_dc_func[3:0];
    dc_fls           <= ag_dc_fls;
    dc_size[1:0]     <= ag_dc_size[1:0];
    dc_ori_size[1:0] <= ag_dc_ori_size[1:0];
    dc_sign_ext      <= ag_dc_sign_ext;
    dc_dest_reg[5:0] <= ag_dc_dest_reg[5:0];
    dc_ca            <= ag_dc_ca;
    dc_buf           <= ag_dc_buf;
    dc_bytes_vld[3:0]<= ag_dc_bytes_vld[3:0];
    dc_pmp_deny      <= ag_dc_pmp_expt;
    dc_split         <= ag_dc_split;
    dc_split_last    <= ag_dc_split_last;
    dc_split_first   <= ag_dc_split_first;
  end
end

always@(posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dc_warm_up <= 1'b0;
  else
    dc_warm_up <= ag_dc_warm_up;
end

assign ag_st_inst = !ag_dc_func[3] & ag_dc_func[0];
assign ag_dc_st_create_vld = ag_dc_create_vld & ag_st_inst;

always@(posedge dc_st_dp_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dc_lm_pass <= 1'b0;
  else if (ag_dc_st_create_vld & ag_dc_func[1])
    dc_lm_pass <= ag_dc_lm_pass;
end

assign dc_fwd_lsu   = rtu_lsu_wb_fwd_vld &
                      (dc_fls == rtu_lsu_wb_fwd_fls) &
                      (dc_src1_reg[5:0] == rtu_lsu_wb_fwd_reg[5:0]);
assign dc_st_fwd_vld = dc_src1_depd & dc_fwd_lsu;
assign dc_st_fwd_data[DATAW-1:0] = rtu_lsu_wb_fwd_data[DATAW-1:0];

always@(posedge dc_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dc_src1_depd <= 1'b0;
  else if (ag_dc_st_create_vld)
    dc_src1_depd <= ag_dc_src1_depd;
  else if (dc_st_fwd_vld)
    dc_src1_depd <= 1'b0;
end

always@(posedge dc_st_dp_clk)
begin
  if (ag_dc_st_create_vld | ag_dc_warm_up)begin
    dc_src1_reg[5:0]    <= ag_dc_src1_reg[5:0];
    dc_wdata_shift[2:0] <= ag_dc_wdata_shift[2:0];
  end
end

always@(posedge dc_st_dp_clk)
begin
  if (ag_dc_st_create_vld | ag_dc_warm_up)
    dc_st_data_pre[DATAW-1:0] <= ag_dc_st_data[DATAW-1:0];
  else if (dc_st_fwd_vld)
    dc_st_data_pre[DATAW-1:0] <= dc_st_fwd_data[DATAW-1:0];
end

assign dc_st_wdata[DATAW-1:0] = dc_st_fwd_vld ? dc_st_fwd_data[DATAW-1:0] : dc_st_data_pre[DATAW-1:0];




assign way0_tag_hit = (dcache_tag_dout[D_TAG_TAG_LEN-1:0]     == dc_addr[31:31-D_TAG_TAG_LEN+1]) & way0_tag_vld & dc_ca_after;
assign way1_tag_hit = (dcache_tag_dout[23+D_TAG_TAG_LEN-1:23] == dc_addr[31:31-D_TAG_TAG_LEN+1]) & way1_tag_vld & dc_ca_after;



assign dcache_hit_way_dirty = way0_tag_hit & way0_dirty | way1_tag_hit & way1_dirty;
assign dcache_hit_way       = way1_tag_hit;

assign dc_cache_hit         = way0_tag_hit | way1_tag_hit;





assign dc_ld_data_from_dcache[DATAW-1:0] = {DATAW{way0_tag_hit & dc_ld_inst}} & dc_way0_data_dout[DATAW-1:0] |
                                           {DATAW{way1_tag_hit & dc_ld_inst}} & dc_way1_data_dout[DATAW-1:0];


assign dc_ld_data_fwd[DATAW-1:0] = vb_dc_ld_fwd_vld ? vb_dc_ld_data[DATAW-1:0] : stb_dc_ld_data[DATAW-1:0];
assign ld_fwd_vld                = vb_dc_ld_fwd_vld | stb_dc_ld_fwd_vld;




assign dc_st_rdata[DATAW-1:0] = dc_lm_pass ? {DATAW{1'b0}} : {{(DATAW-1){1'b0}}, 1'b1};





assign dc_ld_inst  = !dc_func[0] & !dc_func[3];
assign dc_st_inst  = dc_func[0]  & !dc_func[3];
assign dc_dca_inst = dc_func[3];
assign dc_lr_inst  = dc_ld_inst & dc_func[1];
assign dc_sc_inst  = dc_st_inst & dc_func[1];
assign dc_fld_inst = dc_ld_inst & dc_fls & (dc_size[1:0] == 2'b11);
assign dc_lock_trans = !dc_func[3] & (|dc_func[2:1]);

assign dc_ld_data_vld = dc_ld_cmplt;
assign dc_sc_data_vld = dc_inst_vld & !dc_st_reply & dc_sc_inst;

assign lfb_data_sel           = dc_cur_state == WFC;
assign dc_data_sel            = dc_cur_state == DCS;
assign dc_sc_data_sel         = dc_data_sel & dc_sc_inst;
assign dc_ld_fwd_sel          = dc_data_sel & dc_ld_inst & ld_fwd_vld;

assign lfb_dc_sc_ldfwd_sel    = lfb_data_sel | dc_sc_data_sel | dc_ld_fwd_sel;
assign lfb_dc_data[DATAW-1:0] = {DATAW{lfb_data_sel}}   & lfb_dc_ld_data[DATAW-1:0] |
                                {DATAW{dc_sc_data_sel}} & dc_st_rdata[DATAW-1:0] |
                                {DATAW{dc_ld_fwd_sel}}  & dc_ld_data_fwd[DATAW-1:0];

assign lsu_ex2_data_vld        = dc_ld_data_vld | lfb_dc_ld_data_vld | dc_sc_data_vld ;
assign lsu_ex2_data[DATAW-1:0] = lfb_dc_sc_ldfwd_sel ? lfb_dc_data[DATAW-1:0] : dc_ld_data_from_dcache[DATAW-1:0];

assign lsu_mb_ex2_ca_data_vld        = lsu_ex2_data_vld;
assign lsu_mb_ex2_ca_data_vld_gate   = dc_inst_vld & (dc_ld_inst | dc_sc_inst) | lfb_dc_ld_data_vld;
assign lsu_mb_ex2_ca_data[DATAW-1:0] = lsu_ex2_data[DATAW-1:0];
assign lsu_mb_ex2_ca_dest_reg[5:0]   = dc_dest_reg[5:0];
assign lsu_mb_ex2_ca_fls             = dc_fls;
assign lsu_mb_ex2_ca_fld             = dc_fld_inst;
assign lsu_mb_ex2_ca_split           = dc_split;
assign lsu_mb_ex2_ca_split_last      = dc_split_last;
assign lsu_mb_ex2_ca_bytes_vld[3:0]  = dc_bytes_vld[3:0];
assign lsu_mb_ex2_ca_sign_ext        = dc_sign_ext;
assign lsu_mb_ex2_ca_addr_2          = dc_addr[2];
assign lsu_mb_ex2_ca_size[1:0]       = dc_ori_size[1:0];
// &Force("nonport","dc_ori_size"); @330



assign lsu_top_dc_vld = dc_stage_vld;

assign dc_ld_cmplt = dc_inst_vld & !dc_ld_reply &
                     dc_ld_inst & (dc_cache_hit | vb_dc_ld_fwd_vld);
assign dc_st_cmplt = dc_inst_vld &
                    (dc_st_inst & !dc_st_reply |
                     dc_dca_inst & !dc_dcache_reply);

assign dc_cmplt    = dc_ld_cmplt |
                     dc_st_cmplt |
                     dc_expt_vld;


assign async_expt_vld    = stb_dc_async_expt |
                           lfb_dc_async_expt & dc_split_first;

assign async_mtval[31:0] = {32{stb_dc_async_expt}} & stb_dc_mtval[31:0] |
                           {32{lfb_dc_async_expt}} & dc_addr[31:0];

assign async_ld_inst     = lfb_dc_async_expt & dc_ld_inst & !dc_lock_trans;

assign dc_ag_async_expt_vld    = async_expt_vld;
assign dc_ag_async_mtval[31:0] = async_mtval[31:0];
assign dc_ag_async_ld_inst     = async_ld_inst;




assign dc_lfb_create_en = dc_inst_vld &
                         !dc_reply &
                         !dc_cache_hit &
                             (dc_ld_inst & ~vb_dc_ld_fwd_vld |
                              dc_st_inst & dc_st_alct);  // | dc_amo_ld

assign dc_lfb_create_en_gate
                        = dc_inst_vld &
                         !dc_cache_hit &
                             (dc_ld_inst |
                              dc_st_inst & dc_st_alct);  // | dc_amo_ld

assign dc_lfb_addr[31:0]    = dc_addr[31:0];
assign dc_lfb_size[1:0]     = dc_size[1:0];
assign dc_lfb_ca            = dc_ca_after & !dc_lock_trans;
assign dc_lfb_ca_raw        = dc_ca;
assign dc_lfb_buf           = dc_buf;
assign dc_lfb_lock_trans    = dc_lock_trans;
assign dc_lfb_inst_ld       = dc_ld_inst;
assign dc_lfb_lr_inst       = dc_lr_inst;
assign dc_lfb_warm_up       = dc_warm_up;




assign dc_stb_create_en      = dc_inst_vld & !dc_reply &
                              (dc_st_inst & !dc_sc_inst |
                               dc_dca_inst & dc_cache_hit |
                               dc_sc_inst & dc_lm_pass);
assign dc_stb_create_en_gate = dc_inst_vld &
                              (dc_st_inst & !dc_sc_inst |
                               dc_dca_inst |
                               dc_sc_inst & dc_lm_pass);

assign dc_ca_after           = dc_ca & cp0_lsu_dcache_en;
assign dc_st_alct            = dc_ca_after & cp0_lsu_dcache_wa & !dc_lock_trans;
assign dc_attr[1:0]          = {dc_ca, dc_buf};

assign dc_stb_addr[31:0]     = dc_addr[31:0];
assign dc_stb_size[1:0]      = dc_size[1:0];
assign dc_stb_dcache_inst    = dc_dca_inst;
assign dc_stb_dcache_type[1:0]= dc_func[1:0];
assign dc_stb_bytes_vld[3:0] = dc_bytes_vld[3:0];
assign dc_stb_attr[1:0]      = dc_attr[1:0];
assign dc_stb_wait_lfb       = dc_st_alct & !dc_cache_hit;
assign dc_stb_cache_hit      = dc_cache_hit;
assign dc_stb_dcache_way     = dcache_hit_way;
assign dc_stb_dcache_dirty   = dcache_hit_way_dirty;
assign dc_stb_lock_trans     = dc_lock_trans;
assign dc_stb_sc_inst        = dc_sc_inst;
assign dc_stb_warm_up        = dc_warm_up;
assign dc_stb_src1_depd      = dc_src1_depd & !dc_st_fwd_vld;
assign dc_stb_data[DATAW-1:0]= dc_st_wdata[DATAW-1:0];
assign dc_stb_shift[2:0]     = dc_wdata_shift[2:0];
assign dc_stb_src1_reg[4:0]  = dc_src1_reg[4:0];
assign dc_stb_fls            = dc_fls;
assign dc_stb_split_first    = dc_split_first;




assign dc_ld_reply = lfb_dc_busy & !dc_cache_hit |
                     lfb_dc_hit_idx |
                     stb_dc_multi_or_part_hit |
                     stb_dc_hit_dca |
                     stb_dc_hit_idx & !dc_cache_hit |

                     dc_lock_trans & (lfb_dc_busy | stb_dc_busy);

assign dc_st_reply = lfb_dc_busy & !dc_cache_hit |
                     lfb_dc_hit_idx |
                     vb_dc_hit_dirty |
                     stb_dc_full |
                     stb_dc_hit_dca |
                     stb_dc_hit_addr |
                     dc_st_alct & !dc_cache_hit & stb_dc_hit_idx;

assign dc_dcache_reply = lfb_dc_busy & !dc_cache_hit |
                         (stb_dc_full | stb_dc_hit_idx) & dc_cache_hit;

assign dc_reply = dc_ld_inst  & dc_ld_reply |
                  dc_st_inst  & dc_st_reply |
                  dc_dca_inst & dc_dcache_reply;

assign dc_wakeup = vb_dc_pop_en  |
                   stb_dc_pop_en |
                   lfb_dc_pop_en | lfb_dc_ld_cmplt;





assign dc_xx_addr[31:0]     = dc_addr[31:0];
assign dc_xx_bytes_vld[7:0] = (dc_size[1:0] == 2'b11)
                            ? {dc_bytes_vld[3:0],dc_bytes_vld[3:0]}
                            : (dc_addr[2] ? {dc_bytes_vld[3:0], 4'b0000}
                                          : {4'b0000, dc_bytes_vld[3:0]});
assign dc_vb_st_amold       = dc_st_inst;// | dc_amo_ld;

assign dc_clk_en = ag_dc_inst_vld_gate | dc_stage_vld;
// &Instance("gated_clk_cell", "x_pa_lsu_dc_gated_clk"); @464
gated_clk_cell  x_pa_lsu_dc_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dc_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dc_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @465
//          .external_en (1'b0), @466
//          .global_en   (1'b1), @467
//          .module_en   (1'b0), @468
//          .local_en    (dc_clk_en), @469
//          .clk_out     (dc_clk)); @470

assign dc_dp_clk_en = ag_dc_inst_vld_gate | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_dc_dp_gated_clk"); @473
gated_clk_cell  x_pa_lsu_dc_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dc_dp_clk           ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dc_dp_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @474
//          .external_en (1'b0), @475
//          .global_en   (1'b1), @476
//          .module_en   (1'b0), @477
//          .local_en    (dc_dp_clk_en), @478
//          .clk_out     (dc_dp_clk)); @479

assign dc_st_dp_clk_en = ag_dc_inst_vld_gate & ag_st_inst | dc_st_fwd_vld | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_dc_st_dp_gated_clk"); @482
gated_clk_cell  x_pa_lsu_dc_st_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (dc_st_dp_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dc_st_dp_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @483
//          .external_en (1'b0), @484
//          .global_en   (1'b1), @485
//          .module_en   (1'b0), @486
//          .local_en    (dc_st_dp_clk_en), @487
//          .clk_out     (dc_st_dp_clk)); @488


// &Force("output","dc_lfb_create_en"); @498
// &Force("output","dc_stb_create_en"); @499
assign lsu_hpcp_cache_read_access  = 1'b0;
assign lsu_hpcp_cache_read_miss    = 1'b0;
assign lsu_hpcp_cache_write_access = 1'b0;
assign lsu_hpcp_cache_write_miss   = 1'b0;
assign lsu_hpcp_cache_read_access_gate  = 1'b0;
assign lsu_hpcp_cache_read_miss_gate    = 1'b0;
assign lsu_hpcp_cache_write_access_gate = 1'b0;
assign lsu_hpcp_cache_write_miss_gate   = 1'b0;
// &ModuleEnd; @519
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_icc(
  arb_icc_data_grant,
  cp0_lsu_icc_addr,
  cp0_lsu_icc_op,
  cp0_lsu_icc_req,
  cp0_lsu_icc_type,
  cpurst_b,
  dc_icc_way0_data,
  dc_icc_way0_dirty,
  dc_icc_way0_tag,
  dc_icc_way1_data,
  dc_icc_way1_dirty,
  dc_icc_way1_tag,
  forever_cpuclk,
  icc_arb_data_bank,
  icc_arb_data_din,
  icc_arb_data_idx,
  icc_arb_data_req,
  icc_arb_data_way,
  icc_arb_data_wen,
  icc_arb_dirty_din,
  icc_arb_dirty_idx,
  icc_arb_dirty_req,
  icc_arb_dirty_wen,
  icc_arb_tag_din,
  icc_arb_tag_idx,
  icc_arb_tag_req,
  icc_arb_tag_wen,
  icc_vb_addr,
  icc_vb_clr_vld,
  icc_vb_create_en,
  icc_vb_data,
  icc_vb_data_cnt,
  icc_vb_data_create,
  icc_vb_line_dirty,
  icc_xx_idle,
  lfb_icc_warm_up,
  lsu_cp0_icc_done,
  pad_yy_gate_clk_en_b,
  vb_icc_empty,
  vb_icc_grant
);

// &Ports; @21
input           arb_icc_data_grant;
input   [31:0]  cp0_lsu_icc_addr;
input   [1 :0]  cp0_lsu_icc_op;
input           cp0_lsu_icc_req;
input   [1 :0]  cp0_lsu_icc_type;
input           cpurst_b;
input   [63:0]  dc_icc_way0_data;
input           dc_icc_way0_dirty;
input   [21:0]  dc_icc_way0_tag;
input   [63:0]  dc_icc_way1_data;
input           dc_icc_way1_dirty;
input   [21:0]  dc_icc_way1_tag;
input           forever_cpuclk;
input           lfb_icc_warm_up;
input           pad_yy_gate_clk_en_b;
input           vb_icc_empty;
input           vb_icc_grant;
output  [1 :0]  icc_arb_data_bank;
output  [63:0]  icc_arb_data_din;
output  [11:0]  icc_arb_data_idx;
output          icc_arb_data_req;
output  [1 :0]  icc_arb_data_way;
output  [3 :0]  icc_arb_data_wen;
output  [2 :0]  icc_arb_dirty_din;
output  [9 :0]  icc_arb_dirty_idx;
output          icc_arb_dirty_req;
output  [2 :0]  icc_arb_dirty_wen;
output  [22:0]  icc_arb_tag_din;
output  [9 :0]  icc_arb_tag_idx;
output          icc_arb_tag_req;
output  [1 :0]  icc_arb_tag_wen;
output  [26:0]  icc_vb_addr;
output          icc_vb_clr_vld;
output          icc_vb_create_en;
output  [63:0]  icc_vb_data;
output  [1 :0]  icc_vb_data_cnt;
output          icc_vb_data_create;
output          icc_vb_line_dirty;
output          icc_xx_idle;
output          lsu_cp0_icc_done;

// &Regs; @22
reg     [1 :0]  data_offset;
reg     [1 :0]  data_offset_f;
reg     [9 :0]  icc_cnt;
reg     [3 :0]  icc_cur_state;
reg             icc_data_vld;
reg             icc_data_way0;
reg     [3 :0]  icc_next_state;
reg     [21:0]  way1_tag;

// &Wires; @23
wire            all_dirty;
wire            arb_icc_data_grant;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire    [9 :0]  cp0_set;
wire    [1 :0]  cp0_way;
wire            cpurst_b;
wire            data_rd_last;
wire    [63:0]  dc_icc_way0_data;
wire            dc_icc_way0_dirty;
wire    [21:0]  dc_icc_way0_tag;
wire    [63:0]  dc_icc_way1_data;
wire            dc_icc_way1_dirty;
wire    [21:0]  dc_icc_way1_tag;
wire            dirty_wen;
wire            fifo_wen;
wire            forever_cpuclk;
wire    [1 :0]  icc_arb_data_bank;
wire    [63:0]  icc_arb_data_din;
wire    [11:0]  icc_arb_data_idx;
wire            icc_arb_data_req;
wire    [1 :0]  icc_arb_data_way;
wire    [3 :0]  icc_arb_data_wen;
wire    [2 :0]  icc_arb_dirty_din;
wire    [9 :0]  icc_arb_dirty_idx;
wire            icc_arb_dirty_req;
wire    [2 :0]  icc_arb_dirty_wen;
wire    [22:0]  icc_arb_tag_din;
wire    [9 :0]  icc_arb_tag_idx;
wire            icc_arb_tag_req;
wire    [1 :0]  icc_arb_tag_wen;
wire            icc_clk;
wire            icc_clk_en;
wire            icc_cnt_done;
wire            icc_cnt_en;
wire            icc_cnt_start;
wire            icc_cur_clr_vb;
wire            icc_cur_data;
wire            icc_cur_data0;
wire            icc_cur_data1;
wire            icc_cur_inv_all;
wire            icc_cur_tag_rd;
wire            icc_cur_tag_wt;
wire            icc_cur_wfvb;
wire            icc_cur_wfvb0;
wire            icc_cur_wfvb1;
wire            icc_fsm_clk;
wire            icc_fsm_clk_en;
wire            icc_req_cln;
wire            icc_req_inv;
wire            icc_req_vld;
wire    [26:0]  icc_vb_addr;
wire            icc_vb_clr_vld;
wire            icc_vb_create_en;
wire    [63:0]  icc_vb_data;
wire    [1 :0]  icc_vb_data_cnt;
wire            icc_vb_data_create;
wire            icc_vb_line_dirty;
wire            icc_xx_idle;
wire            inv_all_setway;
wire            lfb_icc_warm_up;
wire            line_dirty;
wire            lsu_cp0_icc_done;
wire            pad_yy_gate_clk_en_b;
wire            setway_dirty;
wire    [9 :0]  tag_idx;
wire            tag_wen;
wire            type_all;
wire            type_setway;
wire            vb_icc_empty;
wire            vb_icc_grant;
wire            way0_dirty;
wire            way1_dirty;
wire    [1 :0]  way_sel;


parameter D_TAG_TAG_LEN    = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;

parameter ICC_IDLE    = 4'b0000;
parameter ICC_TAG_RD  = 4'b0001;
parameter ICC_TAG_WEN = 4'b0010;
parameter ICC_TAG_WT  = 4'b0011;
parameter ICC_CHECK   = 4'b0100;
parameter ICC_WFVB_W0 = 4'b0101;
parameter ICC_DATA_W0 = 4'b0110;
parameter ICC_WFVB_W1 = 4'b0111;
parameter ICC_DATA_W1 = 4'b1000;
parameter ICC_INV_ALL = 4'b1001;
parameter ICC_CLR_VB  = 4'b1010;

parameter ALL    = 2'b00;
parameter SETWAY = 2'b01;
parameter VA     = 2'b10;

always@(posedge icc_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    icc_cur_state[3:0] <= ICC_IDLE;
  else
    icc_cur_state[3:0] <= icc_next_state[3:0];
end

assign icc_req_vld = cp0_lsu_icc_req;

assign icc_req_inv  = cp0_lsu_icc_op[0];
assign icc_req_cln  = cp0_lsu_icc_op[1];


assign type_all    = cp0_lsu_icc_type[1:0] == ALL;
assign type_setway = cp0_lsu_icc_type[1:0] == SETWAY;

assign inv_all_setway = icc_req_inv & !icc_req_cln & (type_all | type_setway);

// &CombBeg; @63
always @( inv_all_setway
       or data_rd_last
       or type_all
       or icc_cnt_done
       or way1_dirty
       or icc_req_vld
       or icc_req_cln
       or way0_dirty
       or vb_icc_empty
       or icc_cur_state
       or vb_icc_grant
       or line_dirty)
begin
  case (icc_cur_state)
    ICC_IDLE: begin
      if (icc_req_vld)
        icc_next_state = inv_all_setway ? ICC_INV_ALL : ICC_TAG_RD;
      else
        icc_next_state = ICC_IDLE;
    end
    ICC_INV_ALL: begin
      if (icc_cnt_done)
        icc_next_state = ICC_CLR_VB;
      else
        icc_next_state = ICC_INV_ALL;
    end
    ICC_TAG_RD: begin
      icc_next_state = ICC_TAG_WEN;
    end
    ICC_TAG_WEN: begin
      icc_next_state = ICC_CHECK;
    end
    ICC_CHECK: begin
      if (icc_req_cln & line_dirty)
        icc_next_state = way0_dirty ? ICC_WFVB_W0 : ICC_WFVB_W1;
      else
        icc_next_state = ICC_TAG_WT;
    end
    ICC_WFVB_W0: begin
      if (vb_icc_grant)
        icc_next_state = ICC_DATA_W0;
      else
        icc_next_state = ICC_WFVB_W0;
    end
    ICC_DATA_W0: begin
      if (data_rd_last)
        icc_next_state = (type_all & way1_dirty) ? ICC_WFVB_W1 : ICC_TAG_WT;
      else
        icc_next_state = ICC_DATA_W0;
    end
    ICC_WFVB_W1: begin
      if (vb_icc_grant)
        icc_next_state = ICC_DATA_W1;
      else
        icc_next_state = ICC_WFVB_W1;
    end
    ICC_DATA_W1: begin
      if (data_rd_last)
        icc_next_state = ICC_TAG_WT;
      else
        icc_next_state = ICC_DATA_W1;
    end
    ICC_TAG_WT: begin
      if (icc_cnt_done)
        icc_next_state = ICC_CLR_VB;
      else
        icc_next_state = ICC_TAG_RD;
    end
    ICC_CLR_VB: begin
      if (vb_icc_empty)
        icc_next_state = ICC_IDLE;
      else
        icc_next_state = ICC_CLR_VB;
    end
    default: icc_next_state = ICC_IDLE;
  endcase
// &CombEnd; @127
end

assign icc_xx_idle     = icc_cur_state == ICC_IDLE;
assign icc_cur_wfvb0   = icc_cur_state == ICC_WFVB_W0;
assign icc_cur_data0   = icc_cur_state == ICC_DATA_W0;
assign icc_cur_wfvb1   = icc_cur_state == ICC_WFVB_W1;
assign icc_cur_data1   = icc_cur_state == ICC_DATA_W1;
assign icc_cur_inv_all = icc_cur_state == ICC_INV_ALL;
assign icc_cur_tag_rd  = icc_cur_state == ICC_TAG_RD;
assign icc_cur_tag_wt  = icc_cur_state == ICC_TAG_WT;
assign icc_cur_clr_vb  = icc_cur_state == ICC_CLR_VB;

assign icc_cur_wfvb = icc_cur_wfvb0 | icc_cur_wfvb1;
assign icc_cur_data = icc_cur_data0 | icc_cur_data1;

assign icc_cnt_en    = icc_cur_inv_all | icc_cur_tag_wt;

assign icc_cnt_start = (icc_cur_state == ICC_IDLE) & icc_req_vld;

always@(posedge icc_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    icc_cnt[9:0] <= 10'b0;
  else if (icc_cnt_start)
    icc_cnt[9:0] <= type_all ? {10{1'b1}} : {10{1'b0}};
  else if (icc_cnt_en)
    icc_cnt[9:0] <= icc_cnt[9:0] - 10'b1;
end

assign icc_cnt_done = icc_cnt[D_TAG_INDEX_LEN-1:0] == {D_TAG_INDEX_LEN{1'b0}};

assign lsu_cp0_icc_done = vb_icc_empty & icc_cur_clr_vb;




// &Force("bus","cp0_lsu_icc_addr",31,0); @163
assign cp0_way[1:0] = {cp0_lsu_icc_addr[31],~cp0_lsu_icc_addr[31]};
assign cp0_set[9:0] = cp0_lsu_icc_addr[14:5];

assign way_sel[1:0] = type_setway ? cp0_way[1:0] : 2'b11;

assign way0_dirty   = dc_icc_way0_dirty & way_sel[0];
assign way1_dirty   = dc_icc_way1_dirty & way_sel[1];
assign all_dirty    = way0_dirty | way1_dirty;
assign setway_dirty = |(cp0_way[1:0] & {way1_dirty, way0_dirty});
assign line_dirty   = type_all ? all_dirty : setway_dirty;

assign tag_idx[9:0] = type_setway
                    ? cp0_set[9:0]
                    : icc_cnt[9:0];


assign tag_wen = icc_cur_inv_all |
                 icc_cur_tag_wt & icc_req_inv;

assign icc_arb_tag_req = tag_wen |
                         icc_cur_tag_rd;

assign icc_arb_tag_wen[1:0]  = {2{tag_wen}} & way_sel[1:0];
assign icc_arb_tag_din[22:0] = 23'b0;
assign icc_arb_tag_idx[9:0]  = tag_idx[9:0];


assign dirty_wen = icc_cur_inv_all & type_all |
                   icc_cur_tag_wt & icc_req_cln;

assign fifo_wen  = type_all & icc_req_inv & dirty_wen;

assign icc_arb_dirty_req = dirty_wen |
                           icc_cur_tag_rd;

assign icc_arb_dirty_wen[2:0] = {fifo_wen, {2{dirty_wen}} & way_sel[1:0]};
assign icc_arb_dirty_din[2:0] = 3'b0;
assign icc_arb_dirty_idx[9:0] = tag_idx[9:0];


assign icc_arb_data_req = icc_cur_data;
assign icc_arb_data_way[1:0] = way_sel[1:0];
assign icc_arb_data_wen[3:0] = 4'b0;
assign icc_arb_data_din[63:0] = 64'b0;
assign icc_arb_data_idx[11:0] = {tag_idx[9:0],data_offset[1:0]};
assign icc_arb_data_bank[1:0] = 2'b11;







always@(posedge icc_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    icc_data_vld <= 1'b0;
  else
    icc_data_vld <= arb_icc_data_grant & icc_cur_data;
end

always@(posedge icc_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    icc_data_way0 <= 1'b0;
  else if (vb_icc_grant & icc_cur_wfvb0)
    icc_data_way0 <= 1'b1;
  else if (vb_icc_grant & icc_cur_wfvb1)
    icc_data_way0 <= 1'b0;
end

always@(posedge icc_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    data_offset[1:0]   <= 2'b0;
    data_offset_f[1:0] <= 2'b0;
  end
  else if (icc_cur_wfvb & vb_icc_grant) begin
    data_offset[1:0]   <= 2'b0;
    data_offset_f[1:0] <= 2'b0;
  end
  else if (icc_cur_data) begin
    data_offset[1:0]   <= data_offset[1:0] + 2'b1;
    data_offset_f[1:0] <= data_offset[1:0];
  end
end

assign data_rd_last = data_offset[1:0] == 2'b11;

// &Force("bus", "dc_icc_way0_tag", 21,0); @253
// &Force("bus", "dc_icc_way1_tag", 21,0); @254

always@(posedge icc_clk)
begin
  if (lfb_icc_warm_up)
    way1_tag[21:0] <= {22{1'b0}};
  else if ((icc_cur_state == ICC_TAG_WEN) & way1_dirty)
    way1_tag[21:0] <= dc_icc_way1_tag[21:0];
end

assign icc_vb_create_en  = icc_cur_wfvb;
assign icc_vb_addr[26:0] = icc_cur_wfvb0 ? {dc_icc_way0_tag[D_TAG_TAG_LEN-1:0], tag_idx[D_TAG_INDEX_LEN-1:0]}
                                         : {way1_tag[D_TAG_TAG_LEN-1:0], tag_idx[D_TAG_INDEX_LEN-1:0]};

assign icc_vb_data_create   = icc_data_vld;
assign icc_vb_data[63:0]    = icc_data_way0 ? dc_icc_way0_data[63:0] : dc_icc_way1_data[63:0];
assign icc_vb_line_dirty    = 1'b1;
assign icc_vb_data_cnt[1:0] = data_offset_f[1:0];

assign icc_vb_clr_vld       = icc_cur_clr_vb;

assign icc_fsm_clk_en = icc_req_vld | !(icc_cur_state == ICC_IDLE);
// &Instance("gated_clk_cell", "x_icc_fsm_gated_clk"); @276
gated_clk_cell  x_icc_fsm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icc_fsm_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (icc_fsm_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @277
//          .external_en (1'b0), @278
//          .global_en   (1'b1), @279
//          .module_en   (1'b0), @280
//          .local_en    (icc_fsm_clk_en), @281
//          .clk_out     (icc_fsm_clk)); @282

assign icc_clk_en = (icc_cur_state == ICC_TAG_WEN) & way1_dirty | lfb_icc_warm_up;
// &Instance("gated_clk_cell", "x_icc_dp_gated_clk"); @285
gated_clk_cell  x_icc_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (icc_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (icc_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @286
//          .external_en (1'b0), @287
//          .global_en   (1'b1), @288
//          .module_en   (1'b0), @289
//          .local_en    (icc_clk_en), @290
//          .clk_out     (icc_clk)); @291

// &ModuleEnd; @293
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_lfb(
  cp0_yy_mach_mode,
  cpurst_b,
  dahbif_lfb_acc_err,
  dahbif_lfb_cmplt,
  dahbif_lfb_data,
  dahbif_lfb_grant,
  dc_lfb_addr,
  dc_lfb_buf,
  dc_lfb_ca,
  dc_lfb_ca_raw,
  dc_lfb_create_en,
  dc_lfb_create_en_gate,
  dc_lfb_inst_ld,
  dc_lfb_lock_trans,
  dc_lfb_lr_inst,
  dc_lfb_size,
  dc_lfb_warm_up,
  dc_xx_addr,
  forever_cpuclk,
  ifu_xx_warm_up_clk,
  lfb_arb_data_bank,
  lfb_arb_data_din,
  lfb_arb_data_idx,
  lfb_arb_data_req,
  lfb_arb_data_way,
  lfb_arb_data_wen,
  lfb_arb_dcache_sel,
  lfb_arb_dirty_din,
  lfb_arb_dirty_idx,
  lfb_arb_dirty_req,
  lfb_arb_dirty_wen,
  lfb_arb_tag_din,
  lfb_arb_tag_idx,
  lfb_arb_tag_req,
  lfb_arb_tag_wen,
  lfb_dahbif_addr,
  lfb_dahbif_burst,
  lfb_dahbif_lock,
  lfb_dahbif_lr_inst,
  lfb_dahbif_prot,
  lfb_dahbif_req,
  lfb_dahbif_size,
  lfb_dc_async_expt,
  lfb_dc_busy,
  lfb_dc_hit_idx,
  lfb_dc_ld_cmplt,
  lfb_dc_ld_data,
  lfb_dc_ld_data_vld,
  lfb_dc_pop_en,
  lfb_icc_warm_up,
  lfb_rdl_index,
  lfb_rdl_start,
  lfb_rdl_start_gate,
  lfb_rdl_warm_up,
  lfb_stb_done,
  lfb_stb_err,
  lfb_stb_fifo,
  lfb_stb_fifo_update,
  lfb_xx_idle,
  pad_yy_gate_clk_en_b,
  rdl_lfb_done,
  rdl_lfb_fifo,
  rdl_lfb_fifo_save,
  rdl_lfb_grant,
  rtu_yy_xx_async_flush
);

// &Ports; @21
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbif_lfb_acc_err;
input           dahbif_lfb_cmplt;
input   [31:0]  dahbif_lfb_data;
input           dahbif_lfb_grant;
input   [31:0]  dc_lfb_addr;
input           dc_lfb_buf;
input           dc_lfb_ca;
input           dc_lfb_ca_raw;
input           dc_lfb_create_en;
input           dc_lfb_create_en_gate;
input           dc_lfb_inst_ld;
input           dc_lfb_lock_trans;
input           dc_lfb_lr_inst;
input   [1 :0]  dc_lfb_size;
input           dc_lfb_warm_up;
input   [31:0]  dc_xx_addr;
input           forever_cpuclk;
input           ifu_xx_warm_up_clk;
input           pad_yy_gate_clk_en_b;
input           rdl_lfb_done;
input           rdl_lfb_fifo;
input           rdl_lfb_fifo_save;
input           rdl_lfb_grant;
input           rtu_yy_xx_async_flush;
output  [1 :0]  lfb_arb_data_bank;
output  [63:0]  lfb_arb_data_din;
output  [11:0]  lfb_arb_data_idx;
output          lfb_arb_data_req;
output  [1 :0]  lfb_arb_data_way;
output  [3 :0]  lfb_arb_data_wen;
output          lfb_arb_dcache_sel;
output  [2 :0]  lfb_arb_dirty_din;
output  [9 :0]  lfb_arb_dirty_idx;
output          lfb_arb_dirty_req;
output  [2 :0]  lfb_arb_dirty_wen;
output  [22:0]  lfb_arb_tag_din;
output  [9 :0]  lfb_arb_tag_idx;
output          lfb_arb_tag_req;
output  [1 :0]  lfb_arb_tag_wen;
output  [31:0]  lfb_dahbif_addr;
output  [2 :0]  lfb_dahbif_burst;
output          lfb_dahbif_lock;
output          lfb_dahbif_lr_inst;
output  [3 :0]  lfb_dahbif_prot;
output          lfb_dahbif_req;
output  [1 :0]  lfb_dahbif_size;
output          lfb_dc_async_expt;
output          lfb_dc_busy;
output          lfb_dc_hit_idx;
output          lfb_dc_ld_cmplt;
output  [31:0]  lfb_dc_ld_data;
output          lfb_dc_ld_data_vld;
output          lfb_dc_pop_en;
output          lfb_icc_warm_up;
output  [9 :0]  lfb_rdl_index;
output          lfb_rdl_start;
output          lfb_rdl_start_gate;
output          lfb_rdl_warm_up;
output          lfb_stb_done;
output          lfb_stb_err;
output          lfb_stb_fifo;
output          lfb_stb_fifo_update;
output          lfb_xx_idle;

// &Regs; @22
reg     [31:0]  lfb_addr;
reg             lfb_buf;
reg             lfb_ca;
reg             lfb_cmplt;
reg     [2 :0]  lfb_cur_state;
reg     [31:0]  lfb_data;
reg             lfb_fifo;
reg             lfb_ld;
reg             lfb_lock;
reg             lfb_lr;
reg     [2 :0]  lfb_next_state;
reg             lfb_prot_ca;
reg     [1 :0]  lfb_size;
reg             lfb_warm_up;
reg     [3 :0]  ref_cur_state;
reg     [3 :0]  ref_next_state;
reg             refill_vld;

// &Wires; @23
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbif_lfb_acc_err;
wire            dahbif_lfb_cmplt;
wire    [31:0]  dahbif_lfb_data;
wire            dahbif_lfb_grant;
wire    [31:0]  dc_lfb_addr;
wire            dc_lfb_buf;
wire            dc_lfb_ca;
wire            dc_lfb_ca_raw;
wire            dc_lfb_create_en;
wire            dc_lfb_create_en_gate;
wire            dc_lfb_inst_ld;
wire            dc_lfb_lock_trans;
wire            dc_lfb_lr_inst;
wire    [1 :0]  dc_lfb_size;
wire            dc_lfb_warm_up;
wire    [31:0]  dc_xx_addr;
wire            forever_cpuclk;
wire            ifu_xx_warm_up_clk;
wire    [1 :0]  lfb_arb_data_bank;
wire    [63:0]  lfb_arb_data_din;
wire    [11:0]  lfb_arb_data_idx;
wire            lfb_arb_data_req;
wire    [1 :0]  lfb_arb_data_way;
wire    [3 :0]  lfb_arb_data_wen;
wire            lfb_arb_dcache_sel;
wire    [2 :0]  lfb_arb_dirty_din;
wire    [9 :0]  lfb_arb_dirty_idx;
wire            lfb_arb_dirty_req;
wire    [2 :0]  lfb_arb_dirty_wen;
wire    [22:0]  lfb_arb_tag_din;
wire    [9 :0]  lfb_arb_tag_idx;
wire            lfb_arb_tag_req;
wire    [1 :0]  lfb_arb_tag_wen;
wire            lfb_cur_idle;
wire    [31:0]  lfb_dahbif_addr;
wire    [2 :0]  lfb_dahbif_burst;
wire            lfb_dahbif_lock;
wire            lfb_dahbif_lr_inst;
wire    [3 :0]  lfb_dahbif_prot;
wire            lfb_dahbif_req;
wire    [1 :0]  lfb_dahbif_size;
wire            lfb_data_clk;
wire            lfb_data_clk_en;
wire            lfb_dc_async_expt;
wire            lfb_dc_busy;
wire            lfb_dc_hit_idx;
wire            lfb_dc_ld_cmplt;
wire    [31:0]  lfb_dc_ld_data;
wire            lfb_dc_ld_data_vld;
wire            lfb_dc_pop_en;
wire            lfb_dp_clk;
wire            lfb_dp_clk_en;
wire            lfb_fld_inst;
wire            lfb_fsm_clk;
wire            lfb_fsm_clk_en;
wire            lfb_icc_warm_up;
wire    [2 :0]  lfb_offset;
wire    [9 :0]  lfb_rdl_index;
wire            lfb_rdl_start;
wire            lfb_rdl_start_gate;
wire            lfb_rdl_warm_up;
wire            lfb_stb_done;
wire            lfb_stb_err;
wire            lfb_stb_fifo;
wire            lfb_stb_fifo_update;
wire            lfb_xx_idle;
wire            pad_yy_gate_clk_en_b;
wire            rdl_lfb_done;
wire            rdl_lfb_fifo;
wire            rdl_lfb_fifo_save;
wire            rdl_lfb_grant;
wire            refill_done;
wire            refill_err;
wire            refill_first;
wire            refill_idle;
wire            refill_start;
wire            rtu_yy_xx_async_flush;
wire            vld_set;


parameter D_DATA_INDEX_LEN = `D_DATA_INDEX_WIDTH;
parameter D_TAG_TAG_LEN    = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;




parameter LFB_IDLE = 3'b000;
parameter LFB_RDL  = 3'b001;
parameter LFB_REQ  = 3'b010;
parameter LFB_WFC  = 3'b011;
parameter LFB_REF  = 3'b100;
parameter LFB_WRDL = 3'b101;
parameter LFB_WFC2 = 3'b110;

always@(posedge lfb_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    lfb_cur_state[2:0] <= LFB_IDLE;
  else if (rtu_yy_xx_async_flush)
    lfb_cur_state[2:0] <= LFB_IDLE;
  else
    lfb_cur_state[2:0] <= lfb_next_state[2:0];
end

// &CombBeg; @50
always @( dc_lfb_ca
       or rdl_lfb_done
       or dahbif_lfb_acc_err
       or lfb_fld_inst
       or dahbif_lfb_cmplt
       or rdl_lfb_grant
       or refill_done
       or dc_lfb_create_en
       or lfb_cur_state
       or dahbif_lfb_grant
       or lfb_ca)
begin
  case(lfb_cur_state)
    LFB_IDLE: begin
      if (dc_lfb_create_en)begin
        if (dc_lfb_ca)
          lfb_next_state = rdl_lfb_grant ? LFB_RDL : LFB_WRDL;
        else
          lfb_next_state = LFB_REQ;
      end
      else
        lfb_next_state = LFB_IDLE;
    end
    LFB_WRDL: begin
      if (rdl_lfb_grant)
        lfb_next_state = LFB_RDL;
      else
        lfb_next_state = LFB_WRDL;
    end
    LFB_RDL: begin
      if (rdl_lfb_done)
        lfb_next_state = LFB_REQ;
      else
        lfb_next_state = LFB_RDL;
    end
    LFB_REQ: begin
      if (dahbif_lfb_grant)
        lfb_next_state = LFB_WFC;
      else
        lfb_next_state = LFB_REQ;
    end
    LFB_WFC: begin
      if (dahbif_lfb_cmplt)
        lfb_next_state = (!lfb_ca & lfb_fld_inst & !dahbif_lfb_acc_err) ? LFB_WFC2 : LFB_REF;
      else
        lfb_next_state = LFB_WFC;
    end
    LFB_WFC2: begin
        if (dahbif_lfb_cmplt)
          lfb_next_state = LFB_REF;
        else
          lfb_next_state = LFB_WFC2;
    end
    LFB_REF: begin
      if (!lfb_ca | refill_done)
        lfb_next_state = LFB_IDLE;
      else
        lfb_next_state = LFB_REF;
    end
    default: lfb_next_state = LFB_IDLE;
  endcase
// &CombEnd; @100
end

assign lfb_rdl_start = dc_lfb_create_en & dc_lfb_ca |
                       (lfb_cur_state == LFB_WRDL);

assign lfb_rdl_start_gate = dc_lfb_create_en_gate & dc_lfb_ca |
                            (lfb_cur_state == LFB_WRDL);

assign lfb_stb_done = (lfb_cur_state == LFB_REF) & refill_done;
assign lfb_stb_err  = (lfb_cur_state == LFB_REF) & refill_err;

assign lfb_cur_idle = lfb_cur_state == LFB_IDLE;
assign lfb_dc_busy  = !lfb_cur_idle;
assign lfb_xx_idle  = lfb_cur_idle;

assign lfb_dc_hit_idx = (dc_xx_addr[D_TAG_INDEX_LEN+4:5] == lfb_addr[D_TAG_INDEX_LEN+4:5]) &
                        !lfb_cur_idle & lfb_ca;

// &Force("bus","dc_xx_addr",31,0); @118

assign lfb_dc_pop_en = (lfb_cur_state == LFB_REF) & (!lfb_ca | refill_done);

always@(posedge lfb_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    lfb_fifo <= 1'b0;
  else if (rdl_lfb_fifo_save)
    lfb_fifo <= rdl_lfb_fifo;
end

assign lfb_stb_fifo_update = rdl_lfb_fifo_save;
assign lfb_stb_fifo = rdl_lfb_fifo;




assign refill_start = (lfb_cur_state == LFB_WFC) & dahbif_lfb_cmplt & lfb_ca;

parameter REF_IDLE  = 4'b1000;
parameter REF_FIRST = 4'b0000;
parameter REF_SECND = 4'b0001;
parameter REF_THIRD = 4'b0010;
parameter REF_FOUR  = 4'b0011;
parameter REF_FIVE  = 4'b0100;
parameter REF_SIX   = 4'b0101;
parameter REF_SEVEN = 4'b0110;
parameter REF_EIGHT = 4'b0111;
parameter REF_ERR   = 4'b1001;

always@(posedge lfb_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    ref_cur_state[3:0] <= REF_IDLE;
  else if (rtu_yy_xx_async_flush)
    ref_cur_state[3:0] <= REF_IDLE;
  else
    ref_cur_state[3:0] <= ref_next_state[3:0];
end

// &CombBeg; @159
always @( dahbif_lfb_acc_err
       or ref_cur_state
       or dahbif_lfb_cmplt
       or refill_start)
begin
  case(ref_cur_state)
    REF_IDLE: begin
      if (refill_start)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_FIRST;
      else
        ref_next_state = REF_IDLE;
    end
    REF_FIRST: begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_SECND;
      else
        ref_next_state = REF_FIRST;
    end
    REF_SECND: begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_THIRD;
      else
        ref_next_state = REF_SECND;
    end
    REF_THIRD: begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_FOUR;
      else
        ref_next_state = REF_THIRD;
    end
    REF_FOUR: begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_FIVE;
      else
        ref_next_state = REF_FOUR;
    end
    REF_FIVE: begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_SIX;
      else
        ref_next_state = REF_FIVE;
    end
    REF_SIX : begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_SEVEN;
      else
        ref_next_state = REF_SIX;
    end
    REF_SEVEN:begin
      if (dahbif_lfb_cmplt)
        ref_next_state = dahbif_lfb_acc_err ? REF_ERR : REF_EIGHT;
      else
        ref_next_state = REF_SEVEN;
    end
    REF_EIGHT: begin
      ref_next_state = REF_IDLE;
    end
    REF_ERR: begin
      ref_next_state = REF_IDLE;
    end
    default: ref_next_state = REF_IDLE;
  endcase
// &CombEnd; @217
end

always@(posedge lfb_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    refill_vld <= 1'b0;
  else if (((lfb_cur_state == LFB_REF) | (lfb_cur_state == LFB_WFC)) & lfb_ca)
    refill_vld <= dahbif_lfb_cmplt & !dahbif_lfb_acc_err;
end

assign refill_idle  = ref_cur_state == REF_IDLE;
assign refill_first = ref_cur_state == REF_FIRST;
assign refill_done = (ref_cur_state == REF_EIGHT) |
                     (ref_cur_state == REF_ERR);
assign refill_err  = (ref_cur_state == REF_ERR);
assign vld_set     = (ref_cur_state == REF_EIGHT);

assign lfb_arb_tag_req        = ((ref_cur_state == REF_FIRST) |
                                 (ref_cur_state == REF_EIGHT)) & refill_vld;
assign lfb_arb_tag_wen[1:0]   = {lfb_fifo, !lfb_fifo};
assign lfb_arb_tag_din[22:0]  = {vld_set,{(22-D_TAG_TAG_LEN){1'b0}}, lfb_addr[31:D_TAG_INDEX_LEN+5]};
assign lfb_arb_tag_idx[9:0]   = lfb_addr[14:5];

assign lfb_arb_dirty_req      = (ref_cur_state == REF_EIGHT) & refill_vld;
assign lfb_arb_dirty_wen[2:0] = {1'b1, lfb_fifo, !lfb_fifo};
assign lfb_arb_dirty_din[2:0] = {!lfb_fifo,2'b0};
assign lfb_arb_dirty_idx[9:0] = lfb_addr[14:5];

// &Force("output", "lfb_arb_dcache_sel"); @245

assign lfb_arb_data_req       = lfb_arb_dcache_sel & refill_vld;
assign lfb_arb_data_way[1:0]  = {lfb_fifo, !lfb_fifo};
assign lfb_arb_data_bank[1:0] = {lfb_offset[0], !lfb_offset[0]};
assign lfb_arb_data_wen[3:0]  = 4'b1111;
assign lfb_arb_data_din[63:0] = {lfb_data[31:0],lfb_data[31:0]};
assign lfb_arb_data_idx[11:0] = {lfb_addr[14:5], lfb_offset[2:1]};
assign lfb_offset[2:0]        = lfb_addr[4:2] + ref_cur_state[2:0];
assign lfb_arb_dcache_sel     = !(ref_cur_state == REF_IDLE | ref_cur_state == REF_ERR) ;




assign lfb_dahbif_req = (lfb_cur_state == LFB_REQ);
assign lfb_dahbif_addr[31:0] = lfb_ca ? {lfb_addr[31:2],2'b00} : lfb_addr[31:0];
assign lfb_dahbif_size[1:0]  = lfb_ca ? 2'b10 : lfb_size[1:0];
assign lfb_dahbif_prot[3:0]  = {lfb_prot_ca,lfb_buf,cp0_yy_mach_mode,1'b1};
assign lfb_dahbif_lock       = lfb_lock;
assign lfb_dahbif_lr_inst    = lfb_lr;
assign lfb_dahbif_burst[2:0] = lfb_ca ? 3'b100 : (lfb_fld_inst ? 3'b001 : 3'b000); //WRAP8





always@(posedge lfb_dp_clk)
begin
  if (dc_lfb_create_en | dc_lfb_warm_up) begin
    lfb_addr[31:0]     <= dc_lfb_addr[31:0];
    lfb_ca             <= dc_lfb_ca;
    lfb_prot_ca        <= dc_lfb_ca_raw;
    lfb_buf            <= dc_lfb_buf;
    lfb_size[1:0]      <= dc_lfb_size[1:0];
    lfb_lock           <= dc_lfb_lock_trans;
    lfb_ld             <= dc_lfb_inst_ld;
    lfb_lr             <= dc_lfb_lr_inst;
  end
end

assign lfb_fld_inst = lfb_ld & lfb_size[1:0] == 2'b11;

always@(posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    lfb_warm_up <= 1'b0;
  else
    lfb_warm_up <= dc_lfb_warm_up;
end

always@(posedge lfb_data_clk)
begin
  if (dahbif_lfb_cmplt & !dahbif_lfb_acc_err | lfb_warm_up)
    lfb_data[31:0] <= dahbif_lfb_data[31:0];
end

assign lfb_dc_ld_data[31:0] = lfb_data[31:0];

assign lfb_rdl_index[9:0] = (lfb_cur_state == LFB_WRDL)
                          ? lfb_addr[14:5]
                          : dc_lfb_addr[14:5];





always@(posedge lfb_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    lfb_cmplt <= 1'b0;
  else if (dahbif_lfb_cmplt & lfb_ld &
                 (lfb_fld_inst & lfb_ca & (refill_idle & refill_start & dahbif_lfb_acc_err | refill_first) |
                 !lfb_fld_inst & (lfb_cur_state == LFB_WFC) |
                  lfb_fld_inst & !lfb_ca & ((lfb_cur_state == LFB_WFC) & dahbif_lfb_acc_err |
                                            (lfb_cur_state == LFB_WFC2))))
    lfb_cmplt <= 1'b1;
  else
    lfb_cmplt <= 1'b0;
end

assign lfb_dc_ld_cmplt      = lfb_cmplt;
assign lfb_dc_ld_data_vld   = lfb_cmplt;

assign lfb_dc_async_expt    = dahbif_lfb_cmplt & dahbif_lfb_acc_err & lfb_ld;

assign lfb_icc_warm_up      = lfb_warm_up;
assign lfb_rdl_warm_up      = lfb_warm_up;




assign lfb_fsm_clk_en = dc_lfb_create_en_gate |
                        !(lfb_cur_state == LFB_IDLE) |
                        !(ref_cur_state == REF_IDLE);

// &Instance("gated_clk_cell", "x_pa_lsu_lfb_fsm_gated_clk"); @351
gated_clk_cell  x_pa_lsu_lfb_fsm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lfb_fsm_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (lfb_fsm_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @352
//          .external_en (1'b0), @353
//          .global_en   (1'b1), @354
//          .module_en   (1'b0), @355
//          .local_en    (lfb_fsm_clk_en), @356
//          .clk_out     (lfb_fsm_clk)); @357

assign lfb_dp_clk_en = dc_lfb_create_en_gate | dc_lfb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_lfb_dp_gated_clk"); @360
gated_clk_cell  x_pa_lsu_lfb_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lfb_dp_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (lfb_dp_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @361
//          .external_en (1'b0), @362
//          .global_en   (1'b1), @363
//          .module_en   (1'b0), @364
//          .local_en    (lfb_dp_clk_en), @365
//          .clk_out     (lfb_dp_clk)); @366

assign lfb_data_clk_en = dahbif_lfb_cmplt & !dahbif_lfb_acc_err | lfb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_lfb_data_gated_clk"); @369
gated_clk_cell  x_pa_lsu_lfb_data_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lfb_data_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (lfb_data_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @370
//          .external_en (1'b0), @371
//          .global_en   (1'b1), @372
//          .module_en   (1'b0), @373
//          .local_en    (lfb_data_clk_en), @374
//          .clk_out     (lfb_data_clk)); @375

// &Instance("gated_clk_cell", "x_pa_lsu_lfb_data_ff_gated_clk"); @379
// &Connect(.clk_in      (forever_cpuclk), @380
//          .external_en (1'b0), @381
//          .global_en   (1'b1), @382
//          .module_en   (1'b0), @383
//          .local_en    (lfb_data_ff_clk_en), @384
//          .clk_out     (lfb_data_ff_clk)); @385

// &ModuleEnd; @391
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_lm(
  ag_dc_warm_up,
  cpurst_b,
  forever_cpuclk,
  lm_clr,
  lm_lr_bus,
  lm_pass,
  lm_sc_bus,
  lm_set,
  lm_set_gate,
  pad_yy_gate_clk_en_b,
  rtu_lsu_expt_ack,
  rtu_lsu_expt_exit
);

// &Ports; @21
input           ag_dc_warm_up;
input           cpurst_b;
input           forever_cpuclk;
input           lm_clr;
input   [33:0]  lm_lr_bus;
input   [33:0]  lm_sc_bus;
input           lm_set;
input           lm_set_gate;
input           pad_yy_gate_clk_en_b;
input           rtu_lsu_expt_ack;
input           rtu_lsu_expt_exit;
output          lm_pass;

// &Regs; @22
reg     [33:0]  lm_bus_f;
reg             lm_cur_state;
reg             lm_next_state;

// &Wires; @23
wire            ag_dc_warm_up;
wire            cpurst_b;
wire            forever_cpuclk;
wire            lm_clk;
wire            lm_clk_en;
wire            lm_clr;
wire    [33:0]  lm_lr_bus;
wire            lm_pass;
wire    [33:0]  lm_sc_bus;
wire            lm_set;
wire            lm_set_gate;
wire            pad_yy_gate_clk_en_b;
wire            rtu_lsu_expt_ack;
wire            rtu_lsu_expt_exit;


parameter LM_OPEN = 1'b0;
parameter LM_EXCL = 1'b1;

always@(posedge lm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    lm_cur_state <= LM_OPEN;
  else
    lm_cur_state <= lm_next_state;
end

// &CombBeg; @36
always @( rtu_lsu_expt_ack
       or lm_clr
       or lm_cur_state
       or lm_set
       or rtu_lsu_expt_exit)
begin
  case (lm_cur_state)
    LM_OPEN:begin
      if (lm_set & !rtu_lsu_expt_ack & !rtu_lsu_expt_exit)
        lm_next_state = LM_EXCL;
      else
        lm_next_state = LM_OPEN;
    end
    LM_EXCL:begin
      if (rtu_lsu_expt_ack | rtu_lsu_expt_exit | lm_clr)
        lm_next_state = LM_OPEN;
      else
        lm_next_state = LM_EXCL;
    end
    default: lm_next_state = LM_OPEN;
  endcase
// &CombEnd; @52
end

always@(posedge lm_clk)
begin
  if (ag_dc_warm_up)
    lm_bus_f[33:0] <= 34'b0;
  else if (lm_set)
    lm_bus_f[33:0] <= lm_lr_bus[33:0];
end

assign lm_pass = lm_cur_state & (lm_bus_f[33:0] == lm_sc_bus[33:0]);

assign lm_clk_en = lm_set_gate | (lm_cur_state == LM_EXCL) | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_lm_gated_clk"); @65
gated_clk_cell  x_pa_lsu_lm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lm_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (lm_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @66
//          .external_en (1'b0), @67
//          .global_en   (1'b1), @68
//          .module_en   (1'b0), @69
//          .local_en    (lm_clk_en), @70
//          .clk_out     (lm_clk)); @71

// &ModuleEnd; @73
endmodule


















// &Depend("cpu_cfig.h"); @17

// &ModuleBeg; @19
module pa_lsu_ncb(
  ag_dc_buf,
  ag_dc_bytes_vld,
  ag_dc_ca,
  ag_dc_dest_reg,
  ag_dc_fls,
  ag_dc_func,
  ag_dc_lm_pass,
  ag_dc_ori_size,
  ag_dc_pmp_expt,
  ag_dc_sign_ext,
  ag_dc_size,
  ag_dc_so,
  ag_dc_split,
  ag_dc_split_first,
  ag_dc_split_last,
  ag_dc_src1_depd,
  ag_dc_warm_up,
  ag_dc_wdata_shift,
  ag_ncb_addr,
  ag_ncb_inst_vld,
  ag_ncb_inst_vld_dp,
  ag_ncb_src1_reg,
  ag_ncb_st_data,
  cp0_xx_async_expt_en,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbif_ncb_acc_err,
  dahbif_ncb_cmplt,
  dahbif_ncb_data,
  dahbif_ncb_grant,
  dahbif_ncb_grant_2,
  forever_cpuclk,
  ifu_xx_warm_up_clk,
  lsu_biu_amo_pmp_deny,
  lsu_mb_ex2_uc_addr_2,
  lsu_mb_ex2_uc_bytes_vld,
  lsu_mb_ex2_uc_data,
  lsu_mb_ex2_uc_data_vld,
  lsu_mb_ex2_uc_data_vld_gate,
  lsu_mb_ex2_uc_dest_reg,
  lsu_mb_ex2_uc_fld,
  lsu_mb_ex2_uc_fls,
  lsu_mb_ex2_uc_lock,
  lsu_mb_ex2_uc_sign_ext,
  lsu_mb_ex2_uc_size,
  lsu_mb_ex2_uc_split,
  lsu_mb_ex2_uc_split_last,
  lsu_mb_ex2_uc_stall,
  lsu_mb_ex2_uc_vld,
  lsu_xx_ex2_uc_flush,
  ncb_ag_async_expt_vld,
  ncb_ag_async_ld_inst,
  ncb_ag_async_mtval,
  ncb_ag_stall,
  ncb_dahbif_acc_deny,
  ncb_dahbif_lock,
  ncb_dahbif_lrsc,
  ncb_dahbif_ncb_wb_addr,
  ncb_dahbif_ncb_wb_sel,
  ncb_dahbif_prot,
  ncb_dahbif_req,
  ncb_dahbif_req_dp,
  ncb_dahbif_size,
  ncb_dahbif_uc_ld_addr,
  ncb_dahbif_wdata,
  ncb_dahbif_write,
  ncb_xx_no_op,
  ncb_xx_warm_up,
  pad_yy_gate_clk_en_b,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_yy_xx_async_flush
);

// &Ports; @20
input           ag_dc_buf;
input   [3 :0]  ag_dc_bytes_vld;
input           ag_dc_ca;
input   [5 :0]  ag_dc_dest_reg;
input           ag_dc_fls;
input   [3 :0]  ag_dc_func;
input           ag_dc_lm_pass;
input   [1 :0]  ag_dc_ori_size;
input           ag_dc_pmp_expt;
input           ag_dc_sign_ext;
input   [1 :0]  ag_dc_size;
input           ag_dc_so;
input           ag_dc_split;
input           ag_dc_split_first;
input           ag_dc_split_last;
input           ag_dc_src1_depd;
input           ag_dc_warm_up;
input   [2 :0]  ag_dc_wdata_shift;
input   [31:0]  ag_ncb_addr;
input           ag_ncb_inst_vld;
input           ag_ncb_inst_vld_dp;
input   [5 :0]  ag_ncb_src1_reg;
input   [31:0]  ag_ncb_st_data;
input           cp0_xx_async_expt_en;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbif_ncb_acc_err;
input           dahbif_ncb_cmplt;
input   [31:0]  dahbif_ncb_data;
input           dahbif_ncb_grant;
input           dahbif_ncb_grant_2;
input           forever_cpuclk;
input           ifu_xx_warm_up_clk;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_lsu_wb_fwd_data;
input           rtu_lsu_wb_fwd_fls;
input   [5 :0]  rtu_lsu_wb_fwd_reg;
input           rtu_lsu_wb_fwd_vld;
input           rtu_yy_xx_async_flush;
output          lsu_biu_amo_pmp_deny;
output          lsu_mb_ex2_uc_addr_2;
output  [3 :0]  lsu_mb_ex2_uc_bytes_vld;
output  [31:0]  lsu_mb_ex2_uc_data;
output          lsu_mb_ex2_uc_data_vld;
output          lsu_mb_ex2_uc_data_vld_gate;
output  [5 :0]  lsu_mb_ex2_uc_dest_reg;
output          lsu_mb_ex2_uc_fld;
output          lsu_mb_ex2_uc_fls;
output          lsu_mb_ex2_uc_lock;
output          lsu_mb_ex2_uc_sign_ext;
output  [1 :0]  lsu_mb_ex2_uc_size;
output          lsu_mb_ex2_uc_split;
output          lsu_mb_ex2_uc_split_last;
output          lsu_mb_ex2_uc_stall;
output          lsu_mb_ex2_uc_vld;
output          lsu_xx_ex2_uc_flush;
output          ncb_ag_async_expt_vld;
output          ncb_ag_async_ld_inst;
output  [31:0]  ncb_ag_async_mtval;
output          ncb_ag_stall;
output          ncb_dahbif_acc_deny;
output          ncb_dahbif_lock;
output          ncb_dahbif_lrsc;
output  [31:0]  ncb_dahbif_ncb_wb_addr;
output          ncb_dahbif_ncb_wb_sel;
output  [3 :0]  ncb_dahbif_prot;
output          ncb_dahbif_req;
output          ncb_dahbif_req_dp;
output  [1 :0]  ncb_dahbif_size;
output  [31:0]  ncb_dahbif_uc_ld_addr;
output  [31:0]  ncb_dahbif_wdata;
output          ncb_dahbif_write;
output          ncb_xx_no_op;
output          ncb_xx_warm_up;

// &Regs; @21
reg     [1 :0]  bytes_vld_decode;
reg             data_last;
reg     [1 :0]  nc_cur_state;
reg     [1 :0]  nc_next_state;
reg     [31:0]  ncb_addr;
reg     [3 :0]  ncb_bytes_vld;
reg     [5 :0]  ncb_dest_reg;
reg             ncb_fls;
reg             ncb_ld_inst;
reg             ncb_lock;
reg             ncb_lrsc;
reg     [1 :0]  ncb_ori_size;
reg             ncb_pmp_expt;
reg     [3 :0]  ncb_prot;
reg             ncb_sign_ext;
reg     [1 :0]  ncb_size;
reg             ncb_split;
reg             ncb_split_first;
reg             ncb_split_last;
reg             ncb_warm_up;
reg             req_cnt;
reg             wb_addr_pmp_deny;
reg             wb_addr_pop_ptr;
reg             wb_addr_sc_fail;
reg             wb_create_ptr;
reg             wb_data_pop_ptr;
reg     [31:0]  wb_dbus_addr;
reg     [5 :0]  wb_dbus_dest_preg;
reg             wb_dbus_fls;
reg             wb_dbus_lock;
reg             wb_dbus_lrsc;
reg     [3 :0]  wb_dbus_prot;
reg             wb_dbus_req;
reg     [1 :0]  wb_dbus_size;
reg     [31:0]  wb_dbus_wdata_pre;

// &Wires; @22
wire            ag_dc_buf;
wire    [3 :0]  ag_dc_bytes_vld;
wire            ag_dc_ca;
wire    [5 :0]  ag_dc_dest_reg;
wire            ag_dc_fls;
wire    [3 :0]  ag_dc_func;
wire            ag_dc_lm_pass;
wire    [1 :0]  ag_dc_ori_size;
wire            ag_dc_pmp_expt;
wire            ag_dc_sign_ext;
wire    [1 :0]  ag_dc_size;
wire            ag_dc_so;
wire            ag_dc_split;
wire            ag_dc_split_first;
wire            ag_dc_split_last;
wire            ag_dc_src1_depd;
wire            ag_dc_warm_up;
wire    [2 :0]  ag_dc_wdata_shift;
wire            ag_ld_hit_wb;
wire            ag_ld_hit_wb_f;
wire            ag_ld_inst;
wire            ag_ld_req;
wire            ag_ld_req_dp;
wire            ag_ld_sel;
wire            ag_lock_inst;
wire            ag_lr_inst;
wire            ag_lrsc_inst;
wire    [31:0]  ag_ncb_addr;
wire            ag_ncb_inst_vld;
wire            ag_ncb_inst_vld_dp;
wire    [5 :0]  ag_ncb_src1_reg;
wire    [31:0]  ag_ncb_st_data;
wire    [3 :0]  ag_prot;
wire            ag_sc_inst;
wire            ag_st_inst;
wire            ag_st_req;
wire            ag_st_req_dp;
wire            block_acc_en;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbif_ncb_acc_err;
wire            dahbif_ncb_cmplt;
wire    [31:0]  dahbif_ncb_data;
wire            dahbif_ncb_grant;
wire            dahbif_ncb_grant_2;
wire            forever_cpuclk;
wire            ifu_xx_warm_up_clk;
wire    [31:0]  ld_data;
wire    [1 :0]  ld_hit_wb;
wire    [1 :0]  ld_hit_wb_f;
wire            ld_sc_pass_data_vld;
wire            ld_sc_pass_data_vld_gate;
wire            ld_stall;
wire            ld_stall_dp;
wire            lock_stall;
wire            lock_stall_dp;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_ex2_addr_2;
wire    [3 :0]  lsu_ex2_bytes_vld;
wire            lsu_ex2_data_vld;
wire            lsu_ex2_data_vld_gate;
wire    [5 :0]  lsu_ex2_dest_reg;
wire            lsu_ex2_fld;
wire            lsu_ex2_fls;
wire            lsu_ex2_lock;
wire            lsu_ex2_sign_ext;
wire    [1 :0]  lsu_ex2_size;
wire            lsu_ex2_split;
wire            lsu_ex2_split_last;
wire            lsu_mb_ex2_uc_addr_2;
wire    [3 :0]  lsu_mb_ex2_uc_bytes_vld;
wire    [31:0]  lsu_mb_ex2_uc_data;
wire            lsu_mb_ex2_uc_data_vld;
wire            lsu_mb_ex2_uc_data_vld_gate;
wire    [5 :0]  lsu_mb_ex2_uc_dest_reg;
wire            lsu_mb_ex2_uc_fld;
wire            lsu_mb_ex2_uc_fls;
wire            lsu_mb_ex2_uc_lock;
wire            lsu_mb_ex2_uc_sign_ext;
wire    [1 :0]  lsu_mb_ex2_uc_size;
wire            lsu_mb_ex2_uc_split;
wire            lsu_mb_ex2_uc_split_last;
wire            lsu_mb_ex2_uc_stall;
wire            lsu_mb_ex2_uc_vld;
wire            lsu_xx_ex2_uc_flush;
wire    [31:0]  nc_addr;
wire            nc_burst;
wire    [3 :0]  nc_bytes_vld;
wire            nc_cur_err;
wire            nc_cur_rdy;
wire            nc_cur_rdy_dp;
wire            nc_cur_wfc;
wire            nc_cur_wfg;
wire    [5 :0]  nc_dest_reg;
wire            nc_fls;
wire            nc_ld;
wire            nc_lock;
wire            nc_lrsc;
wire    [1 :0]  nc_ori_size;
wire            nc_pmp_expt;
wire    [3 :0]  nc_prot;
wire            nc_req_vld;
wire            nc_req_vld_dp;
wire            nc_sign_ext;
wire    [1 :0]  nc_size;
wire            nc_split;
wire            nc_split_first;
wire            nc_split_last;
wire            nc_st;
wire            ncb_ag_async_expt_vld;
wire            ncb_ag_async_ld_inst;
wire    [31:0]  ncb_ag_async_mtval;
wire            ncb_ag_stall;
wire            ncb_burst;
wire            ncb_clk;
wire            ncb_clk_en;
wire            ncb_cmplt;
wire            ncb_cmplt_norm;
wire            ncb_create_en;
wire            ncb_create_en_gate;
wire            ncb_dahbif_acc_deny;
wire            ncb_dahbif_lock;
wire            ncb_dahbif_lrsc;
wire    [31:0]  ncb_dahbif_ncb_wb_addr;
wire            ncb_dahbif_ncb_wb_sel;
wire    [3 :0]  ncb_dahbif_prot;
wire            ncb_dahbif_req;
wire            ncb_dahbif_req_dp;
wire    [1 :0]  ncb_dahbif_size;
wire    [31:0]  ncb_dahbif_uc_ld_addr;
wire    [31:0]  ncb_dahbif_wdata;
wire            ncb_dahbif_write;
wire            ncb_dp_clk;
wire            ncb_dp_clk_en;
wire            ncb_fld;
wire            ncb_idle;
wire            ncb_ld_create_en;
wire            ncb_ld_create_en_gate;
wire            ncb_ld_dp_clk;
wire            ncb_ld_dp_clk_en;
wire            ncb_sc_inst;
wire            ncb_st_inst;
wire            ncb_vld;
wire            ncb_wb_cmplt;
wire            ncb_wb_grant;
wire            ncb_xx_no_op;
wire            ncb_xx_warm_up;
wire            pad_yy_gate_clk_en_b;
wire            req_done;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_yy_xx_async_flush;
wire    [31:0]  sc_data;
wire    [1 :0]  shift_from_bytes;
wire            st_stall;
wire            st_stall_dp;
wire    [1 :0]  wb_addr_pop_en;
wire            wb_addr_pop_vld;
wire            wb_clk;
wire            wb_clk_en;
wire    [31:0]  wb_create_addr;
wire            wb_create_buf;
wire    [7 :0]  wb_create_bytes_vld;
wire            wb_create_ca;
wire    [31:0]  wb_create_data;
wire    [5 :0]  wb_create_dest_preg;
wire            wb_create_dw;
wire    [1 :0]  wb_create_en;
wire    [1 :0]  wb_create_en_dp;
wire            wb_create_fls;
wire            wb_create_lock;
wire            wb_create_pmp_deny;
wire            wb_create_sc_fail;
wire            wb_create_sc_inst;
wire    [3 :0]  wb_create_shift;
wire    [2 :0]  wb_create_shift_raw;
wire    [1 :0]  wb_create_size;
wire            wb_create_so;
wire            wb_create_split_first;
wire            wb_create_src1_depd;
wire    [5 :0]  wb_create_src1_reg;
wire            wb_create_vld;
wire            wb_create_vld_dp;
wire            wb_data_entry_vld;
wire            wb_data_pmp_deny;
wire    [1 :0]  wb_data_pop_en;
wire            wb_data_pop_vld;
wire            wb_data_sc_fail;
wire            wb_dbus_req_vld;
wire            wb_dbus_split_first;
wire    [31:0]  wb_dbus_wdata;
wire            wb_empty;
wire    [31:0]  wb_entry0_addr;
wire    [5 :0]  wb_entry0_dest_preg;
wire    [3 :0]  wb_entry0_prot;
wire    [2 :0]  wb_entry0_shift;
wire    [1 :0]  wb_entry0_size;
wire    [31:0]  wb_entry0_wdata;
wire    [31:0]  wb_entry1_addr;
wire    [5 :0]  wb_entry1_dest_preg;
wire    [3 :0]  wb_entry1_prot;
wire    [2 :0]  wb_entry1_shift;
wire    [1 :0]  wb_entry1_size;
wire    [31:0]  wb_entry1_wdata;
wire    [1 :0]  wb_entry_addr_vld;
wire    [1 :0]  wb_entry_data_vld;
wire    [1 :0]  wb_entry_fls;
wire    [1 :0]  wb_entry_lock;
wire    [1 :0]  wb_entry_lrsc;
wire    [1 :0]  wb_entry_pmp_deny;
wire    [1 :0]  wb_entry_sc_fail;
wire    [1 :0]  wb_entry_split_first;
wire    [1 :0]  wb_entry_vld;
wire            wb_full;
wire            wb_lock;
wire            wb_pmp_deny;
wire            wb_req_vld;
wire            wb_sc_fail_vld;
wire            wb_sc_req;
wire            wb_so;
wire    [1 :0]  wb_so_req;
wire    [31:0]  wb_wdata;
wire    [2 :0]  wb_wdata_shift;


parameter DATAW = `FLEN;



// &Force("bus","ag_dc_func",3,0); @28

assign block_acc_en   = !cp0_xx_async_expt_en | ncb_lock;
assign ag_ld_hit_wb   = |ld_hit_wb[1:0];
assign ag_ld_hit_wb_f = |ld_hit_wb_f[1:0];
assign wb_so          = |wb_so_req[1:0];
assign wb_pmp_deny    = |(wb_entry_vld[1:0] & wb_entry_pmp_deny[1:0]);
assign wb_lock        = |(wb_entry_vld[1:0] & wb_entry_lock);

assign ag_st_inst     =  ag_dc_func[0] & !ag_dc_func[3];
assign ag_ld_inst     = !ag_dc_func[0] & !ag_dc_func[3];
assign ag_lock_inst   =  ag_dc_func[1] | ag_dc_func[2];




assign lock_stall    = !nc_cur_rdy | !wb_empty;
assign lock_stall_dp = !nc_cur_rdy_dp | !wb_empty;







assign ld_stall =  ag_ld_hit_wb_f | ag_ld_hit_wb |
                   wb_pmp_deny | wb_lock | wb_so;

assign ld_stall_dp = ag_ld_hit_wb_f |
                     wb_pmp_deny | wb_lock | wb_so;







assign st_stall    = wb_full |
                     wb_pmp_deny | wb_lock |
                     block_acc_en & !nc_cur_rdy;

assign st_stall_dp = wb_full |
                     wb_pmp_deny | wb_lock |
                     block_acc_en & !nc_cur_rdy_dp;


assign ncb_ag_stall = ag_lock_inst
                    ? lock_stall
                    : (ag_st_inst ? st_stall
                                  : (!nc_cur_rdy | ld_stall));

assign ncb_xx_no_op = ncb_idle & wb_empty;





assign ag_st_req    = ag_ncb_inst_vld & ag_st_inst &
                      (ag_lock_inst & !lock_stall |
                      !ag_lock_inst & !st_stall);

assign ag_st_req_dp = ag_ncb_inst_vld_dp & ag_st_inst &
                      (ag_lock_inst & !lock_stall_dp |
                      !ag_lock_inst & !st_stall_dp);





assign wb_create_vld    = ag_st_req;
assign wb_create_vld_dp = ag_st_req_dp;

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_create_ptr <= 1'b0;
  else if (rtu_yy_xx_async_flush)
    wb_create_ptr <= 1'b0;
  else if (wb_create_vld)
    wb_create_ptr <= ~wb_create_ptr;
end

assign wb_create_en[1:0]        = {wb_create_ptr,~wb_create_ptr} & {2{wb_create_vld}};
assign wb_create_en_dp[1:0]     = {wb_create_ptr,~wb_create_ptr} & {2{wb_create_vld_dp}};
assign wb_create_addr[31:0]     = ag_ncb_addr[31:0];
assign wb_create_size[1:0]      = ag_dc_size[1:0];
assign wb_create_ca             = ag_dc_ca;
assign wb_create_buf            = ag_dc_buf;
assign wb_create_so             = ag_dc_so;
assign wb_create_lock           = ag_dc_func[2] | ag_dc_func[1];
assign wb_create_sc_inst        = ag_dc_func[1];
assign wb_create_pmp_deny       = ag_dc_pmp_expt;
assign wb_create_sc_fail        = ag_sc_inst & !ag_dc_lm_pass;
assign wb_create_dest_preg[5:0] = ag_dc_dest_reg[5:0];
assign wb_create_fls            = ag_dc_fls;
assign wb_create_split_first    = ag_dc_split_first;

assign wb_create_dw             = ag_dc_size[1:0] == 2'b11;
assign wb_create_bytes_vld      = ag_ncb_addr[2]
                                ? {ag_dc_bytes_vld[3:0],4'b0000}
                                : {{4{wb_create_dw}}, ag_dc_bytes_vld[3:0]};

assign wb_create_src1_reg[5:0]  = ag_ncb_src1_reg[5:0];
assign wb_create_src1_depd      = ag_dc_src1_depd;
assign wb_create_data[DATAW-1:0]= ag_ncb_st_data[DATAW-1:0];

// &CombBeg; @134
always @( ag_dc_bytes_vld[3:0])
begin
  casez(ag_dc_bytes_vld[3:0])
  4'b???1: bytes_vld_decode[1:0] = 2'b00;
  4'b??10: bytes_vld_decode[1:0] = 2'b01;
  4'b?100: bytes_vld_decode[1:0] = 2'b10;
  4'b1000: bytes_vld_decode[1:0] = 2'b11;
  default: bytes_vld_decode[1:0] = 2'b00;
  endcase
// &CombEnd; @142
end

// &Force("bus","ag_dc_wdata_shift",2,0); @152
assign shift_from_bytes[1:0] = bytes_vld_decode[1:0];
assign wb_create_shift_raw[2:0] = {1'b0,shift_from_bytes[1:0]} + (3'b100 - {1'b0,ag_dc_wdata_shift[1:0]});
assign wb_create_shift[1:0]  = wb_create_shift_raw[1:0];
assign wb_create_shift[3:2]  = 2'b0;


assign wb_full  = &(wb_entry_vld[1:0] & ~wb_data_pop_en[1:0]);
assign wb_empty = !(|wb_entry_vld[1:0]);




assign wb_addr_pop_vld = ncb_wb_grant |
                         wb_dbus_req & (wb_addr_pmp_deny | wb_addr_sc_fail);

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_addr_pop_ptr <= 1'b0;
  else if (rtu_yy_xx_async_flush)
    wb_addr_pop_ptr <= 1'b0;
  else if (wb_addr_pop_vld)
    wb_addr_pop_ptr <= ~wb_addr_pop_ptr;
end

assign wb_addr_pop_en[1:0] = {wb_addr_pop_ptr,~wb_addr_pop_ptr} & {2{wb_addr_pop_vld}};

// &CombBeg; @181
always @( wb_entry_addr_vld[1:0]
       or wb_entry_sc_fail[1:0]
       or wb_entry_lrsc[1:0]
       or wb_entry_fls[1:0]
       or wb_entry1_dest_preg[5:0]
       or wb_addr_pop_ptr
       or wb_entry0_prot[3:0]
       or wb_entry1_prot[3:0]
       or wb_entry0_addr[31:0]
       or wb_entry1_size[1:0]
       or wb_entry0_dest_preg[5:0]
       or wb_entry_lock[1:0]
       or wb_entry0_size[1:0]
       or wb_entry1_addr[31:0]
       or wb_entry_pmp_deny[1:0])
begin
  case(wb_addr_pop_ptr)
    1'b0 :  begin
            wb_dbus_req        = wb_entry_addr_vld[0];
            wb_dbus_addr[31:0] = wb_entry0_addr[31:0];
            wb_dbus_prot[3:0]  = wb_entry0_prot[3:0];
            wb_dbus_size[1:0]  = wb_entry0_size[1:0];
            wb_dbus_fls        = wb_entry_fls[0];
            wb_dbus_lock       = wb_entry_lock[0];
            wb_dbus_lrsc       = wb_entry_lrsc[0];
            wb_addr_pmp_deny   = wb_entry_pmp_deny[0];
            wb_addr_sc_fail    = wb_entry_sc_fail[0];
            wb_dbus_dest_preg[5:0] = wb_entry0_dest_preg[5:0];
            end
    1'b1 :  begin
            wb_dbus_req        = wb_entry_addr_vld[1];
            wb_dbus_addr[31:0] = wb_entry1_addr[31:0];
            wb_dbus_prot[3:0]  = wb_entry1_prot[3:0];
            wb_dbus_size[1:0]  = wb_entry1_size[1:0];
            wb_dbus_fls        = wb_entry_fls[1];
            wb_dbus_lock       = wb_entry_lock[1];
            wb_dbus_lrsc       = wb_entry_lrsc[1];
            wb_addr_pmp_deny   = wb_entry_pmp_deny[1];
            wb_addr_sc_fail    = wb_entry_sc_fail[1];
            wb_dbus_dest_preg[5:0] = wb_entry1_dest_preg[5:0];
            end
    default:begin
            wb_dbus_req        = 1'b0;
            wb_dbus_addr[31:0] = 32'bx;
            wb_dbus_prot[3:0]  = 4'bx;
            wb_dbus_size[1:0]  = 2'bx;
            wb_dbus_fls        = 1'bx;
            wb_dbus_lock       = 1'bx;
            wb_dbus_lrsc       = 1'bx;
            wb_addr_pmp_deny   = 1'bx;
            wb_addr_sc_fail    = 1'bx;
            wb_dbus_dest_preg[5:0] = 6'bx;
            end
  endcase
// &CombEnd; @220
end

assign wb_dbus_split_first = wb_entry_split_first[wb_addr_pop_ptr];

assign wb_dbus_req_vld = wb_dbus_req & !wb_addr_pmp_deny & !wb_addr_sc_fail;




assign wb_data_pop_vld = ncb_wb_cmplt |
                         wb_data_entry_vld & (wb_data_pmp_deny | wb_data_sc_fail);

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_data_pop_ptr <= 1'b0;
  else if (rtu_yy_xx_async_flush)
    wb_data_pop_ptr <= 1'b0;
  else if (wb_data_pop_vld)
    wb_data_pop_ptr <= ~wb_data_pop_ptr;
end

assign wb_data_pop_en[1:0] = {wb_data_pop_ptr, ~wb_data_pop_ptr} & {2{wb_data_pop_vld}};

assign wb_data_entry_vld   = wb_entry_data_vld[wb_data_pop_ptr];
assign wb_data_pmp_deny    = wb_entry_pmp_deny[wb_data_pop_ptr];
assign wb_data_sc_fail     = wb_entry_sc_fail[wb_data_pop_ptr];
assign wb_wdata[DATAW-1:0] = wb_data_pop_ptr ? wb_entry1_wdata[DATAW-1:0] : wb_entry0_wdata[DATAW-1:0];
assign wb_wdata_shift[2:0] = wb_data_pop_ptr ? wb_entry1_shift[2:0]       : wb_entry0_shift[2:0];

// &CombBeg; @251
// &CombEnd; @263
// &CombBeg; @270
always @( wb_wdata[31:0]
       or wb_wdata_shift[1:0])
begin
  case(wb_wdata_shift[1:0])
    2'b00:   wb_dbus_wdata_pre[31:0] = wb_wdata[31:0];
    2'b01:   wb_dbus_wdata_pre[31:0] = {wb_wdata[23:0], wb_wdata[31:24]};
    2'b10:   wb_dbus_wdata_pre[31:0] = {wb_wdata[15:0], wb_wdata[31:16]};
    2'b11:   wb_dbus_wdata_pre[31:0] = {wb_wdata[7:0],  wb_wdata[31:8]};
    default: wb_dbus_wdata_pre[31:0] = wb_wdata[31:0];
  endcase
// &CombEnd; @278
end

assign wb_dbus_wdata[31:0] = wb_dbus_wdata_pre[31:0];





assign ag_lr_inst   =  ag_dc_func[1] & !ag_dc_func[0];
assign ag_sc_inst   =  ag_dc_func[1] &  ag_dc_func[0];
assign ag_lrsc_inst =  ag_lr_inst | ag_sc_inst;

assign ag_prot[3:0] = {ag_dc_ca, ag_dc_buf, cp0_yy_mach_mode, 1'b1};

assign ag_ld_req    = ag_ncb_inst_vld & ag_ld_inst &
                      (ag_lock_inst & wb_empty |
                      !ag_lock_inst & !ld_stall);

assign ag_ld_req_dp = ag_ncb_inst_vld_dp & ag_ld_inst &
                      (ag_lock_inst & wb_empty |
                      !ag_lock_inst & !ld_stall_dp);





assign ag_ld_sel        = ag_ld_req_dp & nc_cur_rdy_dp | ag_dc_warm_up;

assign wb_req_vld       = !ag_ld_sel & wb_dbus_req_vld;

assign nc_req_vld       = ag_ld_sel ? ag_ld_req : wb_req_vld;
assign nc_req_vld_dp    = ag_ld_sel | wb_req_vld;
assign nc_addr[31:0]    = ag_ld_sel ? ag_ncb_addr[31:0]   : wb_dbus_addr[31:0];
assign nc_size[1:0]     = ag_ld_sel ? ag_dc_size[1:0]     : wb_dbus_size[1:0];
assign nc_ori_size[1:0] = ag_ld_sel ? ag_dc_ori_size[1:0] : wb_dbus_size[1:0];
assign nc_fls           = ag_ld_sel ? ag_dc_fls           : wb_dbus_fls;
assign nc_prot[3:0]     = ag_ld_sel ? ag_prot[3:0]        : wb_dbus_prot[3:0];
assign nc_lock          = ag_ld_sel ? ag_lock_inst        : wb_dbus_lock;
assign nc_lrsc          = ag_ld_sel ? ag_lrsc_inst        : wb_dbus_lrsc;
assign nc_pmp_expt      = ag_ld_sel & ag_dc_pmp_expt;
assign nc_ld            = ag_ld_sel;
assign nc_st            =!ag_ld_sel;
assign nc_split         = ag_ld_sel & ag_dc_split;
assign nc_split_last    = ag_ld_sel & ag_dc_split_last;
assign nc_split_first   = ag_ld_sel ? ag_dc_split_first : wb_dbus_split_first;

assign nc_sign_ext       = ag_ld_sel & ag_dc_sign_ext;
assign nc_dest_reg[5:0]  = ag_ld_sel ? ag_dc_dest_reg[5:0] : wb_dbus_dest_preg[5:0];
assign nc_bytes_vld[3:0] = {4{ag_ld_sel}} & ag_dc_bytes_vld[3:0];

assign ncb_wb_grant    = nc_cur_rdy & wb_req_vld;
assign ncb_wb_cmplt    = ncb_st_inst & ncb_cmplt;




parameter NC_REQ = 2'b00;
parameter NC_WFG = 2'b01;
parameter NC_WFC = 2'b10;
parameter NC_ERR = 2'b11;

always@(posedge ncb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    nc_cur_state[1:0] <= NC_REQ;
  else if (rtu_yy_xx_async_flush)
    nc_cur_state[1:0] <= NC_REQ;
  else
    nc_cur_state[1:0] <= nc_next_state[1:0];
end

// &CombBeg; @350
always @( nc_req_vld
       or data_last
       or dahbif_ncb_cmplt
       or dahbif_ncb_acc_err
       or nc_cur_state
       or dahbif_ncb_grant)
begin
  case(nc_cur_state)
    NC_REQ: begin
      if (nc_req_vld)
        nc_next_state = dahbif_ncb_grant ? NC_WFC : NC_WFG;
      else
        nc_next_state = NC_REQ;
    end
    NC_WFG: begin
      if (dahbif_ncb_grant)
        nc_next_state = NC_WFC;
      else
        nc_next_state = NC_WFG;
    end
    NC_WFC: begin
      if (dahbif_ncb_acc_err)
        nc_next_state = NC_ERR;
      else begin
        if (dahbif_ncb_cmplt & data_last & nc_req_vld)
          nc_next_state = dahbif_ncb_grant ? NC_WFC : NC_WFG;
        else if (dahbif_ncb_cmplt & data_last)
          nc_next_state = NC_REQ;
        else
          nc_next_state = NC_WFC;
      end
    end
    NC_ERR: begin
      nc_next_state = NC_REQ;
    end
    default: nc_next_state = NC_REQ;
  endcase
// &CombEnd; @381
end

assign ncb_cmplt_norm = nc_cur_wfc &
                        dahbif_ncb_cmplt & data_last &
                       !dahbif_ncb_acc_err;

assign ncb_cmplt     = ncb_cmplt_norm | nc_cur_err;

assign nc_cur_rdy    = ncb_idle | ncb_cmplt_norm;
assign nc_cur_rdy_dp = ncb_idle | nc_cur_wfc & data_last & req_done;

assign nc_cur_wfg  = nc_cur_state == NC_WFG;
assign nc_cur_wfc  = nc_cur_state == NC_WFC;
assign nc_cur_err  = nc_cur_state == NC_ERR;
assign ncb_idle    = nc_cur_state == NC_REQ;
assign ncb_vld     = !ncb_idle;

always@(posedge ncb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    data_last <= 1'b0;
  else if (ncb_dahbif_req & dahbif_ncb_grant)
    data_last <= !nc_burst;
  else if (dahbif_ncb_cmplt)
    data_last <= 1'b1;
end

always@(posedge ncb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_cnt <= 1'b0;
  else if (ncb_dahbif_req)
    req_cnt <= dahbif_ncb_grant ? 1'b1 : 1'b0;
  else if (!ncb_idle & dahbif_ncb_grant_2 & ncb_burst)
    req_cnt <= ~req_cnt;
end

assign req_done = ~ncb_burst | ~req_cnt;







assign ncb_create_en      = nc_cur_rdy & nc_req_vld_dp;
assign ncb_create_en_gate = nc_cur_rdy_dp & nc_req_vld_dp;

always@(posedge ncb_dp_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    ncb_addr[31:0] <= 32'b0;
  else if (ncb_create_en)
    ncb_addr[31:0] <= nc_addr[31:0];
end

always@(posedge ncb_dp_clk)
begin
  if (ncb_create_en | ag_dc_warm_up) begin
    ncb_size[1:0]     <= nc_size[1:0];
    ncb_ori_size[1:0] <= nc_ori_size[1:0];
    ncb_fls           <= nc_fls;
    ncb_prot[3:0]     <= nc_prot[3:0];
    ncb_lock          <= nc_lock;
    ncb_lrsc          <= nc_lrsc;
    ncb_ld_inst       <= nc_ld;
    ncb_pmp_expt      <= nc_pmp_expt;
    ncb_split         <= nc_split;
    ncb_split_first   <= nc_split_first;
  end
end

assign ncb_ld_create_en      = nc_cur_rdy &
                              (ag_ld_sel | wb_req_vld & wb_dbus_lrsc);
assign ncb_ld_create_en_gate = nc_cur_rdy_dp &
                              (ag_ld_sel | wb_req_vld & wb_dbus_lrsc);

always@(posedge ncb_ld_dp_clk)
begin
  if (ncb_ld_create_en | ag_dc_warm_up) begin
    ncb_sign_ext      <= nc_sign_ext;
    ncb_dest_reg[5:0] <= nc_dest_reg[5:0];
    ncb_bytes_vld[3:0]<= nc_bytes_vld[3:0];
    ncb_split_last    <= nc_split_last;
  end
end

// &Force("output", "ncb_dahbif_size"); @468
assign nc_burst = ncb_dahbif_size[1:0] == 2'b11;
assign ncb_burst = ncb_size[1:0] == 2'b11;

always@(posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    ncb_warm_up <= 1'b0;
  else
    ncb_warm_up <= ag_dc_warm_up;
end

assign ncb_st_inst   = !ncb_ld_inst;
assign ncb_sc_inst   =  ncb_st_inst & ncb_lrsc;

assign ncb_xx_warm_up = ncb_warm_up;




// &Force("output", "ncb_dahbif_req"); @488

assign ncb_dahbif_req_dp      = nc_cur_wfg | nc_cur_rdy_dp & nc_req_vld_dp;
assign ncb_dahbif_req         = nc_cur_wfg | nc_cur_rdy_dp & nc_req_vld;
assign ncb_dahbif_write       = nc_cur_rdy_dp ? nc_st         : ncb_st_inst;
assign ncb_dahbif_prot[3:0]   = nc_cur_rdy_dp ? nc_prot[3:0]  : ncb_prot[3:0];
assign ncb_dahbif_size[1:0]   = nc_cur_rdy_dp ? nc_size[1:0]  : ncb_size[1:0];
assign ncb_dahbif_lock        = nc_cur_rdy_dp ? nc_lock       : ncb_lock;
assign ncb_dahbif_lrsc        = nc_cur_rdy_dp ? nc_lrsc       : ncb_lrsc;
assign ncb_dahbif_acc_deny    = nc_cur_rdy_dp ? nc_pmp_expt   : ncb_pmp_expt;
assign ncb_dahbif_wdata[31:0] = wb_dbus_wdata[31:0];


assign ncb_dahbif_ncb_wb_sel        = !ag_ld_sel | !nc_cur_rdy_dp;
assign ncb_dahbif_ncb_wb_addr[31:0] = nc_cur_rdy_dp ? wb_dbus_addr : ncb_addr[31:0];
assign ncb_dahbif_uc_ld_addr[31:0]  = ag_ncb_addr[31:0];



assign lsu_biu_amo_pmp_deny = !ncb_idle & ncb_lock & !ncb_lrsc & ncb_pmp_expt;




// &Instance("gated_clk_cell", "x_pa_lsu_ncb_rdata_gated_clk"); @514
// &Connect(.clk_in      (forever_cpuclk), @515
//          .external_en (1'b0), @516
//          .global_en   (1'b1), @517
//          .module_en   (1'b0), @518
//          .local_en    (ncb_rdata_clk_en), @519
//          .clk_out     (ncb_rdata_clk)); @520
assign ncb_fld        = 1'b0;
assign ld_data[31:0]  = dahbif_ncb_data[31:0];

assign wb_sc_req      = |(wb_entry_vld[1:0] & wb_entry_lrsc[1:0]);
assign wb_sc_fail_vld = wb_data_entry_vld & wb_data_sc_fail & ncb_idle & !wb_data_pmp_deny;

assign sc_data[DATAW-1:0]      = wb_sc_fail_vld
                               ? {{(DATAW-1){1'b0}},1'b1}
                               : {DATAW{1'b0}};

assign ld_sc_pass_data_vld      = (ncb_ld_inst | ncb_sc_inst) &
                                  !ncb_pmp_expt & ncb_cmplt;
assign ld_sc_pass_data_vld_gate = (ncb_ld_inst | ncb_sc_inst) &
                                  !ncb_pmp_expt & (nc_cur_wfc | nc_cur_err);

assign lsu_ex2_data_vld        = ld_sc_pass_data_vld | wb_sc_fail_vld;
assign lsu_ex2_data_vld_gate   = ld_sc_pass_data_vld_gate | wb_sc_fail_vld;

assign lsu_ex2_dest_reg[5:0]   = (wb_sc_req & ncb_idle) ? wb_dbus_dest_preg[5:0] : ncb_dest_reg[5:0];
assign lsu_ex2_fls             = (wb_sc_req & ncb_idle) ? wb_dbus_fls : ncb_fls;
assign lsu_ex2_fld             = (wb_sc_req & ncb_idle) ? 1'b0 : ncb_fld;
assign lsu_ex2_split           = (wb_sc_req & ncb_idle) ? 1'b0 : ncb_split;
assign lsu_ex2_split_last      = (wb_sc_req & ncb_idle) ? 1'b0 : ncb_split_last;
assign lsu_ex2_bytes_vld[3:0]  = (wb_sc_req & ncb_idle) ? 4'b1111 : ncb_bytes_vld[3:0];
assign lsu_ex2_sign_ext        = (wb_sc_req & ncb_idle) ? 1'b0 : ncb_sign_ext;
assign lsu_ex2_addr_2          = (wb_sc_req & ncb_idle) ? wb_dbus_addr[2] : ncb_addr[2];
assign lsu_ex2_lock            = ncb_lock;
assign lsu_ex2_size[1:0]       = (wb_sc_req & ncb_idle) ? 2'b10 : ncb_ori_size[1:0];
// &Force("nonport", "ncb_ori_size"); @564

assign lsu_mb_ex2_uc_data_vld           = lsu_ex2_data_vld;
assign lsu_mb_ex2_uc_data_vld_gate      = lsu_ex2_data_vld_gate;
assign lsu_mb_ex2_uc_data[DATAW-1:0]    = wb_sc_req ? sc_data[DATAW-1:0] : ld_data[DATAW-1:0];



assign lsu_mb_ex2_uc_dest_reg[5:0]      = lsu_ex2_dest_reg[5:0];
assign lsu_mb_ex2_uc_fls                = lsu_ex2_fls;
assign lsu_mb_ex2_uc_fld                = lsu_ex2_fld;
assign lsu_mb_ex2_uc_split              = lsu_ex2_split;
assign lsu_mb_ex2_uc_split_last         = lsu_ex2_split_last;
assign lsu_mb_ex2_uc_bytes_vld[3:0]     = lsu_ex2_bytes_vld[3:0];
assign lsu_mb_ex2_uc_sign_ext           = lsu_ex2_sign_ext;
assign lsu_mb_ex2_uc_size[1:0]          = lsu_ex2_size[1:0];
assign lsu_mb_ex2_uc_addr_2             = lsu_ex2_addr_2;
assign lsu_mb_ex2_uc_lock               = lsu_ex2_lock;
assign lsu_xx_ex2_uc_flush              = wb_dbus_req & wb_addr_pmp_deny;





assign ncb_ag_async_expt_vld    = dahbif_ncb_acc_err & ncb_split_first;
assign ncb_ag_async_mtval[31:0] = ncb_addr[31:0];
assign ncb_ag_async_ld_inst     = ncb_ld_inst & !ncb_lock;




assign lsu_mb_ex2_uc_stall = ncb_ld_inst &
                               (nc_cur_wfg |
                                nc_cur_wfc & (!data_last |
                                              !dahbif_ncb_cmplt |
                                               dahbif_ncb_acc_err));

assign lsu_mb_ex2_uc_vld = ncb_ld_inst &
                           (nc_cur_wfg | nc_cur_wfc);




assign ncb_clk_en = ag_ncb_inst_vld_dp | ncb_vld | (|wb_entry_vld[1:0]);
// &Instance("gated_clk_cell", "x_pa_lsu_ncb_gated_clk"); @620
gated_clk_cell  x_pa_lsu_ncb_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ncb_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ncb_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @621
//          .external_en (1'b0), @622
//          .global_en   (1'b1), @623
//          .module_en   (1'b0), @624
//          .local_en    (ncb_clk_en), @625
//          .clk_out     (ncb_clk)); @626

assign ncb_dp_clk_en = ncb_create_en_gate | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_ncb_dp_gated_clk"); @629
gated_clk_cell  x_pa_lsu_ncb_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ncb_dp_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ncb_dp_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @630
//          .external_en (1'b0), @631
//          .global_en   (1'b1), @632
//          .module_en   (1'b0), @633
//          .local_en    (ncb_dp_clk_en), @634
//          .clk_out     (ncb_dp_clk)); @635

assign ncb_ld_dp_clk_en = ncb_ld_create_en_gate | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_ncb_ld_dp_gated_clk"); @638
gated_clk_cell  x_pa_lsu_ncb_ld_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ncb_ld_dp_clk       ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ncb_ld_dp_clk_en    ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @639
//          .external_en (1'b0), @640
//          .global_en   (1'b1), @641
//          .module_en   (1'b0), @642
//          .local_en    (ncb_ld_dp_clk_en), @643
//          .clk_out     (ncb_ld_dp_clk)); @644

assign wb_clk_en = wb_create_vld_dp | (|wb_entry_vld[1:0]);
// &Instance("gated_clk_cell", "x_pa_lsu_wb_ctrl_gated_clk"); @647
gated_clk_cell  x_pa_lsu_wb_ctrl_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (wb_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (wb_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @648
//          .external_en (1'b0), @649
//          .global_en   (1'b1), @650
//          .module_en   (1'b0), @651
//          .local_en    (wb_clk_en), @652
//          .clk_out     (wb_clk)); @653

// &ConnRule(s/_x$/[0]/); @655
// &ConnRule(s/entryx/entry0/); @656
// &Instance("pa_lsu_wb_entry","x_pa_lsu_wb_entry_0"); @657
pa_lsu_wb_entry  x_pa_lsu_wb_entry_0 (
  .ag_dc_warm_up           (ag_dc_warm_up          ),
  .ag_ld_inst              (ag_ld_inst             ),
  .ag_ncb_inst_vld_dp      (ag_ncb_inst_vld_dp     ),
  .cp0_yy_mach_mode        (cp0_yy_mach_mode       ),
  .cpurst_b                (cpurst_b               ),
  .forever_cpuclk          (forever_cpuclk         ),
  .ld_hit_wb_f_x           (ld_hit_wb_f[0]         ),
  .ld_hit_wb_x             (ld_hit_wb[0]           ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   ),
  .rtu_lsu_wb_fwd_data     (rtu_lsu_wb_fwd_data    ),
  .rtu_lsu_wb_fwd_fls      (rtu_lsu_wb_fwd_fls     ),
  .rtu_lsu_wb_fwd_reg      (rtu_lsu_wb_fwd_reg     ),
  .rtu_lsu_wb_fwd_vld      (rtu_lsu_wb_fwd_vld     ),
  .rtu_yy_xx_async_flush   (rtu_yy_xx_async_flush  ),
  .wb_addr_pop_en_x        (wb_addr_pop_en[0]      ),
  .wb_clk                  (wb_clk                 ),
  .wb_create_addr          (wb_create_addr         ),
  .wb_create_buf           (wb_create_buf          ),
  .wb_create_bytes_vld     (wb_create_bytes_vld    ),
  .wb_create_ca            (wb_create_ca           ),
  .wb_create_data          (wb_create_data         ),
  .wb_create_dest_preg     (wb_create_dest_preg    ),
  .wb_create_en_dp_x       (wb_create_en_dp[0]     ),
  .wb_create_en_x          (wb_create_en[0]        ),
  .wb_create_fls           (wb_create_fls          ),
  .wb_create_lock          (wb_create_lock         ),
  .wb_create_pmp_deny      (wb_create_pmp_deny     ),
  .wb_create_sc_fail       (wb_create_sc_fail      ),
  .wb_create_sc_inst       (wb_create_sc_inst      ),
  .wb_create_shift         (wb_create_shift        ),
  .wb_create_size          (wb_create_size         ),
  .wb_create_so            (wb_create_so           ),
  .wb_create_split_first   (wb_create_split_first  ),
  .wb_create_src1_depd     (wb_create_src1_depd    ),
  .wb_create_src1_reg      (wb_create_src1_reg     ),
  .wb_data_pop_en_x        (wb_data_pop_en[0]      ),
  .wb_entry_addr_vld_x     (wb_entry_addr_vld[0]   ),
  .wb_entry_data_vld_x     (wb_entry_data_vld[0]   ),
  .wb_entry_fls_x          (wb_entry_fls[0]        ),
  .wb_entry_lock_x         (wb_entry_lock[0]       ),
  .wb_entry_lrsc_x         (wb_entry_lrsc[0]       ),
  .wb_entry_pmp_deny_x     (wb_entry_pmp_deny[0]   ),
  .wb_entry_sc_fail_x      (wb_entry_sc_fail[0]    ),
  .wb_entry_split_first_x  (wb_entry_split_first[0]),
  .wb_entry_vld_x          (wb_entry_vld[0]        ),
  .wb_entryx_addr          (wb_entry0_addr         ),
  .wb_entryx_dest_preg     (wb_entry0_dest_preg    ),
  .wb_entryx_prot          (wb_entry0_prot         ),
  .wb_entryx_shift         (wb_entry0_shift        ),
  .wb_entryx_size          (wb_entry0_size         ),
  .wb_entryx_wdata         (wb_entry0_wdata        ),
  .wb_so_req_x             (wb_so_req[0]           )
);


// &ConnRule(s/_x$/[1]/); @659
// &ConnRule(s/entryx/entry1/); @660
// &Instance("pa_lsu_wb_entry","x_pa_lsu_wb_entry_1"); @661
pa_lsu_wb_entry  x_pa_lsu_wb_entry_1 (
  .ag_dc_warm_up           (ag_dc_warm_up          ),
  .ag_ld_inst              (ag_ld_inst             ),
  .ag_ncb_inst_vld_dp      (ag_ncb_inst_vld_dp     ),
  .cp0_yy_mach_mode        (cp0_yy_mach_mode       ),
  .cpurst_b                (cpurst_b               ),
  .forever_cpuclk          (forever_cpuclk         ),
  .ld_hit_wb_f_x           (ld_hit_wb_f[1]         ),
  .ld_hit_wb_x             (ld_hit_wb[1]           ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   ),
  .rtu_lsu_wb_fwd_data     (rtu_lsu_wb_fwd_data    ),
  .rtu_lsu_wb_fwd_fls      (rtu_lsu_wb_fwd_fls     ),
  .rtu_lsu_wb_fwd_reg      (rtu_lsu_wb_fwd_reg     ),
  .rtu_lsu_wb_fwd_vld      (rtu_lsu_wb_fwd_vld     ),
  .rtu_yy_xx_async_flush   (rtu_yy_xx_async_flush  ),
  .wb_addr_pop_en_x        (wb_addr_pop_en[1]      ),
  .wb_clk                  (wb_clk                 ),
  .wb_create_addr          (wb_create_addr         ),
  .wb_create_buf           (wb_create_buf          ),
  .wb_create_bytes_vld     (wb_create_bytes_vld    ),
  .wb_create_ca            (wb_create_ca           ),
  .wb_create_data          (wb_create_data         ),
  .wb_create_dest_preg     (wb_create_dest_preg    ),
  .wb_create_en_dp_x       (wb_create_en_dp[1]     ),
  .wb_create_en_x          (wb_create_en[1]        ),
  .wb_create_fls           (wb_create_fls          ),
  .wb_create_lock          (wb_create_lock         ),
  .wb_create_pmp_deny      (wb_create_pmp_deny     ),
  .wb_create_sc_fail       (wb_create_sc_fail      ),
  .wb_create_sc_inst       (wb_create_sc_inst      ),
  .wb_create_shift         (wb_create_shift        ),
  .wb_create_size          (wb_create_size         ),
  .wb_create_so            (wb_create_so           ),
  .wb_create_split_first   (wb_create_split_first  ),
  .wb_create_src1_depd     (wb_create_src1_depd    ),
  .wb_create_src1_reg      (wb_create_src1_reg     ),
  .wb_data_pop_en_x        (wb_data_pop_en[1]      ),
  .wb_entry_addr_vld_x     (wb_entry_addr_vld[1]   ),
  .wb_entry_data_vld_x     (wb_entry_data_vld[1]   ),
  .wb_entry_fls_x          (wb_entry_fls[1]        ),
  .wb_entry_lock_x         (wb_entry_lock[1]       ),
  .wb_entry_lrsc_x         (wb_entry_lrsc[1]       ),
  .wb_entry_pmp_deny_x     (wb_entry_pmp_deny[1]   ),
  .wb_entry_sc_fail_x      (wb_entry_sc_fail[1]    ),
  .wb_entry_split_first_x  (wb_entry_split_first[1]),
  .wb_entry_vld_x          (wb_entry_vld[1]        ),
  .wb_entryx_addr          (wb_entry1_addr         ),
  .wb_entryx_dest_preg     (wb_entry1_dest_preg    ),
  .wb_entryx_prot          (wb_entry1_prot         ),
  .wb_entryx_shift         (wb_entry1_shift        ),
  .wb_entryx_size          (wb_entry1_size         ),
  .wb_entryx_wdata         (wb_entry1_wdata        ),
  .wb_so_req_x             (wb_so_req[1]           )
);



// &ModuleEnd; @668
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_rdl(
  arb_rdl_data_grant,
  cpurst_b,
  dc_rdl_fifo,
  dc_rdl_way0_data,
  dc_rdl_way0_dirty,
  dc_rdl_way0_tag,
  dc_rdl_way0_vld,
  dc_rdl_way1_data,
  dc_rdl_way1_dirty,
  dc_rdl_way1_tag,
  dc_rdl_way1_vld,
  forever_cpuclk,
  lfb_rdl_index,
  lfb_rdl_start,
  lfb_rdl_start_gate,
  lfb_rdl_warm_up,
  pad_yy_gate_clk_en_b,
  rdl_arb_data_bank,
  rdl_arb_data_din,
  rdl_arb_data_idx,
  rdl_arb_data_req,
  rdl_arb_data_way,
  rdl_arb_data_wen,
  rdl_arb_dcache_sel,
  rdl_arb_dirty_din,
  rdl_arb_dirty_idx,
  rdl_arb_dirty_req,
  rdl_arb_dirty_wen,
  rdl_arb_tag_din,
  rdl_arb_tag_idx,
  rdl_arb_tag_req,
  rdl_arb_tag_wen,
  rdl_lfb_done,
  rdl_lfb_fifo,
  rdl_lfb_fifo_save,
  rdl_lfb_grant,
  rdl_stb_cmplt_id,
  rdl_stb_dca_cmplt,
  rdl_stb_dca_grant,
  rdl_vb_addr,
  rdl_vb_create_en,
  rdl_vb_data,
  rdl_vb_data_cnt,
  rdl_vb_data_create,
  rdl_vb_line_dirty,
  rdl_vb_warm_up,
  rtu_yy_xx_async_flush,
  stb_rdl_addr,
  stb_rdl_dca_type,
  stb_rdl_dirty,
  stb_rdl_id,
  stb_rdl_start,
  stb_rdl_way,
  vb_rdl_grant
);

// &Ports; @21
input           arb_rdl_data_grant;
input           cpurst_b;
input           dc_rdl_fifo;
input   [63:0]  dc_rdl_way0_data;
input           dc_rdl_way0_dirty;
input   [21:0]  dc_rdl_way0_tag;
input           dc_rdl_way0_vld;
input   [63:0]  dc_rdl_way1_data;
input           dc_rdl_way1_dirty;
input   [21:0]  dc_rdl_way1_tag;
input           dc_rdl_way1_vld;
input           forever_cpuclk;
input   [9 :0]  lfb_rdl_index;
input           lfb_rdl_start;
input           lfb_rdl_start_gate;
input           lfb_rdl_warm_up;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input   [26:0]  stb_rdl_addr;
input   [1 :0]  stb_rdl_dca_type;
input           stb_rdl_dirty;
input   [1 :0]  stb_rdl_id;
input           stb_rdl_start;
input           stb_rdl_way;
input           vb_rdl_grant;
output  [1 :0]  rdl_arb_data_bank;
output  [63:0]  rdl_arb_data_din;
output  [11:0]  rdl_arb_data_idx;
output          rdl_arb_data_req;
output  [1 :0]  rdl_arb_data_way;
output  [3 :0]  rdl_arb_data_wen;
output          rdl_arb_dcache_sel;
output  [2 :0]  rdl_arb_dirty_din;
output  [9 :0]  rdl_arb_dirty_idx;
output          rdl_arb_dirty_req;
output  [2 :0]  rdl_arb_dirty_wen;
output  [22:0]  rdl_arb_tag_din;
output  [9 :0]  rdl_arb_tag_idx;
output          rdl_arb_tag_req;
output  [1 :0]  rdl_arb_tag_wen;
output          rdl_lfb_done;
output          rdl_lfb_fifo;
output          rdl_lfb_fifo_save;
output          rdl_lfb_grant;
output  [1 :0]  rdl_stb_cmplt_id;
output          rdl_stb_dca_cmplt;
output          rdl_stb_dca_grant;
output  [26:0]  rdl_vb_addr;
output          rdl_vb_create_en;
output  [63:0]  rdl_vb_data;
output  [1 :0]  rdl_vb_data_cnt;
output          rdl_vb_data_create;
output          rdl_vb_line_dirty;
output          rdl_vb_warm_up;

// &Regs; @22
reg     [1 :0]  dca_id;
reg             dca_sel;
reg     [1 :0]  dca_type;
reg     [1 :0]  rdl_cnt;
reg     [1 :0]  rdl_cnt_f;
reg     [2 :0]  rdl_cur_state;
reg             rdl_data_vld;
reg     [2 :0]  rdl_next_state;
reg             replace_dirty;
reg             replace_fifo;
reg     [9 :0]  replace_index;
reg     [21:0]  replace_tag;
reg             replace_vld;

// &Wires; @23
wire            arb_rdl_data_grant;
wire            cpurst_b;
wire            data_rd_done;
wire            dc_rdl_fifo;
wire    [63:0]  dc_rdl_way0_data;
wire            dc_rdl_way0_dirty;
wire    [21:0]  dc_rdl_way0_tag;
wire            dc_rdl_way0_vld;
wire    [63:0]  dc_rdl_way1_data;
wire            dc_rdl_way1_dirty;
wire    [21:0]  dc_rdl_way1_tag;
wire            dc_rdl_way1_vld;
wire            dca_cln;
wire            dca_inv;
wire            dirty_clr;
wire            forever_cpuclk;
wire    [9 :0]  lfb_rdl_index;
wire            lfb_rdl_start;
wire            lfb_rdl_start_gate;
wire            lfb_rdl_warm_up;
wire            lfb_tag_wen;
wire    [63:0]  line_data;
wire            line_dirty;
wire    [21:0]  line_tag;
wire            line_vld;
wire            pad_yy_gate_clk_en_b;
wire            rdl_addr_clk;
wire            rdl_addr_clk_en;
wire    [1 :0]  rdl_arb_data_bank;
wire    [63:0]  rdl_arb_data_din;
wire    [11:0]  rdl_arb_data_idx;
wire            rdl_arb_data_req;
wire    [1 :0]  rdl_arb_data_way;
wire    [3 :0]  rdl_arb_data_wen;
wire            rdl_arb_dcache_sel;
wire    [2 :0]  rdl_arb_dirty_din;
wire    [9 :0]  rdl_arb_dirty_idx;
wire            rdl_arb_dirty_req;
wire    [2 :0]  rdl_arb_dirty_wen;
wire    [22:0]  rdl_arb_tag_din;
wire    [9 :0]  rdl_arb_tag_idx;
wire            rdl_arb_tag_req;
wire    [1 :0]  rdl_arb_tag_wen;
wire            rdl_cnt_last;
wire            rdl_cur_check;
wire            rdl_cur_data;
wire            rdl_cur_idle;
wire            rdl_fsm_clk;
wire            rdl_fsm_clk_en;
wire            rdl_lfb_done;
wire            rdl_lfb_fifo;
wire            rdl_lfb_fifo_save;
wire            rdl_lfb_grant;
wire            rdl_line_inv;
wire            rdl_line_rd;
wire            rdl_replace_clk;
wire            rdl_replace_clk_en;
wire    [1 :0]  rdl_stb_cmplt_id;
wire            rdl_stb_dca_cmplt;
wire            rdl_stb_dca_grant;
wire    [26:0]  rdl_vb_addr;
wire            rdl_vb_create_en;
wire    [63:0]  rdl_vb_data;
wire    [1 :0]  rdl_vb_data_cnt;
wire            rdl_vb_data_create;
wire            rdl_vb_line_dirty;
wire            rdl_vb_warm_up;
wire            rtu_yy_xx_async_flush;
wire    [26:0]  stb_rdl_addr;
wire    [1 :0]  stb_rdl_dca_type;
wire            stb_rdl_dirty;
wire    [1 :0]  stb_rdl_id;
wire            stb_rdl_start;
wire            stb_rdl_way;
wire            tag_inv;
wire            tag_rd;
wire            vb_rdl_grant;


parameter D_DATA_INDEX_LEN = `D_DATA_INDEX_WIDTH;
parameter D_TAG_TAG_LEN    = `D_TAG_TAG_WIDTH;
parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;




parameter RDL_IDLE   = 3'b000;
parameter RDL_CHECK  = 3'b001;
parameter RDL_DATA   = 3'b010;
parameter RDL_LAST   = 3'b011;
parameter RDL_TAG_RD = 3'b100;
parameter RDL_TAG_WT = 3'b101;
parameter RDL_INV    = 3'b110;

always@(posedge rdl_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    rdl_cur_state[2:0] <= RDL_IDLE;
  else if (rtu_yy_xx_async_flush)
    rdl_cur_state[2:0] <= RDL_IDLE;
  else
    rdl_cur_state[2:0] <= rdl_next_state[2:0];
end

// &CombBeg; @50
always @( data_rd_done
       or rdl_cur_state
       or vb_rdl_grant
       or rdl_line_rd
       or lfb_rdl_start
       or rdl_line_inv
       or dca_sel
       or stb_rdl_start)
begin
  case(rdl_cur_state)
    RDL_IDLE: begin
      if (lfb_rdl_start)
        rdl_next_state = RDL_TAG_RD;
      else if (stb_rdl_start)
        rdl_next_state = RDL_CHECK;
      else
        rdl_next_state = RDL_IDLE;
    end
    RDL_TAG_RD: begin
      rdl_next_state = RDL_TAG_WT;
    end
    RDL_TAG_WT: begin
      rdl_next_state = RDL_CHECK;
    end
    RDL_CHECK: begin
      if (rdl_line_rd)
        rdl_next_state = vb_rdl_grant ? RDL_DATA : RDL_CHECK;
      else if (rdl_line_inv)
        rdl_next_state = RDL_INV;
      else
        rdl_next_state = RDL_IDLE;
    end
    RDL_DATA:begin
      if (data_rd_done)
        rdl_next_state = dca_sel ? RDL_INV : RDL_LAST;
      else
        rdl_next_state = RDL_DATA;
    end
    RDL_INV:
      rdl_next_state = RDL_IDLE;
    RDL_LAST:
      rdl_next_state = RDL_IDLE;
    default: rdl_next_state = RDL_IDLE;
  endcase
// &CombEnd; @86
end

assign rdl_cur_idle  = rdl_cur_state == RDL_IDLE;
assign rdl_cur_data  = rdl_cur_state == RDL_DATA;
assign rdl_cur_check = rdl_cur_state == RDL_CHECK;

assign rdl_lfb_grant = !stb_rdl_start & rdl_cur_idle;
assign rdl_lfb_done  = rdl_cur_check & !dca_sel & !replace_vld |
                       rdl_cur_data & !dca_sel & data_rd_done;

assign rdl_stb_dca_grant = rdl_cur_idle;
assign rdl_stb_dca_cmplt = (rdl_cur_state == RDL_INV) |
                           (rdl_cur_state == RDL_CHECK) & dca_sel & !rdl_line_rd & !rdl_line_inv;
assign rdl_stb_cmplt_id[1:0] = dca_id[1:0];

always@(posedge rdl_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    rdl_cnt[1:0]   <= 2'b00;
    rdl_cnt_f[1:0] <= 2'b00;
  end
  else if (rdl_cur_data) begin
    rdl_cnt[1:0]   <= rdl_cnt[1:0] + 2'b01;
    rdl_cnt_f[1:0] <= rdl_cnt[1:0];
  end
end

assign rdl_cnt_last = rdl_cnt[1:0] == 2'b11;
assign data_rd_done = rdl_cnt_last & arb_rdl_data_grant;

always@(posedge rdl_fsm_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    rdl_data_vld <= 1'b0;
  else
    rdl_data_vld <= arb_rdl_data_grant & rdl_cur_data;
end




assign line_vld        = dc_rdl_fifo  ? dc_rdl_way1_vld   : dc_rdl_way0_vld;
assign line_dirty      = dc_rdl_fifo  ? dc_rdl_way1_dirty : dc_rdl_way0_dirty;
assign line_tag[21:0]  = dc_rdl_fifo  ? dc_rdl_way1_tag[21:0]  : dc_rdl_way0_tag[21:0];
assign line_data[63:0] = replace_fifo ? dc_rdl_way1_data[63:0] : dc_rdl_way0_data[63:0];

always@(posedge rdl_addr_clk)
begin
  if (stb_rdl_start & rdl_cur_idle | lfb_rdl_warm_up) begin
    dca_sel            <= 1'b1;
    dca_type[1:0]      <= stb_rdl_dca_type[1:0];
    dca_id[1:0]        <= stb_rdl_id[1:0];
    replace_index[9:0] <= stb_rdl_addr[9:0];
  end
  else if (lfb_rdl_start & rdl_cur_idle) begin
    dca_sel            <= 1'b0;
    dca_type[1:0]      <= 2'b0;
    dca_id[1:0]        <= 2'b0;
    replace_index[9:0] <= lfb_rdl_index[9:0];
  end
end

assign dca_cln = dca_type[1];
assign dca_inv = dca_type[0];

assign lfb_tag_wen   = rdl_cur_state == RDL_TAG_WT;

always@(posedge rdl_replace_clk)
begin
  if (stb_rdl_start & rdl_cur_idle | lfb_rdl_warm_up) begin
    replace_vld       <= 1'b1;
    replace_fifo      <= stb_rdl_way;
    replace_dirty     <= stb_rdl_dirty;
    replace_tag[21:0] <= {{22-D_TAG_TAG_LEN{1'b0}}, stb_rdl_addr[26:D_TAG_INDEX_LEN]};
  end
  else if (lfb_tag_wen) begin
    replace_vld       <= line_vld;
    replace_fifo      <= dc_rdl_fifo;
    replace_dirty     <= line_dirty;
    replace_tag[21:0] <= line_tag[21:0];
  end
end

assign rdl_line_rd = dca_sel & dca_cln & replace_dirty |
                    !dca_sel & replace_vld;

assign rdl_line_inv = dca_sel & dca_inv & replace_vld;

assign rdl_lfb_fifo_save = lfb_tag_wen;
assign rdl_lfb_fifo      = dc_rdl_fifo;




// &Force("output", "rdl_arb_tag_wen"); @180

assign tag_inv   = (rdl_cur_state == RDL_INV) & dca_inv;
assign tag_rd    = rdl_cur_state == RDL_TAG_RD;
assign dirty_clr = (rdl_cur_state == RDL_INV);

assign rdl_arb_tag_req        = tag_rd | tag_inv;
assign rdl_arb_tag_wen[1:0]   = {2{tag_inv}} & {replace_fifo,~replace_fifo};
assign rdl_arb_tag_din[22:0]  = {1'b0,22'b0};
assign rdl_arb_tag_idx[9:0]   = replace_index[9:0];

assign rdl_arb_dirty_req      = tag_rd | dirty_clr;
assign rdl_arb_dirty_wen[2:0] = {1'b0,{2{dirty_clr}} & {replace_fifo,~replace_fifo}};
assign rdl_arb_dirty_din[2:0] = 3'b0;
assign rdl_arb_dirty_idx[9:0] = replace_index[9:0];

assign rdl_arb_data_req       = rdl_cur_data;
assign rdl_arb_data_way[1:0]  = {replace_fifo,~replace_fifo};
assign rdl_arb_data_bank[1:0] = 2'b11;
assign rdl_arb_data_wen[3:0]  = 4'b0;
assign rdl_arb_data_din[63:0] = 64'b0;
assign rdl_arb_data_idx[11:0] = {replace_index[9:0],rdl_cnt[1:0]};

assign rdl_arb_dcache_sel     = rdl_cur_data | tag_inv | tag_rd;





assign rdl_vb_create_en     = rdl_cur_check & rdl_line_rd;
assign rdl_vb_addr[26:0]    = {replace_tag[D_TAG_TAG_LEN-1:0], replace_index[D_TAG_INDEX_LEN-1:0]};
assign rdl_vb_line_dirty    = replace_dirty;
assign rdl_vb_data_create   = rdl_data_vld;
assign rdl_vb_data_cnt[1:0] = rdl_cnt_f[1:0];
assign rdl_vb_data[63:0]    = line_data[63:0];
assign rdl_vb_warm_up       = lfb_rdl_warm_up;

assign rdl_fsm_clk_en = lfb_rdl_start_gate | stb_rdl_start | !(rdl_cur_state == RDL_IDLE);
// &Instance("gated_clk_cell", "x_pa_lsu_rdl_fsm_gated_clk"); @218
gated_clk_cell  x_pa_lsu_rdl_fsm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rdl_fsm_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (rdl_fsm_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @219
//          .external_en (1'b0), @220
//          .global_en   (1'b1), @221
//          .module_en   (1'b0), @222
//          .local_en    (rdl_fsm_clk_en), @223
//          .clk_out     (rdl_fsm_clk)); @224

assign rdl_addr_clk_en = lfb_rdl_start_gate | stb_rdl_start | lfb_rdl_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_rdl_addr_gated_clk"); @227
gated_clk_cell  x_pa_lsu_rdl_addr_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rdl_addr_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (rdl_addr_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @228
//          .external_en (1'b0), @229
//          .global_en   (1'b1), @230
//          .module_en   (1'b0), @231
//          .local_en    (rdl_addr_clk_en), @232
//          .clk_out     (rdl_addr_clk)); @233

assign rdl_replace_clk_en = lfb_tag_wen | stb_rdl_start | lfb_rdl_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_rdl_replace_gated_clk"); @236
gated_clk_cell  x_pa_lsu_rdl_replace_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rdl_replace_clk     ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (rdl_replace_clk_en  ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @237
//          .external_en (1'b0), @238
//          .global_en   (1'b1), @239
//          .module_en   (1'b0), @240
//          .local_en    (rdl_replace_clk_en), @241
//          .clk_out     (rdl_replace_clk)); @242


// &ModuleEnd; @248
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_stb(
  arb_stb_xx_grant,
  cp0_lsu_dcache_wb,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbif_stb_acc_ecc,
  dahbif_stb_cmplt,
  dahbif_stb_grant,
  dahbif_stb_grant_2,
  dc_stb_addr,
  dc_stb_attr,
  dc_stb_bytes_vld,
  dc_stb_cache_hit,
  dc_stb_create_en,
  dc_stb_create_en_gate,
  dc_stb_data,
  dc_stb_dcache_dirty,
  dc_stb_dcache_inst,
  dc_stb_dcache_type,
  dc_stb_dcache_way,
  dc_stb_fls,
  dc_stb_lock_trans,
  dc_stb_sc_inst,
  dc_stb_shift,
  dc_stb_size,
  dc_stb_split_first,
  dc_stb_src1_depd,
  dc_stb_src1_reg,
  dc_stb_wait_lfb,
  dc_stb_warm_up,
  dc_xx_addr,
  dc_xx_bytes_vld,
  forever_cpuclk,
  lfb_stb_done,
  lfb_stb_err,
  lfb_stb_fifo,
  lfb_stb_fifo_update,
  lfb_xx_idle,
  pad_yy_gate_clk_en_b,
  rdl_stb_cmplt_id,
  rdl_stb_dca_cmplt,
  rdl_stb_dca_grant,
  rtu_yy_xx_async_flush,
  stb_arb_data_bank,
  stb_arb_data_din,
  stb_arb_data_idx,
  stb_arb_data_req,
  stb_arb_data_way,
  stb_arb_data_wen,
  stb_arb_dcache_sel,
  stb_arb_dirty_din,
  stb_arb_dirty_idx,
  stb_arb_dirty_req,
  stb_arb_dirty_wen,
  stb_dahbif_addr,
  stb_dahbif_data,
  stb_dahbif_lock,
  stb_dahbif_prot,
  stb_dahbif_req,
  stb_dahbif_sc_inst,
  stb_dahbif_size,
  stb_dc_async_expt,
  stb_dc_busy,
  stb_dc_full,
  stb_dc_hit_addr,
  stb_dc_hit_dca,
  stb_dc_hit_idx,
  stb_dc_ld_data,
  stb_dc_ld_fwd_vld,
  stb_dc_mtval,
  stb_dc_multi_or_part_hit,
  stb_dc_pop_en,
  stb_idle,
  stb_rdl_addr,
  stb_rdl_dca_type,
  stb_rdl_dirty,
  stb_rdl_id,
  stb_rdl_start,
  stb_rdl_way
);

// &Ports; @21
input           arb_stb_xx_grant;
input           cp0_lsu_dcache_wb;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dahbif_stb_acc_ecc;
input           dahbif_stb_cmplt;
input           dahbif_stb_grant;
input           dahbif_stb_grant_2;
input   [31:0]  dc_stb_addr;
input   [1 :0]  dc_stb_attr;
input   [3 :0]  dc_stb_bytes_vld;
input           dc_stb_cache_hit;
input           dc_stb_create_en;
input           dc_stb_create_en_gate;
input   [31:0]  dc_stb_data;
input           dc_stb_dcache_dirty;
input           dc_stb_dcache_inst;
input   [1 :0]  dc_stb_dcache_type;
input           dc_stb_dcache_way;
input           dc_stb_fls;
input           dc_stb_lock_trans;
input           dc_stb_sc_inst;
input   [2 :0]  dc_stb_shift;
input   [1 :0]  dc_stb_size;
input           dc_stb_split_first;
input           dc_stb_src1_depd;
input   [4 :0]  dc_stb_src1_reg;
input           dc_stb_wait_lfb;
input           dc_stb_warm_up;
input   [31:0]  dc_xx_addr;
input   [7 :0]  dc_xx_bytes_vld;
input           forever_cpuclk;
input           lfb_stb_done;
input           lfb_stb_err;
input           lfb_stb_fifo;
input           lfb_stb_fifo_update;
input           lfb_xx_idle;
input           pad_yy_gate_clk_en_b;
input   [1 :0]  rdl_stb_cmplt_id;
input           rdl_stb_dca_cmplt;
input           rdl_stb_dca_grant;
input           rtu_yy_xx_async_flush;
output  [1 :0]  stb_arb_data_bank;
output  [63:0]  stb_arb_data_din;
output  [11:0]  stb_arb_data_idx;
output          stb_arb_data_req;
output  [1 :0]  stb_arb_data_way;
output  [3 :0]  stb_arb_data_wen;
output          stb_arb_dcache_sel;
output  [2 :0]  stb_arb_dirty_din;
output  [9 :0]  stb_arb_dirty_idx;
output          stb_arb_dirty_req;
output  [2 :0]  stb_arb_dirty_wen;
output  [31:0]  stb_dahbif_addr;
output  [31:0]  stb_dahbif_data;
output          stb_dahbif_lock;
output  [3 :0]  stb_dahbif_prot;
output          stb_dahbif_req;
output          stb_dahbif_sc_inst;
output  [1 :0]  stb_dahbif_size;
output          stb_dc_async_expt;
output          stb_dc_busy;
output          stb_dc_full;
output          stb_dc_hit_addr;
output          stb_dc_hit_dca;
output          stb_dc_hit_idx;
output  [31:0]  stb_dc_ld_data;
output          stb_dc_ld_fwd_vld;
output  [31:0]  stb_dc_mtval;
output          stb_dc_multi_or_part_hit;
output          stb_dc_pop_en;
output          stb_idle;
output  [26:0]  stb_rdl_addr;
output  [1 :0]  stb_rdl_dca_type;
output          stb_rdl_dirty;
output  [1 :0]  stb_rdl_id;
output          stb_rdl_start;
output          stb_rdl_way;

// &Regs; @22
reg     [1 :0]  biu_wdata_sel;
reg     [1 :0]  bytes_vld_decode;
reg             data_last;
reg             req_burst_vld;
reg             req_cnt;
reg             stb_create_ptr;
reg     [1 :0]  wb_cur_state;
reg     [1 :0]  wb_next_state;
reg     [1 :0]  wb_req_sel;

// &Wires; @23
wire            arb_stb_xx_grant;
wire    [1 :0]  biu_sel;
wire            cp0_lsu_dcache_wb;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbif_stb_acc_ecc;
wire            dahbif_stb_cmplt;
wire            dahbif_stb_grant;
wire            dahbif_stb_grant_2;
wire    [11:0]  data_index;
wire    [1 :0]  dc_hit_stb_addr;
wire    [1 :0]  dc_hit_stb_dca;
wire    [1 :0]  dc_hit_stb_full;
wire    [1 :0]  dc_hit_stb_index;
wire    [1 :0]  dc_hit_stb_part;
wire    [31:0]  dc_stb_addr;
wire    [1 :0]  dc_stb_attr;
wire    [3 :0]  dc_stb_bytes_vld;
wire            dc_stb_cache_hit;
wire            dc_stb_create_en;
wire            dc_stb_create_en_gate;
wire    [31:0]  dc_stb_data;
wire            dc_stb_dcache_dirty;
wire            dc_stb_dcache_inst;
wire    [1 :0]  dc_stb_dcache_type;
wire            dc_stb_dcache_way;
wire            dc_stb_fls;
wire            dc_stb_lock_trans;
wire            dc_stb_sc_inst;
wire    [2 :0]  dc_stb_shift;
wire    [1 :0]  dc_stb_size;
wire            dc_stb_split_first;
wire            dc_stb_src1_depd;
wire    [4 :0]  dc_stb_src1_reg;
wire            dc_stb_wait_lfb;
wire            dc_stb_warm_up;
wire    [31:0]  dc_xx_addr;
wire    [7 :0]  dc_xx_bytes_vld;
wire    [1 :0]  dca_sel;
wire            forever_cpuclk;
wire            lfb_stb_done;
wire            lfb_stb_err;
wire            lfb_stb_fifo;
wire            lfb_stb_fifo_update;
wire            lfb_xx_idle;
wire            pad_yy_gate_clk_en_b;
wire    [1 :0]  rdl_sel;
wire    [1 :0]  rdl_stb_cmplt_id;
wire            rdl_stb_dca_cmplt;
wire            rdl_stb_dca_grant;
wire            req_done;
wire            rtu_yy_xx_async_flush;
wire    [2 :0]  shift_from_bytes;
wire    [31:0]  stb_arb_data;
wire    [1 :0]  stb_arb_data_bank;
wire    [63:0]  stb_arb_data_din;
wire    [11:0]  stb_arb_data_idx;
wire            stb_arb_data_req;
wire    [1 :0]  stb_arb_data_way;
wire    [3 :0]  stb_arb_data_wen;
wire            stb_arb_dcache_sel;
wire    [2 :0]  stb_arb_dirty_din;
wire    [9 :0]  stb_arb_dirty_idx;
wire            stb_arb_dirty_req;
wire    [2 :0]  stb_arb_dirty_wen;
wire            stb_biu_req_vld;
wire    [1 :0]  stb_biu_sel;
wire            stb_clk;
wire            stb_clk_en;
wire    [31:0]  stb_create_addr;
wire            stb_create_age;
wire    [1 :0]  stb_create_attr;
wire    [3 :0]  stb_create_bytes_vld;
wire    [31:0]  stb_create_data;
wire            stb_create_dca_inst;
wire    [1 :0]  stb_create_dca_type;
wire            stb_create_dirty;
wire    [1 :0]  stb_create_en;
wire    [1 :0]  stb_create_en_gate;
wire            stb_create_fls;
wire            stb_create_lock;
wire            stb_create_sc_inst;
wire    [3 :0]  stb_create_shift;
wire    [2 :0]  stb_create_shift_raw;
wire    [1 :0]  stb_create_size;
wire            stb_create_split_first;
wire            stb_create_src1_depd;
wire    [4 :0]  stb_create_src1_reg;
wire            stb_create_wait_lfb;
wire            stb_create_way;
wire            stb_create_wt_ca;
wire    [31:0]  stb_dahbif_addr;
wire    [31:0]  stb_dahbif_data;
wire            stb_dahbif_lock;
wire    [3 :0]  stb_dahbif_prot;
wire            stb_dahbif_req;
wire            stb_dahbif_sc_inst;
wire    [1 :0]  stb_dahbif_size;
wire            stb_dc_async_expt;
wire            stb_dc_busy;
wire            stb_dc_full;
wire            stb_dc_hit_addr;
wire            stb_dc_hit_dca;
wire            stb_dc_hit_idx;
wire    [31:0]  stb_dc_ld_data;
wire            stb_dc_ld_fwd_vld;
wire    [31:0]  stb_dc_mtval;
wire            stb_dc_multi_or_part_hit;
wire            stb_dc_pop_en;
wire    [1 :0]  stb_dca_done;
wire    [1 :0]  stb_dca_grant;
wire            stb_dca_req;
wire    [31:0]  stb_entry0_addr;
wire    [1 :0]  stb_entry0_bank;
wire    [3 :0]  stb_entry0_bytes_vld;
wire    [31:0]  stb_entry0_data;
wire    [1 :0]  stb_entry0_dca_type;
wire    [3 :0]  stb_entry0_prot;
wire    [1 :0]  stb_entry0_size;
wire    [31:0]  stb_entry1_addr;
wire    [1 :0]  stb_entry1_bank;
wire    [3 :0]  stb_entry1_bytes_vld;
wire    [31:0]  stb_entry1_data;
wire    [1 :0]  stb_entry1_dca_type;
wire    [3 :0]  stb_entry1_prot;
wire    [1 :0]  stb_entry1_size;
wire    [1 :0]  stb_entry_age;
wire    [1 :0]  stb_entry_biu_req;
wire    [1 :0]  stb_entry_burst;
wire    [1 :0]  stb_entry_busy;
wire    [1 :0]  stb_entry_data_vld;
wire    [1 :0]  stb_entry_dcache_req;
wire    [1 :0]  stb_entry_dirty;
wire    [1 :0]  stb_entry_lock;
wire    [1 :0]  stb_entry_pop_vld;
wire    [1 :0]  stb_entry_rdl_req;
wire    [1 :0]  stb_entry_sc_inst;
wire    [1 :0]  stb_entry_split_first;
wire    [1 :0]  stb_entry_vld;
wire    [1 :0]  stb_entry_vld_dp;
wire    [1 :0]  stb_entry_way;
wire            stb_hit_way1;
wire            stb_idle;
wire            stb_pop_vld;
wire    [31:0]  stb_pop_wdata;
wire    [26:0]  stb_rdl_addr;
wire    [1 :0]  stb_rdl_dca_type;
wire            stb_rdl_dirty;
wire    [1 :0]  stb_rdl_id;
wire            stb_rdl_start;
wire            stb_rdl_way;
wire            stb_req_burst;
wire            stb_split_first;
wire    [1 :0]  stb_wbus_cmplt;
wire    [1 :0]  stb_wbus_grant;
wire    [1 :0]  stb_wca_grant;
wire            wb_cur_idle;


parameter STB_ENTRY = 2;
parameter DATAW = `FLEN;

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_create_ptr <= 1'b0;
  else if (dc_stb_create_en)
    stb_create_ptr <= ~stb_create_ptr;
end

assign stb_create_en[1:0] = {stb_create_ptr,~stb_create_ptr} & {2{dc_stb_create_en}};
assign stb_create_en_gate[1:0] = {stb_create_ptr,~stb_create_ptr} & {2{dc_stb_create_en_gate}};

assign stb_create_addr[31:0]     = dc_stb_addr[31:0];
assign stb_create_size[1:0]      = dc_stb_size[1:0];
assign stb_create_data[DATAW-1:0]= dc_stb_data[DATAW-1:0];
assign stb_create_dca_inst       = dc_stb_dcache_inst;
assign stb_create_dca_type[1:0]  = dc_stb_dcache_type[1:0];
assign stb_create_bytes_vld[3:0] = dc_stb_bytes_vld[3:0];
assign stb_create_attr[1:0]      = dc_stb_attr[1:0];
assign stb_create_way            = dc_stb_dcache_way;
assign stb_create_dirty          = dc_stb_dcache_dirty;
assign stb_create_lock           = dc_stb_lock_trans;
assign stb_create_sc_inst        = dc_stb_sc_inst;
assign stb_create_src1_depd      = dc_stb_src1_depd;
assign stb_create_src1_reg[4:0]  = dc_stb_src1_reg[4:0];
assign stb_create_fls            = dc_stb_fls;
assign stb_create_wait_lfb       = dc_stb_wait_lfb;
assign stb_create_wt_ca          = dc_stb_cache_hit;
assign stb_create_age            = |(stb_entry_vld[STB_ENTRY-1:0]);
assign stb_create_split_first    = dc_stb_split_first;

// &CombBeg; @58
always @( dc_stb_bytes_vld[3:0])
begin
  casez(dc_stb_bytes_vld[3:0])
  4'b???1: bytes_vld_decode[1:0] = 2'b00;
  4'b??10: bytes_vld_decode[1:0] = 2'b01;
  4'b?100: bytes_vld_decode[1:0] = 2'b10;
  4'b1000: bytes_vld_decode[1:0] = 2'b11;
  default: bytes_vld_decode[1:0] = 2'b00;
  endcase
// &CombEnd; @66
end

// &Force("bus","dc_stb_shift",2,0); @76
assign shift_from_bytes[2:0] = {1'b0,bytes_vld_decode[1:0]};
assign stb_create_shift_raw[2:0] = {1'b0,shift_from_bytes[1:0]} + (3'b100 - {1'b0,dc_stb_shift[1:0]});
assign stb_create_shift[1:0] = stb_create_shift_raw[1:0];
assign stb_create_shift[3:2] = 2'b0;

assign stb_pop_vld               = |(stb_entry_pop_vld[STB_ENTRY-1:0]);




// &Force("output", "stb_dc_busy"); @88
assign stb_dc_full               = |({stb_create_ptr,~stb_create_ptr} & stb_entry_busy[1:0]);
assign stb_dc_busy               = |(stb_entry_busy[1:0]);
assign stb_idle                  = !stb_dc_busy;

assign stb_dc_multi_or_part_hit = (|(dc_hit_stb_part[STB_ENTRY-1:0])) |
                                  (&(dc_hit_stb_full[STB_ENTRY-1:0])) |
                                  (|(dc_hit_stb_full[STB_ENTRY-1:0] & ~stb_entry_data_vld[STB_ENTRY-1:0]));
assign stb_dc_hit_dca           = |(dc_hit_stb_dca[STB_ENTRY-1:0]);
assign stb_dc_hit_idx           = |(dc_hit_stb_index[STB_ENTRY-1:0]);
assign stb_dc_hit_addr          = |(dc_hit_stb_addr[STB_ENTRY-1:0]);
assign stb_dc_pop_en            = stb_pop_vld;
assign stb_dc_ld_fwd_vld        = |(dc_hit_stb_full[STB_ENTRY-1:0] & stb_entry_data_vld[STB_ENTRY-1:0]);
assign stb_dc_ld_data[DATAW-1:0]= {DATAW{dc_hit_stb_full[0]}} & stb_entry0_data[DATAW-1:0] |
                                  {DATAW{dc_hit_stb_full[1]}} & stb_entry1_data[DATAW-1:0];




assign dca_sel[1] = stb_entry_dcache_req[1] & (!stb_entry_dcache_req[0] | !stb_entry_age[1]);
assign dca_sel[0] = stb_entry_dcache_req[0] & (!stb_entry_dcache_req[1] | !stb_entry_age[0]);

assign stb_dca_req = |stb_entry_dcache_req[STB_ENTRY-1:0];
assign data_index[11:0] = {12{dca_sel[1]}} & stb_entry1_addr[14:3] |
                          {12{dca_sel[0]}} & stb_entry0_addr[14:3];

assign stb_hit_way1 = |(dca_sel[1:0] & stb_entry_way[1:0]);

assign stb_arb_dirty_req      = stb_dca_req;
assign stb_arb_dirty_wen[2:0] = {1'b0, stb_hit_way1, ~stb_hit_way1};
assign stb_arb_dirty_din[2:0] = 3'b111;
assign stb_arb_dirty_idx[9:0] = data_index[11:2];

assign stb_arb_data_req       = stb_dca_req;
assign stb_arb_data_way[1:0]  = {stb_hit_way1, ~stb_hit_way1};
assign stb_arb_data_idx[11:0] = data_index[11:0];
assign stb_arb_data_wen[3:0]  = {4{dca_sel[1]}} & stb_entry1_bytes_vld[3:0] |
                                {4{dca_sel[0]}} & stb_entry0_bytes_vld[3:0];
assign stb_arb_data[DATAW-1:0]= {DATAW{dca_sel[1]}} & stb_entry1_data[DATAW-1:0] |
                                {DATAW{dca_sel[0]}} & stb_entry0_data[DATAW-1:0];
assign stb_arb_data_bank[1:0] = {2{dca_sel[1]}} & stb_entry1_bank[1:0] |
                                {2{dca_sel[0]}} & stb_entry0_bank[1:0];

assign stb_arb_data_din[63:0] = {stb_arb_data[31:0],stb_arb_data[31:0]};
assign stb_arb_dcache_sel = stb_dca_req;

assign stb_wca_grant[1:0] = dca_sel[1:0] & {2{arb_stb_xx_grant}};




parameter WB_IDLE = 2'b00;
parameter WB_WFG  = 2'b01;
parameter WB_WFC  = 2'b10;

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_cur_state[1:0] <= WB_IDLE;
  else if(rtu_yy_xx_async_flush)
    wb_cur_state[1:0] <= WB_IDLE;
  else
    wb_cur_state[1:0] <= wb_next_state[1:0];
end

assign stb_biu_req_vld = |stb_entry_biu_req[1:0];

// &CombBeg; @159
always @( dahbif_stb_grant
       or dahbif_stb_cmplt
       or stb_biu_req_vld
       or dahbif_stb_acc_ecc
       or data_last
       or wb_cur_state)
begin
  case (wb_cur_state)
    WB_IDLE: begin
      if (stb_biu_req_vld)
        wb_next_state = dahbif_stb_grant ? WB_WFC : WB_WFG;
      else
        wb_next_state = WB_IDLE;
    end
    WB_WFG: begin
      if (dahbif_stb_grant)
        wb_next_state = WB_WFC;
      else
        wb_next_state = WB_WFG;
    end
    WB_WFC: begin
      if (dahbif_stb_cmplt & !dahbif_stb_acc_ecc & data_last & stb_biu_req_vld)
        wb_next_state = dahbif_stb_grant ? WB_WFC : WB_WFG;
      else if (dahbif_stb_cmplt & (data_last | dahbif_stb_acc_ecc))
        wb_next_state = WB_IDLE;
      else
        wb_next_state = WB_WFC;
    end
    default: wb_next_state = WB_IDLE;
  endcase
// &CombEnd; @183
end

assign wb_cur_idle    = wb_cur_state == WB_IDLE |
                    wb_cur_state == WB_WFC & data_last & req_done;

assign stb_biu_sel[1] = stb_entry_biu_req[1] & (!stb_entry_biu_req[0] | !stb_entry_age[1]);
assign stb_biu_sel[0] = stb_entry_biu_req[0] & (!stb_entry_biu_req[1] | !stb_entry_age[0]);

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_req_sel[1:0] <= 2'b0;
  else if (wb_cur_idle & stb_biu_req_vld)
    wb_req_sel[1:0] <= stb_biu_sel[1:0];
end

assign biu_sel[1:0] = wb_cur_idle ? stb_biu_sel[1:0] : wb_req_sel[1:0];

assign stb_dahbif_req        = |(biu_sel[1:0] & stb_entry_biu_req[STB_ENTRY-1:0]);
assign stb_dahbif_addr[31:0] = {32{biu_sel[1]}} & stb_entry1_addr[31:0] |
                               {32{biu_sel[0]}} & stb_entry0_addr[31:0];
assign stb_dahbif_size[1:0]  = {2{biu_sel[1]}} & stb_entry1_size[1:0] |
                               {2{biu_sel[0]}} & stb_entry0_size[1:0];
assign stb_dahbif_prot[3:0]  = {4{biu_sel[1]}} & stb_entry1_prot[3:0] |
                               {4{biu_sel[0]}} & stb_entry0_prot[3:0];
assign stb_dahbif_lock       = |(biu_sel[1:0] & stb_entry_lock[1:0]);
assign stb_dahbif_sc_inst    = |(biu_sel[1:0] & stb_entry_sc_inst[1:0]);

// &Force("output", "stb_dahbif_req"); @211



assign stb_req_burst = |(biu_sel[1:0] & stb_entry_burst[1:0]);

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    data_last <= 1'b0;
  else if (dahbif_stb_grant)
    data_last <= !stb_req_burst;
  else if (dahbif_stb_cmplt)
    data_last <= 1'b1;
end

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_cnt <= 1'b0;
  else if (stb_dahbif_req & stb_req_burst)
    req_cnt <= dahbif_stb_grant ? 1'b1 : 1'b0;
  else if (!wb_cur_idle & dahbif_stb_grant_2 & req_burst_vld)
    req_cnt <= ~req_cnt;
end

assign req_done = !req_burst_vld | !req_cnt;

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_burst_vld <= 1'b0;
  else if (dahbif_stb_grant)
    req_burst_vld <= stb_req_burst;
end

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    biu_wdata_sel[1:0] <= 2'b00;
  else if (dahbif_stb_grant)
    biu_wdata_sel[1:0] <= biu_sel[1:0];
end

assign stb_pop_wdata[DATAW-1:0] = {DATAW{biu_wdata_sel[1]}} & stb_entry1_data[DATAW-1:0] |
                                  {DATAW{biu_wdata_sel[0]}} & stb_entry0_data[DATAW-1:0];

assign stb_dahbif_data[31:0] = stb_pop_wdata[31:0];




assign stb_wbus_grant[1:0]   = biu_sel[1:0] & {2{dahbif_stb_grant}};
assign stb_wbus_cmplt[1:0]   = biu_wdata_sel[1:0] & {2{dahbif_stb_cmplt & (data_last | dahbif_stb_acc_ecc)}};

assign stb_dc_async_expt     = dahbif_stb_cmplt & dahbif_stb_acc_ecc & stb_split_first;
assign stb_split_first       = |(biu_wdata_sel[1:0] & stb_entry_split_first[1:0]);
assign stb_dc_mtval[31:0]    = {32{biu_wdata_sel[1]}} & stb_entry1_addr[31:0] |
                               {32{biu_wdata_sel[0]}} & stb_entry0_addr[31:0];




assign rdl_sel[1] = stb_entry_rdl_req[1] & (!stb_entry_rdl_req[0] | !stb_entry_age[1]);
assign rdl_sel[0] = stb_entry_rdl_req[0] & (!stb_entry_rdl_req[1] | !stb_entry_age[0]);

assign stb_rdl_start      = |stb_entry_rdl_req[1:0];
assign stb_rdl_addr[26:0] = {27{rdl_sel[1]}} & stb_entry1_addr[31:5] |
                            {27{rdl_sel[0]}} & stb_entry0_addr[31:5];
assign stb_rdl_dirty      = |(rdl_sel[1:0] & stb_entry_dirty[1:0]);
assign stb_rdl_way        = |(rdl_sel[1:0] & stb_entry_way[1:0]);
assign stb_rdl_id[1:0]    = rdl_sel[1:0];
assign stb_rdl_dca_type[1:0] = {2{rdl_sel[1]}} & stb_entry1_dca_type[1:0] |
                               {2{rdl_sel[0]}} & stb_entry0_dca_type[1:0];

assign stb_dca_grant[1:0] = {2{rdl_stb_dca_grant}} & rdl_sel[1:0];
assign stb_dca_done[1:0]  = {2{rdl_stb_dca_cmplt}} & rdl_stb_cmplt_id[1:0];

// &ConnRule(s/_x$/[0]/); @297
// &ConnRule(s/entryx/entry0/); @298
// &Instance("pa_lsu_stb_entry","x_pa_lsu_stb_entry_0"); @299
pa_lsu_stb_entry  x_pa_lsu_stb_entry_0 (
  .cp0_lsu_dcache_wb        (cp0_lsu_dcache_wb       ),
  .cp0_yy_mach_mode         (cp0_yy_mach_mode        ),
  .cpurst_b                 (cpurst_b                ),
  .dc_hit_stb_addr_x        (dc_hit_stb_addr[0]      ),
  .dc_hit_stb_dca_x         (dc_hit_stb_dca[0]       ),
  .dc_hit_stb_full_x        (dc_hit_stb_full[0]      ),
  .dc_hit_stb_index_x       (dc_hit_stb_index[0]     ),
  .dc_hit_stb_part_x        (dc_hit_stb_part[0]      ),
  .dc_stb_warm_up           (dc_stb_warm_up          ),
  .dc_xx_addr               (dc_xx_addr              ),
  .dc_xx_bytes_vld          (dc_xx_bytes_vld         ),
  .forever_cpuclk           (forever_cpuclk          ),
  .lfb_stb_done             (lfb_stb_done            ),
  .lfb_stb_err              (lfb_stb_err             ),
  .lfb_stb_fifo             (lfb_stb_fifo            ),
  .lfb_stb_fifo_update      (lfb_stb_fifo_update     ),
  .lfb_xx_idle              (lfb_xx_idle             ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .rtu_yy_xx_async_flush    (rtu_yy_xx_async_flush   ),
  .stb_clk                  (stb_clk                 ),
  .stb_create_addr          (stb_create_addr         ),
  .stb_create_age           (stb_create_age          ),
  .stb_create_attr          (stb_create_attr         ),
  .stb_create_bytes_vld     (stb_create_bytes_vld    ),
  .stb_create_data          (stb_create_data         ),
  .stb_create_dca_inst      (stb_create_dca_inst     ),
  .stb_create_dca_type      (stb_create_dca_type     ),
  .stb_create_dirty         (stb_create_dirty        ),
  .stb_create_en_gate_x     (stb_create_en_gate[0]   ),
  .stb_create_en_x          (stb_create_en[0]        ),
  .stb_create_fls           (stb_create_fls          ),
  .stb_create_lock          (stb_create_lock         ),
  .stb_create_sc_inst       (stb_create_sc_inst      ),
  .stb_create_shift         (stb_create_shift        ),
  .stb_create_size          (stb_create_size         ),
  .stb_create_split_first   (stb_create_split_first  ),
  .stb_create_src1_depd     (stb_create_src1_depd    ),
  .stb_create_src1_reg      (stb_create_src1_reg     ),
  .stb_create_wait_lfb      (stb_create_wait_lfb     ),
  .stb_create_way           (stb_create_way          ),
  .stb_create_wt_ca         (stb_create_wt_ca        ),
  .stb_dca_done_x           (stb_dca_done[0]         ),
  .stb_dca_grant_x          (stb_dca_grant[0]        ),
  .stb_entry_age_x          (stb_entry_age[0]        ),
  .stb_entry_biu_req_x      (stb_entry_biu_req[0]    ),
  .stb_entry_burst_x        (stb_entry_burst[0]      ),
  .stb_entry_busy_x         (stb_entry_busy[0]       ),
  .stb_entry_data_vld_x     (stb_entry_data_vld[0]   ),
  .stb_entry_dcache_req_x   (stb_entry_dcache_req[0] ),
  .stb_entry_dirty_x        (stb_entry_dirty[0]      ),
  .stb_entry_lock_x         (stb_entry_lock[0]       ),
  .stb_entry_pop_vld_x      (stb_entry_pop_vld[0]    ),
  .stb_entry_rdl_req_x      (stb_entry_rdl_req[0]    ),
  .stb_entry_sc_inst_x      (stb_entry_sc_inst[0]    ),
  .stb_entry_split_first_x  (stb_entry_split_first[0]),
  .stb_entry_vld_dp_x       (stb_entry_vld_dp[0]     ),
  .stb_entry_vld_x          (stb_entry_vld[0]        ),
  .stb_entry_way_x          (stb_entry_way[0]        ),
  .stb_entryx_addr          (stb_entry0_addr         ),
  .stb_entryx_bank          (stb_entry0_bank         ),
  .stb_entryx_bytes_vld     (stb_entry0_bytes_vld    ),
  .stb_entryx_data          (stb_entry0_data         ),
  .stb_entryx_dca_type      (stb_entry0_dca_type     ),
  .stb_entryx_prot          (stb_entry0_prot         ),
  .stb_entryx_size          (stb_entry0_size         ),
  .stb_pop_vld              (stb_pop_vld             ),
  .stb_wbus_cmplt_x         (stb_wbus_cmplt[0]       ),
  .stb_wbus_grant_x         (stb_wbus_grant[0]       ),
  .stb_wca_grant_x          (stb_wca_grant[0]        )
);


// &ConnRule(s/_x$/[1]/); @301
// &ConnRule(s/entryx/entry1/); @302
// &Instance("pa_lsu_stb_entry","x_pa_lsu_stb_entry_1"); @303
pa_lsu_stb_entry  x_pa_lsu_stb_entry_1 (
  .cp0_lsu_dcache_wb        (cp0_lsu_dcache_wb       ),
  .cp0_yy_mach_mode         (cp0_yy_mach_mode        ),
  .cpurst_b                 (cpurst_b                ),
  .dc_hit_stb_addr_x        (dc_hit_stb_addr[1]      ),
  .dc_hit_stb_dca_x         (dc_hit_stb_dca[1]       ),
  .dc_hit_stb_full_x        (dc_hit_stb_full[1]      ),
  .dc_hit_stb_index_x       (dc_hit_stb_index[1]     ),
  .dc_hit_stb_part_x        (dc_hit_stb_part[1]      ),
  .dc_stb_warm_up           (dc_stb_warm_up          ),
  .dc_xx_addr               (dc_xx_addr              ),
  .dc_xx_bytes_vld          (dc_xx_bytes_vld         ),
  .forever_cpuclk           (forever_cpuclk          ),
  .lfb_stb_done             (lfb_stb_done            ),
  .lfb_stb_err              (lfb_stb_err             ),
  .lfb_stb_fifo             (lfb_stb_fifo            ),
  .lfb_stb_fifo_update      (lfb_stb_fifo_update     ),
  .lfb_xx_idle              (lfb_xx_idle             ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .rtu_yy_xx_async_flush    (rtu_yy_xx_async_flush   ),
  .stb_clk                  (stb_clk                 ),
  .stb_create_addr          (stb_create_addr         ),
  .stb_create_age           (stb_create_age          ),
  .stb_create_attr          (stb_create_attr         ),
  .stb_create_bytes_vld     (stb_create_bytes_vld    ),
  .stb_create_data          (stb_create_data         ),
  .stb_create_dca_inst      (stb_create_dca_inst     ),
  .stb_create_dca_type      (stb_create_dca_type     ),
  .stb_create_dirty         (stb_create_dirty        ),
  .stb_create_en_gate_x     (stb_create_en_gate[1]   ),
  .stb_create_en_x          (stb_create_en[1]        ),
  .stb_create_fls           (stb_create_fls          ),
  .stb_create_lock          (stb_create_lock         ),
  .stb_create_sc_inst       (stb_create_sc_inst      ),
  .stb_create_shift         (stb_create_shift        ),
  .stb_create_size          (stb_create_size         ),
  .stb_create_split_first   (stb_create_split_first  ),
  .stb_create_src1_depd     (stb_create_src1_depd    ),
  .stb_create_src1_reg      (stb_create_src1_reg     ),
  .stb_create_wait_lfb      (stb_create_wait_lfb     ),
  .stb_create_way           (stb_create_way          ),
  .stb_create_wt_ca         (stb_create_wt_ca        ),
  .stb_dca_done_x           (stb_dca_done[1]         ),
  .stb_dca_grant_x          (stb_dca_grant[1]        ),
  .stb_entry_age_x          (stb_entry_age[1]        ),
  .stb_entry_biu_req_x      (stb_entry_biu_req[1]    ),
  .stb_entry_burst_x        (stb_entry_burst[1]      ),
  .stb_entry_busy_x         (stb_entry_busy[1]       ),
  .stb_entry_data_vld_x     (stb_entry_data_vld[1]   ),
  .stb_entry_dcache_req_x   (stb_entry_dcache_req[1] ),
  .stb_entry_dirty_x        (stb_entry_dirty[1]      ),
  .stb_entry_lock_x         (stb_entry_lock[1]       ),
  .stb_entry_pop_vld_x      (stb_entry_pop_vld[1]    ),
  .stb_entry_rdl_req_x      (stb_entry_rdl_req[1]    ),
  .stb_entry_sc_inst_x      (stb_entry_sc_inst[1]    ),
  .stb_entry_split_first_x  (stb_entry_split_first[1]),
  .stb_entry_vld_dp_x       (stb_entry_vld_dp[1]     ),
  .stb_entry_vld_x          (stb_entry_vld[1]        ),
  .stb_entry_way_x          (stb_entry_way[1]        ),
  .stb_entryx_addr          (stb_entry1_addr         ),
  .stb_entryx_bank          (stb_entry1_bank         ),
  .stb_entryx_bytes_vld     (stb_entry1_bytes_vld    ),
  .stb_entryx_data          (stb_entry1_data         ),
  .stb_entryx_dca_type      (stb_entry1_dca_type     ),
  .stb_entryx_prot          (stb_entry1_prot         ),
  .stb_entryx_size          (stb_entry1_size         ),
  .stb_pop_vld              (stb_pop_vld             ),
  .stb_wbus_cmplt_x         (stb_wbus_cmplt[1]       ),
  .stb_wbus_grant_x         (stb_wbus_grant[1]       ),
  .stb_wca_grant_x          (stb_wca_grant[1]        )
);


assign stb_clk_en = dc_stb_create_en_gate | stb_entry_vld_dp[0] | stb_entry_vld_dp[1];

// &Instance("gated_clk_cell", "x_pa_lsu_stb_gated_clk"); @307
gated_clk_cell  x_pa_lsu_stb_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (stb_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (stb_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @308
//          .external_en (1'b0), @309
//          .global_en   (1'b1), @310
//          .module_en   (1'b0), @311
//          .local_en    (stb_clk_en), @312
//          .clk_out     (stb_clk)); @313


// &ModuleEnd; @319
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_stb_entry(
  cp0_lsu_dcache_wb,
  cp0_yy_mach_mode,
  cpurst_b,
  dc_hit_stb_addr_x,
  dc_hit_stb_dca_x,
  dc_hit_stb_full_x,
  dc_hit_stb_index_x,
  dc_hit_stb_part_x,
  dc_stb_warm_up,
  dc_xx_addr,
  dc_xx_bytes_vld,
  forever_cpuclk,
  lfb_stb_done,
  lfb_stb_err,
  lfb_stb_fifo,
  lfb_stb_fifo_update,
  lfb_xx_idle,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_async_flush,
  stb_clk,
  stb_create_addr,
  stb_create_age,
  stb_create_attr,
  stb_create_bytes_vld,
  stb_create_data,
  stb_create_dca_inst,
  stb_create_dca_type,
  stb_create_dirty,
  stb_create_en_gate_x,
  stb_create_en_x,
  stb_create_fls,
  stb_create_lock,
  stb_create_sc_inst,
  stb_create_shift,
  stb_create_size,
  stb_create_split_first,
  stb_create_src1_depd,
  stb_create_src1_reg,
  stb_create_wait_lfb,
  stb_create_way,
  stb_create_wt_ca,
  stb_dca_done_x,
  stb_dca_grant_x,
  stb_entry_age_x,
  stb_entry_biu_req_x,
  stb_entry_burst_x,
  stb_entry_busy_x,
  stb_entry_data_vld_x,
  stb_entry_dcache_req_x,
  stb_entry_dirty_x,
  stb_entry_lock_x,
  stb_entry_pop_vld_x,
  stb_entry_rdl_req_x,
  stb_entry_sc_inst_x,
  stb_entry_split_first_x,
  stb_entry_vld_dp_x,
  stb_entry_vld_x,
  stb_entry_way_x,
  stb_entryx_addr,
  stb_entryx_bank,
  stb_entryx_bytes_vld,
  stb_entryx_data,
  stb_entryx_dca_type,
  stb_entryx_prot,
  stb_entryx_size,
  stb_pop_vld,
  stb_wbus_cmplt_x,
  stb_wbus_grant_x,
  stb_wca_grant_x
);

// &Ports; @21
input           cp0_lsu_dcache_wb;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           dc_stb_warm_up;
input   [31:0]  dc_xx_addr;
input   [7 :0]  dc_xx_bytes_vld;
input           forever_cpuclk;
input           lfb_stb_done;
input           lfb_stb_err;
input           lfb_stb_fifo;
input           lfb_stb_fifo_update;
input           lfb_xx_idle;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_async_flush;
input           stb_clk;
input   [31:0]  stb_create_addr;
input           stb_create_age;
input   [1 :0]  stb_create_attr;
input   [3 :0]  stb_create_bytes_vld;
input   [31:0]  stb_create_data;
input           stb_create_dca_inst;
input   [1 :0]  stb_create_dca_type;
input           stb_create_dirty;
input           stb_create_en_gate_x;
input           stb_create_en_x;
input           stb_create_fls;
input           stb_create_lock;
input           stb_create_sc_inst;
input   [3 :0]  stb_create_shift;
input   [1 :0]  stb_create_size;
input           stb_create_split_first;
input           stb_create_src1_depd;
input   [4 :0]  stb_create_src1_reg;
input           stb_create_wait_lfb;
input           stb_create_way;
input           stb_create_wt_ca;
input           stb_dca_done_x;
input           stb_dca_grant_x;
input           stb_pop_vld;
input           stb_wbus_cmplt_x;
input           stb_wbus_grant_x;
input           stb_wca_grant_x;
output          dc_hit_stb_addr_x;
output          dc_hit_stb_dca_x;
output          dc_hit_stb_full_x;
output          dc_hit_stb_index_x;
output          dc_hit_stb_part_x;
output          stb_entry_age_x;
output          stb_entry_biu_req_x;
output          stb_entry_burst_x;
output          stb_entry_busy_x;
output          stb_entry_data_vld_x;
output          stb_entry_dcache_req_x;
output          stb_entry_dirty_x;
output          stb_entry_lock_x;
output          stb_entry_pop_vld_x;
output          stb_entry_rdl_req_x;
output          stb_entry_sc_inst_x;
output          stb_entry_split_first_x;
output          stb_entry_vld_dp_x;
output          stb_entry_vld_x;
output          stb_entry_way_x;
output  [31:0]  stb_entryx_addr;
output  [1 :0]  stb_entryx_bank;
output  [3 :0]  stb_entryx_bytes_vld;
output  [31:0]  stb_entryx_data;
output  [1 :0]  stb_entryx_dca_type;
output  [3 :0]  stb_entryx_prot;
output  [1 :0]  stb_entryx_size;

// &Regs; @22
reg             stb_age;
reg     [3 :0]  stb_cur_state;
reg     [31:0]  stb_data_align;
reg     [31:0]  stb_entry_addr;
reg     [1 :0]  stb_entry_attr;
reg     [3 :0]  stb_entry_bytes_vld;
reg     [31:0]  stb_entry_data;
reg     [1 :0]  stb_entry_dca_type;
reg             stb_entry_dirty;
reg             stb_entry_fls;
reg             stb_entry_lock;
reg             stb_entry_sc_inst;
reg     [2 :0]  stb_entry_shift;
reg     [1 :0]  stb_entry_size;
reg             stb_entry_split_first;
reg     [4 :0]  stb_entry_src1_reg;
reg             stb_entry_way;
reg             stb_entry_wb;
reg             stb_entry_wt_ca;
reg     [3 :0]  stb_next_state;
reg             stb_src1_depd;

// &Wires; @23
wire            cp0_lsu_dcache_wb;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dc_hit_stb_addr;
wire            dc_hit_stb_addr_x;
wire            dc_hit_stb_bytes;
wire            dc_hit_stb_bytes_full;
wire            dc_hit_stb_dca_x;
wire            dc_hit_stb_dword;
wire            dc_hit_stb_full_x;
wire            dc_hit_stb_index_x;
wire            dc_hit_stb_line;
wire            dc_hit_stb_part_x;
wire            dc_stb_warm_up;
wire    [31:0]  dc_xx_addr;
wire    [7 :0]  dc_xx_bytes_vld;
wire            forever_cpuclk;
wire            lfb_stb_done;
wire            lfb_stb_err;
wire            lfb_stb_fifo;
wire            lfb_stb_fifo_update;
wire            lfb_xx_idle;
wire            pad_yy_gate_clk_en_b;
wire            rtu_yy_xx_async_flush;
wire    [7 :0]  stb_bytes_vld_extend;
wire            stb_clk;
wire    [31:0]  stb_create_addr;
wire            stb_create_age;
wire    [1 :0]  stb_create_attr;
wire    [3 :0]  stb_create_bytes_vld;
wire    [31:0]  stb_create_data;
wire            stb_create_dca_inst;
wire    [1 :0]  stb_create_dca_type;
wire            stb_create_dirty;
wire            stb_create_en;
wire            stb_create_en_gate_x;
wire            stb_create_en_x;
wire            stb_create_fls;
wire            stb_create_lock;
wire            stb_create_sc_inst;
wire    [3 :0]  stb_create_shift;
wire    [1 :0]  stb_create_size;
wire            stb_create_split_first;
wire            stb_create_src1_depd;
wire    [4 :0]  stb_create_src1_reg;
wire            stb_create_wait_lfb;
wire            stb_create_way;
wire            stb_create_wt_ca;
wire            stb_cur_idle;
wire            stb_cur_rdl;
wire            stb_cur_wbus;
wire            stb_cur_wca;
wire            stb_cur_wfc;
wire            stb_cur_wlfb;
wire            stb_cur_wrdl;
wire            stb_dca_done_x;
wire            stb_dca_grant_x;
wire            stb_dp_clk;
wire            stb_dp_clk_en;
wire            stb_entry_age_x;
wire            stb_entry_biu_req_x;
wire            stb_entry_burst_x;
wire            stb_entry_busy_x;
wire            stb_entry_data_vld_x;
wire            stb_entry_dca_inst;
wire            stb_entry_dcache_req_x;
wire            stb_entry_dirty_x;
wire            stb_entry_dw;
wire            stb_entry_lock_x;
wire            stb_entry_pop_vld_x;
wire            stb_entry_rdl_req_x;
wire            stb_entry_sc_inst_x;
wire            stb_entry_split_first_x;
wire            stb_entry_src1_depd;
wire            stb_entry_vld_dp_x;
wire            stb_entry_vld_x;
wire            stb_entry_way_x;
wire    [31:0]  stb_entryx_addr;
wire    [1 :0]  stb_entryx_bank;
wire    [3 :0]  stb_entryx_bytes_vld;
wire    [31:0]  stb_entryx_data;
wire    [1 :0]  stb_entryx_dca_type;
wire    [3 :0]  stb_entryx_prot;
wire    [1 :0]  stb_entryx_size;
wire    [31:0]  stb_fwd_data;
wire            stb_fwd_vld;
wire            stb_pop_vld;
wire            stb_vld;
wire            stb_wbus_cmplt_x;
wire            stb_wbus_grant_x;
wire            stb_wca_grant_x;
wire            stb_wdata_clk;
wire            stb_wdata_clk_en;


parameter D_TAG_INDEX_LEN  = `D_TAG_INDEX_WIDTH;
parameter DATAW    = `FLEN;
parameter STB_IDLE = 4'b0000;
parameter STB_WLFB = 4'b0001;
parameter STB_WCA  = 4'b0010;
parameter STB_WFC  = 4'b0011;
parameter STB_RDL  = 4'b0100;
parameter STB_WRDL = 4'b0101;
parameter STB_WBUS = 4'b1000;
parameter STB_WFD  = 4'b0110;

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_cur_state[3:0] <= STB_IDLE;
  else if (rtu_yy_xx_async_flush)
    stb_cur_state[3:0] <= STB_IDLE;
  else
    stb_cur_state[3:0] <= stb_next_state[3:0];
end

assign stb_create_en = stb_create_en_x;

// &CombBeg; @48
always @( stb_fwd_vld
       or stb_entry_wb
       or stb_entry_wt_ca
       or stb_wbus_grant_x
       or stb_wca_grant_x
       or stb_create_en
       or stb_dca_grant_x
       or stb_create_dca_inst
       or stb_create_wt_ca
       or stb_entry_src1_depd
       or stb_dca_done_x
       or lfb_stb_err
       or lfb_stb_done
       or stb_create_wait_lfb
       or stb_create_src1_depd
       or stb_wbus_cmplt_x
       or stb_cur_state)
begin
  case(stb_cur_state)
    STB_IDLE: begin
      if (stb_create_en) begin
        if (stb_create_dca_inst)
          stb_next_state = STB_RDL;
        else if (stb_create_wait_lfb)
          stb_next_state = STB_WLFB;
        else if (!stb_create_src1_depd)
          stb_next_state = stb_create_wt_ca ? STB_WCA : STB_WBUS;
        else
          stb_next_state = STB_WFD;
      end
      else
        stb_next_state = STB_IDLE;
    end
    STB_WFD: begin
      if (stb_fwd_vld)
        stb_next_state = stb_entry_wt_ca ? STB_WCA : STB_WBUS;
      else
        stb_next_state = STB_WFD;
    end
    STB_RDL: begin
      if (stb_dca_grant_x)
        stb_next_state = STB_WRDL;
      else
        stb_next_state = STB_RDL;
    end
    STB_WRDL: begin
      if (stb_dca_done_x)
        stb_next_state = STB_IDLE;
      else
        stb_next_state = STB_WRDL;
    end
    STB_WLFB: begin
      if (lfb_stb_done & !stb_entry_src1_depd)
        stb_next_state = lfb_stb_err ? STB_WBUS : STB_WCA;
      else if (lfb_stb_done & stb_entry_src1_depd)
        stb_next_state = STB_WFD;
      else
        stb_next_state = STB_WLFB;
    end
    STB_WCA: begin
      if (stb_wca_grant_x)
        stb_next_state = stb_entry_wb ? STB_IDLE : STB_WBUS;
      else
        stb_next_state = STB_WCA;
    end
    STB_WBUS: begin
      if (stb_wbus_grant_x)
        stb_next_state = STB_WFC;
      else
        stb_next_state = STB_WBUS;
    end
    STB_WFC: begin
      if (stb_wbus_cmplt_x)
        stb_next_state = STB_IDLE;
      else
        stb_next_state = STB_WFC;
    end
    default: stb_next_state = STB_IDLE;
  endcase
// &CombEnd; @110
end

assign stb_cur_idle = stb_cur_state == STB_IDLE;
assign stb_cur_rdl  = stb_cur_state == STB_RDL;
assign stb_cur_wrdl = stb_cur_state == STB_WRDL;
assign stb_cur_wlfb = stb_cur_state == STB_WLFB;
assign stb_cur_wca  = stb_cur_state == STB_WCA;
assign stb_cur_wbus = stb_cur_state[3]; //STB_WBUS;
assign stb_cur_wfc  = stb_cur_state == STB_WFC;

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_entry_wt_ca <= 1'b0;
  else if (stb_create_en)
    stb_entry_wt_ca <= stb_create_wt_ca;
  else if (stb_cur_wlfb & lfb_stb_done)
    stb_entry_wt_ca <= lfb_stb_err ? 1'b0 : 1'b1;
end

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_entry_way <= 1'b0;
  else if (stb_create_en)
    stb_entry_way <= stb_create_way;
  else if (lfb_stb_fifo_update & stb_cur_wlfb)
    stb_entry_way <= lfb_stb_fifo;
end

always@(posedge stb_dp_clk)
begin
  if (stb_create_en | dc_stb_warm_up) begin
    stb_entry_addr[31:0]     <= stb_create_addr[31:0];
    stb_entry_dca_type[1:0]  <= stb_create_dca_type[1:0];
    stb_entry_dirty          <= stb_create_dirty;
  end
end

// &Force("bus","stb_create_shift",3,0); @149
always@(posedge stb_dp_clk)
begin
  if (stb_create_en & !stb_create_dca_inst | dc_stb_warm_up) begin
    stb_entry_bytes_vld[3:0] <= stb_create_bytes_vld[3:0];
    stb_entry_size[1:0]      <= stb_create_size[1:0];
    stb_entry_attr[1:0]      <= stb_create_attr[1:0];
    stb_entry_wb             <= cp0_lsu_dcache_wb;
    stb_entry_lock           <= stb_create_lock;
    stb_entry_sc_inst        <= stb_create_sc_inst;
    stb_entry_src1_reg[4:0]  <= stb_create_src1_reg[4:0];
    stb_entry_fls            <= stb_create_fls;
    stb_entry_shift[2:0]     <= stb_create_shift[2:0];
    stb_entry_split_first    <= stb_create_split_first;
  end
end

// &Force("nonport","stb_entry_fls"); @174
// &Force("nonport","stb_entry_src1_reg"); @175

assign stb_fwd_vld = 1'b0;
assign stb_fwd_data[DATAW-1:0] = {DATAW{1'b0}};


always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_src1_depd <= 1'b0;
  else if (stb_create_en)
    stb_src1_depd <= stb_create_src1_depd;
  else if (stb_fwd_vld)
    stb_src1_depd <= 1'b0;
end

assign stb_entry_src1_depd = stb_src1_depd & !stb_fwd_vld;

always@(posedge stb_wdata_clk)
begin
  if (stb_create_en & !stb_create_dca_inst | dc_stb_warm_up)
    stb_entry_data[DATAW-1:0] <= stb_create_data[DATAW-1:0];
  else if (stb_fwd_vld)
    stb_entry_data[DATAW-1:0] <= stb_fwd_data[DATAW-1:0];
end

always@(posedge stb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    stb_age <= 1'b0;
  else if (stb_create_en)
    stb_age <= stb_create_age;
  else if (stb_pop_vld)
    stb_age <= 1'b0;
end

// &Force("output","stb_entry_pop_vld_x"); @212

assign stb_entry_vld_x           = !stb_cur_idle & !stb_entry_pop_vld_x;
assign stb_entry_busy_x          = !stb_cur_idle;
assign stb_entry_pop_vld_x       = stb_cur_wca & stb_wca_grant_x & stb_entry_wb |
                                   stb_cur_wfc & stb_wbus_cmplt_x |
                                   stb_cur_wrdl & stb_dca_done_x;
assign stb_entry_age_x           = stb_age;

assign stb_entry_dcache_req_x    = stb_cur_wca;
assign stb_entry_biu_req_x       = stb_cur_wbus;

assign stb_entryx_addr[31:0]     = stb_entry_addr[31:0];
assign stb_entryx_dca_type[1:0]  = stb_entry_dca_type[1:0];
assign stb_entryx_bytes_vld[3:0] = stb_entry_bytes_vld[3:0];
assign stb_entryx_size[1:0]      = stb_entry_size[1:0];
assign stb_entryx_prot[3:0]      = {stb_entry_attr[1:0], cp0_yy_mach_mode, 1'b1};
assign stb_entry_way_x           = stb_entry_way;
assign stb_entry_lock_x          = stb_entry_lock;
assign stb_entry_sc_inst_x       = stb_entry_sc_inst;
assign stb_entryx_bank[1]        =  stb_entry_addr[2] | (stb_entry_size[1:0] == 2'b11);
assign stb_entryx_bank[0]        = !stb_entry_addr[2] | (stb_entry_size[1:0] == 2'b11);
assign stb_entry_burst_x         = (stb_entry_size[1:0] == 2'b11);
assign stb_entry_data_vld_x      = !stb_src1_depd;
assign stb_entry_split_first_x   = stb_entry_split_first;

// &CombBeg; @239
// &CombEnd; @251
// &CombBeg; @253
always @( stb_entry_data[31:0]
       or stb_entry_shift[1:0])
begin
  casez(stb_entry_shift[1:0])
    2'b00: stb_data_align[31:0] = stb_entry_data[31:0];
    2'b01: stb_data_align[31:0] = {stb_entry_data[23:0],stb_entry_data[31:24]};
    2'b10: stb_data_align[31:0] = {stb_entry_data[15:0],stb_entry_data[31:16]};
    2'b11: stb_data_align[31:0] = {stb_entry_data[7:0], stb_entry_data[31:8]};
    default: stb_data_align[31:0] = stb_entry_data[31:0];
  endcase
// &CombEnd; @261
end

assign stb_entryx_data[DATAW-1:0] = stb_data_align[DATAW-1:0];




assign stb_entry_rdl_req_x       = stb_cur_rdl & lfb_xx_idle;
assign stb_entry_dirty_x         = stb_entry_dirty;




// &Force("bus","dc_xx_addr",31,0); @275
assign stb_entry_dw = stb_entry_size[1:0] == 2'b11;
assign stb_bytes_vld_extend[7:0] = stb_entry_addr[2] ? {stb_entry_bytes_vld[3:0], 4'b0000}
                                                     : {{4{stb_entry_dw}},stb_entry_bytes_vld[3:0]};

assign stb_vld = !stb_cur_idle;
assign dc_hit_stb_line  = (dc_xx_addr[31:5] == stb_entry_addr[31:5]) &
                          stb_vld;
assign dc_hit_stb_dword = (dc_xx_addr[4:3] == stb_entry_addr[4:3]);

assign dc_hit_stb_addr       = dc_hit_stb_line & dc_hit_stb_dword;
assign dc_hit_stb_bytes_full = (dc_xx_bytes_vld[7:0] == stb_bytes_vld_extend[7:0]);
assign dc_hit_stb_bytes      = |(dc_xx_bytes_vld[7:0] & stb_bytes_vld_extend[7:0]);

assign stb_entry_dca_inst = stb_cur_rdl | stb_cur_wrdl;

assign dc_hit_stb_addr_x = dc_hit_stb_addr & stb_src1_depd;
assign dc_hit_stb_full_x = dc_hit_stb_addr & dc_hit_stb_bytes_full;
assign dc_hit_stb_part_x = dc_hit_stb_addr & dc_hit_stb_bytes & !dc_hit_stb_bytes_full;
assign dc_hit_stb_dca_x  = dc_hit_stb_line & stb_entry_dca_inst;

assign dc_hit_stb_index_x = (dc_xx_addr[D_TAG_INDEX_LEN+4:5] == stb_entry_addr[D_TAG_INDEX_LEN+4:5]) &
                             stb_vld;

assign stb_entry_vld_dp_x = stb_vld;




assign stb_dp_clk_en = stb_create_en_gate_x | dc_stb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_stb_dp_gated_clk"); @305
gated_clk_cell  x_pa_lsu_stb_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (stb_dp_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (stb_dp_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @306
//          .external_en (1'b0), @307
//          .global_en   (1'b1), @308
//          .module_en   (1'b0), @309
//          .local_en    (stb_dp_clk_en), @310
//          .clk_out     (stb_dp_clk)); @311

assign stb_wdata_clk_en = stb_create_en_gate_x | stb_fwd_vld | dc_stb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_stb_wdata_gated_clk"); @314
gated_clk_cell  x_pa_lsu_stb_wdata_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (stb_wdata_clk       ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (stb_wdata_clk_en    ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @315
//          .external_en (1'b0), @316
//          .global_en   (1'b1), @317
//          .module_en   (1'b0), @318
//          .local_en    (stb_wdata_clk_en), @319
//          .clk_out     (stb_wdata_clk)); @320


// &ModuleEnd; @329
endmodule




















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_top(
  bmu_lsu_acc_err,
  bmu_lsu_grant,
  bmu_lsu_rdata,
  bmu_lsu_trans_cmplt,
  cp0_lsu_dcache_en,
  cp0_lsu_dcache_wa,
  cp0_lsu_dcache_wb,
  cp0_lsu_fence_req,
  cp0_lsu_icc_addr,
  cp0_lsu_icc_op,
  cp0_lsu_icc_req,
  cp0_lsu_icc_type,
  cp0_lsu_mm,
  cp0_xx_async_expt_en,
  cp0_yy_mach_mode,
  cpurst_b,
  forever_cpuclk,
  had_yy_xx_bkpta_base,
  had_yy_xx_bkpta_mask,
  had_yy_xx_bkpta_rc,
  had_yy_xx_bkptb_base,
  had_yy_xx_bkptb_mask,
  had_yy_xx_bkptb_rc,
  had_yy_xx_bkptc_base,
  had_yy_xx_bkptc_mask,
  had_yy_xx_bkptd_base,
  had_yy_xx_bkptd_mask,
  had_yy_xx_bkpte_base,
  had_yy_xx_bkpte_mask,
  idu_lsu_ex1_ag_imm,
  idu_lsu_ex1_base,
  idu_lsu_ex1_base_sel,
  idu_lsu_ex1_base_wb,
  idu_lsu_ex1_data,
  idu_lsu_ex1_dest_reg,
  idu_lsu_ex1_dest_vld,
  idu_lsu_ex1_fls,
  idu_lsu_ex1_func,
  idu_lsu_ex1_mls,
  idu_lsu_ex1_offset_sel,
  idu_lsu_ex1_sel,
  idu_lsu_ex1_sign_extend,
  idu_lsu_ex1_size,
  idu_lsu_ex1_src1_depd,
  idu_lsu_ex1_src1_reg,
  idu_xx_ex1_warm_up,
  ifu_xx_warm_up_clk,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_bmu_acc_deny,
  lsu_bmu_addr,
  lsu_bmu_burst,
  lsu_bmu_lock,
  lsu_bmu_lrsc,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_dp,
  lsu_bmu_seq,
  lsu_bmu_size,
  lsu_bmu_wdata,
  lsu_bmu_write,
  lsu_cp0_icc_done,
  lsu_hpcp_cache_read_access,
  lsu_hpcp_cache_read_access_gate,
  lsu_hpcp_cache_read_miss,
  lsu_hpcp_cache_read_miss_gate,
  lsu_hpcp_cache_write_access,
  lsu_hpcp_cache_write_access_gate,
  lsu_hpcp_cache_write_miss,
  lsu_hpcp_cache_write_miss_gate,
  lsu_hpcp_inst_store,
  lsu_hpcp_inst_store_gate,
  lsu_idu_ex1_src1_update_en,
  lsu_idu_ex1_src1_update_en_gate,
  lsu_idu_update_addr,
  lsu_idu_update_en,
  lsu_idu_update_en_gate,
  lsu_idu_update_offset,
  lsu_iu_ex1_base_wb,
  lsu_iu_ex1_src1_sel,
  lsu_iu_ex2_data,
  lsu_iu_ex2_data_vld,
  lsu_iu_ex2_data_vld_gate,
  lsu_pad_sc_pass,
  lsu_pmp_addr,
  lsu_pmp_write,
  lsu_rtu_async_expt_vld,
  lsu_rtu_async_ld_inst,
  lsu_rtu_async_mtval,
  lsu_rtu_ex1_bkpta_trap,
  lsu_rtu_ex1_bkptb_trap,
  lsu_rtu_ex1_bkptc_trap,
  lsu_rtu_ex1_bkptd_trap,
  lsu_rtu_ex1_bkpte_trap,
  lsu_rtu_ex1_cmplt,
  lsu_rtu_ex1_cmplt_dp,
  lsu_rtu_ex1_expt_vec,
  lsu_rtu_ex1_expt_vld,
  lsu_rtu_ex1_inst_ld,
  lsu_rtu_ex1_mtval,
  lsu_rtu_ex1_stall,
  lsu_rtu_ex2_data,
  lsu_rtu_ex2_data_vld,
  lsu_rtu_ex2_data_vld_gate,
  lsu_rtu_ex2_dest_reg,
  lsu_rtu_ex2_stall,
  lsu_rtu_ex2_stall_gate,
  lsu_rtu_pmp_deny,
  lsu_sysmap_pa,
  lsu_xx_flush,
  lsu_xx_no_op,
  lsu_xx_warm_up,
  pad_yy_gate_clk_en_b,
  pmp_lsu_acc_deny,
  rtu_lsu_async_expt_ack,
  rtu_lsu_ex1_cancel,
  rtu_lsu_ex2_stall,
  rtu_lsu_expt_ack,
  rtu_lsu_expt_exit,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_yy_xx_async_flush,
  sysmap_lsu_flg
);

// &Ports; @21
input           bmu_lsu_acc_err;
input           bmu_lsu_grant;
input   [31:0]  bmu_lsu_rdata;
input           bmu_lsu_trans_cmplt;
input           cp0_lsu_dcache_en;
input           cp0_lsu_dcache_wa;
input           cp0_lsu_dcache_wb;
input           cp0_lsu_fence_req;
input   [31:0]  cp0_lsu_icc_addr;
input   [1 :0]  cp0_lsu_icc_op;
input           cp0_lsu_icc_req;
input   [1 :0]  cp0_lsu_icc_type;
input           cp0_lsu_mm;
input           cp0_xx_async_expt_en;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           forever_cpuclk;
input   [31:0]  had_yy_xx_bkpta_base;
input   [7 :0]  had_yy_xx_bkpta_mask;
input           had_yy_xx_bkpta_rc;
input   [31:0]  had_yy_xx_bkptb_base;
input   [7 :0]  had_yy_xx_bkptb_mask;
input           had_yy_xx_bkptb_rc;
input   [31:0]  had_yy_xx_bkptc_base;
input   [7 :0]  had_yy_xx_bkptc_mask;
input   [31:0]  had_yy_xx_bkptd_base;
input   [7 :0]  had_yy_xx_bkptd_mask;
input   [31:0]  had_yy_xx_bkpte_base;
input   [7 :0]  had_yy_xx_bkpte_mask;
input   [31:0]  idu_lsu_ex1_ag_imm;
input   [31:0]  idu_lsu_ex1_base;
input           idu_lsu_ex1_base_sel;
input           idu_lsu_ex1_base_wb;
input   [31:0]  idu_lsu_ex1_data;
input   [5 :0]  idu_lsu_ex1_dest_reg;
input           idu_lsu_ex1_dest_vld;
input           idu_lsu_ex1_fls;
input   [3 :0]  idu_lsu_ex1_func;
input           idu_lsu_ex1_mls;
input           idu_lsu_ex1_offset_sel;
input           idu_lsu_ex1_sel;
input           idu_lsu_ex1_sign_extend;
input   [1 :0]  idu_lsu_ex1_size;
input           idu_lsu_ex1_src1_depd;
input   [5 :0]  idu_lsu_ex1_src1_reg;
input           idu_xx_ex1_warm_up;
input           ifu_xx_warm_up_clk;
input           pad_yy_gate_clk_en_b;
input           pmp_lsu_acc_deny;
input           rtu_lsu_async_expt_ack;
input           rtu_lsu_ex1_cancel;
input           rtu_lsu_ex2_stall;
input           rtu_lsu_expt_ack;
input           rtu_lsu_expt_exit;
input   [31:0]  rtu_lsu_wb_fwd_data;
input           rtu_lsu_wb_fwd_fls;
input   [5 :0]  rtu_lsu_wb_fwd_reg;
input           rtu_lsu_wb_fwd_vld;
input           rtu_yy_xx_async_flush;
input   [4 :0]  sysmap_lsu_flg;
output          lsu_biu_amo_pmp_deny;
output          lsu_biu_async_expt_ack;
output          lsu_bmu_acc_deny;
output  [31:0]  lsu_bmu_addr;
output  [2 :0]  lsu_bmu_burst;
output          lsu_bmu_lock;
output          lsu_bmu_lrsc;
output  [3 :0]  lsu_bmu_prot;
output          lsu_bmu_req;
output          lsu_bmu_req_dp;
output          lsu_bmu_seq;
output  [1 :0]  lsu_bmu_size;
output  [31:0]  lsu_bmu_wdata;
output          lsu_bmu_write;
output          lsu_cp0_icc_done;
output          lsu_hpcp_cache_read_access;
output          lsu_hpcp_cache_read_access_gate;
output          lsu_hpcp_cache_read_miss;
output          lsu_hpcp_cache_read_miss_gate;
output          lsu_hpcp_cache_write_access;
output          lsu_hpcp_cache_write_access_gate;
output          lsu_hpcp_cache_write_miss;
output          lsu_hpcp_cache_write_miss_gate;
output          lsu_hpcp_inst_store;
output          lsu_hpcp_inst_store_gate;
output          lsu_idu_ex1_src1_update_en;
output          lsu_idu_ex1_src1_update_en_gate;
output  [31:0]  lsu_idu_update_addr;
output          lsu_idu_update_en;
output          lsu_idu_update_en_gate;
output  [31:0]  lsu_idu_update_offset;
output          lsu_iu_ex1_base_wb;
output          lsu_iu_ex1_src1_sel;
output  [31:0]  lsu_iu_ex2_data;
output          lsu_iu_ex2_data_vld;
output          lsu_iu_ex2_data_vld_gate;
output          lsu_pad_sc_pass;
output  [31:0]  lsu_pmp_addr;
output          lsu_pmp_write;
output          lsu_rtu_async_expt_vld;
output          lsu_rtu_async_ld_inst;
output  [31:0]  lsu_rtu_async_mtval;
output          lsu_rtu_ex1_bkpta_trap;
output          lsu_rtu_ex1_bkptb_trap;
output          lsu_rtu_ex1_bkptc_trap;
output          lsu_rtu_ex1_bkptd_trap;
output          lsu_rtu_ex1_bkpte_trap;
output          lsu_rtu_ex1_cmplt;
output          lsu_rtu_ex1_cmplt_dp;
output  [3 :0]  lsu_rtu_ex1_expt_vec;
output          lsu_rtu_ex1_expt_vld;
output          lsu_rtu_ex1_inst_ld;
output  [31:0]  lsu_rtu_ex1_mtval;
output          lsu_rtu_ex1_stall;
output  [31:0]  lsu_rtu_ex2_data;
output          lsu_rtu_ex2_data_vld;
output          lsu_rtu_ex2_data_vld_gate;
output  [5 :0]  lsu_rtu_ex2_dest_reg;
output          lsu_rtu_ex2_stall;
output          lsu_rtu_ex2_stall_gate;
output          lsu_rtu_pmp_deny;
output  [31:0]  lsu_sysmap_pa;
output          lsu_xx_flush;
output          lsu_xx_no_op;
output          lsu_xx_warm_up;

// &Regs; @22
reg     [31:0]  data_align;
reg     [31:0]  data_align_ext;
reg     [3 :0]  mb_bytes_vld;
reg             mb_cur_state;
reg     [31:0]  mb_data;
reg     [5 :0]  mb_dest_reg;
reg             mb_fls;
reg             mb_flw;
reg             mb_next_state;
reg             mb_sign_ext;
reg     [1 :0]  mb_size;
reg             mb_split_checked;

// &Wires; @23
wire    [31:0]  ag_dc_addr;
wire            ag_dc_buf;
wire    [3 :0]  ag_dc_bytes_vld;
wire            ag_dc_ca;
wire            ag_dc_dcache_grant;
wire    [5 :0]  ag_dc_dest_reg;
wire            ag_dc_fls;
wire    [3 :0]  ag_dc_func;
wire            ag_dc_inst_vld;
wire            ag_dc_inst_vld_gate;
wire            ag_dc_lm_pass;
wire    [1 :0]  ag_dc_ori_size;
wire            ag_dc_pmp_expt;
wire            ag_dc_sign_ext;
wire    [1 :0]  ag_dc_size;
wire            ag_dc_so;
wire            ag_dc_split;
wire            ag_dc_split_first;
wire            ag_dc_split_last;
wire            ag_dc_src1_depd;
wire    [5 :0]  ag_dc_src1_reg;
wire    [31:0]  ag_dc_st_data;
wire            ag_dc_warm_up;
wire    [2 :0]  ag_dc_wdata_shift;
wire    [31:0]  ag_ncb_addr;
wire            ag_ncb_inst_vld;
wire            ag_ncb_inst_vld_dp;
wire    [5 :0]  ag_ncb_src1_reg;
wire    [31:0]  ag_ncb_st_data;
wire            ag_xx_inst_abort;
wire            ag_xx_split_done;
wire            arb_icc_data_grant;
wire            arb_rdl_data_grant;
wire            arb_stb_xx_grant;
wire            bmu_lsu_acc_err;
wire            bmu_lsu_grant;
wire    [31:0]  bmu_lsu_rdata;
wire            bmu_lsu_trans_cmplt;
wire    [3 :0]  bytes_vld;
wire            cp0_lsu_dcache_en;
wire            cp0_lsu_dcache_wa;
wire            cp0_lsu_dcache_wb;
wire            cp0_lsu_fence_req;
wire    [31:0]  cp0_lsu_icc_addr;
wire    [1 :0]  cp0_lsu_icc_op;
wire            cp0_lsu_icc_req;
wire    [1 :0]  cp0_lsu_icc_type;
wire            cp0_lsu_mm;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            dahbif_lfb_acc_err;
wire            dahbif_lfb_cmplt;
wire    [31:0]  dahbif_lfb_data;
wire            dahbif_lfb_grant;
wire            dahbif_ncb_acc_err;
wire            dahbif_ncb_cmplt;
wire    [31:0]  dahbif_ncb_data;
wire            dahbif_ncb_grant;
wire            dahbif_ncb_grant_2;
wire            dahbif_stb_acc_ecc;
wire            dahbif_stb_cmplt;
wire            dahbif_stb_grant;
wire            dahbif_stb_grant_2;
wire            dahbif_vb_acc_ecc;
wire            dahbif_vb_cmplt;
wire            dahbif_vb_grant;
wire    [31:0]  data;
wire            dc_ag_async_expt_vld;
wire            dc_ag_async_ld_inst;
wire    [31:0]  dc_ag_async_mtval;
wire            dc_ag_cache_stall;
wire    [31:0]  dc_ag_dcache_addr;
wire            dc_ag_dcache_req;
wire    [1 :0]  dc_ag_dcache_size;
wire            dc_ag_empty;
wire    [3 :0]  dc_ag_func;
wire            dc_ag_stall;
wire    [63:0]  dc_icc_way0_data;
wire            dc_icc_way0_dirty;
wire    [21:0]  dc_icc_way0_tag;
wire    [63:0]  dc_icc_way1_data;
wire            dc_icc_way1_dirty;
wire    [21:0]  dc_icc_way1_tag;
wire            dc_idle;
wire    [31:0]  dc_lfb_addr;
wire            dc_lfb_buf;
wire            dc_lfb_ca;
wire            dc_lfb_ca_raw;
wire            dc_lfb_create_en;
wire            dc_lfb_create_en_gate;
wire            dc_lfb_inst_ld;
wire            dc_lfb_lock_trans;
wire            dc_lfb_lr_inst;
wire    [1 :0]  dc_lfb_size;
wire            dc_lfb_warm_up;
wire            dc_rdl_fifo;
wire    [63:0]  dc_rdl_way0_data;
wire            dc_rdl_way0_dirty;
wire    [21:0]  dc_rdl_way0_tag;
wire            dc_rdl_way0_vld;
wire    [63:0]  dc_rdl_way1_data;
wire            dc_rdl_way1_dirty;
wire    [21:0]  dc_rdl_way1_tag;
wire            dc_rdl_way1_vld;
wire    [31:0]  dc_stb_addr;
wire    [1 :0]  dc_stb_attr;
wire    [3 :0]  dc_stb_bytes_vld;
wire            dc_stb_cache_hit;
wire            dc_stb_create_en;
wire            dc_stb_create_en_gate;
wire    [31:0]  dc_stb_data;
wire            dc_stb_dcache_dirty;
wire            dc_stb_dcache_inst;
wire    [1 :0]  dc_stb_dcache_type;
wire            dc_stb_dcache_way;
wire            dc_stb_fls;
wire            dc_stb_lock_trans;
wire            dc_stb_sc_inst;
wire    [2 :0]  dc_stb_shift;
wire    [1 :0]  dc_stb_size;
wire            dc_stb_split_first;
wire            dc_stb_src1_depd;
wire    [4 :0]  dc_stb_src1_reg;
wire            dc_stb_wait_lfb;
wire            dc_stb_warm_up;
wire            dc_vb_st_amold;
wire    [31:0]  dc_xx_addr;
wire    [7 :0]  dc_xx_bytes_vld;
wire            dcache_data_cen_way0_bank0;
wire            dcache_data_cen_way0_bank1;
wire            dcache_data_cen_way1_bank0;
wire            dcache_data_cen_way1_bank1;
wire    [63:0]  dcache_data_din;
wire    [63:0]  dcache_data_dout_way0;
wire    [63:0]  dcache_data_dout_way1;
wire    [11:0]  dcache_data_idx;
wire    [3 :0]  dcache_data_wen;
wire            dcache_dirty_cen;
wire    [2 :0]  dcache_dirty_din;
wire    [2 :0]  dcache_dirty_dout;
wire    [9 :0]  dcache_dirty_idx;
wire    [2 :0]  dcache_dirty_wen;
wire            dcache_tag_cen;
wire    [22:0]  dcache_tag_din;
wire    [45:0]  dcache_tag_dout;
wire    [9 :0]  dcache_tag_idx;
wire    [1 :0]  dcache_tag_wen;
wire    [5 :0]  dest_reg;
wire            fls;
wire            flw;
wire            forever_cpuclk;
wire    [31:0]  had_yy_xx_bkpta_base;
wire    [7 :0]  had_yy_xx_bkpta_mask;
wire            had_yy_xx_bkpta_rc;
wire    [31:0]  had_yy_xx_bkptb_base;
wire    [7 :0]  had_yy_xx_bkptb_mask;
wire            had_yy_xx_bkptb_rc;
wire    [31:0]  had_yy_xx_bkptc_base;
wire    [7 :0]  had_yy_xx_bkptc_mask;
wire    [31:0]  had_yy_xx_bkptd_base;
wire    [7 :0]  had_yy_xx_bkptd_mask;
wire    [31:0]  had_yy_xx_bkpte_base;
wire    [7 :0]  had_yy_xx_bkpte_mask;
wire    [1 :0]  icc_arb_data_bank;
wire    [63:0]  icc_arb_data_din;
wire    [11:0]  icc_arb_data_idx;
wire            icc_arb_data_req;
wire    [1 :0]  icc_arb_data_way;
wire    [3 :0]  icc_arb_data_wen;
wire    [2 :0]  icc_arb_dirty_din;
wire    [9 :0]  icc_arb_dirty_idx;
wire            icc_arb_dirty_req;
wire    [2 :0]  icc_arb_dirty_wen;
wire    [22:0]  icc_arb_tag_din;
wire    [9 :0]  icc_arb_tag_idx;
wire            icc_arb_tag_req;
wire    [1 :0]  icc_arb_tag_wen;
wire    [26:0]  icc_vb_addr;
wire            icc_vb_clr_vld;
wire            icc_vb_create_en;
wire    [63:0]  icc_vb_data;
wire    [1 :0]  icc_vb_data_cnt;
wire            icc_vb_data_create;
wire            icc_vb_line_dirty;
wire            icc_xx_idle;
wire    [31:0]  idu_lsu_ex1_ag_imm;
wire    [31:0]  idu_lsu_ex1_base;
wire            idu_lsu_ex1_base_sel;
wire            idu_lsu_ex1_base_wb;
wire    [31:0]  idu_lsu_ex1_data;
wire    [5 :0]  idu_lsu_ex1_dest_reg;
wire            idu_lsu_ex1_dest_vld;
wire            idu_lsu_ex1_fls;
wire    [3 :0]  idu_lsu_ex1_func;
wire            idu_lsu_ex1_mls;
wire            idu_lsu_ex1_offset_sel;
wire            idu_lsu_ex1_sel;
wire            idu_lsu_ex1_sign_extend;
wire    [1 :0]  idu_lsu_ex1_size;
wire            idu_lsu_ex1_src1_depd;
wire    [5 :0]  idu_lsu_ex1_src1_reg;
wire            idu_xx_ex1_warm_up;
wire            ifu_xx_warm_up_clk;
wire    [1 :0]  lfb_arb_data_bank;
wire    [63:0]  lfb_arb_data_din;
wire    [11:0]  lfb_arb_data_idx;
wire            lfb_arb_data_req;
wire    [1 :0]  lfb_arb_data_way;
wire    [3 :0]  lfb_arb_data_wen;
wire            lfb_arb_dcache_sel;
wire    [2 :0]  lfb_arb_dirty_din;
wire    [9 :0]  lfb_arb_dirty_idx;
wire            lfb_arb_dirty_req;
wire    [2 :0]  lfb_arb_dirty_wen;
wire    [22:0]  lfb_arb_tag_din;
wire    [9 :0]  lfb_arb_tag_idx;
wire            lfb_arb_tag_req;
wire    [1 :0]  lfb_arb_tag_wen;
wire    [31:0]  lfb_dahbif_addr;
wire    [2 :0]  lfb_dahbif_burst;
wire            lfb_dahbif_lock;
wire            lfb_dahbif_lr_inst;
wire    [3 :0]  lfb_dahbif_prot;
wire            lfb_dahbif_req;
wire    [1 :0]  lfb_dahbif_size;
wire            lfb_dc_async_expt;
wire            lfb_dc_busy;
wire            lfb_dc_hit_idx;
wire            lfb_dc_ld_cmplt;
wire    [31:0]  lfb_dc_ld_data;
wire            lfb_dc_ld_data_vld;
wire            lfb_dc_pop_en;
wire            lfb_icc_warm_up;
wire    [9 :0]  lfb_rdl_index;
wire            lfb_rdl_start;
wire            lfb_rdl_start_gate;
wire            lfb_rdl_warm_up;
wire            lfb_stb_done;
wire            lfb_stb_err;
wire            lfb_stb_fifo;
wire            lfb_stb_fifo_update;
wire            lfb_xx_idle;
wire            lm_clr;
wire    [33:0]  lm_lr_bus;
wire            lm_pass;
wire    [33:0]  lm_sc_bus;
wire            lm_set;
wire            lm_set_gate;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_bmu_acc_deny;
wire    [31:0]  lsu_bmu_addr;
wire    [2 :0]  lsu_bmu_burst;
wire            lsu_bmu_lock;
wire            lsu_bmu_lrsc;
wire    [3 :0]  lsu_bmu_prot;
wire            lsu_bmu_req;
wire            lsu_bmu_req_dp;
wire            lsu_bmu_seq;
wire    [1 :0]  lsu_bmu_size;
wire    [31:0]  lsu_bmu_wdata;
wire            lsu_bmu_write;
wire            lsu_cp0_icc_done;
wire            lsu_ex2_addr_2;
wire    [3 :0]  lsu_ex2_bytes_vld;
wire    [3 :0]  lsu_ex2_bytes_vld_ext;
wire            lsu_ex2_checked;
wire    [31:0]  lsu_ex2_data;
wire            lsu_ex2_data_vld;
wire            lsu_ex2_data_vld_gate;
wire    [5 :0]  lsu_ex2_dest_reg;
wire            lsu_ex2_fld;
wire            lsu_ex2_fls;
wire            lsu_ex2_flw;
wire            lsu_ex2_lock;
wire            lsu_ex2_sign_ext;
wire    [1 :0]  lsu_ex2_size;
wire            lsu_ex2_split;
wire            lsu_ex2_split_last;
wire            lsu_ex2_stall;
wire            lsu_ex2_vld;
wire            lsu_hpcp_cache_read_access;
wire            lsu_hpcp_cache_read_access_gate;
wire            lsu_hpcp_cache_read_miss;
wire            lsu_hpcp_cache_read_miss_gate;
wire            lsu_hpcp_cache_write_access;
wire            lsu_hpcp_cache_write_access_gate;
wire            lsu_hpcp_cache_write_miss;
wire            lsu_hpcp_cache_write_miss_gate;
wire            lsu_hpcp_inst_store;
wire            lsu_hpcp_inst_store_gate;
wire            lsu_idu_ex1_src1_update_en;
wire            lsu_idu_ex1_src1_update_en_gate;
wire    [31:0]  lsu_idu_update_addr;
wire            lsu_idu_update_en;
wire            lsu_idu_update_en_gate;
wire    [31:0]  lsu_idu_update_offset;
wire            lsu_iu_ex1_base_wb;
wire            lsu_iu_ex1_src1_sel;
wire    [31:0]  lsu_iu_ex2_data;
wire            lsu_iu_ex2_data_vld;
wire            lsu_iu_ex2_data_vld_gate;
wire            lsu_mb_ex2_ca_addr_2;
wire    [3 :0]  lsu_mb_ex2_ca_bytes_vld;
wire    [31:0]  lsu_mb_ex2_ca_data;
wire            lsu_mb_ex2_ca_data_vld;
wire            lsu_mb_ex2_ca_data_vld_gate;
wire    [5 :0]  lsu_mb_ex2_ca_dest_reg;
wire            lsu_mb_ex2_ca_fld;
wire            lsu_mb_ex2_ca_fls;
wire            lsu_mb_ex2_ca_lock;
wire            lsu_mb_ex2_ca_sign_ext;
wire    [1 :0]  lsu_mb_ex2_ca_size;
wire            lsu_mb_ex2_ca_split;
wire            lsu_mb_ex2_ca_split_last;
wire            lsu_mb_ex2_ca_stall;
wire            lsu_mb_ex2_ca_vld;
wire            lsu_mb_ex2_uc_addr_2;
wire    [3 :0]  lsu_mb_ex2_uc_bytes_vld;
wire    [31:0]  lsu_mb_ex2_uc_data;
wire            lsu_mb_ex2_uc_data_vld;
wire            lsu_mb_ex2_uc_data_vld_gate;
wire    [5 :0]  lsu_mb_ex2_uc_dest_reg;
wire            lsu_mb_ex2_uc_fld;
wire            lsu_mb_ex2_uc_fls;
wire            lsu_mb_ex2_uc_lock;
wire            lsu_mb_ex2_uc_sign_ext;
wire    [1 :0]  lsu_mb_ex2_uc_size;
wire            lsu_mb_ex2_uc_split;
wire            lsu_mb_ex2_uc_split_last;
wire            lsu_mb_ex2_uc_stall;
wire            lsu_mb_ex2_uc_vld;
wire            lsu_pad_sc_pass;
wire    [31:0]  lsu_pmp_addr;
wire            lsu_pmp_write;
wire            lsu_rtu_async_expt_vld;
wire            lsu_rtu_async_ld_inst;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_ex1_bkpta_trap;
wire            lsu_rtu_ex1_bkptb_trap;
wire            lsu_rtu_ex1_bkptc_trap;
wire            lsu_rtu_ex1_bkptd_trap;
wire            lsu_rtu_ex1_bkpte_trap;
wire            lsu_rtu_ex1_cmplt;
wire            lsu_rtu_ex1_cmplt_dp;
wire    [3 :0]  lsu_rtu_ex1_expt_vec;
wire            lsu_rtu_ex1_expt_vld;
wire            lsu_rtu_ex1_inst_ld;
wire    [31:0]  lsu_rtu_ex1_mtval;
wire            lsu_rtu_ex1_stall;
wire    [31:0]  lsu_rtu_ex2_data;
wire            lsu_rtu_ex2_data_vld;
wire            lsu_rtu_ex2_data_vld_gate;
wire    [5 :0]  lsu_rtu_ex2_dest_reg;
wire            lsu_rtu_ex2_fls;
wire            lsu_rtu_ex2_single;
wire            lsu_rtu_ex2_stall;
wire            lsu_rtu_ex2_stall_gate;
wire            lsu_rtu_pmp_deny;
wire    [31:0]  lsu_sysmap_pa;
wire            lsu_top_dc_vld;
wire            lsu_xx_ex2_ca_flush;
wire            lsu_xx_ex2_uc_flush;
wire            lsu_xx_flush;
wire            lsu_xx_no_op;
wire            lsu_xx_warm_up;
wire            mb_clk;
wire            mb_clk_en;
wire            mb_create_en;
wire    [31:0]  mb_data_bits_vld;
wire            mb_data_clk;
wire            mb_data_clk_en;
wire            mb_data_create_en;
wire            mb_dp_clk;
wire            mb_dp_clk_en;
wire            ncb_ag_async_expt_vld;
wire            ncb_ag_async_ld_inst;
wire    [31:0]  ncb_ag_async_mtval;
wire            ncb_ag_stall;
wire            ncb_dahbif_acc_deny;
wire            ncb_dahbif_lock;
wire            ncb_dahbif_lrsc;
wire    [31:0]  ncb_dahbif_ncb_wb_addr;
wire            ncb_dahbif_ncb_wb_sel;
wire    [3 :0]  ncb_dahbif_prot;
wire            ncb_dahbif_req;
wire            ncb_dahbif_req_dp;
wire    [1 :0]  ncb_dahbif_size;
wire    [31:0]  ncb_dahbif_uc_ld_addr;
wire    [31:0]  ncb_dahbif_wdata;
wire            ncb_dahbif_write;
wire            ncb_xx_no_op;
wire            ncb_xx_warm_up;
wire            pad_yy_gate_clk_en_b;
wire            pmp_lsu_acc_deny;
wire    [1 :0]  rdl_arb_data_bank;
wire    [63:0]  rdl_arb_data_din;
wire    [11:0]  rdl_arb_data_idx;
wire            rdl_arb_data_req;
wire    [1 :0]  rdl_arb_data_way;
wire    [3 :0]  rdl_arb_data_wen;
wire            rdl_arb_dcache_sel;
wire    [2 :0]  rdl_arb_dirty_din;
wire    [9 :0]  rdl_arb_dirty_idx;
wire            rdl_arb_dirty_req;
wire    [2 :0]  rdl_arb_dirty_wen;
wire    [22:0]  rdl_arb_tag_din;
wire    [9 :0]  rdl_arb_tag_idx;
wire            rdl_arb_tag_req;
wire    [1 :0]  rdl_arb_tag_wen;
wire            rdl_lfb_done;
wire            rdl_lfb_fifo;
wire            rdl_lfb_fifo_save;
wire            rdl_lfb_grant;
wire    [1 :0]  rdl_stb_cmplt_id;
wire            rdl_stb_dca_cmplt;
wire            rdl_stb_dca_grant;
wire    [26:0]  rdl_vb_addr;
wire            rdl_vb_create_en;
wire    [63:0]  rdl_vb_data;
wire    [1 :0]  rdl_vb_data_cnt;
wire            rdl_vb_data_create;
wire            rdl_vb_line_dirty;
wire            rdl_vb_warm_up;
wire            rtu_lsu_async_expt_ack;
wire            rtu_lsu_ex1_cancel;
wire            rtu_lsu_ex2_stall;
wire            rtu_lsu_expt_ack;
wire            rtu_lsu_expt_exit;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_yy_xx_async_flush;
wire            sign_ext;
wire    [1 :0]  size;
wire    [1 :0]  stb_arb_data_bank;
wire    [63:0]  stb_arb_data_din;
wire    [11:0]  stb_arb_data_idx;
wire            stb_arb_data_req;
wire    [1 :0]  stb_arb_data_way;
wire    [3 :0]  stb_arb_data_wen;
wire            stb_arb_dcache_sel;
wire    [2 :0]  stb_arb_dirty_din;
wire    [9 :0]  stb_arb_dirty_idx;
wire            stb_arb_dirty_req;
wire    [2 :0]  stb_arb_dirty_wen;
wire    [31:0]  stb_dahbif_addr;
wire    [31:0]  stb_dahbif_data;
wire            stb_dahbif_lock;
wire    [3 :0]  stb_dahbif_prot;
wire            stb_dahbif_req;
wire            stb_dahbif_sc_inst;
wire    [1 :0]  stb_dahbif_size;
wire            stb_dc_async_expt;
wire            stb_dc_busy;
wire            stb_dc_full;
wire            stb_dc_hit_addr;
wire            stb_dc_hit_dca;
wire            stb_dc_hit_idx;
wire    [31:0]  stb_dc_ld_data;
wire            stb_dc_ld_fwd_vld;
wire    [31:0]  stb_dc_mtval;
wire            stb_dc_multi_or_part_hit;
wire            stb_dc_pop_en;
wire            stb_idle;
wire    [26:0]  stb_rdl_addr;
wire    [1 :0]  stb_rdl_dca_type;
wire            stb_rdl_dirty;
wire    [1 :0]  stb_rdl_id;
wire            stb_rdl_start;
wire            stb_rdl_way;
wire    [4 :0]  sysmap_lsu_flg;
wire    [31:0]  vb_dahbif_addr;
wire    [31:0]  vb_dahbif_data;
wire    [3 :0]  vb_dahbif_prot;
wire            vb_dahbif_req;
wire            vb_dc_hit_dirty;
wire    [31:0]  vb_dc_ld_data;
wire            vb_dc_ld_fwd_vld;
wire            vb_dc_pop_en;
wire            vb_icc_empty;
wire            vb_icc_grant;
wire            vb_idle;
wire            vb_rdl_grant;
wire            vb_wb_idle;


parameter DATAW = `FLEN;

// &Instance("pa_lsu_ag", "x_pa_lsu_ag"); @27
pa_lsu_ag  x_pa_lsu_ag (
  .ag_dc_addr                      (ag_dc_addr                     ),
  .ag_dc_buf                       (ag_dc_buf                      ),
  .ag_dc_bytes_vld                 (ag_dc_bytes_vld                ),
  .ag_dc_ca                        (ag_dc_ca                       ),
  .ag_dc_dcache_grant              (ag_dc_dcache_grant             ),
  .ag_dc_dest_reg                  (ag_dc_dest_reg                 ),
  .ag_dc_fls                       (ag_dc_fls                      ),
  .ag_dc_func                      (ag_dc_func                     ),
  .ag_dc_inst_vld                  (ag_dc_inst_vld                 ),
  .ag_dc_inst_vld_gate             (ag_dc_inst_vld_gate            ),
  .ag_dc_lm_pass                   (ag_dc_lm_pass                  ),
  .ag_dc_ori_size                  (ag_dc_ori_size                 ),
  .ag_dc_pmp_expt                  (ag_dc_pmp_expt                 ),
  .ag_dc_sign_ext                  (ag_dc_sign_ext                 ),
  .ag_dc_size                      (ag_dc_size                     ),
  .ag_dc_so                        (ag_dc_so                       ),
  .ag_dc_split                     (ag_dc_split                    ),
  .ag_dc_split_first               (ag_dc_split_first              ),
  .ag_dc_split_last                (ag_dc_split_last               ),
  .ag_dc_src1_depd                 (ag_dc_src1_depd                ),
  .ag_dc_src1_reg                  (ag_dc_src1_reg                 ),
  .ag_dc_st_data                   (ag_dc_st_data                  ),
  .ag_dc_warm_up                   (ag_dc_warm_up                  ),
  .ag_dc_wdata_shift               (ag_dc_wdata_shift              ),
  .ag_ncb_addr                     (ag_ncb_addr                    ),
  .ag_ncb_inst_vld                 (ag_ncb_inst_vld                ),
  .ag_ncb_inst_vld_dp              (ag_ncb_inst_vld_dp             ),
  .ag_ncb_src1_reg                 (ag_ncb_src1_reg                ),
  .ag_ncb_st_data                  (ag_ncb_st_data                 ),
  .ag_xx_inst_abort                (ag_xx_inst_abort               ),
  .ag_xx_split_done                (ag_xx_split_done               ),
  .arb_icc_data_grant              (arb_icc_data_grant             ),
  .arb_rdl_data_grant              (arb_rdl_data_grant             ),
  .arb_stb_xx_grant                (arb_stb_xx_grant               ),
  .cp0_lsu_mm                      (cp0_lsu_mm                     ),
  .cpurst_b                        (cpurst_b                       ),
  .dc_ag_async_expt_vld            (dc_ag_async_expt_vld           ),
  .dc_ag_async_ld_inst             (dc_ag_async_ld_inst            ),
  .dc_ag_async_mtval               (dc_ag_async_mtval              ),
  .dc_ag_cache_stall               (dc_ag_cache_stall              ),
  .dc_ag_dcache_addr               (dc_ag_dcache_addr              ),
  .dc_ag_dcache_req                (dc_ag_dcache_req               ),
  .dc_ag_dcache_size               (dc_ag_dcache_size              ),
  .dc_ag_empty                     (dc_ag_empty                    ),
  .dc_ag_func                      (dc_ag_func                     ),
  .dc_ag_stall                     (dc_ag_stall                    ),
  .dcache_data_cen_way0_bank0      (dcache_data_cen_way0_bank0     ),
  .dcache_data_cen_way0_bank1      (dcache_data_cen_way0_bank1     ),
  .dcache_data_cen_way1_bank0      (dcache_data_cen_way1_bank0     ),
  .dcache_data_cen_way1_bank1      (dcache_data_cen_way1_bank1     ),
  .dcache_data_din                 (dcache_data_din                ),
  .dcache_data_idx                 (dcache_data_idx                ),
  .dcache_data_wen                 (dcache_data_wen                ),
  .dcache_dirty_cen                (dcache_dirty_cen               ),
  .dcache_dirty_din                (dcache_dirty_din               ),
  .dcache_dirty_idx                (dcache_dirty_idx               ),
  .dcache_dirty_wen                (dcache_dirty_wen               ),
  .dcache_tag_cen                  (dcache_tag_cen                 ),
  .dcache_tag_din                  (dcache_tag_din                 ),
  .dcache_tag_idx                  (dcache_tag_idx                 ),
  .dcache_tag_wen                  (dcache_tag_wen                 ),
  .forever_cpuclk                  (forever_cpuclk                 ),
  .had_yy_xx_bkpta_base            (had_yy_xx_bkpta_base           ),
  .had_yy_xx_bkpta_mask            (had_yy_xx_bkpta_mask           ),
  .had_yy_xx_bkpta_rc              (had_yy_xx_bkpta_rc             ),
  .had_yy_xx_bkptb_base            (had_yy_xx_bkptb_base           ),
  .had_yy_xx_bkptb_mask            (had_yy_xx_bkptb_mask           ),
  .had_yy_xx_bkptb_rc              (had_yy_xx_bkptb_rc             ),
  .had_yy_xx_bkptc_base            (had_yy_xx_bkptc_base           ),
  .had_yy_xx_bkptc_mask            (had_yy_xx_bkptc_mask           ),
  .had_yy_xx_bkptd_base            (had_yy_xx_bkptd_base           ),
  .had_yy_xx_bkptd_mask            (had_yy_xx_bkptd_mask           ),
  .had_yy_xx_bkpte_base            (had_yy_xx_bkpte_base           ),
  .had_yy_xx_bkpte_mask            (had_yy_xx_bkpte_mask           ),
  .icc_arb_data_bank               (icc_arb_data_bank              ),
  .icc_arb_data_din                (icc_arb_data_din               ),
  .icc_arb_data_idx                (icc_arb_data_idx               ),
  .icc_arb_data_req                (icc_arb_data_req               ),
  .icc_arb_data_way                (icc_arb_data_way               ),
  .icc_arb_data_wen                (icc_arb_data_wen               ),
  .icc_arb_dirty_din               (icc_arb_dirty_din              ),
  .icc_arb_dirty_idx               (icc_arb_dirty_idx              ),
  .icc_arb_dirty_req               (icc_arb_dirty_req              ),
  .icc_arb_dirty_wen               (icc_arb_dirty_wen              ),
  .icc_arb_tag_din                 (icc_arb_tag_din                ),
  .icc_arb_tag_idx                 (icc_arb_tag_idx                ),
  .icc_arb_tag_req                 (icc_arb_tag_req                ),
  .icc_arb_tag_wen                 (icc_arb_tag_wen                ),
  .idu_lsu_ex1_ag_imm              (idu_lsu_ex1_ag_imm             ),
  .idu_lsu_ex1_base                (idu_lsu_ex1_base               ),
  .idu_lsu_ex1_base_sel            (idu_lsu_ex1_base_sel           ),
  .idu_lsu_ex1_base_wb             (idu_lsu_ex1_base_wb            ),
  .idu_lsu_ex1_data                (idu_lsu_ex1_data               ),
  .idu_lsu_ex1_dest_reg            (idu_lsu_ex1_dest_reg           ),
  .idu_lsu_ex1_dest_vld            (idu_lsu_ex1_dest_vld           ),
  .idu_lsu_ex1_fls                 (idu_lsu_ex1_fls                ),
  .idu_lsu_ex1_func                (idu_lsu_ex1_func               ),
  .idu_lsu_ex1_mls                 (idu_lsu_ex1_mls                ),
  .idu_lsu_ex1_offset_sel          (idu_lsu_ex1_offset_sel         ),
  .idu_lsu_ex1_sel                 (idu_lsu_ex1_sel                ),
  .idu_lsu_ex1_sign_extend         (idu_lsu_ex1_sign_extend        ),
  .idu_lsu_ex1_size                (idu_lsu_ex1_size               ),
  .idu_lsu_ex1_src1_depd           (idu_lsu_ex1_src1_depd          ),
  .idu_lsu_ex1_src1_reg            (idu_lsu_ex1_src1_reg           ),
  .idu_xx_ex1_warm_up              (idu_xx_ex1_warm_up             ),
  .lfb_arb_data_bank               (lfb_arb_data_bank              ),
  .lfb_arb_data_din                (lfb_arb_data_din               ),
  .lfb_arb_data_idx                (lfb_arb_data_idx               ),
  .lfb_arb_data_req                (lfb_arb_data_req               ),
  .lfb_arb_data_way                (lfb_arb_data_way               ),
  .lfb_arb_data_wen                (lfb_arb_data_wen               ),
  .lfb_arb_dcache_sel              (lfb_arb_dcache_sel             ),
  .lfb_arb_dirty_din               (lfb_arb_dirty_din              ),
  .lfb_arb_dirty_idx               (lfb_arb_dirty_idx              ),
  .lfb_arb_dirty_req               (lfb_arb_dirty_req              ),
  .lfb_arb_dirty_wen               (lfb_arb_dirty_wen              ),
  .lfb_arb_tag_din                 (lfb_arb_tag_din                ),
  .lfb_arb_tag_idx                 (lfb_arb_tag_idx                ),
  .lfb_arb_tag_req                 (lfb_arb_tag_req                ),
  .lfb_arb_tag_wen                 (lfb_arb_tag_wen                ),
  .lm_clr                          (lm_clr                         ),
  .lm_lr_bus                       (lm_lr_bus                      ),
  .lm_pass                         (lm_pass                        ),
  .lm_sc_bus                       (lm_sc_bus                      ),
  .lm_set                          (lm_set                         ),
  .lm_set_gate                     (lm_set_gate                    ),
  .lsu_biu_async_expt_ack          (lsu_biu_async_expt_ack         ),
  .lsu_hpcp_inst_store             (lsu_hpcp_inst_store            ),
  .lsu_hpcp_inst_store_gate        (lsu_hpcp_inst_store_gate       ),
  .lsu_idu_ex1_src1_update_en      (lsu_idu_ex1_src1_update_en     ),
  .lsu_idu_ex1_src1_update_en_gate (lsu_idu_ex1_src1_update_en_gate),
  .lsu_idu_update_addr             (lsu_idu_update_addr            ),
  .lsu_idu_update_en               (lsu_idu_update_en              ),
  .lsu_idu_update_en_gate          (lsu_idu_update_en_gate         ),
  .lsu_idu_update_offset           (lsu_idu_update_offset          ),
  .lsu_iu_ex1_base_wb              (lsu_iu_ex1_base_wb             ),
  .lsu_iu_ex1_src1_sel             (lsu_iu_ex1_src1_sel            ),
  .lsu_pad_sc_pass                 (lsu_pad_sc_pass                ),
  .lsu_pmp_addr                    (lsu_pmp_addr                   ),
  .lsu_pmp_write                   (lsu_pmp_write                  ),
  .lsu_rtu_async_expt_vld          (lsu_rtu_async_expt_vld         ),
  .lsu_rtu_async_ld_inst           (lsu_rtu_async_ld_inst          ),
  .lsu_rtu_async_mtval             (lsu_rtu_async_mtval            ),
  .lsu_rtu_ex1_bkpta_trap          (lsu_rtu_ex1_bkpta_trap         ),
  .lsu_rtu_ex1_bkptb_trap          (lsu_rtu_ex1_bkptb_trap         ),
  .lsu_rtu_ex1_bkptc_trap          (lsu_rtu_ex1_bkptc_trap         ),
  .lsu_rtu_ex1_bkptd_trap          (lsu_rtu_ex1_bkptd_trap         ),
  .lsu_rtu_ex1_bkpte_trap          (lsu_rtu_ex1_bkpte_trap         ),
  .lsu_rtu_ex1_cmplt               (lsu_rtu_ex1_cmplt              ),
  .lsu_rtu_ex1_cmplt_dp            (lsu_rtu_ex1_cmplt_dp           ),
  .lsu_rtu_ex1_expt_vec            (lsu_rtu_ex1_expt_vec           ),
  .lsu_rtu_ex1_expt_vld            (lsu_rtu_ex1_expt_vld           ),
  .lsu_rtu_ex1_inst_ld             (lsu_rtu_ex1_inst_ld            ),
  .lsu_rtu_ex1_mtval               (lsu_rtu_ex1_mtval              ),
  .lsu_rtu_ex1_stall               (lsu_rtu_ex1_stall              ),
  .lsu_rtu_pmp_deny                (lsu_rtu_pmp_deny               ),
  .lsu_sysmap_pa                   (lsu_sysmap_pa                  ),
  .ncb_ag_async_expt_vld           (ncb_ag_async_expt_vld          ),
  .ncb_ag_async_ld_inst            (ncb_ag_async_ld_inst           ),
  .ncb_ag_async_mtval              (ncb_ag_async_mtval             ),
  .ncb_ag_stall                    (ncb_ag_stall                   ),
  .ncb_xx_no_op                    (ncb_xx_no_op                   ),
  .pad_yy_gate_clk_en_b            (pad_yy_gate_clk_en_b           ),
  .pmp_lsu_acc_deny                (pmp_lsu_acc_deny               ),
  .rdl_arb_data_bank               (rdl_arb_data_bank              ),
  .rdl_arb_data_din                (rdl_arb_data_din               ),
  .rdl_arb_data_idx                (rdl_arb_data_idx               ),
  .rdl_arb_data_req                (rdl_arb_data_req               ),
  .rdl_arb_data_way                (rdl_arb_data_way               ),
  .rdl_arb_data_wen                (rdl_arb_data_wen               ),
  .rdl_arb_dcache_sel              (rdl_arb_dcache_sel             ),
  .rdl_arb_dirty_din               (rdl_arb_dirty_din              ),
  .rdl_arb_dirty_idx               (rdl_arb_dirty_idx              ),
  .rdl_arb_dirty_req               (rdl_arb_dirty_req              ),
  .rdl_arb_dirty_wen               (rdl_arb_dirty_wen              ),
  .rdl_arb_tag_din                 (rdl_arb_tag_din                ),
  .rdl_arb_tag_idx                 (rdl_arb_tag_idx                ),
  .rdl_arb_tag_req                 (rdl_arb_tag_req                ),
  .rdl_arb_tag_wen                 (rdl_arb_tag_wen                ),
  .rtu_lsu_async_expt_ack          (rtu_lsu_async_expt_ack         ),
  .rtu_lsu_ex1_cancel              (rtu_lsu_ex1_cancel             ),
  .rtu_lsu_ex2_stall               (rtu_lsu_ex2_stall              ),
  .rtu_lsu_wb_fwd_data             (rtu_lsu_wb_fwd_data            ),
  .rtu_lsu_wb_fwd_fls              (rtu_lsu_wb_fwd_fls             ),
  .rtu_lsu_wb_fwd_reg              (rtu_lsu_wb_fwd_reg             ),
  .rtu_lsu_wb_fwd_vld              (rtu_lsu_wb_fwd_vld             ),
  .stb_arb_data_bank               (stb_arb_data_bank              ),
  .stb_arb_data_din                (stb_arb_data_din               ),
  .stb_arb_data_idx                (stb_arb_data_idx               ),
  .stb_arb_data_req                (stb_arb_data_req               ),
  .stb_arb_data_way                (stb_arb_data_way               ),
  .stb_arb_data_wen                (stb_arb_data_wen               ),
  .stb_arb_dcache_sel              (stb_arb_dcache_sel             ),
  .stb_arb_dirty_din               (stb_arb_dirty_din              ),
  .stb_arb_dirty_idx               (stb_arb_dirty_idx              ),
  .stb_arb_dirty_req               (stb_arb_dirty_req              ),
  .stb_arb_dirty_wen               (stb_arb_dirty_wen              ),
  .sysmap_lsu_flg                  (sysmap_lsu_flg                 )
);

// &Instance("pa_lsu_lm", "x_pa_lsu_lm"); @28
pa_lsu_lm  x_pa_lsu_lm (
  .ag_dc_warm_up        (ag_dc_warm_up       ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .lm_clr               (lm_clr              ),
  .lm_lr_bus            (lm_lr_bus           ),
  .lm_pass              (lm_pass             ),
  .lm_sc_bus            (lm_sc_bus           ),
  .lm_set               (lm_set              ),
  .lm_set_gate          (lm_set_gate         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .rtu_lsu_expt_ack     (rtu_lsu_expt_ack    ),
  .rtu_lsu_expt_exit    (rtu_lsu_expt_exit   )
);

// &Instance("pa_lsu_ncb", "x_pa_lsu_ncb"); @29
pa_lsu_ncb  x_pa_lsu_ncb (
  .ag_dc_buf                   (ag_dc_buf                  ),
  .ag_dc_bytes_vld             (ag_dc_bytes_vld            ),
  .ag_dc_ca                    (ag_dc_ca                   ),
  .ag_dc_dest_reg              (ag_dc_dest_reg             ),
  .ag_dc_fls                   (ag_dc_fls                  ),
  .ag_dc_func                  (ag_dc_func                 ),
  .ag_dc_lm_pass               (ag_dc_lm_pass              ),
  .ag_dc_ori_size              (ag_dc_ori_size             ),
  .ag_dc_pmp_expt              (ag_dc_pmp_expt             ),
  .ag_dc_sign_ext              (ag_dc_sign_ext             ),
  .ag_dc_size                  (ag_dc_size                 ),
  .ag_dc_so                    (ag_dc_so                   ),
  .ag_dc_split                 (ag_dc_split                ),
  .ag_dc_split_first           (ag_dc_split_first          ),
  .ag_dc_split_last            (ag_dc_split_last           ),
  .ag_dc_src1_depd             (ag_dc_src1_depd            ),
  .ag_dc_warm_up               (ag_dc_warm_up              ),
  .ag_dc_wdata_shift           (ag_dc_wdata_shift          ),
  .ag_ncb_addr                 (ag_ncb_addr                ),
  .ag_ncb_inst_vld             (ag_ncb_inst_vld            ),
  .ag_ncb_inst_vld_dp          (ag_ncb_inst_vld_dp         ),
  .ag_ncb_src1_reg             (ag_ncb_src1_reg            ),
  .ag_ncb_st_data              (ag_ncb_st_data             ),
  .cp0_xx_async_expt_en        (cp0_xx_async_expt_en       ),
  .cp0_yy_mach_mode            (cp0_yy_mach_mode           ),
  .cpurst_b                    (cpurst_b                   ),
  .dahbif_ncb_acc_err          (dahbif_ncb_acc_err         ),
  .dahbif_ncb_cmplt            (dahbif_ncb_cmplt           ),
  .dahbif_ncb_data             (dahbif_ncb_data            ),
  .dahbif_ncb_grant            (dahbif_ncb_grant           ),
  .dahbif_ncb_grant_2          (dahbif_ncb_grant_2         ),
  .forever_cpuclk              (forever_cpuclk             ),
  .ifu_xx_warm_up_clk          (ifu_xx_warm_up_clk         ),
  .lsu_biu_amo_pmp_deny        (lsu_biu_amo_pmp_deny       ),
  .lsu_mb_ex2_uc_addr_2        (lsu_mb_ex2_uc_addr_2       ),
  .lsu_mb_ex2_uc_bytes_vld     (lsu_mb_ex2_uc_bytes_vld    ),
  .lsu_mb_ex2_uc_data          (lsu_mb_ex2_uc_data         ),
  .lsu_mb_ex2_uc_data_vld      (lsu_mb_ex2_uc_data_vld     ),
  .lsu_mb_ex2_uc_data_vld_gate (lsu_mb_ex2_uc_data_vld_gate),
  .lsu_mb_ex2_uc_dest_reg      (lsu_mb_ex2_uc_dest_reg     ),
  .lsu_mb_ex2_uc_fld           (lsu_mb_ex2_uc_fld          ),
  .lsu_mb_ex2_uc_fls           (lsu_mb_ex2_uc_fls          ),
  .lsu_mb_ex2_uc_lock          (lsu_mb_ex2_uc_lock         ),
  .lsu_mb_ex2_uc_sign_ext      (lsu_mb_ex2_uc_sign_ext     ),
  .lsu_mb_ex2_uc_size          (lsu_mb_ex2_uc_size         ),
  .lsu_mb_ex2_uc_split         (lsu_mb_ex2_uc_split        ),
  .lsu_mb_ex2_uc_split_last    (lsu_mb_ex2_uc_split_last   ),
  .lsu_mb_ex2_uc_stall         (lsu_mb_ex2_uc_stall        ),
  .lsu_mb_ex2_uc_vld           (lsu_mb_ex2_uc_vld          ),
  .lsu_xx_ex2_uc_flush         (lsu_xx_ex2_uc_flush        ),
  .ncb_ag_async_expt_vld       (ncb_ag_async_expt_vld      ),
  .ncb_ag_async_ld_inst        (ncb_ag_async_ld_inst       ),
  .ncb_ag_async_mtval          (ncb_ag_async_mtval         ),
  .ncb_ag_stall                (ncb_ag_stall               ),
  .ncb_dahbif_acc_deny         (ncb_dahbif_acc_deny        ),
  .ncb_dahbif_lock             (ncb_dahbif_lock            ),
  .ncb_dahbif_lrsc             (ncb_dahbif_lrsc            ),
  .ncb_dahbif_ncb_wb_addr      (ncb_dahbif_ncb_wb_addr     ),
  .ncb_dahbif_ncb_wb_sel       (ncb_dahbif_ncb_wb_sel      ),
  .ncb_dahbif_prot             (ncb_dahbif_prot            ),
  .ncb_dahbif_req              (ncb_dahbif_req             ),
  .ncb_dahbif_req_dp           (ncb_dahbif_req_dp          ),
  .ncb_dahbif_size             (ncb_dahbif_size            ),
  .ncb_dahbif_uc_ld_addr       (ncb_dahbif_uc_ld_addr      ),
  .ncb_dahbif_wdata            (ncb_dahbif_wdata           ),
  .ncb_dahbif_write            (ncb_dahbif_write           ),
  .ncb_xx_no_op                (ncb_xx_no_op               ),
  .ncb_xx_warm_up              (ncb_xx_warm_up             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .rtu_lsu_wb_fwd_data         (rtu_lsu_wb_fwd_data        ),
  .rtu_lsu_wb_fwd_fls          (rtu_lsu_wb_fwd_fls         ),
  .rtu_lsu_wb_fwd_reg          (rtu_lsu_wb_fwd_reg         ),
  .rtu_lsu_wb_fwd_vld          (rtu_lsu_wb_fwd_vld         ),
  .rtu_yy_xx_async_flush       (rtu_yy_xx_async_flush      )
);

assign lsu_xx_no_op = dc_idle & lfb_xx_idle & stb_idle & vb_idle & vb_wb_idle & icc_xx_idle & ncb_xx_no_op;
assign lsu_xx_warm_up = ncb_xx_warm_up;

assign dc_ag_empty  = dc_idle & lfb_xx_idle & stb_idle & icc_xx_idle & vb_wb_idle;
// &Instance("pa_lsu_dc", "x_pa_lsu_dc"); @35
pa_lsu_dc  x_pa_lsu_dc (
  .ag_dc_addr                       (ag_dc_addr                      ),
  .ag_dc_buf                        (ag_dc_buf                       ),
  .ag_dc_bytes_vld                  (ag_dc_bytes_vld                 ),
  .ag_dc_ca                         (ag_dc_ca                        ),
  .ag_dc_dcache_grant               (ag_dc_dcache_grant              ),
  .ag_dc_dest_reg                   (ag_dc_dest_reg                  ),
  .ag_dc_fls                        (ag_dc_fls                       ),
  .ag_dc_func                       (ag_dc_func                      ),
  .ag_dc_inst_vld                   (ag_dc_inst_vld                  ),
  .ag_dc_inst_vld_gate              (ag_dc_inst_vld_gate             ),
  .ag_dc_lm_pass                    (ag_dc_lm_pass                   ),
  .ag_dc_ori_size                   (ag_dc_ori_size                  ),
  .ag_dc_pmp_expt                   (ag_dc_pmp_expt                  ),
  .ag_dc_sign_ext                   (ag_dc_sign_ext                  ),
  .ag_dc_size                       (ag_dc_size                      ),
  .ag_dc_split                      (ag_dc_split                     ),
  .ag_dc_split_first                (ag_dc_split_first               ),
  .ag_dc_split_last                 (ag_dc_split_last                ),
  .ag_dc_src1_depd                  (ag_dc_src1_depd                 ),
  .ag_dc_src1_reg                   (ag_dc_src1_reg                  ),
  .ag_dc_st_data                    (ag_dc_st_data                   ),
  .ag_dc_warm_up                    (ag_dc_warm_up                   ),
  .ag_dc_wdata_shift                (ag_dc_wdata_shift               ),
  .cp0_lsu_dcache_en                (cp0_lsu_dcache_en               ),
  .cp0_lsu_dcache_wa                (cp0_lsu_dcache_wa               ),
  .cpurst_b                         (cpurst_b                        ),
  .dc_ag_async_expt_vld             (dc_ag_async_expt_vld            ),
  .dc_ag_async_ld_inst              (dc_ag_async_ld_inst             ),
  .dc_ag_async_mtval                (dc_ag_async_mtval               ),
  .dc_ag_cache_stall                (dc_ag_cache_stall               ),
  .dc_ag_dcache_addr                (dc_ag_dcache_addr               ),
  .dc_ag_dcache_req                 (dc_ag_dcache_req                ),
  .dc_ag_dcache_size                (dc_ag_dcache_size               ),
  .dc_ag_func                       (dc_ag_func                      ),
  .dc_ag_stall                      (dc_ag_stall                     ),
  .dc_icc_way0_data                 (dc_icc_way0_data                ),
  .dc_icc_way0_dirty                (dc_icc_way0_dirty               ),
  .dc_icc_way0_tag                  (dc_icc_way0_tag                 ),
  .dc_icc_way1_data                 (dc_icc_way1_data                ),
  .dc_icc_way1_dirty                (dc_icc_way1_dirty               ),
  .dc_icc_way1_tag                  (dc_icc_way1_tag                 ),
  .dc_idle                          (dc_idle                         ),
  .dc_lfb_addr                      (dc_lfb_addr                     ),
  .dc_lfb_buf                       (dc_lfb_buf                      ),
  .dc_lfb_ca                        (dc_lfb_ca                       ),
  .dc_lfb_ca_raw                    (dc_lfb_ca_raw                   ),
  .dc_lfb_create_en                 (dc_lfb_create_en                ),
  .dc_lfb_create_en_gate            (dc_lfb_create_en_gate           ),
  .dc_lfb_inst_ld                   (dc_lfb_inst_ld                  ),
  .dc_lfb_lock_trans                (dc_lfb_lock_trans               ),
  .dc_lfb_lr_inst                   (dc_lfb_lr_inst                  ),
  .dc_lfb_size                      (dc_lfb_size                     ),
  .dc_lfb_warm_up                   (dc_lfb_warm_up                  ),
  .dc_rdl_fifo                      (dc_rdl_fifo                     ),
  .dc_rdl_way0_data                 (dc_rdl_way0_data                ),
  .dc_rdl_way0_dirty                (dc_rdl_way0_dirty               ),
  .dc_rdl_way0_tag                  (dc_rdl_way0_tag                 ),
  .dc_rdl_way0_vld                  (dc_rdl_way0_vld                 ),
  .dc_rdl_way1_data                 (dc_rdl_way1_data                ),
  .dc_rdl_way1_dirty                (dc_rdl_way1_dirty               ),
  .dc_rdl_way1_tag                  (dc_rdl_way1_tag                 ),
  .dc_rdl_way1_vld                  (dc_rdl_way1_vld                 ),
  .dc_stb_addr                      (dc_stb_addr                     ),
  .dc_stb_attr                      (dc_stb_attr                     ),
  .dc_stb_bytes_vld                 (dc_stb_bytes_vld                ),
  .dc_stb_cache_hit                 (dc_stb_cache_hit                ),
  .dc_stb_create_en                 (dc_stb_create_en                ),
  .dc_stb_create_en_gate            (dc_stb_create_en_gate           ),
  .dc_stb_data                      (dc_stb_data                     ),
  .dc_stb_dcache_dirty              (dc_stb_dcache_dirty             ),
  .dc_stb_dcache_inst               (dc_stb_dcache_inst              ),
  .dc_stb_dcache_type               (dc_stb_dcache_type              ),
  .dc_stb_dcache_way                (dc_stb_dcache_way               ),
  .dc_stb_fls                       (dc_stb_fls                      ),
  .dc_stb_lock_trans                (dc_stb_lock_trans               ),
  .dc_stb_sc_inst                   (dc_stb_sc_inst                  ),
  .dc_stb_shift                     (dc_stb_shift                    ),
  .dc_stb_size                      (dc_stb_size                     ),
  .dc_stb_split_first               (dc_stb_split_first              ),
  .dc_stb_src1_depd                 (dc_stb_src1_depd                ),
  .dc_stb_src1_reg                  (dc_stb_src1_reg                 ),
  .dc_stb_wait_lfb                  (dc_stb_wait_lfb                 ),
  .dc_stb_warm_up                   (dc_stb_warm_up                  ),
  .dc_vb_st_amold                   (dc_vb_st_amold                  ),
  .dc_xx_addr                       (dc_xx_addr                      ),
  .dc_xx_bytes_vld                  (dc_xx_bytes_vld                 ),
  .dcache_data_dout_way0            (dcache_data_dout_way0           ),
  .dcache_data_dout_way1            (dcache_data_dout_way1           ),
  .dcache_dirty_dout                (dcache_dirty_dout               ),
  .dcache_tag_dout                  (dcache_tag_dout                 ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .ifu_xx_warm_up_clk               (ifu_xx_warm_up_clk              ),
  .lfb_dc_async_expt                (lfb_dc_async_expt               ),
  .lfb_dc_busy                      (lfb_dc_busy                     ),
  .lfb_dc_hit_idx                   (lfb_dc_hit_idx                  ),
  .lfb_dc_ld_cmplt                  (lfb_dc_ld_cmplt                 ),
  .lfb_dc_ld_data                   (lfb_dc_ld_data                  ),
  .lfb_dc_ld_data_vld               (lfb_dc_ld_data_vld              ),
  .lfb_dc_pop_en                    (lfb_dc_pop_en                   ),
  .lsu_hpcp_cache_read_access       (lsu_hpcp_cache_read_access      ),
  .lsu_hpcp_cache_read_access_gate  (lsu_hpcp_cache_read_access_gate ),
  .lsu_hpcp_cache_read_miss         (lsu_hpcp_cache_read_miss        ),
  .lsu_hpcp_cache_read_miss_gate    (lsu_hpcp_cache_read_miss_gate   ),
  .lsu_hpcp_cache_write_access      (lsu_hpcp_cache_write_access     ),
  .lsu_hpcp_cache_write_access_gate (lsu_hpcp_cache_write_access_gate),
  .lsu_hpcp_cache_write_miss        (lsu_hpcp_cache_write_miss       ),
  .lsu_hpcp_cache_write_miss_gate   (lsu_hpcp_cache_write_miss_gate  ),
  .lsu_mb_ex2_ca_addr_2             (lsu_mb_ex2_ca_addr_2            ),
  .lsu_mb_ex2_ca_bytes_vld          (lsu_mb_ex2_ca_bytes_vld         ),
  .lsu_mb_ex2_ca_data               (lsu_mb_ex2_ca_data              ),
  .lsu_mb_ex2_ca_data_vld           (lsu_mb_ex2_ca_data_vld          ),
  .lsu_mb_ex2_ca_data_vld_gate      (lsu_mb_ex2_ca_data_vld_gate     ),
  .lsu_mb_ex2_ca_dest_reg           (lsu_mb_ex2_ca_dest_reg          ),
  .lsu_mb_ex2_ca_fld                (lsu_mb_ex2_ca_fld               ),
  .lsu_mb_ex2_ca_fls                (lsu_mb_ex2_ca_fls               ),
  .lsu_mb_ex2_ca_lock               (lsu_mb_ex2_ca_lock              ),
  .lsu_mb_ex2_ca_sign_ext           (lsu_mb_ex2_ca_sign_ext          ),
  .lsu_mb_ex2_ca_size               (lsu_mb_ex2_ca_size              ),
  .lsu_mb_ex2_ca_split              (lsu_mb_ex2_ca_split             ),
  .lsu_mb_ex2_ca_split_last         (lsu_mb_ex2_ca_split_last        ),
  .lsu_mb_ex2_ca_stall              (lsu_mb_ex2_ca_stall             ),
  .lsu_mb_ex2_ca_vld                (lsu_mb_ex2_ca_vld               ),
  .lsu_top_dc_vld                   (lsu_top_dc_vld                  ),
  .lsu_xx_ex2_ca_flush              (lsu_xx_ex2_ca_flush             ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .rtu_lsu_wb_fwd_data              (rtu_lsu_wb_fwd_data             ),
  .rtu_lsu_wb_fwd_fls               (rtu_lsu_wb_fwd_fls              ),
  .rtu_lsu_wb_fwd_reg               (rtu_lsu_wb_fwd_reg              ),
  .rtu_lsu_wb_fwd_vld               (rtu_lsu_wb_fwd_vld              ),
  .rtu_yy_xx_async_flush            (rtu_yy_xx_async_flush           ),
  .stb_dc_async_expt                (stb_dc_async_expt               ),
  .stb_dc_busy                      (stb_dc_busy                     ),
  .stb_dc_full                      (stb_dc_full                     ),
  .stb_dc_hit_addr                  (stb_dc_hit_addr                 ),
  .stb_dc_hit_dca                   (stb_dc_hit_dca                  ),
  .stb_dc_hit_idx                   (stb_dc_hit_idx                  ),
  .stb_dc_ld_data                   (stb_dc_ld_data                  ),
  .stb_dc_ld_fwd_vld                (stb_dc_ld_fwd_vld               ),
  .stb_dc_mtval                     (stb_dc_mtval                    ),
  .stb_dc_multi_or_part_hit         (stb_dc_multi_or_part_hit        ),
  .stb_dc_pop_en                    (stb_dc_pop_en                   ),
  .vb_dc_hit_dirty                  (vb_dc_hit_dirty                 ),
  .vb_dc_ld_data                    (vb_dc_ld_data                   ),
  .vb_dc_ld_fwd_vld                 (vb_dc_ld_fwd_vld                ),
  .vb_dc_pop_en                     (vb_dc_pop_en                    )
);

// &Instance("pa_lsu_icc", "x_pa_lsu_icc"); @36
pa_lsu_icc  x_pa_lsu_icc (
  .arb_icc_data_grant   (arb_icc_data_grant  ),
  .cp0_lsu_icc_addr     (cp0_lsu_icc_addr    ),
  .cp0_lsu_icc_op       (cp0_lsu_icc_op      ),
  .cp0_lsu_icc_req      (cp0_lsu_icc_req     ),
  .cp0_lsu_icc_type     (cp0_lsu_icc_type    ),
  .cpurst_b             (cpurst_b            ),
  .dc_icc_way0_data     (dc_icc_way0_data    ),
  .dc_icc_way0_dirty    (dc_icc_way0_dirty   ),
  .dc_icc_way0_tag      (dc_icc_way0_tag     ),
  .dc_icc_way1_data     (dc_icc_way1_data    ),
  .dc_icc_way1_dirty    (dc_icc_way1_dirty   ),
  .dc_icc_way1_tag      (dc_icc_way1_tag     ),
  .forever_cpuclk       (forever_cpuclk      ),
  .icc_arb_data_bank    (icc_arb_data_bank   ),
  .icc_arb_data_din     (icc_arb_data_din    ),
  .icc_arb_data_idx     (icc_arb_data_idx    ),
  .icc_arb_data_req     (icc_arb_data_req    ),
  .icc_arb_data_way     (icc_arb_data_way    ),
  .icc_arb_data_wen     (icc_arb_data_wen    ),
  .icc_arb_dirty_din    (icc_arb_dirty_din   ),
  .icc_arb_dirty_idx    (icc_arb_dirty_idx   ),
  .icc_arb_dirty_req    (icc_arb_dirty_req   ),
  .icc_arb_dirty_wen    (icc_arb_dirty_wen   ),
  .icc_arb_tag_din      (icc_arb_tag_din     ),
  .icc_arb_tag_idx      (icc_arb_tag_idx     ),
  .icc_arb_tag_req      (icc_arb_tag_req     ),
  .icc_arb_tag_wen      (icc_arb_tag_wen     ),
  .icc_vb_addr          (icc_vb_addr         ),
  .icc_vb_clr_vld       (icc_vb_clr_vld      ),
  .icc_vb_create_en     (icc_vb_create_en    ),
  .icc_vb_data          (icc_vb_data         ),
  .icc_vb_data_cnt      (icc_vb_data_cnt     ),
  .icc_vb_data_create   (icc_vb_data_create  ),
  .icc_vb_line_dirty    (icc_vb_line_dirty   ),
  .icc_xx_idle          (icc_xx_idle         ),
  .lfb_icc_warm_up      (lfb_icc_warm_up     ),
  .lsu_cp0_icc_done     (lsu_cp0_icc_done    ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .vb_icc_empty         (vb_icc_empty        ),
  .vb_icc_grant         (vb_icc_grant        )
);

// &Instance("pa_lsu_lfb", "x_pa_lsu_lfb"); @37
pa_lsu_lfb  x_pa_lsu_lfb (
  .cp0_yy_mach_mode      (cp0_yy_mach_mode     ),
  .cpurst_b              (cpurst_b             ),
  .dahbif_lfb_acc_err    (dahbif_lfb_acc_err   ),
  .dahbif_lfb_cmplt      (dahbif_lfb_cmplt     ),
  .dahbif_lfb_data       (dahbif_lfb_data      ),
  .dahbif_lfb_grant      (dahbif_lfb_grant     ),
  .dc_lfb_addr           (dc_lfb_addr          ),
  .dc_lfb_buf            (dc_lfb_buf           ),
  .dc_lfb_ca             (dc_lfb_ca            ),
  .dc_lfb_ca_raw         (dc_lfb_ca_raw        ),
  .dc_lfb_create_en      (dc_lfb_create_en     ),
  .dc_lfb_create_en_gate (dc_lfb_create_en_gate),
  .dc_lfb_inst_ld        (dc_lfb_inst_ld       ),
  .dc_lfb_lock_trans     (dc_lfb_lock_trans    ),
  .dc_lfb_lr_inst        (dc_lfb_lr_inst       ),
  .dc_lfb_size           (dc_lfb_size          ),
  .dc_lfb_warm_up        (dc_lfb_warm_up       ),
  .dc_xx_addr            (dc_xx_addr           ),
  .forever_cpuclk        (forever_cpuclk       ),
  .ifu_xx_warm_up_clk    (ifu_xx_warm_up_clk   ),
  .lfb_arb_data_bank     (lfb_arb_data_bank    ),
  .lfb_arb_data_din      (lfb_arb_data_din     ),
  .lfb_arb_data_idx      (lfb_arb_data_idx     ),
  .lfb_arb_data_req      (lfb_arb_data_req     ),
  .lfb_arb_data_way      (lfb_arb_data_way     ),
  .lfb_arb_data_wen      (lfb_arb_data_wen     ),
  .lfb_arb_dcache_sel    (lfb_arb_dcache_sel   ),
  .lfb_arb_dirty_din     (lfb_arb_dirty_din    ),
  .lfb_arb_dirty_idx     (lfb_arb_dirty_idx    ),
  .lfb_arb_dirty_req     (lfb_arb_dirty_req    ),
  .lfb_arb_dirty_wen     (lfb_arb_dirty_wen    ),
  .lfb_arb_tag_din       (lfb_arb_tag_din      ),
  .lfb_arb_tag_idx       (lfb_arb_tag_idx      ),
  .lfb_arb_tag_req       (lfb_arb_tag_req      ),
  .lfb_arb_tag_wen       (lfb_arb_tag_wen      ),
  .lfb_dahbif_addr       (lfb_dahbif_addr      ),
  .lfb_dahbif_burst      (lfb_dahbif_burst     ),
  .lfb_dahbif_lock       (lfb_dahbif_lock      ),
  .lfb_dahbif_lr_inst    (lfb_dahbif_lr_inst   ),
  .lfb_dahbif_prot       (lfb_dahbif_prot      ),
  .lfb_dahbif_req        (lfb_dahbif_req       ),
  .lfb_dahbif_size       (lfb_dahbif_size      ),
  .lfb_dc_async_expt     (lfb_dc_async_expt    ),
  .lfb_dc_busy           (lfb_dc_busy          ),
  .lfb_dc_hit_idx        (lfb_dc_hit_idx       ),
  .lfb_dc_ld_cmplt       (lfb_dc_ld_cmplt      ),
  .lfb_dc_ld_data        (lfb_dc_ld_data       ),
  .lfb_dc_ld_data_vld    (lfb_dc_ld_data_vld   ),
  .lfb_dc_pop_en         (lfb_dc_pop_en        ),
  .lfb_icc_warm_up       (lfb_icc_warm_up      ),
  .lfb_rdl_index         (lfb_rdl_index        ),
  .lfb_rdl_start         (lfb_rdl_start        ),
  .lfb_rdl_start_gate    (lfb_rdl_start_gate   ),
  .lfb_rdl_warm_up       (lfb_rdl_warm_up      ),
  .lfb_stb_done          (lfb_stb_done         ),
  .lfb_stb_err           (lfb_stb_err          ),
  .lfb_stb_fifo          (lfb_stb_fifo         ),
  .lfb_stb_fifo_update   (lfb_stb_fifo_update  ),
  .lfb_xx_idle           (lfb_xx_idle          ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rdl_lfb_done          (rdl_lfb_done         ),
  .rdl_lfb_fifo          (rdl_lfb_fifo         ),
  .rdl_lfb_fifo_save     (rdl_lfb_fifo_save    ),
  .rdl_lfb_grant         (rdl_lfb_grant        ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush)
);

// &Instance("pa_lsu_rdl", "x_pa_lsu_rdl"); @38
pa_lsu_rdl  x_pa_lsu_rdl (
  .arb_rdl_data_grant    (arb_rdl_data_grant   ),
  .cpurst_b              (cpurst_b             ),
  .dc_rdl_fifo           (dc_rdl_fifo          ),
  .dc_rdl_way0_data      (dc_rdl_way0_data     ),
  .dc_rdl_way0_dirty     (dc_rdl_way0_dirty    ),
  .dc_rdl_way0_tag       (dc_rdl_way0_tag      ),
  .dc_rdl_way0_vld       (dc_rdl_way0_vld      ),
  .dc_rdl_way1_data      (dc_rdl_way1_data     ),
  .dc_rdl_way1_dirty     (dc_rdl_way1_dirty    ),
  .dc_rdl_way1_tag       (dc_rdl_way1_tag      ),
  .dc_rdl_way1_vld       (dc_rdl_way1_vld      ),
  .forever_cpuclk        (forever_cpuclk       ),
  .lfb_rdl_index         (lfb_rdl_index        ),
  .lfb_rdl_start         (lfb_rdl_start        ),
  .lfb_rdl_start_gate    (lfb_rdl_start_gate   ),
  .lfb_rdl_warm_up       (lfb_rdl_warm_up      ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rdl_arb_data_bank     (rdl_arb_data_bank    ),
  .rdl_arb_data_din      (rdl_arb_data_din     ),
  .rdl_arb_data_idx      (rdl_arb_data_idx     ),
  .rdl_arb_data_req      (rdl_arb_data_req     ),
  .rdl_arb_data_way      (rdl_arb_data_way     ),
  .rdl_arb_data_wen      (rdl_arb_data_wen     ),
  .rdl_arb_dcache_sel    (rdl_arb_dcache_sel   ),
  .rdl_arb_dirty_din     (rdl_arb_dirty_din    ),
  .rdl_arb_dirty_idx     (rdl_arb_dirty_idx    ),
  .rdl_arb_dirty_req     (rdl_arb_dirty_req    ),
  .rdl_arb_dirty_wen     (rdl_arb_dirty_wen    ),
  .rdl_arb_tag_din       (rdl_arb_tag_din      ),
  .rdl_arb_tag_idx       (rdl_arb_tag_idx      ),
  .rdl_arb_tag_req       (rdl_arb_tag_req      ),
  .rdl_arb_tag_wen       (rdl_arb_tag_wen      ),
  .rdl_lfb_done          (rdl_lfb_done         ),
  .rdl_lfb_fifo          (rdl_lfb_fifo         ),
  .rdl_lfb_fifo_save     (rdl_lfb_fifo_save    ),
  .rdl_lfb_grant         (rdl_lfb_grant        ),
  .rdl_stb_cmplt_id      (rdl_stb_cmplt_id     ),
  .rdl_stb_dca_cmplt     (rdl_stb_dca_cmplt    ),
  .rdl_stb_dca_grant     (rdl_stb_dca_grant    ),
  .rdl_vb_addr           (rdl_vb_addr          ),
  .rdl_vb_create_en      (rdl_vb_create_en     ),
  .rdl_vb_data           (rdl_vb_data          ),
  .rdl_vb_data_cnt       (rdl_vb_data_cnt      ),
  .rdl_vb_data_create    (rdl_vb_data_create   ),
  .rdl_vb_line_dirty     (rdl_vb_line_dirty    ),
  .rdl_vb_warm_up        (rdl_vb_warm_up       ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush),
  .stb_rdl_addr          (stb_rdl_addr         ),
  .stb_rdl_dca_type      (stb_rdl_dca_type     ),
  .stb_rdl_dirty         (stb_rdl_dirty        ),
  .stb_rdl_id            (stb_rdl_id           ),
  .stb_rdl_start         (stb_rdl_start        ),
  .stb_rdl_way           (stb_rdl_way          ),
  .vb_rdl_grant          (vb_rdl_grant         )
);

// &Instance("pa_lsu_stb", "x_pa_lsu_stb"); @39
pa_lsu_stb  x_pa_lsu_stb (
  .arb_stb_xx_grant         (arb_stb_xx_grant        ),
  .cp0_lsu_dcache_wb        (cp0_lsu_dcache_wb       ),
  .cp0_yy_mach_mode         (cp0_yy_mach_mode        ),
  .cpurst_b                 (cpurst_b                ),
  .dahbif_stb_acc_ecc       (dahbif_stb_acc_ecc      ),
  .dahbif_stb_cmplt         (dahbif_stb_cmplt        ),
  .dahbif_stb_grant         (dahbif_stb_grant        ),
  .dahbif_stb_grant_2       (dahbif_stb_grant_2      ),
  .dc_stb_addr              (dc_stb_addr             ),
  .dc_stb_attr              (dc_stb_attr             ),
  .dc_stb_bytes_vld         (dc_stb_bytes_vld        ),
  .dc_stb_cache_hit         (dc_stb_cache_hit        ),
  .dc_stb_create_en         (dc_stb_create_en        ),
  .dc_stb_create_en_gate    (dc_stb_create_en_gate   ),
  .dc_stb_data              (dc_stb_data             ),
  .dc_stb_dcache_dirty      (dc_stb_dcache_dirty     ),
  .dc_stb_dcache_inst       (dc_stb_dcache_inst      ),
  .dc_stb_dcache_type       (dc_stb_dcache_type      ),
  .dc_stb_dcache_way        (dc_stb_dcache_way       ),
  .dc_stb_fls               (dc_stb_fls              ),
  .dc_stb_lock_trans        (dc_stb_lock_trans       ),
  .dc_stb_sc_inst           (dc_stb_sc_inst          ),
  .dc_stb_shift             (dc_stb_shift            ),
  .dc_stb_size              (dc_stb_size             ),
  .dc_stb_split_first       (dc_stb_split_first      ),
  .dc_stb_src1_depd         (dc_stb_src1_depd        ),
  .dc_stb_src1_reg          (dc_stb_src1_reg         ),
  .dc_stb_wait_lfb          (dc_stb_wait_lfb         ),
  .dc_stb_warm_up           (dc_stb_warm_up          ),
  .dc_xx_addr               (dc_xx_addr              ),
  .dc_xx_bytes_vld          (dc_xx_bytes_vld         ),
  .forever_cpuclk           (forever_cpuclk          ),
  .lfb_stb_done             (lfb_stb_done            ),
  .lfb_stb_err              (lfb_stb_err             ),
  .lfb_stb_fifo             (lfb_stb_fifo            ),
  .lfb_stb_fifo_update      (lfb_stb_fifo_update     ),
  .lfb_xx_idle              (lfb_xx_idle             ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    ),
  .rdl_stb_cmplt_id         (rdl_stb_cmplt_id        ),
  .rdl_stb_dca_cmplt        (rdl_stb_dca_cmplt       ),
  .rdl_stb_dca_grant        (rdl_stb_dca_grant       ),
  .rtu_yy_xx_async_flush    (rtu_yy_xx_async_flush   ),
  .stb_arb_data_bank        (stb_arb_data_bank       ),
  .stb_arb_data_din         (stb_arb_data_din        ),
  .stb_arb_data_idx         (stb_arb_data_idx        ),
  .stb_arb_data_req         (stb_arb_data_req        ),
  .stb_arb_data_way         (stb_arb_data_way        ),
  .stb_arb_data_wen         (stb_arb_data_wen        ),
  .stb_arb_dcache_sel       (stb_arb_dcache_sel      ),
  .stb_arb_dirty_din        (stb_arb_dirty_din       ),
  .stb_arb_dirty_idx        (stb_arb_dirty_idx       ),
  .stb_arb_dirty_req        (stb_arb_dirty_req       ),
  .stb_arb_dirty_wen        (stb_arb_dirty_wen       ),
  .stb_dahbif_addr          (stb_dahbif_addr         ),
  .stb_dahbif_data          (stb_dahbif_data         ),
  .stb_dahbif_lock          (stb_dahbif_lock         ),
  .stb_dahbif_prot          (stb_dahbif_prot         ),
  .stb_dahbif_req           (stb_dahbif_req          ),
  .stb_dahbif_sc_inst       (stb_dahbif_sc_inst      ),
  .stb_dahbif_size          (stb_dahbif_size         ),
  .stb_dc_async_expt        (stb_dc_async_expt       ),
  .stb_dc_busy              (stb_dc_busy             ),
  .stb_dc_full              (stb_dc_full             ),
  .stb_dc_hit_addr          (stb_dc_hit_addr         ),
  .stb_dc_hit_dca           (stb_dc_hit_dca          ),
  .stb_dc_hit_idx           (stb_dc_hit_idx          ),
  .stb_dc_ld_data           (stb_dc_ld_data          ),
  .stb_dc_ld_fwd_vld        (stb_dc_ld_fwd_vld       ),
  .stb_dc_mtval             (stb_dc_mtval            ),
  .stb_dc_multi_or_part_hit (stb_dc_multi_or_part_hit),
  .stb_dc_pop_en            (stb_dc_pop_en           ),
  .stb_idle                 (stb_idle                ),
  .stb_rdl_addr             (stb_rdl_addr            ),
  .stb_rdl_dca_type         (stb_rdl_dca_type        ),
  .stb_rdl_dirty            (stb_rdl_dirty           ),
  .stb_rdl_id               (stb_rdl_id              ),
  .stb_rdl_start            (stb_rdl_start           ),
  .stb_rdl_way              (stb_rdl_way             )
);

// &Instance("pa_lsu_vb", "x_pa_lsu_vb"); @40
pa_lsu_vb  x_pa_lsu_vb (
  .cp0_lsu_fence_req     (cp0_lsu_fence_req    ),
  .cp0_yy_mach_mode      (cp0_yy_mach_mode     ),
  .cpurst_b              (cpurst_b             ),
  .dahbif_vb_acc_ecc     (dahbif_vb_acc_ecc    ),
  .dahbif_vb_cmplt       (dahbif_vb_cmplt      ),
  .dahbif_vb_grant       (dahbif_vb_grant      ),
  .dc_vb_st_amold        (dc_vb_st_amold       ),
  .dc_xx_addr            (dc_xx_addr           ),
  .forever_cpuclk        (forever_cpuclk       ),
  .icc_vb_addr           (icc_vb_addr          ),
  .icc_vb_clr_vld        (icc_vb_clr_vld       ),
  .icc_vb_create_en      (icc_vb_create_en     ),
  .icc_vb_data           (icc_vb_data          ),
  .icc_vb_data_cnt       (icc_vb_data_cnt      ),
  .icc_vb_data_create    (icc_vb_data_create   ),
  .icc_vb_line_dirty     (icc_vb_line_dirty    ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rdl_vb_addr           (rdl_vb_addr          ),
  .rdl_vb_create_en      (rdl_vb_create_en     ),
  .rdl_vb_data           (rdl_vb_data          ),
  .rdl_vb_data_cnt       (rdl_vb_data_cnt      ),
  .rdl_vb_data_create    (rdl_vb_data_create   ),
  .rdl_vb_line_dirty     (rdl_vb_line_dirty    ),
  .rdl_vb_warm_up        (rdl_vb_warm_up       ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush),
  .vb_dahbif_addr        (vb_dahbif_addr       ),
  .vb_dahbif_data        (vb_dahbif_data       ),
  .vb_dahbif_prot        (vb_dahbif_prot       ),
  .vb_dahbif_req         (vb_dahbif_req        ),
  .vb_dc_hit_dirty       (vb_dc_hit_dirty      ),
  .vb_dc_ld_data         (vb_dc_ld_data        ),
  .vb_dc_ld_fwd_vld      (vb_dc_ld_fwd_vld     ),
  .vb_dc_pop_en          (vb_dc_pop_en         ),
  .vb_icc_empty          (vb_icc_empty         ),
  .vb_icc_grant          (vb_icc_grant         ),
  .vb_idle               (vb_idle              ),
  .vb_rdl_grant          (vb_rdl_grant         ),
  .vb_wb_idle            (vb_wb_idle           )
);

// &Instance("pa_dcache_top", "x_pa_dcache_top"); @41
pa_dcache_top  x_pa_dcache_top (
  .dcache_data_cen_way0_bank0 (dcache_data_cen_way0_bank0),
  .dcache_data_cen_way0_bank1 (dcache_data_cen_way0_bank1),
  .dcache_data_cen_way1_bank0 (dcache_data_cen_way1_bank0),
  .dcache_data_cen_way1_bank1 (dcache_data_cen_way1_bank1),
  .dcache_data_din            (dcache_data_din           ),
  .dcache_data_dout_way0      (dcache_data_dout_way0     ),
  .dcache_data_dout_way1      (dcache_data_dout_way1     ),
  .dcache_data_idx            (dcache_data_idx           ),
  .dcache_data_wen            (dcache_data_wen           ),
  .dcache_dirty_cen           (dcache_dirty_cen          ),
  .dcache_dirty_din           (dcache_dirty_din          ),
  .dcache_dirty_dout          (dcache_dirty_dout         ),
  .dcache_dirty_idx           (dcache_dirty_idx          ),
  .dcache_dirty_wen           (dcache_dirty_wen          ),
  .dcache_tag_cen             (dcache_tag_cen            ),
  .dcache_tag_din             (dcache_tag_din            ),
  .dcache_tag_dout            (dcache_tag_dout           ),
  .dcache_tag_idx             (dcache_tag_idx            ),
  .dcache_tag_wen             (dcache_tag_wen            ),
  .forever_cpuclk             (forever_cpuclk            ),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      )
);

// &Instance("pa_lsu_dahbif", "x_pa_lsu_dahbif"); @42
pa_lsu_dahbif  x_pa_lsu_dahbif (
  .bmu_lsu_acc_err        (bmu_lsu_acc_err       ),
  .bmu_lsu_grant          (bmu_lsu_grant         ),
  .bmu_lsu_rdata          (bmu_lsu_rdata         ),
  .bmu_lsu_trans_cmplt    (bmu_lsu_trans_cmplt   ),
  .cpurst_b               (cpurst_b              ),
  .dahbif_lfb_acc_err     (dahbif_lfb_acc_err    ),
  .dahbif_lfb_cmplt       (dahbif_lfb_cmplt      ),
  .dahbif_lfb_data        (dahbif_lfb_data       ),
  .dahbif_lfb_grant       (dahbif_lfb_grant      ),
  .dahbif_ncb_acc_err     (dahbif_ncb_acc_err    ),
  .dahbif_ncb_cmplt       (dahbif_ncb_cmplt      ),
  .dahbif_ncb_data        (dahbif_ncb_data       ),
  .dahbif_ncb_grant       (dahbif_ncb_grant      ),
  .dahbif_ncb_grant_2     (dahbif_ncb_grant_2    ),
  .dahbif_stb_acc_ecc     (dahbif_stb_acc_ecc    ),
  .dahbif_stb_cmplt       (dahbif_stb_cmplt      ),
  .dahbif_stb_grant       (dahbif_stb_grant      ),
  .dahbif_stb_grant_2     (dahbif_stb_grant_2    ),
  .dahbif_vb_acc_ecc      (dahbif_vb_acc_ecc     ),
  .dahbif_vb_cmplt        (dahbif_vb_cmplt       ),
  .dahbif_vb_grant        (dahbif_vb_grant       ),
  .forever_cpuclk         (forever_cpuclk        ),
  .lfb_dahbif_addr        (lfb_dahbif_addr       ),
  .lfb_dahbif_burst       (lfb_dahbif_burst      ),
  .lfb_dahbif_lock        (lfb_dahbif_lock       ),
  .lfb_dahbif_lr_inst     (lfb_dahbif_lr_inst    ),
  .lfb_dahbif_prot        (lfb_dahbif_prot       ),
  .lfb_dahbif_req         (lfb_dahbif_req        ),
  .lfb_dahbif_size        (lfb_dahbif_size       ),
  .lsu_bmu_acc_deny       (lsu_bmu_acc_deny      ),
  .lsu_bmu_addr           (lsu_bmu_addr          ),
  .lsu_bmu_burst          (lsu_bmu_burst         ),
  .lsu_bmu_lock           (lsu_bmu_lock          ),
  .lsu_bmu_lrsc           (lsu_bmu_lrsc          ),
  .lsu_bmu_prot           (lsu_bmu_prot          ),
  .lsu_bmu_req            (lsu_bmu_req           ),
  .lsu_bmu_req_dp         (lsu_bmu_req_dp        ),
  .lsu_bmu_seq            (lsu_bmu_seq           ),
  .lsu_bmu_size           (lsu_bmu_size          ),
  .lsu_bmu_wdata          (lsu_bmu_wdata         ),
  .lsu_bmu_write          (lsu_bmu_write         ),
  .ncb_dahbif_acc_deny    (ncb_dahbif_acc_deny   ),
  .ncb_dahbif_lock        (ncb_dahbif_lock       ),
  .ncb_dahbif_lrsc        (ncb_dahbif_lrsc       ),
  .ncb_dahbif_ncb_wb_addr (ncb_dahbif_ncb_wb_addr),
  .ncb_dahbif_ncb_wb_sel  (ncb_dahbif_ncb_wb_sel ),
  .ncb_dahbif_prot        (ncb_dahbif_prot       ),
  .ncb_dahbif_req         (ncb_dahbif_req        ),
  .ncb_dahbif_req_dp      (ncb_dahbif_req_dp     ),
  .ncb_dahbif_size        (ncb_dahbif_size       ),
  .ncb_dahbif_uc_ld_addr  (ncb_dahbif_uc_ld_addr ),
  .ncb_dahbif_wdata       (ncb_dahbif_wdata      ),
  .ncb_dahbif_write       (ncb_dahbif_write      ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .rtu_yy_xx_async_flush  (rtu_yy_xx_async_flush ),
  .stb_dahbif_addr        (stb_dahbif_addr       ),
  .stb_dahbif_data        (stb_dahbif_data       ),
  .stb_dahbif_lock        (stb_dahbif_lock       ),
  .stb_dahbif_prot        (stb_dahbif_prot       ),
  .stb_dahbif_req         (stb_dahbif_req        ),
  .stb_dahbif_sc_inst     (stb_dahbif_sc_inst    ),
  .stb_dahbif_size        (stb_dahbif_size       ),
  .vb_dahbif_addr         (vb_dahbif_addr        ),
  .vb_dahbif_data         (vb_dahbif_data        ),
  .vb_dahbif_prot         (vb_dahbif_prot        ),
  .vb_dahbif_req          (vb_dahbif_req         )
);

// &Instance("pa_lsu_dc_dummy","x_pa_lsu_dc_dummy"); @44
// &Instance("pa_lsu_dahbif_uc","x_pa_lsu_dahbif"); @45
// &Force("input", "cp0_lsu_icc_addr");    &Force("bus", "cp0_lsu_icc_addr", 31, 0); @46
// &Force("input", "cp0_lsu_icc_op");      &Force("bus", "cp0_lsu_icc_op", 1, 0); @47
// &Force("input", "cp0_lsu_icc_req"); @48
// &Force("input", "cp0_lsu_icc_type");    &Force("bus", "cp0_lsu_icc_type", 1, 0); @49
// &Force("input", "cp0_lsu_fence_req"); @50

// &Force("output","lsu_xx_warm_up"); @54
// &Force("output","lsu_rtu_ex2_data_vld_gate"); @55

parameter BYTE = 2'b00;
parameter HALF = 2'b01;





parameter MB_IDLE = 1'b0;
parameter MB_BUSY = 1'b1;

always@(posedge mb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mb_cur_state <= MB_IDLE;
  else if (rtu_lsu_async_expt_ack)
    mb_cur_state <= MB_IDLE;
  else
    mb_cur_state <= mb_next_state;
end

// &CombBeg; @78
always @( lsu_ex2_data_vld
       or mb_cur_state
       or lsu_ex2_split
       or lsu_ex2_split_last
       or ag_xx_inst_abort
       or mb_split_checked)
begin
  case(mb_cur_state)
  MB_IDLE : begin
    if (lsu_ex2_data_vld & lsu_ex2_split & !lsu_ex2_split_last & !ag_xx_inst_abort)
      mb_next_state = MB_BUSY;
    else
      mb_next_state = MB_IDLE;
  end
  MB_BUSY : begin
    if (lsu_ex2_data_vld & lsu_ex2_split_last |
        ag_xx_inst_abort & !mb_split_checked)
      mb_next_state = MB_IDLE;
    else
      mb_next_state = MB_BUSY;
  end
  default: mb_next_state = MB_IDLE;
  endcase
// &CombEnd; @95
end

assign lsu_ex2_checked = !lsu_ex2_split | lsu_ex2_split_last;
assign mb_create_en    = lsu_ex2_data_vld & lsu_ex2_split & !mb_cur_state;

always@(posedge mb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mb_split_checked <= 1'b0;
  else if (ag_xx_split_done)
    mb_split_checked <= 1'b1;
  else if (mb_create_en)
    mb_split_checked <= lsu_ex2_checked;
end

always@(posedge mb_dp_clk)
begin
  if (mb_create_en | lsu_xx_warm_up) begin
    mb_fls            <= lsu_ex2_fls;
    mb_flw            <= lsu_ex2_flw;
    mb_sign_ext       <= lsu_ex2_sign_ext;
    mb_size[1:0]      <= lsu_ex2_size[1:0];
    mb_dest_reg[5:0]  <= lsu_ex2_dest_reg[5:0];
    mb_bytes_vld[3:0] <= lsu_ex2_bytes_vld_ext[3:0];
  end
end

assign mb_data_create_en = lsu_ex2_data_vld & lsu_ex2_split & !lsu_ex2_split_last;

always@(posedge mb_data_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    mb_data[DATAW-1:0] <= {DATAW{1'b0}};
  else if (mb_data_create_en)
    mb_data[DATAW-1:0] <= data[DATAW-1:0];
end


assign data[DATAW-1:0] = mb_data_bits_vld[DATAW-1:0] & lsu_ex2_data[DATAW-1:0] |
                        ~mb_data_bits_vld[DATAW-1:0] & mb_data[DATAW-1:0] & {DATAW{mb_cur_state}};
assign mb_data_bits_vld[31:0] = {{8{lsu_ex2_bytes_vld_ext[3]}},
                                 {8{lsu_ex2_bytes_vld_ext[2]}},
                                 {8{lsu_ex2_bytes_vld_ext[1]}},
                                 {8{lsu_ex2_bytes_vld_ext[0]}}};
assign bytes_vld[3:0]  = mb_cur_state ? mb_bytes_vld[3:0] : lsu_ex2_bytes_vld_ext[3:0];
assign sign_ext        = mb_cur_state ? mb_sign_ext       : lsu_ex2_sign_ext;
assign size[1:0]       = mb_cur_state ? mb_size[1:0]      : lsu_ex2_size[1:0];
assign flw             = mb_cur_state ? mb_flw            : lsu_ex2_flw;
assign fls             = mb_cur_state ? mb_fls            : lsu_ex2_fls;
assign dest_reg[5:0]   = mb_cur_state ? mb_dest_reg[5:0]  : lsu_ex2_dest_reg[5:0];
// &Force("input","cp0_lsu_mm"); @173


assign lsu_ex2_stall           = lsu_mb_ex2_ca_stall    | lsu_mb_ex2_uc_stall;
assign lsu_ex2_data_vld        = lsu_mb_ex2_uc_data_vld | lsu_mb_ex2_ca_data_vld;
assign lsu_ex2_data_vld_gate   = lsu_mb_ex2_uc_data_vld_gate | lsu_mb_ex2_ca_data_vld_gate;
assign lsu_ex2_split           = lsu_top_dc_vld ? lsu_mb_ex2_ca_split           : lsu_mb_ex2_uc_split;
assign lsu_ex2_split_last      = lsu_top_dc_vld ? lsu_mb_ex2_ca_split_last      : lsu_mb_ex2_uc_split_last;
assign lsu_ex2_fls             = lsu_top_dc_vld ? lsu_mb_ex2_ca_fls             : lsu_mb_ex2_uc_fls;
assign lsu_ex2_fld             = lsu_top_dc_vld ? lsu_mb_ex2_ca_fld             : lsu_mb_ex2_uc_fld;
assign lsu_ex2_sign_ext        = lsu_top_dc_vld ? lsu_mb_ex2_ca_sign_ext        : lsu_mb_ex2_uc_sign_ext;
assign lsu_ex2_size[1:0]       = lsu_top_dc_vld ? lsu_mb_ex2_ca_size[1:0]       : lsu_mb_ex2_uc_size[1:0];
assign lsu_ex2_dest_reg[5:0]   = lsu_top_dc_vld ? lsu_mb_ex2_ca_dest_reg[5:0]   : lsu_mb_ex2_uc_dest_reg[5:0];
assign lsu_ex2_addr_2          = lsu_top_dc_vld ? lsu_mb_ex2_ca_addr_2          : lsu_mb_ex2_uc_addr_2;
assign lsu_ex2_bytes_vld[3:0]  = lsu_top_dc_vld ? lsu_mb_ex2_ca_bytes_vld[3:0]  : lsu_mb_ex2_uc_bytes_vld[3:0];
assign lsu_ex2_data[DATAW-1:0] = lsu_top_dc_vld ? lsu_mb_ex2_ca_data[DATAW-1:0] : lsu_mb_ex2_uc_data[DATAW-1:0];
assign lsu_ex2_lock            = lsu_top_dc_vld ? lsu_mb_ex2_ca_lock            : lsu_mb_ex2_uc_lock;
assign lsu_ex2_vld             = lsu_top_dc_vld ? lsu_mb_ex2_ca_vld             : lsu_mb_ex2_uc_vld;

assign lsu_ex2_flw             = lsu_ex2_fls & lsu_ex2_size[1:0] == 2'b10;
// &CombBeg; @201
// &CombEnd; @213
// &Force("nonport", "lsu_ex2_addr_2"); @215
// &Force("nonport", "lsu_ex2_fld"); @216
assign lsu_ex2_bytes_vld_ext[3:0] = lsu_ex2_bytes_vld[3:0];

// &CombBeg; @219
always @( bytes_vld[3:0]
       or data[31:0])
begin
  casez(bytes_vld[3:0])
  4'b???1 : data_align[31:0] = data[31:0];
  4'b??10 : data_align[31:0] = {data[7:0], data[31:8]};
  4'b?100 : data_align[31:0] = {data[15:0],data[31:16]};
  4'b1000 : data_align[31:0] = {data[23:0],data[31:24]};
  default : data_align[31:0] = data[31:0];
  endcase
// &CombEnd; @227
end

// &CombBeg; @230
always @( size[1:0]
       or data_align[31:0]
       or sign_ext)
begin
  case({sign_ext, size[1:0]})
  {1'b0,BYTE} : data_align_ext[31:0] = {24'b0,data_align[7:0]};
  {1'b0,HALF} : data_align_ext[31:0] = {16'b0,data_align[15:0]};
  {1'b1,BYTE} : data_align_ext[31:0] = {{24{data_align[7]}},data_align[7:0]};
  {1'b1,HALF} : data_align_ext[31:0] = {{16{data_align[15]}},data_align[15:0]};
  default     : data_align_ext[31:0] = data_align[31:0];
  endcase
// &CombEnd; @238
end


assign lsu_rtu_ex2_data_vld      = lsu_ex2_data_vld & (!lsu_ex2_split | lsu_ex2_split_last) &
                                   (cp0_xx_async_expt_en | !lsu_rtu_async_expt_vld);
assign lsu_rtu_ex2_data_vld_gate = lsu_ex2_data_vld_gate & (!lsu_ex2_split | lsu_ex2_split_last);
assign lsu_rtu_ex2_data[31:0]    = data_align_ext[31:0];
assign lsu_rtu_ex2_dest_reg[5:0] = dest_reg[5:0];
assign lsu_rtu_ex2_fls           = fls;
assign lsu_rtu_ex2_single        = flw;
assign lsu_rtu_ex2_stall         = lsu_ex2_stall &
                                   (!lsu_ex2_split | lsu_ex2_split_last) &
                                   (!cp0_xx_async_expt_en | lsu_ex2_lock);
assign lsu_rtu_ex2_stall_gate    = lsu_ex2_vld &
                                   (!cp0_xx_async_expt_en | lsu_ex2_lock);

assign lsu_iu_ex2_data_vld       = lsu_rtu_ex2_data_vld & !lsu_rtu_ex2_fls;
assign lsu_iu_ex2_data_vld_gate  = lsu_rtu_ex2_data_vld_gate & !lsu_rtu_ex2_fls;
assign lsu_iu_ex2_data[31:0]     = lsu_rtu_ex2_data[31:0];

assign lsu_xx_flush         = lsu_xx_ex2_ca_flush | lsu_xx_ex2_uc_flush;






// &Force("output","lsu_rtu_async_expt_vld"); @268
// &Force("output","lsu_rtu_ex2_data_vld"); @269

// &Force("output","lsu_rtu_ex2_data"); @271
// &Force("output","lsu_rtu_ex2_fls"); @273

// &Force("nonport","lsu_rtu_ex2_single"); @278
// &Force("nonport","flw"); @279


assign mb_clk_en = lsu_ex2_data_vld_gate & lsu_ex2_split | mb_cur_state;
// &Instance("gated_clk_cell", "x_pa_lsu_mb_ctrl_gated_clk"); @304
gated_clk_cell  x_pa_lsu_mb_ctrl_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (mb_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (mb_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @305
//          .external_en (1'b0), @306
//          .global_en   (1'b1), @307
//          .module_en   (1'b0), @308
//          .local_en    (mb_clk_en), @309
//          .clk_out     (mb_clk)); @310

assign mb_dp_clk_en = lsu_ex2_data_vld_gate & lsu_ex2_split & !mb_cur_state;
// &Instance("gated_clk_cell", "x_pa_lsu_mb_dp_gated_clk"); @313
gated_clk_cell  x_pa_lsu_mb_dp_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (mb_dp_clk           ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (mb_dp_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @314
//          .external_en (1'b0), @315
//          .global_en   (1'b1), @316
//          .module_en   (1'b0), @317
//          .local_en    (mb_dp_clk_en), @318
//          .clk_out     (mb_dp_clk)); @319

assign mb_data_clk_en = lsu_ex2_data_vld_gate & lsu_ex2_split;
// &Instance("gated_clk_cell", "x_pa_lsu_mb_data_gated_clk"); @322
gated_clk_cell  x_pa_lsu_mb_data_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (mb_data_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (mb_data_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @323
//          .external_en (1'b0), @324
//          .global_en   (1'b1), @325
//          .module_en   (1'b0), @326
//          .local_en    (mb_data_clk_en), @327
//          .clk_out     (mb_data_clk)); @328



// &ModuleEnd; @389
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_vb(
  cp0_lsu_fence_req,
  cp0_yy_mach_mode,
  cpurst_b,
  dahbif_vb_acc_ecc,
  dahbif_vb_cmplt,
  dahbif_vb_grant,
  dc_vb_st_amold,
  dc_xx_addr,
  forever_cpuclk,
  icc_vb_addr,
  icc_vb_clr_vld,
  icc_vb_create_en,
  icc_vb_data,
  icc_vb_data_cnt,
  icc_vb_data_create,
  icc_vb_line_dirty,
  pad_yy_gate_clk_en_b,
  rdl_vb_addr,
  rdl_vb_create_en,
  rdl_vb_data,
  rdl_vb_data_cnt,
  rdl_vb_data_create,
  rdl_vb_line_dirty,
  rdl_vb_warm_up,
  rtu_yy_xx_async_flush,
  vb_dahbif_addr,
  vb_dahbif_data,
  vb_dahbif_prot,
  vb_dahbif_req,
  vb_dc_hit_dirty,
  vb_dc_ld_data,
  vb_dc_ld_fwd_vld,
  vb_dc_pop_en,
  vb_icc_empty,
  vb_icc_grant,
  vb_idle,
  vb_rdl_grant,
  vb_wb_idle
);

// &Ports; @21
input            cp0_lsu_fence_req;
input            cp0_yy_mach_mode;
input            cpurst_b;
input            dahbif_vb_acc_ecc;
input            dahbif_vb_cmplt;
input            dahbif_vb_grant;
input            dc_vb_st_amold;
input   [31 :0]  dc_xx_addr;
input            forever_cpuclk;
input   [26 :0]  icc_vb_addr;
input            icc_vb_clr_vld;
input            icc_vb_create_en;
input   [63 :0]  icc_vb_data;
input   [1  :0]  icc_vb_data_cnt;
input            icc_vb_data_create;
input            icc_vb_line_dirty;
input            pad_yy_gate_clk_en_b;
input   [26 :0]  rdl_vb_addr;
input            rdl_vb_create_en;
input   [63 :0]  rdl_vb_data;
input   [1  :0]  rdl_vb_data_cnt;
input            rdl_vb_data_create;
input            rdl_vb_line_dirty;
input            rdl_vb_warm_up;
input            rtu_yy_xx_async_flush;
output  [31 :0]  vb_dahbif_addr;
output  [31 :0]  vb_dahbif_data;
output  [3  :0]  vb_dahbif_prot;
output           vb_dahbif_req;
output           vb_dc_hit_dirty;
output  [31 :0]  vb_dc_ld_data;
output           vb_dc_ld_fwd_vld;
output           vb_dc_pop_en;
output           vb_icc_empty;
output           vb_icc_grant;
output           vb_idle;
output           vb_rdl_grant;
output           vb_wb_idle;

// &Regs; @22
reg     [26 :0]  vb_addr;
reg     [31 :0]  vb_dahbif_data;
reg     [2  :0]  vb_data_cnt;
reg     [1  :0]  vb_data_sel;
reg              vb_lru;
reg     [1  :0]  wb_cur_state;
reg     [1  :0]  wb_next_state;

// &Wires; @23
wire             cp0_lsu_fence_req;
wire             cp0_yy_mach_mode;
wire             cpurst_b;
wire             dahbif_vb_acc_ecc;
wire             dahbif_vb_cmplt;
wire             dahbif_vb_grant;
wire             dc_vb_st_amold;
wire    [31 :0]  dc_xx_addr;
wire             forever_cpuclk;
wire    [26 :0]  icc_vb_addr;
wire             icc_vb_clr_vld;
wire             icc_vb_create_en;
wire    [63 :0]  icc_vb_data;
wire    [1  :0]  icc_vb_data_cnt;
wire             icc_vb_data_create;
wire             icc_vb_line_dirty;
wire             pad_yy_gate_clk_en_b;
wire    [26 :0]  rdl_vb_addr;
wire             rdl_vb_create_en;
wire    [63 :0]  rdl_vb_data;
wire    [1  :0]  rdl_vb_data_cnt;
wire             rdl_vb_data_create;
wire             rdl_vb_line_dirty;
wire             rdl_vb_warm_up;
wire             rtu_yy_xx_async_flush;
wire    [1  :0]  vb_addr_sel;
wire             vb_biu_req_vld;
wire             vb_clk;
wire             vb_clk_en;
wire    [1  :0]  vb_clr_en;
wire             vb_clr_vld;
wire             vb_cmplt_last;
wire             vb_cnt_last;
wire    [26 :0]  vb_create_addr;
wire    [63 :0]  vb_create_data;
wire    [1  :0]  vb_create_data_cnt;
wire             vb_create_data_vld;
wire    [1  :0]  vb_create_en;
wire             vb_create_line_dirty;
wire    [1  :0]  vb_create_ptr;
wire             vb_create_vld;
wire    [31 :0]  vb_dahbif_addr;
wire    [3  :0]  vb_dahbif_prot;
wire             vb_dahbif_req;
wire    [255:0]  vb_data;
wire    [2  :0]  vb_data_cnt_inc;
wire             vb_dc_hit_dirty;
wire    [31 :0]  vb_dc_ld_data;
wire             vb_dc_ld_fwd_vld;
wire             vb_dc_pop_en;
wire    [26 :0]  vb_entry0_addr;
wire    [255:0]  vb_entry0_data;
wire    [31 :0]  vb_entry0_fwd_data;
wire    [26 :0]  vb_entry1_addr;
wire    [255:0]  vb_entry1_data;
wire    [31 :0]  vb_entry1_fwd_data;
wire    [1  :0]  vb_entry_biu_req;
wire    [1  :0]  vb_entry_vld;
wire             vb_full;
wire    [1  :0]  vb_fwd_vld;
wire    [1  :0]  vb_hit_dirty;
wire             vb_icc_empty;
wire             vb_icc_grant;
wire             vb_idle;
wire    [1  :0]  vb_pop_en;
wire             vb_rdl_grant;
wire    [1  :0]  vb_wb_cmplt;
wire    [1  :0]  vb_wb_grant;
wire             vb_wb_idle;
wire             wb_cur_idle;
wire             wb_cur_wfc;
wire             wb_cur_wfg;


parameter DATAW = `FLEN;



assign vb_create_vld = (rdl_vb_create_en | icc_vb_create_en) & !vb_full;

always@(posedge vb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    vb_lru <= 1'b0;
  else if (vb_create_vld)
    vb_lru <= ~vb_lru;
  else if (vb_fwd_vld[0])
    vb_lru <= 1'b1;
  else if (vb_fwd_vld[1])
    vb_lru <= 1'b0;
end

assign vb_create_ptr[1:0] = vb_full ? {vb_lru,!vb_lru}
                                    : {vb_entry_vld[0],!vb_entry_vld[0]};

assign vb_create_en[1:0] = vb_create_ptr[1:0] & {2{vb_create_vld}};
assign vb_full           = &vb_entry_vld[1:0];

assign vb_clr_vld     = rdl_vb_create_en & vb_full | icc_vb_create_en;
assign vb_clr_en[1:0] = {2{cp0_lsu_fence_req | icc_vb_clr_vld}} | {2{vb_clr_vld}} & vb_create_ptr[1:0];
assign vb_rdl_grant   = !vb_full;
assign vb_icc_grant   = !rdl_vb_create_en & !vb_full;

assign vb_create_addr[26:0]    = rdl_vb_warm_up
                               ? 27'b0
                               : rdl_vb_create_en ? rdl_vb_addr[26:0]    : icc_vb_addr[26:0];
assign vb_create_line_dirty    = rdl_vb_warm_up
                               ? 1'b0
                               : rdl_vb_create_en ? rdl_vb_line_dirty    : icc_vb_line_dirty;

assign vb_create_data_vld      = rdl_vb_data_create | icc_vb_data_create;
assign vb_create_data[63:0]    = rdl_vb_warm_up
                               ? 64'b0
                               : (rdl_vb_data_create ? rdl_vb_data[63:0]    : icc_vb_data[63:0]);
assign vb_create_data_cnt[1:0] = rdl_vb_data_create ? rdl_vb_data_cnt[1:0] : icc_vb_data_cnt[1:0];

assign vb_idle = !cp0_lsu_fence_req & wb_cur_idle & !vb_biu_req_vld |
                  cp0_lsu_fence_req & (!(|vb_entry_vld[1:0]));

assign vb_icc_empty = !(|vb_entry_vld[1:0]);

assign vb_wb_idle = wb_cur_idle;



parameter WB_IDLE = 2'b01;
parameter WB_WFG  = 2'b10;
parameter WB_WFC  = 2'b00;

assign vb_biu_req_vld = |vb_entry_biu_req[1:0];

always@(posedge vb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_cur_state[1:0] <= WB_IDLE;
  else if (rtu_yy_xx_async_flush)
    wb_cur_state[1:0] <= WB_IDLE;
  else
    wb_cur_state[1:0] <= wb_next_state[1:0];
end

// &CombBeg; @92
always @( dahbif_vb_grant
       or vb_cmplt_last
       or wb_cur_state
       or vb_biu_req_vld)
begin
  case (wb_cur_state)
    WB_IDLE: begin
      if (vb_biu_req_vld)
        wb_next_state = dahbif_vb_grant ? WB_WFC : WB_WFG;
      else
        wb_next_state = WB_IDLE;
    end
    WB_WFG: begin
      if (dahbif_vb_grant)
        wb_next_state = WB_WFC;
      else
        wb_next_state = WB_WFG;
    end
    WB_WFC: begin
      if (vb_cmplt_last)
        wb_next_state = WB_IDLE;
      else
        wb_next_state = WB_WFC;
    end
    default: wb_next_state = WB_IDLE;
  endcase
// &CombEnd; @114
end

assign wb_cur_idle = wb_cur_state[0]; //WB_IDLE;
assign wb_cur_wfc  = wb_cur_state == WB_WFC;
assign wb_cur_wfg  = wb_cur_state == WB_WFG;

always@(posedge vb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    vb_data_sel[1:0] <= 2'b0;
  else if (rtu_yy_xx_async_flush)
    vb_data_sel[1:0] <= 2'b0;
  else if (wb_cur_idle & vb_biu_req_vld)
    vb_data_sel[1:0] <= {vb_entry_biu_req[1] & !vb_entry_biu_req[0],vb_entry_biu_req[0]};
  else if (wb_cur_wfc & vb_cmplt_last)
    vb_data_sel[1:0] <= 2'b0;
end

assign vb_addr_sel[1] = wb_cur_idle & !vb_entry_biu_req[0] | vb_data_sel[1];
assign vb_addr_sel[0] = wb_cur_idle &  vb_entry_biu_req[0] | vb_data_sel[0];

always@(posedge vb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    vb_data_cnt[2:0] <= 3'b0;
  else if (dahbif_vb_grant)
    vb_data_cnt[2:0] <= 3'b0;
  else if (dahbif_vb_cmplt)
    vb_data_cnt[2:0] <= dahbif_vb_acc_ecc ? 3'b111 : vb_data_cnt_inc[2:0];
end

assign vb_data_cnt_inc[2:0] = vb_data_cnt[2:0] + 3'b1;

assign vb_cnt_last = vb_data_cnt[2:0] == 3'b111;
assign vb_cmplt_last = dahbif_vb_cmplt & vb_cnt_last;

// &CombBeg; @150
always @( vb_entry0_addr[26:0]
       or vb_addr_sel[1:0]
       or vb_entry1_addr[26:0])
begin
  case(vb_addr_sel[1:0])
    2'b01:  vb_addr[26:0]  = vb_entry0_addr[26:0];
    2'b10:  vb_addr[26:0]  = vb_entry1_addr[26:0];
    default:vb_addr[26:0]  = 27'bx;
  endcase
// &CombEnd; @156
end

assign vb_data[255:0] = {256{vb_data_sel[1]}} & vb_entry1_data[255:0] |
                        {256{vb_data_sel[0]}} & vb_entry0_data[255:0];

assign vb_dahbif_req        = vb_biu_req_vld & wb_cur_idle | wb_cur_wfg;
assign vb_dahbif_addr[31:0] = {vb_addr[26:0],5'b0};
assign vb_dahbif_prot[3:0]  = {1'b1,1'b1,cp0_yy_mach_mode,1'b1};

// &CombBeg; @165
always @( vb_data[255:0]
       or vb_data_cnt[2:0])
begin
  case (vb_data_cnt[2:0])
    3'b000: vb_dahbif_data[31:0] = vb_data[31:0];
    3'b001: vb_dahbif_data[31:0] = vb_data[63:32];
    3'b010: vb_dahbif_data[31:0] = vb_data[95:64];
    3'b011: vb_dahbif_data[31:0] = vb_data[127:96];
    3'b100: vb_dahbif_data[31:0] = vb_data[159:128];
    3'b101: vb_dahbif_data[31:0] = vb_data[191:160];
    3'b110: vb_dahbif_data[31:0] = vb_data[223:192];
    3'b111: vb_dahbif_data[31:0] = vb_data[255:224];
    default:vb_dahbif_data[31:0] = 32'bx;
  endcase
// &CombEnd; @177
end





assign vb_wb_grant[1:0] = {2{dahbif_vb_grant}} & vb_addr_sel[1:0];
assign vb_wb_cmplt[1:0] = {2{vb_cmplt_last}} & vb_data_sel[1:0];





assign vb_dc_ld_fwd_vld    = |vb_fwd_vld[1:0];
assign vb_dc_ld_data[DATAW-1:0] = {DATAW{vb_fwd_vld[1]}} & vb_entry1_fwd_data[DATAW-1:0] |
                                  {DATAW{vb_fwd_vld[0]}} & vb_entry0_fwd_data[DATAW-1:0];
assign vb_dc_pop_en        = |vb_pop_en[1:0];
assign vb_dc_hit_dirty     = |vb_hit_dirty[1:0];

// &ConnRule(s/_x$/[0]/); @196
// &ConnRule(s/entryx/entry0/); @197
// &Instance("pa_lsu_vb_entry","x_pa_lsu_vb_entry_0"); @198
pa_lsu_vb_entry  x_pa_lsu_vb_entry_0 (
  .cpurst_b              (cpurst_b             ),
  .dc_vb_st_amold        (dc_vb_st_amold       ),
  .dc_xx_addr            (dc_xx_addr           ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rdl_vb_warm_up        (rdl_vb_warm_up       ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush),
  .vb_clk                (vb_clk               ),
  .vb_clr_en_x           (vb_clr_en[0]         ),
  .vb_create_addr        (vb_create_addr       ),
  .vb_create_data        (vb_create_data       ),
  .vb_create_data_cnt    (vb_create_data_cnt   ),
  .vb_create_data_vld    (vb_create_data_vld   ),
  .vb_create_en_x        (vb_create_en[0]      ),
  .vb_create_line_dirty  (vb_create_line_dirty ),
  .vb_entry_biu_req_x    (vb_entry_biu_req[0]  ),
  .vb_entry_vld_x        (vb_entry_vld[0]      ),
  .vb_entryx_addr        (vb_entry0_addr       ),
  .vb_entryx_data        (vb_entry0_data       ),
  .vb_entryx_fwd_data    (vb_entry0_fwd_data   ),
  .vb_fwd_vld_x          (vb_fwd_vld[0]        ),
  .vb_hit_dirty_x        (vb_hit_dirty[0]      ),
  .vb_pop_en_x           (vb_pop_en[0]         ),
  .vb_wb_cmplt_x         (vb_wb_cmplt[0]       ),
  .vb_wb_grant_x         (vb_wb_grant[0]       )
);


// &ConnRule(s/_x$/[1]/); @200
// &ConnRule(s/entryx/entry1/); @201
// &Instance("pa_lsu_vb_entry","x_pa_lsu_vb_entry_1"); @202
pa_lsu_vb_entry  x_pa_lsu_vb_entry_1 (
  .cpurst_b              (cpurst_b             ),
  .dc_vb_st_amold        (dc_vb_st_amold       ),
  .dc_xx_addr            (dc_xx_addr           ),
  .forever_cpuclk        (forever_cpuclk       ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b ),
  .rdl_vb_warm_up        (rdl_vb_warm_up       ),
  .rtu_yy_xx_async_flush (rtu_yy_xx_async_flush),
  .vb_clk                (vb_clk               ),
  .vb_clr_en_x           (vb_clr_en[1]         ),
  .vb_create_addr        (vb_create_addr       ),
  .vb_create_data        (vb_create_data       ),
  .vb_create_data_cnt    (vb_create_data_cnt   ),
  .vb_create_data_vld    (vb_create_data_vld   ),
  .vb_create_en_x        (vb_create_en[1]      ),
  .vb_create_line_dirty  (vb_create_line_dirty ),
  .vb_entry_biu_req_x    (vb_entry_biu_req[1]  ),
  .vb_entry_vld_x        (vb_entry_vld[1]      ),
  .vb_entryx_addr        (vb_entry1_addr       ),
  .vb_entryx_data        (vb_entry1_data       ),
  .vb_entryx_fwd_data    (vb_entry1_fwd_data   ),
  .vb_fwd_vld_x          (vb_fwd_vld[1]        ),
  .vb_hit_dirty_x        (vb_hit_dirty[1]      ),
  .vb_pop_en_x           (vb_pop_en[1]         ),
  .vb_wb_cmplt_x         (vb_wb_cmplt[1]       ),
  .vb_wb_grant_x         (vb_wb_grant[1]       )
);


assign vb_clk_en = vb_create_vld | vb_entry_vld[0] | vb_entry_vld[1];
// &Instance("gated_clk_cell", "x_pa_lsu_vb_gated_clk"); @205
gated_clk_cell  x_pa_lsu_vb_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_clk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @206
//          .external_en (1'b0), @207
//          .global_en   (1'b1), @208
//          .module_en   (1'b0), @209
//          .local_en    (vb_clk_en), @210
//          .clk_out     (vb_clk)); @211


// &ModuleEnd; @217
endmodule



















// &Depend("cpu_cfig.h"); @18

// &ModuleBeg; @20
module pa_lsu_vb_entry(
  cpurst_b,
  dc_vb_st_amold,
  dc_xx_addr,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  rdl_vb_warm_up,
  rtu_yy_xx_async_flush,
  vb_clk,
  vb_clr_en_x,
  vb_create_addr,
  vb_create_data,
  vb_create_data_cnt,
  vb_create_data_vld,
  vb_create_en_x,
  vb_create_line_dirty,
  vb_entry_biu_req_x,
  vb_entry_vld_x,
  vb_entryx_addr,
  vb_entryx_data,
  vb_entryx_fwd_data,
  vb_fwd_vld_x,
  vb_hit_dirty_x,
  vb_pop_en_x,
  vb_wb_cmplt_x,
  vb_wb_grant_x
);

// &Ports; @21
input            cpurst_b;
input            dc_vb_st_amold;
input   [31 :0]  dc_xx_addr;
input            forever_cpuclk;
input            pad_yy_gate_clk_en_b;
input            rdl_vb_warm_up;
input            rtu_yy_xx_async_flush;
input            vb_clk;
input            vb_clr_en_x;
input   [26 :0]  vb_create_addr;
input   [63 :0]  vb_create_data;
input   [1  :0]  vb_create_data_cnt;
input            vb_create_data_vld;
input            vb_create_en_x;
input            vb_create_line_dirty;
input            vb_wb_cmplt_x;
input            vb_wb_grant_x;
output           vb_entry_biu_req_x;
output           vb_entry_vld_x;
output  [26 :0]  vb_entryx_addr;
output  [255:0]  vb_entryx_data;
output  [31 :0]  vb_entryx_fwd_data;
output           vb_fwd_vld_x;
output           vb_hit_dirty_x;
output           vb_pop_en_x;

// &Regs; @22
reg     [2  :0]  vb_cur_state;
reg     [26 :0]  vb_entry_addr;
reg     [63 :0]  vb_entry_data0;
reg     [63 :0]  vb_entry_data1;
reg     [63 :0]  vb_entry_data2;
reg     [63 :0]  vb_entry_data3;
reg              vb_entry_dirty;
reg     [63 :0]  vb_fwd_data;
reg     [2  :0]  vb_next_state;

// &Wires; @23
wire             cpurst_b;
wire    [29 :0]  dc_addr;
wire             dc_hit_vb;
wire             dc_st_hit_vb;
wire             dc_vb_st_amold;
wire    [31 :0]  dc_xx_addr;
wire             forever_cpuclk;
wire             pad_yy_gate_clk_en_b;
wire             rdl_vb_warm_up;
wire             rtu_yy_xx_async_flush;
wire             vb_addr_clk;
wire             vb_addr_clk_en;
wire             vb_clk;
wire             vb_clr_en_x;
wire    [26 :0]  vb_create_addr;
wire    [63 :0]  vb_create_data;
wire    [1  :0]  vb_create_data_cnt;
wire             vb_create_data_vld;
wire             vb_create_en_x;
wire             vb_create_line_dirty;
wire             vb_data0_clk;
wire             vb_data0_clk_en;
wire             vb_data1_clk;
wire             vb_data1_clk_en;
wire             vb_data2_clk;
wire             vb_data2_clk_en;
wire             vb_data3_clk;
wire             vb_data3_clk_en;
wire    [3  :0]  vb_data_create;
wire    [3  :0]  vb_data_create_en;
wire             vb_data_create_last;
wire             vb_data_create_vld;
wire             vb_entry_biu_req_x;
wire             vb_entry_vld_x;
wire    [26 :0]  vb_entryx_addr;
wire    [255:0]  vb_entryx_data;
wire    [31 :0]  vb_entryx_fwd_data;
wire             vb_fsm_rdy;
wire             vb_fwd_vld_x;
wire             vb_hit_dirty_x;
wire             vb_pop_en_x;
wire             vb_wb_cmplt_x;
wire             vb_wb_grant_x;


parameter VB_IDLE = 3'b000;
parameter VB_RFC  = 3'b001;
parameter VB_RDY  = 3'b010;
parameter VB_WFC  = 3'b011;
parameter VB_WB   = 3'b100;

always@(posedge vb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    vb_cur_state[2:0] <= VB_IDLE;
  else if (rtu_yy_xx_async_flush)
    vb_cur_state[2:0] <= VB_IDLE;
  else
    vb_cur_state[2:0] <= vb_next_state[2:0];
end

// &CombBeg; @41
always @( vb_create_en_x
       or dc_st_hit_vb
       or vb_wb_cmplt_x
       or vb_entry_dirty
       or vb_cur_state
       or vb_clr_en_x
       or vb_wb_grant_x
       or vb_data_create_last)
begin
  case(vb_cur_state)
    VB_IDLE: begin
      if (vb_create_en_x)
        vb_next_state = VB_RFC;
      else
        vb_next_state = VB_IDLE;
    end
    VB_RFC: begin
      if (vb_data_create_last)
        vb_next_state = VB_RDY;
      else
        vb_next_state = VB_RFC;
    end
    VB_RDY: begin
      if (vb_clr_en_x | dc_st_hit_vb)
        vb_next_state = vb_entry_dirty ? VB_WB : VB_IDLE;
      else
        vb_next_state = VB_RDY;
    end
    VB_WB: begin
      if (vb_wb_grant_x)
        vb_next_state = VB_WFC;
      else
        vb_next_state = VB_WB;
    end
    VB_WFC: begin
      if (vb_wb_cmplt_x)
        vb_next_state = VB_IDLE;
      else
        vb_next_state = VB_WFC;
    end
    default: vb_next_state = VB_IDLE;
  endcase
// &CombEnd; @75
end

assign vb_fsm_rdy     =  (vb_cur_state == VB_RDY) | (vb_cur_state == VB_WB) | (vb_cur_state == VB_WFC);
assign vb_entry_vld_x = !(vb_cur_state == VB_IDLE);
assign vb_pop_en_x    =  (vb_cur_state == VB_WFC) & vb_wb_cmplt_x |
                         (vb_cur_state == VB_RDY) & (vb_clr_en_x | dc_st_hit_vb) & !vb_entry_dirty;




assign vb_entry_biu_req_x    = vb_cur_state[2];//VB_WB
assign vb_entryx_addr[26:0]  = vb_entry_addr[26:0];
assign vb_entryx_data[255:0] = {vb_entry_data3[63:0],
                                vb_entry_data2[63:0],
                                vb_entry_data1[63:0],
                                vb_entry_data0[63:0]};




// &Force("bus","dc_xx_addr",31,0); @95
assign dc_addr[29:0] = dc_xx_addr[31:2] & {30{vb_fsm_rdy}};
assign dc_hit_vb     = dc_addr[29:3] == vb_entry_addr[26:0];

assign dc_st_hit_vb = dc_hit_vb & dc_vb_st_amold;

always@(posedge vb_addr_clk)
begin
  if (vb_create_en_x | rdl_vb_warm_up) begin
    vb_entry_addr[26:0] <= vb_create_addr[26:0];
    vb_entry_dirty      <= vb_create_line_dirty;
  end
end

assign vb_data_create_last = vb_data_create_en[3];

assign vb_data_create_vld = (vb_cur_state == VB_RFC) & vb_create_data_vld;
assign vb_data_create[3:0] = (4'b1 << vb_create_data_cnt[1:0]);
assign vb_data_create_en[3:0] = vb_data_create[3:0] & {4{vb_data_create_vld}};

always@(posedge vb_data0_clk)
begin
  if (vb_data_create_en[0] | rdl_vb_warm_up)
    vb_entry_data0[63:0] <= vb_create_data[63:0];
end

always@(posedge vb_data1_clk)
begin
  if (vb_data_create_en[1] | rdl_vb_warm_up)
    vb_entry_data1[63:0] <= vb_create_data[63:0];
end

always@(posedge vb_data2_clk)
begin
  if (vb_data_create_en[2] | rdl_vb_warm_up)
    vb_entry_data2[63:0] <= vb_create_data[63:0];
end

always@(posedge vb_data3_clk)
begin
  if (vb_data_create_en[3] | rdl_vb_warm_up)
    vb_entry_data3[63:0] <= vb_create_data[63:0];
end




assign vb_fwd_vld_x   = dc_hit_vb & vb_fsm_rdy;

// &CombBeg; @144
always @( vb_entry_data2[63:0]
       or dc_addr[2:1]
       or vb_entry_data3[63:0]
       or vb_entry_data1[63:0]
       or vb_entry_data0[63:0])
begin
  case(dc_addr[2:1])
    2'b00:  vb_fwd_data[63:0] = vb_entry_data0[63:0];
    2'b01:  vb_fwd_data[63:0] = vb_entry_data1[63:0];
    2'b10:  vb_fwd_data[63:0] = vb_entry_data2[63:0];
    2'b11:  vb_fwd_data[63:0] = vb_entry_data3[63:0];
    default:vb_fwd_data[63:0] = 64'bx;
  endcase
// &CombEnd; @152
end

assign vb_entryx_fwd_data[31:0] = dc_addr[0] ? vb_fwd_data[63:32] : vb_fwd_data[31:0];

assign vb_hit_dirty_x = dc_hit_vb & vb_fsm_rdy & vb_entry_dirty;

assign vb_addr_clk_en = vb_create_en_x | rdl_vb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_vb_addr_gated_clk"); @163
gated_clk_cell  x_pa_lsu_vb_addr_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_addr_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_addr_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @164
//          .external_en (1'b0), @165
//          .global_en   (1'b1), @166
//          .module_en   (1'b0), @167
//          .local_en    (vb_addr_clk_en), @168
//          .clk_out     (vb_addr_clk)); @169

assign vb_data3_clk_en = vb_data_create_en[3] | rdl_vb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_vb_data3_gated_clk"); @172
gated_clk_cell  x_pa_lsu_vb_data3_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_data3_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_data3_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @173
//          .external_en (1'b0), @174
//          .global_en   (1'b1), @175
//          .module_en   (1'b0), @176
//          .local_en    (vb_data3_clk_en), @177
//          .clk_out     (vb_data3_clk)); @178

assign vb_data2_clk_en = vb_data_create_en[2] | rdl_vb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_vb_data2_gated_clk"); @181
gated_clk_cell  x_pa_lsu_vb_data2_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_data2_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_data2_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @182
//          .external_en (1'b0), @183
//          .global_en   (1'b1), @184
//          .module_en   (1'b0), @185
//          .local_en    (vb_data2_clk_en), @186
//          .clk_out     (vb_data2_clk)); @187

assign vb_data1_clk_en = vb_data_create_en[1] | rdl_vb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_vb_data1_gated_clk"); @190
gated_clk_cell  x_pa_lsu_vb_data1_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_data1_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_data1_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @191
//          .external_en (1'b0), @192
//          .global_en   (1'b1), @193
//          .module_en   (1'b0), @194
//          .local_en    (vb_data1_clk_en), @195
//          .clk_out     (vb_data1_clk)); @196

assign vb_data0_clk_en = vb_data_create_en[0] | rdl_vb_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_vb_data0_gated_clk"); @199
gated_clk_cell  x_pa_lsu_vb_data0_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (vb_data0_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (vb_data0_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @200
//          .external_en (1'b0), @201
//          .global_en   (1'b1), @202
//          .module_en   (1'b0), @203
//          .local_en    (vb_data0_clk_en), @204
//          .clk_out     (vb_data0_clk)); @205


// &ModuleEnd; @211
endmodule


















// &Depend("cpu_cfig.h"); @17

// &ModuleBeg; @19
module pa_lsu_wb_entry(
  ag_dc_warm_up,
  ag_ld_inst,
  ag_ncb_inst_vld_dp,
  cp0_yy_mach_mode,
  cpurst_b,
  forever_cpuclk,
  ld_hit_wb_f_x,
  ld_hit_wb_x,
  pad_yy_gate_clk_en_b,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_yy_xx_async_flush,
  wb_addr_pop_en_x,
  wb_clk,
  wb_create_addr,
  wb_create_buf,
  wb_create_bytes_vld,
  wb_create_ca,
  wb_create_data,
  wb_create_dest_preg,
  wb_create_en_dp_x,
  wb_create_en_x,
  wb_create_fls,
  wb_create_lock,
  wb_create_pmp_deny,
  wb_create_sc_fail,
  wb_create_sc_inst,
  wb_create_shift,
  wb_create_size,
  wb_create_so,
  wb_create_split_first,
  wb_create_src1_depd,
  wb_create_src1_reg,
  wb_data_pop_en_x,
  wb_entry_addr_vld_x,
  wb_entry_data_vld_x,
  wb_entry_fls_x,
  wb_entry_lock_x,
  wb_entry_lrsc_x,
  wb_entry_pmp_deny_x,
  wb_entry_sc_fail_x,
  wb_entry_split_first_x,
  wb_entry_vld_x,
  wb_entryx_addr,
  wb_entryx_dest_preg,
  wb_entryx_prot,
  wb_entryx_shift,
  wb_entryx_size,
  wb_entryx_wdata,
  wb_so_req_x
);

// &Ports; @20
input           ag_dc_warm_up;
input           ag_ld_inst;
input           ag_ncb_inst_vld_dp;
input           cp0_yy_mach_mode;
input           cpurst_b;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rtu_lsu_wb_fwd_data;
input           rtu_lsu_wb_fwd_fls;
input   [5 :0]  rtu_lsu_wb_fwd_reg;
input           rtu_lsu_wb_fwd_vld;
input           rtu_yy_xx_async_flush;
input           wb_addr_pop_en_x;
input           wb_clk;
input   [31:0]  wb_create_addr;
input           wb_create_buf;
input   [7 :0]  wb_create_bytes_vld;
input           wb_create_ca;
input   [31:0]  wb_create_data;
input   [5 :0]  wb_create_dest_preg;
input           wb_create_en_dp_x;
input           wb_create_en_x;
input           wb_create_fls;
input           wb_create_lock;
input           wb_create_pmp_deny;
input           wb_create_sc_fail;
input           wb_create_sc_inst;
input   [3 :0]  wb_create_shift;
input   [1 :0]  wb_create_size;
input           wb_create_so;
input           wb_create_split_first;
input           wb_create_src1_depd;
input   [5 :0]  wb_create_src1_reg;
input           wb_data_pop_en_x;
output          ld_hit_wb_f_x;
output          ld_hit_wb_x;
output          wb_entry_addr_vld_x;
output          wb_entry_data_vld_x;
output          wb_entry_fls_x;
output          wb_entry_lock_x;
output          wb_entry_lrsc_x;
output          wb_entry_pmp_deny_x;
output          wb_entry_sc_fail_x;
output          wb_entry_split_first_x;
output          wb_entry_vld_x;
output  [31:0]  wb_entryx_addr;
output  [5 :0]  wb_entryx_dest_preg;
output  [3 :0]  wb_entryx_prot;
output  [2 :0]  wb_entryx_shift;
output  [1 :0]  wb_entryx_size;
output  [31:0]  wb_entryx_wdata;
output          wb_so_req_x;

// &Regs; @21
reg             req_mask_f;
reg     [31:0]  wb_entry_addr;
reg             wb_entry_addr_vld;
reg             wb_entry_buf;
reg     [3 :0]  wb_entry_bytes_vld;
reg             wb_entry_ca;
reg     [5 :0]  wb_entry_dest_preg;
reg             wb_entry_fls;
reg             wb_entry_lock;
reg             wb_entry_pmp_deny;
reg             wb_entry_sc_fail;
reg             wb_entry_sc_inst;
reg     [2 :0]  wb_entry_shift;
reg     [1 :0]  wb_entry_size;
reg             wb_entry_so;
reg             wb_entry_split_first;
reg             wb_entry_src1_depd;
reg     [5 :0]  wb_entry_src1_reg;
reg             wb_entry_vld;
reg     [31:0]  wb_entry_wdata;

// &Wires; @22
wire            ag_addr_hit;
wire            ag_dc_warm_up;
wire            ag_ld_inst;
wire            ag_ncb_inst_vld_dp;
wire            bytes_vld_hit;
wire            cp0_yy_mach_mode;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  fwd_data;
wire            fwd_fpu;
wire    [31:0]  fwd_fpu_data;
wire            fwd_lsu;
wire            fwd_vld;
wire            ld_hit_wb_f_x;
wire            ld_hit_wb_x;
wire            pad_yy_gate_clk_en_b;
wire            req_mask;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_yy_xx_async_flush;
wire            wb_addr_pop_en_x;
wire            wb_clk;
wire    [31:0]  wb_create_addr;
wire            wb_create_buf;
wire    [7 :0]  wb_create_bytes_vld;
wire            wb_create_ca;
wire    [31:0]  wb_create_data;
wire    [5 :0]  wb_create_dest_preg;
wire            wb_create_en_dp_x;
wire            wb_create_en_x;
wire            wb_create_fls;
wire            wb_create_lock;
wire            wb_create_pmp_deny;
wire            wb_create_sc_fail;
wire            wb_create_sc_inst;
wire    [3 :0]  wb_create_shift;
wire    [1 :0]  wb_create_size;
wire            wb_create_so;
wire            wb_create_split_first;
wire            wb_create_src1_depd;
wire    [5 :0]  wb_create_src1_reg;
wire            wb_data_clk;
wire            wb_data_clk_en;
wire            wb_data_pop_en_x;
wire            wb_entry_addr_vld_x;
wire    [7 :0]  wb_entry_bytes_vld_ext;
wire            wb_entry_clk;
wire            wb_entry_clk_en;
wire            wb_entry_data_vld_x;
wire            wb_entry_dw;
wire            wb_entry_fls_x;
wire            wb_entry_lock_x;
wire            wb_entry_lrsc_x;
wire            wb_entry_pmp_deny_x;
wire            wb_entry_sc_fail_x;
wire            wb_entry_split_first_x;
wire            wb_entry_vld_x;
wire    [31:0]  wb_entryx_addr;
wire    [5 :0]  wb_entryx_dest_preg;
wire    [3 :0]  wb_entryx_prot;
wire    [2 :0]  wb_entryx_shift;
wire    [1 :0]  wb_entryx_size;
wire    [31:0]  wb_entryx_wdata;
wire            wb_so_req_x;


parameter DATAW = `FLEN;

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_entry_vld <= 1'b0;
  else if (rtu_yy_xx_async_flush)
    wb_entry_vld <= 1'b0;
  else if (wb_create_en_x)
    wb_entry_vld <= 1'b1;
  else if (wb_data_pop_en_x)
    wb_entry_vld <= 1'b0;
end

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_entry_addr_vld <= 1'b0;
  else if (rtu_yy_xx_async_flush)
    wb_entry_addr_vld <= 1'b0;
  else if (wb_create_en_x)
    wb_entry_addr_vld <= 1'b1;
  else if (wb_addr_pop_en_x)
    wb_entry_addr_vld <= 1'b0;
end

// &Force("bus", "wb_create_shift",3,0); @50
always@(posedge wb_entry_clk)
begin
  if (wb_create_en_dp_x | ag_dc_warm_up) begin
    wb_entry_addr[31:0]     <= wb_create_addr[31:0];
    wb_entry_size[1:0]      <= wb_create_size[1:0];
    wb_entry_fls            <= wb_create_fls;
    wb_entry_ca             <= wb_create_ca;
    wb_entry_buf            <= wb_create_buf;
    wb_entry_so             <= wb_create_so;
    wb_entry_lock           <= wb_create_lock;
    wb_entry_sc_inst        <= wb_create_sc_inst;
    wb_entry_pmp_deny       <= wb_create_pmp_deny;
    wb_entry_sc_fail        <= wb_create_sc_fail;
    wb_entry_dest_preg[5:0] <= wb_create_dest_preg[5:0];
    wb_entry_src1_reg[5:0]  <= wb_create_src1_reg[5:0];
    wb_entry_shift[2:0]     <= wb_create_shift[2:0];
    wb_entry_split_first    <= wb_create_split_first;
  end
end

// &CombBeg; @71
always @( wb_entry_addr[1:0]
       or wb_entry_size[1:0])
begin
  casez({wb_entry_size[1:0],wb_entry_addr[1:0]})
    4'b0000: wb_entry_bytes_vld[3:0] = 4'b0001;
    4'b0001: wb_entry_bytes_vld[3:0] = 4'b0010;
    4'b0010: wb_entry_bytes_vld[3:0] = 4'b0100;
    4'b0011: wb_entry_bytes_vld[3:0] = 4'b1000;
    4'b0100: wb_entry_bytes_vld[3:0] = 4'b0011;
    4'b0110: wb_entry_bytes_vld[3:0] = 4'b1100;
    4'b1?00: wb_entry_bytes_vld[3:0] = 4'b1111;
    default: wb_entry_bytes_vld[3:0] = 4'b1111;
  endcase
// &CombEnd; @82
end

assign wb_entry_dw = wb_entry_size[1:0] == 2'b11;

assign wb_entry_bytes_vld_ext[7:0] = wb_entry_addr[2]
                                   ? {wb_entry_bytes_vld[3:0], 4'b0000}
                                   : {{4{wb_entry_dw}},wb_entry_bytes_vld[3:0]};




assign fwd_lsu   = rtu_lsu_wb_fwd_vld &

                   (wb_entry_fls == rtu_lsu_wb_fwd_fls) &
                   (wb_entry_src1_reg[5:0] == rtu_lsu_wb_fwd_reg[5:0]);
assign fwd_fpu = 1'b0;
assign fwd_fpu_data[DATAW-1:0] = {DATAW{1'b0}};
assign fwd_vld   = wb_entry_vld & wb_entry_src1_depd & (fwd_lsu | fwd_fpu);
assign fwd_data[DATAW-1:0]
                 = fwd_fpu ? fwd_fpu_data[DATAW-1:0] :rtu_lsu_wb_fwd_data[DATAW-1:0];

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    wb_entry_src1_depd <= 1'b0;
  else if (wb_create_en_dp_x)
    wb_entry_src1_depd <= wb_create_src1_depd;
  else if (fwd_vld)
    wb_entry_src1_depd <= 1'b0;
end

always@(posedge wb_data_clk)
begin
  if (wb_create_en_dp_x | ag_dc_warm_up)
    wb_entry_wdata[DATAW-1:0] <= wb_create_data[DATAW-1:0];
  else if (fwd_vld)
    wb_entry_wdata[DATAW-1:0] <= fwd_data[DATAW-1:0];
end


assign wb_entry_vld_x       = wb_entry_vld;
assign wb_entry_addr_vld_x  = wb_entry_addr_vld & !wb_entry_src1_depd;
assign wb_entry_data_vld_x  = wb_entry_vld & !wb_entry_src1_depd;
assign wb_entryx_addr[31:0] = wb_entry_addr[31:0];
assign wb_entryx_size[1:0]  = wb_entry_size[1:0];
assign wb_entry_fls_x       = wb_entry_fls;
assign wb_entry_lock_x      = wb_entry_lock;
assign wb_entry_lrsc_x      = wb_entry_sc_inst;
assign wb_entryx_prot[3:0]  = {wb_entry_ca,wb_entry_buf,cp0_yy_mach_mode,1'b1};
assign wb_entry_pmp_deny_x  = wb_entry_pmp_deny;
assign wb_entry_sc_fail_x   = wb_entry_sc_fail;
assign wb_so_req_x          = wb_entry_addr_vld & wb_entry_so;
assign wb_entry_split_first_x = wb_entry_split_first;

assign wb_entryx_wdata[DATAW-1:0] = wb_entry_wdata[DATAW-1:0];
assign wb_entryx_dest_preg[5:0] = wb_entry_dest_preg[5:0];
assign wb_entryx_shift[2:0]     = wb_entry_shift[2:0];


assign ag_addr_hit   = wb_create_addr[31:3] == wb_entry_addr[31:3];
assign bytes_vld_hit = |(wb_create_bytes_vld[7:0] & wb_entry_bytes_vld_ext[7:0]);

assign req_mask    = wb_entry_addr_vld & ag_ncb_inst_vld_dp & ag_ld_inst & ag_addr_hit & bytes_vld_hit;

always@(posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    req_mask_f <= 1'b0;
  else if (wb_create_en_dp_x)
    req_mask_f <= 1'b0;
  else if (wb_addr_pop_en_x)
    req_mask_f <= 1'b0;
  else if (req_mask)
    req_mask_f <= 1'b1;
end

assign ld_hit_wb_x   = wb_entry_addr_vld & !req_mask_f & ag_ld_inst & ag_addr_hit & bytes_vld_hit;
assign ld_hit_wb_f_x = wb_entry_addr_vld & req_mask_f;

assign wb_entry_clk_en = wb_create_en_dp_x | ag_dc_warm_up;
// &Instance("gated_clk_cell", "x_pa_lsu_wb_entry_gated_clk"); @169
gated_clk_cell  x_pa_lsu_wb_entry_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (wb_entry_clk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (wb_entry_clk_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @170
//          .external_en (1'b0), @171
//          .global_en   (1'b1), @172
//          .module_en   (1'b0), @173
//          .local_en    (wb_entry_clk_en), @174
//          .clk_out     (wb_entry_clk)); @175

assign wb_data_clk_en = wb_create_en_dp_x | ag_dc_warm_up | fwd_vld;
// &Instance("gated_clk_cell", "x_pa_lsu_wb_data_gated_clk"); @178
gated_clk_cell  x_pa_lsu_wb_data_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (wb_data_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (wb_data_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @179
//          .external_en (1'b0), @180
//          .global_en   (1'b1), @181
//          .module_en   (1'b0), @182
//          .local_en    (wb_data_clk_en), @183
//          .clk_out     (wb_data_clk)); @184


// &ModuleEnd; @190
endmodule























// &ModuleBeg; @22
module pa_rst_top(
  cpurst_b,
  hadrst_b,
  pad_cpu_rst_b,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_yy_scan_mode,
  pad_yy_scan_rst_b,
  trst_b
);

// &Ports; @23
input        pad_cpu_rst_b;
input        pad_had_jtg_trst_b;
input        pad_had_rst_b;
input        pad_yy_scan_mode;
input        pad_yy_scan_rst_b;
output       cpurst_b;
output       hadrst_b;
output       trst_b;

// &Regs; @24

// &Wires; @25
wire         cpurst_b;
wire         hadrst_b;
wire         pad_cpu_rst_b;
wire         pad_had_jtg_trst_b;
wire         pad_had_rst_b;
wire         pad_yy_scan_mode;
wire         pad_yy_scan_rst_b;
wire         trst_b;


assign cpurst_b = pad_yy_scan_mode ? pad_yy_scan_rst_b : pad_cpu_rst_b;
assign hadrst_b = pad_yy_scan_mode ? pad_yy_scan_rst_b : pad_had_rst_b;
assign trst_b   = pad_yy_scan_mode ? pad_yy_scan_rst_b : pad_had_jtg_trst_b;

// &ModuleEnd; @37
endmodule
























// &ModuleBeg; @23
module pa_rtu_int(
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_in_nmi,
  cp0_rtu_int_id,
  cp0_rtu_int_level,
  cp0_rtu_int_mode,
  cp0_rtu_mie,
  cp0_rtu_mnxti_vld,
  cp0_rtu_mpil,
  cp0_rtu_pm_bypass,
  cp0_rtu_wfe_en,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpurst_b,
  forever_cpuclk,
  had_rtu_xx_tme,
  idu_rtu_ex1_ipop_int_mask,
  idu_rtu_ex1_ipush_mie_en,
  idu_yy_xx_tail_ack,
  int_lockup_nmi_req,
  int_rbus_ex1_int_vld,
  int_rbus_ex1_int_vld_gate,
  int_rbus_ex1_nmi_req,
  int_rbus_int_hv,
  int_retire_pending_int_hv,
  int_xx_int_id,
  int_xx_int_lv,
  pad_yy_gate_clk_en_b,
  rbus_xx_ex1_split_inst,
  retire_int_nmi_ack,
  retire_xx_ex2_expt_raw,
  rtu_cp0_mnxti_pending_vld,
  rtu_cp0_pending_int_hv,
  rtu_cp0_pending_int_id,
  rtu_cp0_pending_int_level,
  rtu_cp0_wk_int,
  rtu_idu_id_tail_int_vld,
  rtu_yy_xx_expt_int,
  sysio_rtu_nmi_int,
  sysio_rtu_wk_event
);

// &Ports; @24
input           clic_cpu_int_hv;
input   [11:0]  clic_cpu_int_id;
input   [7 :0]  clic_cpu_int_il;
input   [1 :0]  clic_cpu_int_priv;
input           cp0_rtu_ex1_inst_mret;
input           cp0_rtu_in_nmi;
input   [11:0]  cp0_rtu_int_id;
input   [7 :0]  cp0_rtu_int_level;
input   [1 :0]  cp0_rtu_int_mode;
input           cp0_rtu_mie;
input           cp0_rtu_mnxti_vld;
input   [7 :0]  cp0_rtu_mpil;
input   [1 :0]  cp0_rtu_pm_bypass;
input           cp0_rtu_wfe_en;
input           cpurst_b;
input           forever_cpuclk;
input           had_rtu_xx_tme;
input           idu_rtu_ex1_ipop_int_mask;
input           idu_rtu_ex1_ipush_mie_en;
input           idu_yy_xx_tail_ack;
input           pad_yy_gate_clk_en_b;
input           rbus_xx_ex1_split_inst;
input           retire_int_nmi_ack;
input           retire_xx_ex2_expt_raw;
input           rtu_yy_xx_expt_int;
input           sysio_rtu_nmi_int;
input           sysio_rtu_wk_event;
output  [11:0]  cpu_clic_curid;
output          cpu_clic_int_exit;
output          int_lockup_nmi_req;
output          int_rbus_ex1_int_vld;
output          int_rbus_ex1_int_vld_gate;
output          int_rbus_ex1_nmi_req;
output          int_rbus_int_hv;
output          int_retire_pending_int_hv;
output  [11:0]  int_xx_int_id;
output  [7 :0]  int_xx_int_lv;
output          rtu_cp0_mnxti_pending_vld;
output          rtu_cp0_pending_int_hv;
output  [11:0]  rtu_cp0_pending_int_id;
output  [7 :0]  rtu_cp0_pending_int_level;
output          rtu_cp0_wk_int;
output          rtu_idu_id_tail_int_vld;

// &Regs; @25
reg             cpu_nmi_int_f;
reg             cpu_wk_event_f1;
reg             cpu_wk_event_f2;
reg             int_nmi_req_raw;

// &Wires; @26
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_rtu_wfe_en;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpu_nmi_vld;
wire            cpurst_b;
wire            flop_clk;
wire            flop_clk_en;
wire            forever_cpuclk;
wire            had_rtu_xx_tme;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_yy_xx_tail_ack;
wire            int_clic_gt_cur;
wire            int_clic_gt_pre;
wire            int_clic_hv;
wire    [11:0]  int_clic_id;
wire    [7 :0]  int_clic_int_level;
wire    [1 :0]  int_clic_int_mode;
wire    [7 :0]  int_cur_int_level;
wire            int_ex1_int_vld;
wire            int_ex1_int_vld_gate;
wire            int_ex1_nmi_vld;
wire            int_global_mie;
wire            int_id_tail_vld;
wire            int_lockup_nmi_req;
wire            int_mask;
wire            int_nhv_int_ack;
wire            int_nmi_req;
wire            int_pending_vld;
wire    [7 :0]  int_pre_int_level;
wire            int_rbus_ex1_int_vld;
wire            int_rbus_ex1_int_vld_gate;
wire            int_rbus_ex1_nmi_req;
wire            int_rbus_int_hv;
wire            int_retire_pending_int_hv;
wire            int_vld;
wire            int_vld_raw;
wire            int_wk_event_vld;
wire    [11:0]  int_xx_int_id;
wire    [7 :0]  int_xx_int_lv;
wire            mnxti_pending_vld;
wire            pad_yy_gate_clk_en_b;
wire            rbus_xx_ex1_split_inst;
wire            retire_int_nmi_ack;
wire            retire_xx_ex2_expt_raw;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_cp0_wk_int;
wire            rtu_idu_id_tail_int_vld;
wire            rtu_yy_xx_expt_int;
wire            sysio_rtu_nmi_int;
wire            sysio_rtu_wk_event;


parameter CPU_MODE_M          = 2'b11;
parameter CPU_MODE_U          = 2'b00;

assign int_global_mie         = cp0_rtu_mie
                             || idu_rtu_ex1_ipush_mie_en && !retire_xx_ex2_expt_raw;



assign int_clic_id[11:0]       = clic_cpu_int_id[11:0];
assign int_clic_int_level[7:0] = clic_cpu_int_il[7:0];
assign int_clic_int_mode[1:0]  = clic_cpu_int_priv[1:0];
assign int_clic_hv             = clic_cpu_int_hv;




assign int_cur_int_level[7:0] = cp0_rtu_int_level[7:0];
// &Force("input", "cp0_rtu_int_mode");  &Force("bus", "cp0_rtu_int_mode", 1, 0); @46


assign int_pre_int_level[7:0] = cp0_rtu_mpil[7:0];

assign int_nhv_int_ack        = cp0_rtu_mnxti_vld;



assign int_clic_gt_cur = int_clic_int_level[7:0] > int_cur_int_level[7:0];
assign int_vld_raw     = int_clic_gt_cur // clic int must be M mode int.
                      && int_clic_int_mode[1:0] == CPU_MODE_M; // Only support M int.





assign int_clic_gt_pre = int_clic_int_level[7:0] > int_pre_int_level[7:0];
assign int_pending_vld = int_clic_gt_pre
                      && int_clic_int_mode[1:0] == CPU_MODE_M;
assign mnxti_pending_vld = int_pending_vld && !int_clic_hv;




assign int_vld = int_vld_raw && (int_global_mie
                              || cp0_rtu_pm_bypass[1:0] != CPU_MODE_M);

assign int_ex1_int_vld = int_vld
                     && (!rbus_xx_ex1_split_inst || idu_rtu_ex1_ipop_int_mask)
                     && !had_rtu_xx_tme
                     && !int_mask;
assign int_ex1_int_vld_gate = int_vld_raw
                     && (!rbus_xx_ex1_split_inst || idu_rtu_ex1_ipop_int_mask)
                     && !had_rtu_xx_tme
                     && !int_mask;

assign int_mask = cp0_rtu_in_nmi && !cp0_rtu_ex1_inst_mret;




assign int_id_tail_vld = int_pending_vld
                      && cp0_rtu_mie
                      && !had_rtu_xx_tme
                      && !int_mask;





always @ (posedge flop_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    cpu_nmi_int_f <= 1'b0;
  else
    cpu_nmi_int_f <= sysio_rtu_nmi_int;
end

assign cpu_nmi_vld = !cpu_nmi_int_f && sysio_rtu_nmi_int;

always @ (posedge flop_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_nmi_req_raw <= 1'b0;
  else if (cpu_nmi_vld)
    int_nmi_req_raw <= 1'b1;
  else if (retire_int_nmi_ack)
    int_nmi_req_raw <= 1'b0;
end

assign int_nmi_req = int_nmi_req_raw && !(cp0_rtu_in_nmi && !cp0_rtu_ex1_inst_mret);
assign int_ex1_nmi_vld = int_nmi_req
                      && !rbus_xx_ex1_split_inst;




always @ (posedge flop_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    cpu_wk_event_f1 <= 1'b0;
    cpu_wk_event_f2 <= 1'b0;
  end
  else begin
    cpu_wk_event_f1 <= sysio_rtu_wk_event;
    cpu_wk_event_f2 <= cpu_wk_event_f1;
  end
end

assign int_wk_event_vld = !cpu_wk_event_f2 && cpu_wk_event_f1;

assign flop_clk_en = cpu_nmi_int_f ^ sysio_rtu_nmi_int
                  || cpu_wk_event_f1 ^ sysio_rtu_wk_event
                  || cpu_wk_event_f2 ^ cpu_wk_event_f1
                  || cpu_nmi_vld
                  || int_nmi_req_raw;
// &Instance("gated_clk_cell", "x_flop_clk"); @143
gated_clk_cell  x_flop_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (flop_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (flop_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @144
//          .external_en (1'b0), @145
//          .global_en   (1'b1), @146
//          .module_en   (1'b0), @147
//          .local_en    (flop_clk_en), @148
//          .clk_out     (flop_clk)); @149




assign int_rbus_ex1_nmi_req  = int_ex1_nmi_vld;
assign int_rbus_ex1_int_vld  = int_ex1_int_vld && !int_ex1_nmi_vld;
assign int_rbus_ex1_int_vld_gate = int_ex1_int_vld_gate && !int_ex1_nmi_vld;
assign int_rbus_int_hv       = int_clic_hv;
assign int_retire_pending_int_hv = int_clic_hv;
assign int_xx_int_id[11:0]   = int_clic_id[11:0];
assign int_xx_int_lv[7:0]    = int_clic_int_level[7:0];
assign int_lockup_nmi_req    = int_nmi_req;




assign rtu_cp0_wk_int = int_vld_raw
                     || |int_clic_int_level[7:0] && cp0_rtu_wfe_en
                     || int_wk_event_vld && cp0_rtu_wfe_en
                     || int_nmi_req;
assign rtu_cp0_mnxti_pending_vld = mnxti_pending_vld;
assign rtu_cp0_pending_int_id[11:0] = int_clic_id[11:0];
assign rtu_cp0_pending_int_level[7:0] = int_clic_int_level[7:0];
assign rtu_cp0_pending_int_hv = int_clic_hv;




assign cpu_clic_curid[11:0] = idu_yy_xx_tail_ack ? cp0_rtu_int_id[11:0]
                                                 : int_clic_id[11:0];
assign cpu_clic_int_exit = idu_yy_xx_tail_ack
                        || rtu_yy_xx_expt_int ? int_clic_hv
                                              : int_nhv_int_ack;




assign rtu_idu_id_tail_int_vld = int_id_tail_vld;

// &ModuleEnd @195
endmodule
























// &ModuleBeg; @23
module pa_rtu_lockup(
  cp0_rtu_in_expt,
  cp0_rtu_in_nmi,
  cpurst_b,
  ifu_rtu_lockup_ack,
  int_lockup_nmi_req,
  lockup_clk,
  lockup_clk_en,
  lockup_retire_dbg_vld,
  lockup_retire_nmi_vld,
  retire_lockup_dbg_req,
  retire_lockup_dbgon,
  retire_lockup_expt_vld,
  retire_lockup_nmi_exit,
  retire_lockup_retire_pc,
  retire_lockup_retire_vld,
  rtu_cp0_lockup_clr,
  rtu_cp0_lockup_vld,
  rtu_ifu_lockup_expt_vld,
  rtu_ifu_lockup_mask,
  rtu_ifu_lockup_req,
  rtu_sysio_lockup_on
);

// &Ports; @24
input           cp0_rtu_in_expt;
input           cp0_rtu_in_nmi;
input           cpurst_b;
input           ifu_rtu_lockup_ack;
input           int_lockup_nmi_req;
input           lockup_clk;
input           retire_lockup_dbg_req;
input           retire_lockup_dbgon;
input           retire_lockup_expt_vld;
input           retire_lockup_nmi_exit;
input   [31:0]  retire_lockup_retire_pc;
input           retire_lockup_retire_vld;
output          lockup_clk_en;
output          lockup_retire_dbg_vld;
output          lockup_retire_nmi_vld;
output          rtu_cp0_lockup_clr;
output          rtu_cp0_lockup_vld;
output          rtu_ifu_lockup_expt_vld;
output          rtu_ifu_lockup_mask;
output          rtu_ifu_lockup_req;
output          rtu_sysio_lockup_on;

// &Regs; @25
reg     [2 :0]  lockup_cur_st;
reg     [2 :0]  lockup_nxt_st;

// &Wires; @26
wire            cp0_rtu_in_expt;
wire            cp0_rtu_in_nmi;
wire            cpurst_b;
wire            ifu_rtu_lockup_ack;
wire            int_lockup_nmi_req;
wire            lock_up_ack;
wire            lock_up_en;
wire            lock_up_vld;
wire            lockup_clk;
wire            lockup_clk_en;
wire            lockup_on;
wire            lockup_retire_dbg_vld;
wire            lockup_retire_nmi_vld;
wire            retire_lockup_dbg_req;
wire            retire_lockup_dbgon;
wire            retire_lockup_expt_vld;
wire            retire_lockup_nmi_exit;
wire    [31:0]  retire_lockup_retire_pc;
wire            retire_lockup_retire_vld;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_ifu_lockup_expt_vld;
wire            rtu_ifu_lockup_mask;
wire            rtu_ifu_lockup_req;
wire            rtu_sysio_lockup_on;







assign lock_up_en = 1'b1;

assign lock_up_vld = (cp0_rtu_in_expt || cp0_rtu_in_nmi)
                  && retire_lockup_expt_vld
                  && lock_up_en
                  && !lockup_on;


parameter IDLE   = 3'b000;
parameter WFLU   = 3'b001;
parameter LKUP   = 3'b010;
parameter LKNMI  = 3'b100;
parameter LKDBG  = 3'b101;

always @ (posedge lockup_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    lockup_cur_st[2:0] <= IDLE;
  else
    lockup_cur_st[2:0] <= lockup_nxt_st[2:0];
end

// &CombBeg; @55
always @( cp0_rtu_in_nmi
       or retire_lockup_nmi_exit
       or lock_up_vld
       or lock_up_ack
       or retire_lockup_retire_pc[31:0]
       or retire_lockup_retire_vld
       or int_lockup_nmi_req
       or retire_lockup_dbgon
       or retire_lockup_dbg_req
       or lockup_cur_st[2:0])
begin
case(lockup_cur_st[2:0])
  IDLE:
  begin
    if(lock_up_vld)
      lockup_nxt_st[2:0] = WFLU;
    else
      lockup_nxt_st[2:0] = IDLE;
  end
  WFLU:
  begin
    if(lock_up_ack)
      lockup_nxt_st[2:0] = LKUP;
    else
      lockup_nxt_st[2:0] = WFLU;
  end
  LKUP:
  begin
    if(retire_lockup_dbg_req)
      lockup_nxt_st[2:0] = LKDBG;
    else if(int_lockup_nmi_req && !cp0_rtu_in_nmi)
      lockup_nxt_st[2:0] = LKNMI;
    else
      lockup_nxt_st[2:0] = LKUP;
  end
  LKNMI:
  begin
    if(retire_lockup_nmi_exit || lock_up_vld)
      lockup_nxt_st[2:0] = WFLU;
    else
      lockup_nxt_st[2:0] = LKNMI;
  end
  LKDBG:
  begin
    if(retire_lockup_retire_vld && !retire_lockup_dbgon)
      if (retire_lockup_retire_pc[31:0] == 32'hEFFF_FFFC)
        lockup_nxt_st[2:0] = WFLU;
      else
        lockup_nxt_st[2:0] = IDLE;
    else
      lockup_nxt_st[2:0] = LKDBG;
  end
  default:
  begin
    lockup_nxt_st[2:0] = IDLE;
  end
endcase
// &CombEnd; @102
end

assign lock_up_ack         = ifu_rtu_lockup_ack;

assign lockup_on           = lockup_cur_st[2:0] == LKUP;

assign rtu_ifu_lockup_req   = lockup_cur_st[2:0] == WFLU;

assign rtu_ifu_lockup_expt_vld = lock_up_vld;
assign lockup_retire_nmi_vld = lockup_on && int_lockup_nmi_req && !cp0_rtu_in_nmi;
assign lockup_retire_dbg_vld = lockup_on && retire_lockup_dbg_req;

assign rtu_cp0_lockup_vld     = lockup_cur_st[2:0] == WFLU && lock_up_ack;
assign rtu_cp0_lockup_clr     = retire_lockup_retire_vld && !retire_lockup_dbgon
                             && retire_lockup_retire_pc[31:0] != 32'hEFFF_FFFC
                             && lockup_cur_st[2:0] == LKDBG;

assign rtu_ifu_lockup_mask   = lockup_cur_st[2:0] == WFLU || lockup_on;
assign rtu_sysio_lockup_on   = lockup_on;

assign lockup_clk_en = lockup_cur_st[2:0] != IDLE
                    || lock_up_vld;


// &ModuleEnd; @135
endmodule

























// &ModuleBeg; @23
module pa_rtu_rbus(
  cp0_rtu_chgflw_pc,
  cp0_rtu_chgflw_vld,
  cp0_rtu_ex1_cmplt,
  cp0_rtu_ex1_data,
  cp0_rtu_ex1_expt_vec,
  cp0_rtu_ex1_expt_vld,
  cp0_rtu_ex1_flush,
  cp0_rtu_ex1_inst_bkpt,
  cp0_rtu_ex1_inst_ebreak,
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_ex1_stall,
  cp0_rtu_ex1_wb_preg,
  cp0_rtu_ex1_wb_vld,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_trace_potential,
  idu_rtu_ex1_dst_vld,
  idu_rtu_ex1_inst_vld,
  idu_rtu_ex1_ipop_int_mask,
  idu_rtu_ex1_ipush_mie_en,
  idu_rtu_ex1_ipush_spec_fail,
  idu_rtu_ex1_lsu_sel,
  idu_rtu_ex1_tail_int_vld,
  idu_rtu_ipush_spec,
  idu_rtu_tail_fail,
  idu_xx_ex1_warm_up,
  ifu_xx_warm_up_clk,
  int_rbus_ex1_int_vld,
  int_rbus_ex1_int_vld_gate,
  int_rbus_ex1_nmi_req,
  int_rbus_int_hv,
  int_xx_int_id,
  int_xx_int_lv,
  iu_rtu_div_ex1_stall,
  iu_rtu_ex1_alu_cmplt,
  iu_rtu_ex1_alu_data,
  iu_rtu_ex1_bju_chgflw_vld,
  iu_rtu_ex1_bju_cmplt,
  iu_rtu_ex1_bju_cmplt_dp,
  iu_rtu_ex1_bju_data,
  iu_rtu_ex1_bju_stall,
  iu_rtu_ex1_bju_wb_vld,
  iu_rtu_ex1_branch_inst,
  iu_rtu_ex1_cur_pc,
  iu_rtu_ex1_div_cmplt,
  iu_rtu_ex1_div_data,
  iu_rtu_ex1_div_wb_vld,
  iu_rtu_ex1_lsu_wb_data,
  iu_rtu_ex1_lsu_wb_preg,
  iu_rtu_ex1_lsu_wb_vld,
  iu_rtu_ex1_mul_cmplt,
  iu_rtu_ex1_next_pc,
  iu_rtu_ex1_split_inst,
  iu_rtu_ex1_wb_preg,
  iu_rtu_ex1_wb_vld,
  iu_rtu_ex2_chgflw_pc,
  iu_rtu_ex2_chgflw_vld,
  iu_rtu_ex2_div_data,
  iu_rtu_ex2_div_preg,
  iu_rtu_ex2_div_wb_vld,
  iu_rtu_ex2_mul_wb_data,
  iu_rtu_ex2_mul_wb_preg,
  lsu_rtu_async_mtval,
  lsu_rtu_ex1_bkpta_trap,
  lsu_rtu_ex1_bkptb_trap,
  lsu_rtu_ex1_bkptc_trap,
  lsu_rtu_ex1_bkptd_trap,
  lsu_rtu_ex1_bkpte_trap,
  lsu_rtu_ex1_cmplt,
  lsu_rtu_ex1_cmplt_dp,
  lsu_rtu_ex1_expt_vec,
  lsu_rtu_ex1_expt_vld,
  lsu_rtu_ex1_inst_ld,
  lsu_rtu_ex1_mtval,
  lsu_rtu_ex1_stall,
  lsu_rtu_ex2_data,
  lsu_rtu_ex2_data_vld,
  lsu_rtu_ex2_data_vld_gate,
  lsu_rtu_ex2_dest_reg,
  lsu_rtu_ex2_stall,
  lsu_rtu_ex2_stall_gate,
  lsu_rtu_pmp_deny,
  pad_yy_gate_clk_en_b,
  rbus_retire_ex2_branch_inst,
  rbus_retire_ex2_chgflw_vld,
  rbus_retire_ex2_cur_pc,
  rbus_retire_ex2_data_mbkpta,
  rbus_retire_ex2_data_mbkptb,
  rbus_retire_ex2_data_mbkptc,
  rbus_retire_ex2_data_mbkptd,
  rbus_retire_ex2_data_mbkpte,
  rbus_retire_ex2_flush,
  rbus_retire_ex2_inst_dbg_hw,
  rbus_retire_ex2_inst_ebreak,
  rbus_retire_ex2_inst_expt,
  rbus_retire_ex2_inst_int,
  rbus_retire_ex2_inst_ld,
  rbus_retire_ex2_inst_mbkpta,
  rbus_retire_ex2_inst_mbkptb,
  rbus_retire_ex2_inst_mbkptc,
  rbus_retire_ex2_inst_mbkptd,
  rbus_retire_ex2_inst_mbkpte,
  rbus_retire_ex2_inst_mret,
  rbus_retire_ex2_inst_nmi,
  rbus_retire_ex2_inst_tail_int,
  rbus_retire_ex2_int_hv,
  rbus_retire_ex2_int_lv,
  rbus_retire_ex2_ipop_int,
  rbus_retire_ex2_mtval,
  rbus_retire_ex2_next_pc,
  rbus_retire_ex2_retire_vld,
  rbus_retire_ex2_spec_inst,
  rbus_retire_ex2_split_inst,
  rbus_retire_ex2_stall,
  rbus_retire_ex2_stall_gate,
  rbus_retire_ex2_trap_vec,
  rbus_retire_id_stall,
  rbus_wb_ex2_lsu_wb_data,
  rbus_wb_ex2_lsu_wb_reg,
  rbus_wb_ex2_lsu_wb_vld_gate,
  rbus_wb_ex2_rbus_wb_data,
  rbus_wb_ex2_rbus_wb_preg,
  rbus_wb_ex2_rbus_wb_vld_gate,
  rbus_wb_ex2_warm_up,
  rbus_xx_ex1_split_inst,
  rbus_xx_ex2_lsu_wb_vld,
  rbus_xx_ex2_rbus_wb_vld,
  retire_rbus_dbg_stall,
  retire_rbus_ex1_cancel,
  retire_rbus_ex1_inst_dbg_hw,
  retire_rbus_ex2_wb_cancel,
  retire_xx_ex2_expt_raw,
  rtu_clic_warm_up,
  rtu_cp0_mie_en,
  rtu_cp0_mie_en_gate,
  rtu_had_ex1_data_bkpta_vld,
  rtu_had_ex1_data_bkptb_vld,
  rtu_had_ex1_data_bkptc_vld,
  rtu_had_ex1_data_bkptd_vld,
  rtu_had_ex1_data_bkpte_vld,
  rtu_had_ex1_inst_bkpta_vld,
  rtu_had_ex1_inst_bkptb_vld,
  rtu_had_ex1_inst_bkptc_vld,
  rtu_had_ex1_inst_bkptd_vld,
  rtu_had_ex1_inst_bkpte_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_idu_ex1_fwd_data,
  rtu_idu_ex1_fwd_vld,
  rtu_idu_ex1_stall,
  rtu_idu_ex2_lsu_fwd_data,
  rtu_idu_ex2_lsu_fwd_preg,
  rtu_idu_ex2_lsu_fwd_vld,
  rtu_idu_ex2_rbus_fwd_data,
  rtu_idu_ex2_rbus_fwd_preg,
  rtu_idu_ex2_rbus_fwd_vld,
  rtu_iu_ex1_stall,
  rtu_iu_ex2_cur_pc,
  rtu_iu_ex2_div_wb_en,
  rtu_iu_ex2_stall,
  rtu_lsu_ex2_stall,
  rtu_yy_xx_flush
);

// &Ports; @24
input   [31:0]  cp0_rtu_chgflw_pc;
input           cp0_rtu_chgflw_vld;
input           cp0_rtu_ex1_cmplt;
input   [31:0]  cp0_rtu_ex1_data;
input   [3 :0]  cp0_rtu_ex1_expt_vec;
input           cp0_rtu_ex1_expt_vld;
input           cp0_rtu_ex1_flush;
input   [8 :0]  cp0_rtu_ex1_inst_bkpt;
input           cp0_rtu_ex1_inst_ebreak;
input           cp0_rtu_ex1_inst_mret;
input           cp0_rtu_ex1_stall;
input   [5 :0]  cp0_rtu_ex1_wb_preg;
input           cp0_rtu_ex1_wb_vld;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           had_rtu_ex1_bkpt_potential;
input           had_rtu_ex1_trace_potential;
input           idu_rtu_ex1_dst_vld;
input           idu_rtu_ex1_inst_vld;
input           idu_rtu_ex1_ipop_int_mask;
input           idu_rtu_ex1_ipush_mie_en;
input           idu_rtu_ex1_ipush_spec_fail;
input           idu_rtu_ex1_lsu_sel;
input           idu_rtu_ex1_tail_int_vld;
input           idu_rtu_ipush_spec;
input           idu_rtu_tail_fail;
input           idu_xx_ex1_warm_up;
input           ifu_xx_warm_up_clk;
input           int_rbus_ex1_int_vld;
input           int_rbus_ex1_int_vld_gate;
input           int_rbus_ex1_nmi_req;
input           int_rbus_int_hv;
input   [11:0]  int_xx_int_id;
input   [7 :0]  int_xx_int_lv;
input           iu_rtu_div_ex1_stall;
input           iu_rtu_ex1_alu_cmplt;
input   [31:0]  iu_rtu_ex1_alu_data;
input           iu_rtu_ex1_bju_chgflw_vld;
input           iu_rtu_ex1_bju_cmplt;
input           iu_rtu_ex1_bju_cmplt_dp;
input   [31:0]  iu_rtu_ex1_bju_data;
input           iu_rtu_ex1_bju_stall;
input           iu_rtu_ex1_bju_wb_vld;
input           iu_rtu_ex1_branch_inst;
input   [31:0]  iu_rtu_ex1_cur_pc;
input           iu_rtu_ex1_div_cmplt;
input   [31:0]  iu_rtu_ex1_div_data;
input           iu_rtu_ex1_div_wb_vld;
input   [31:0]  iu_rtu_ex1_lsu_wb_data;
input   [5 :0]  iu_rtu_ex1_lsu_wb_preg;
input           iu_rtu_ex1_lsu_wb_vld;
input           iu_rtu_ex1_mul_cmplt;
input   [31:0]  iu_rtu_ex1_next_pc;
input           iu_rtu_ex1_split_inst;
input   [5 :0]  iu_rtu_ex1_wb_preg;
input           iu_rtu_ex1_wb_vld;
input   [31:0]  iu_rtu_ex2_chgflw_pc;
input           iu_rtu_ex2_chgflw_vld;
input   [31:0]  iu_rtu_ex2_div_data;
input   [4 :0]  iu_rtu_ex2_div_preg;
input           iu_rtu_ex2_div_wb_vld;
input   [31:0]  iu_rtu_ex2_mul_wb_data;
input   [5 :0]  iu_rtu_ex2_mul_wb_preg;
input   [31:0]  lsu_rtu_async_mtval;
input           lsu_rtu_ex1_bkpta_trap;
input           lsu_rtu_ex1_bkptb_trap;
input           lsu_rtu_ex1_bkptc_trap;
input           lsu_rtu_ex1_bkptd_trap;
input           lsu_rtu_ex1_bkpte_trap;
input           lsu_rtu_ex1_cmplt;
input           lsu_rtu_ex1_cmplt_dp;
input   [3 :0]  lsu_rtu_ex1_expt_vec;
input           lsu_rtu_ex1_expt_vld;
input           lsu_rtu_ex1_inst_ld;
input   [31:0]  lsu_rtu_ex1_mtval;
input           lsu_rtu_ex1_stall;
input   [31:0]  lsu_rtu_ex2_data;
input           lsu_rtu_ex2_data_vld;
input           lsu_rtu_ex2_data_vld_gate;
input   [5 :0]  lsu_rtu_ex2_dest_reg;
input           lsu_rtu_ex2_stall;
input           lsu_rtu_ex2_stall_gate;
input           lsu_rtu_pmp_deny;
input           pad_yy_gate_clk_en_b;
input           retire_rbus_dbg_stall;
input           retire_rbus_ex1_cancel;
input           retire_rbus_ex1_inst_dbg_hw;
input           retire_rbus_ex2_wb_cancel;
input           retire_xx_ex2_expt_raw;
input           rtu_yy_xx_flush;
output          rbus_retire_ex2_branch_inst;
output          rbus_retire_ex2_chgflw_vld;
output  [31:0]  rbus_retire_ex2_cur_pc;
output          rbus_retire_ex2_data_mbkpta;
output          rbus_retire_ex2_data_mbkptb;
output          rbus_retire_ex2_data_mbkptc;
output          rbus_retire_ex2_data_mbkptd;
output          rbus_retire_ex2_data_mbkpte;
output          rbus_retire_ex2_flush;
output          rbus_retire_ex2_inst_dbg_hw;
output          rbus_retire_ex2_inst_ebreak;
output          rbus_retire_ex2_inst_expt;
output          rbus_retire_ex2_inst_int;
output          rbus_retire_ex2_inst_ld;
output          rbus_retire_ex2_inst_mbkpta;
output          rbus_retire_ex2_inst_mbkptb;
output          rbus_retire_ex2_inst_mbkptc;
output          rbus_retire_ex2_inst_mbkptd;
output          rbus_retire_ex2_inst_mbkpte;
output          rbus_retire_ex2_inst_mret;
output          rbus_retire_ex2_inst_nmi;
output          rbus_retire_ex2_inst_tail_int;
output          rbus_retire_ex2_int_hv;
output  [7 :0]  rbus_retire_ex2_int_lv;
output          rbus_retire_ex2_ipop_int;
output  [31:0]  rbus_retire_ex2_mtval;
output  [31:0]  rbus_retire_ex2_next_pc;
output          rbus_retire_ex2_retire_vld;
output          rbus_retire_ex2_spec_inst;
output          rbus_retire_ex2_split_inst;
output          rbus_retire_ex2_stall;
output          rbus_retire_ex2_stall_gate;
output  [11:0]  rbus_retire_ex2_trap_vec;
output          rbus_retire_id_stall;
output  [31:0]  rbus_wb_ex2_lsu_wb_data;
output  [5 :0]  rbus_wb_ex2_lsu_wb_reg;
output          rbus_wb_ex2_lsu_wb_vld_gate;
output  [31:0]  rbus_wb_ex2_rbus_wb_data;
output  [5 :0]  rbus_wb_ex2_rbus_wb_preg;
output          rbus_wb_ex2_rbus_wb_vld_gate;
output          rbus_wb_ex2_warm_up;
output          rbus_xx_ex1_split_inst;
output          rbus_xx_ex2_lsu_wb_vld;
output          rbus_xx_ex2_rbus_wb_vld;
output          rtu_clic_warm_up;
output          rtu_cp0_mie_en;
output          rtu_cp0_mie_en_gate;
output          rtu_had_ex1_data_bkpta_vld;
output          rtu_had_ex1_data_bkptb_vld;
output          rtu_had_ex1_data_bkptc_vld;
output          rtu_had_ex1_data_bkptd_vld;
output          rtu_had_ex1_data_bkpte_vld;
output          rtu_had_ex1_inst_bkpta_vld;
output          rtu_had_ex1_inst_bkptb_vld;
output          rtu_had_ex1_inst_bkptc_vld;
output          rtu_had_ex1_inst_bkptd_vld;
output          rtu_had_ex1_inst_bkpte_vld;
output          rtu_had_ex1_inst_ld;
output          rtu_had_ex1_spec_fail;
output          rtu_had_ex1_split;
output  [31:0]  rtu_idu_ex1_fwd_data;
output          rtu_idu_ex1_fwd_vld;
output          rtu_idu_ex1_stall;
output  [31:0]  rtu_idu_ex2_lsu_fwd_data;
output  [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
output          rtu_idu_ex2_lsu_fwd_vld;
output  [31:0]  rtu_idu_ex2_rbus_fwd_data;
output  [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
output          rtu_idu_ex2_rbus_fwd_vld;
output          rtu_iu_ex1_stall;
output  [31:0]  rtu_iu_ex2_cur_pc;
output          rtu_iu_ex2_div_wb_en;
output          rtu_iu_ex2_stall;
output          rtu_lsu_ex2_stall;

// &Regs; @25
reg     [31:0]  rbus_ex1_wb_data;
reg     [5 :0]  rbus_ex1_wb_preg;
reg             rbus_ex1_wb_vld;
reg             rbus_ex2_branch_inst;
reg             rbus_ex2_chgflw_vld;
reg     [30:0]  rbus_ex2_cur_pc_31;
reg             rbus_ex2_data_mbkpta;
reg             rbus_ex2_data_mbkptb;
reg             rbus_ex2_data_mbkptc;
reg             rbus_ex2_data_mbkptd;
reg             rbus_ex2_data_mbkpte;
reg     [31:0]  rbus_ex2_ex1_wb_data;
reg     [5 :0]  rbus_ex2_ex1_wb_preg;
reg             rbus_ex2_ex1_wb_vld;
reg             rbus_ex2_expt_pending;
reg             rbus_ex2_flush;
reg             rbus_ex2_inst_dbg_hw;
reg             rbus_ex2_inst_ebreak;
reg             rbus_ex2_inst_expt;
reg             rbus_ex2_inst_int;
reg             rbus_ex2_inst_ld;
reg             rbus_ex2_inst_lsu_2wb;
reg             rbus_ex2_inst_mbkpta;
reg             rbus_ex2_inst_mbkptb;
reg             rbus_ex2_inst_mbkptc;
reg             rbus_ex2_inst_mbkptd;
reg             rbus_ex2_inst_mbkpte;
reg             rbus_ex2_inst_mret;
reg             rbus_ex2_inst_nmi;
reg             rbus_ex2_inst_tail_int;
reg             rbus_ex2_int_hv;
reg     [7 :0]  rbus_ex2_int_lv;
reg             rbus_ex2_ipop_int;
reg     [31:0]  rbus_ex2_mtval;
reg             rbus_ex2_mul_wb_vld;
reg     [30:0]  rbus_ex2_next_pc_31;
reg             rbus_ex2_retire_vld;
reg             rbus_ex2_spec_inst;
reg             rbus_ex2_split_inst;
reg     [11:0]  rbus_ex2_trap_vec;
reg             rbus_ex2_warm_up;
reg     [31:0]  rbus_ex2_wb_data;
reg     [5 :0]  rbus_ex2_wb_preg;

// &Wires; @26
wire    [31:0]  cp0_rtu_chgflw_pc;
wire            cp0_rtu_chgflw_vld;
wire            cp0_rtu_ex1_cmplt;
wire    [31:0]  cp0_rtu_ex1_data;
wire    [3 :0]  cp0_rtu_ex1_expt_vec;
wire            cp0_rtu_ex1_expt_vld;
wire            cp0_rtu_ex1_flush;
wire    [8 :0]  cp0_rtu_ex1_inst_bkpt;
wire            cp0_rtu_ex1_inst_ebreak;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_ex1_stall;
wire    [5 :0]  cp0_rtu_ex1_wb_preg;
wire            cp0_rtu_ex1_wb_vld;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire            fpu_rtu_ex1_inst_cmplt;
wire            fpu_rtu_ex1_inst_cmplt_dp;
wire            fpu_rtu_ex1_stall;
wire    [31:0]  fpu_rtu_ex1_wb_data;
wire    [4 :0]  fpu_rtu_ex1_wb_preg;
wire            fpu_rtu_ex1_wb_vld;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_trace_potential;
wire            idu_rtu_ex1_inst_vld;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_rtu_ex1_ipush_spec_fail;
wire            idu_rtu_ex1_tail_int_vld;
wire            idu_rtu_ipush_spec;
wire            idu_rtu_tail_fail;
wire            idu_xx_ex1_warm_up;
wire            ifu_xx_warm_up_clk;
wire            int_rbus_ex1_int_vld;
wire            int_rbus_ex1_int_vld_gate;
wire            int_rbus_ex1_nmi_req;
wire            int_rbus_int_hv;
wire    [11:0]  int_xx_int_id;
wire    [7 :0]  int_xx_int_lv;
wire            iu_rtu_div_ex1_stall;
wire            iu_rtu_ex1_alu_cmplt;
wire    [31:0]  iu_rtu_ex1_alu_data;
wire            iu_rtu_ex1_bju_chgflw_vld;
wire            iu_rtu_ex1_bju_cmplt;
wire            iu_rtu_ex1_bju_cmplt_dp;
wire    [31:0]  iu_rtu_ex1_bju_data;
wire            iu_rtu_ex1_bju_stall;
wire            iu_rtu_ex1_bju_wb_vld;
wire            iu_rtu_ex1_branch_inst;
wire    [31:0]  iu_rtu_ex1_cur_pc;
wire            iu_rtu_ex1_div_cmplt;
wire    [31:0]  iu_rtu_ex1_div_data;
wire            iu_rtu_ex1_div_wb_vld;
wire    [31:0]  iu_rtu_ex1_lsu_wb_data;
wire    [5 :0]  iu_rtu_ex1_lsu_wb_preg;
wire            iu_rtu_ex1_lsu_wb_vld;
wire            iu_rtu_ex1_mul_cmplt;
wire    [31:0]  iu_rtu_ex1_next_pc;
wire            iu_rtu_ex1_split_inst;
wire    [5 :0]  iu_rtu_ex1_wb_preg;
wire            iu_rtu_ex1_wb_vld;
wire    [31:0]  iu_rtu_ex2_chgflw_pc;
wire            iu_rtu_ex2_chgflw_vld;
wire    [31:0]  iu_rtu_ex2_div_data;
wire    [4 :0]  iu_rtu_ex2_div_preg;
wire            iu_rtu_ex2_div_wb_vld;
wire    [31:0]  iu_rtu_ex2_mul_wb_data;
wire    [5 :0]  iu_rtu_ex2_mul_wb_preg;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_ex1_bkpta_trap;
wire            lsu_rtu_ex1_bkptb_trap;
wire            lsu_rtu_ex1_bkptc_trap;
wire            lsu_rtu_ex1_bkptd_trap;
wire            lsu_rtu_ex1_bkpte_trap;
wire            lsu_rtu_ex1_cmplt;
wire            lsu_rtu_ex1_cmplt_dp;
wire    [3 :0]  lsu_rtu_ex1_expt_vec;
wire            lsu_rtu_ex1_expt_vld;
wire            lsu_rtu_ex1_inst_ld;
wire    [31:0]  lsu_rtu_ex1_mtval;
wire            lsu_rtu_ex1_stall;
wire    [31:0]  lsu_rtu_ex2_data;
wire            lsu_rtu_ex2_data_vld;
wire            lsu_rtu_ex2_data_vld_gate;
wire    [5 :0]  lsu_rtu_ex2_dest_reg;
wire            lsu_rtu_ex2_stall;
wire            lsu_rtu_ex2_stall_gate;
wire            lsu_rtu_pmp_deny;
wire            pad_yy_gate_clk_en_b;
wire            rbus_clk;
wire            rbus_clk_en;
wire            rbus_ex1_bju_chgflw_vld;
wire            rbus_ex1_branch_inst;
wire            rbus_ex1_chgflw_vld;
wire    [6 :0]  rbus_ex1_cmplt;
wire    [6 :0]  rbus_ex1_cmplt_dp;
wire    [31:0]  rbus_ex1_cp0_chgflw_pc;
wire            rbus_ex1_cp0_chgflw_vld;
wire            rbus_ex1_cp0_flush;
wire    [31:0]  rbus_ex1_cur_pc;
wire            rbus_ex1_data_mbkpta;
wire            rbus_ex1_data_mbkptb;
wire            rbus_ex1_data_mbkptc;
wire            rbus_ex1_data_mbkptd;
wire            rbus_ex1_data_mbkpte;
wire    [3 :0]  rbus_ex1_expt_vec;
wire            rbus_ex1_flush;
wire            rbus_ex1_inst_dbg_hw;
wire            rbus_ex1_inst_ebreak;
wire            rbus_ex1_inst_expt;
wire            rbus_ex1_inst_int;
wire            rbus_ex1_inst_int_gate;
wire            rbus_ex1_inst_ld;
wire            rbus_ex1_inst_mbkpta;
wire            rbus_ex1_inst_mbkptb;
wire            rbus_ex1_inst_mbkptc;
wire            rbus_ex1_inst_mbkptd;
wire            rbus_ex1_inst_mbkpte;
wire            rbus_ex1_inst_mret;
wire            rbus_ex1_inst_nmi;
wire            rbus_ex1_inst_tail_int;
wire            rbus_ex1_int_hv;
wire    [7 :0]  rbus_ex1_int_lv;
wire    [11:0]  rbus_ex1_int_vec;
wire    [31:0]  rbus_ex1_mtval;
wire            rbus_ex1_mul_wb_vld;
wire    [31:0]  rbus_ex1_next_pc;
wire            rbus_ex1_retire_pipe_down;
wire            rbus_ex1_retire_vld;
wire            rbus_ex1_retire_vld_dp;
wire    [6 :0]  rbus_ex1_source_vld;
wire            rbus_ex1_spec_fail;
wire            rbus_ex1_spec_inst;
wire            rbus_ex1_split_inst;
wire            rbus_ex1_stall;
wire    [11:0]  rbus_ex1_trap_vec;
wire            rbus_ex1_wb_mask;
wire            rbus_ex1_wb_pipe_down;
wire    [31:0]  rbus_ex2_cur_pc;
wire            rbus_ex2_div_data_vld;
wire            rbus_ex2_div_grant;
wire            rbus_ex2_div_wb_en;
wire            rbus_ex2_dp_clk;
wire            rbus_ex2_dp_clk_en;
wire            rbus_ex2_ex1_data_vld;
wire            rbus_ex2_fwd_vld;
wire    [31:0]  rbus_ex2_lsu_wb_data;
wire            rbus_ex2_lsu_wb_fls;
wire    [5 :0]  rbus_ex2_lsu_wb_reg;
wire            rbus_ex2_lsu_wb_vld;
wire            rbus_ex2_lsu_wb_vld_gate;
wire            rbus_ex2_mul_data_vld;
wire    [31:0]  rbus_ex2_next_pc;
wire            rbus_ex2_pending_set;
wire    [2 :0]  rbus_ex2_source_vld;
wire            rbus_ex2_stall;
wire            rbus_ex2_stall_gate;
wire            rbus_ex2_trap_dp_clk;
wire            rbus_ex2_trap_dp_clk_en;
wire            rbus_ex2_trap_dp_updt;
wire            rbus_ex2_wb_dp_clk;
wire            rbus_ex2_wb_dp_clk_en;
wire    [2 :0]  rbus_ex2_wb_mask;
wire            rbus_ex2_wb_vld;
wire            rbus_retire_ex2_branch_inst;
wire            rbus_retire_ex2_chgflw_vld;
wire    [31:0]  rbus_retire_ex2_cur_pc;
wire            rbus_retire_ex2_data_mbkpta;
wire            rbus_retire_ex2_data_mbkptb;
wire            rbus_retire_ex2_data_mbkptc;
wire            rbus_retire_ex2_data_mbkptd;
wire            rbus_retire_ex2_data_mbkpte;
wire            rbus_retire_ex2_flush;
wire            rbus_retire_ex2_inst_dbg_hw;
wire            rbus_retire_ex2_inst_ebreak;
wire            rbus_retire_ex2_inst_expt;
wire            rbus_retire_ex2_inst_int;
wire            rbus_retire_ex2_inst_ld;
wire            rbus_retire_ex2_inst_mbkpta;
wire            rbus_retire_ex2_inst_mbkptb;
wire            rbus_retire_ex2_inst_mbkptc;
wire            rbus_retire_ex2_inst_mbkptd;
wire            rbus_retire_ex2_inst_mbkpte;
wire            rbus_retire_ex2_inst_mret;
wire            rbus_retire_ex2_inst_nmi;
wire            rbus_retire_ex2_inst_tail_int;
wire            rbus_retire_ex2_int_hv;
wire    [7 :0]  rbus_retire_ex2_int_lv;
wire            rbus_retire_ex2_ipop_int;
wire    [31:0]  rbus_retire_ex2_mtval;
wire    [31:0]  rbus_retire_ex2_next_pc;
wire            rbus_retire_ex2_retire_vld;
wire            rbus_retire_ex2_spec_inst;
wire            rbus_retire_ex2_split_inst;
wire            rbus_retire_ex2_stall;
wire            rbus_retire_ex2_stall_gate;
wire    [11:0]  rbus_retire_ex2_trap_vec;
wire            rbus_retire_id_stall;
wire    [31:0]  rbus_wb_ex2_lsu_wb_data;
wire    [5 :0]  rbus_wb_ex2_lsu_wb_reg;
wire            rbus_wb_ex2_lsu_wb_vld_gate;
wire    [31:0]  rbus_wb_ex2_rbus_wb_data;
wire    [5 :0]  rbus_wb_ex2_rbus_wb_preg;
wire            rbus_wb_ex2_rbus_wb_vld_gate;
wire            rbus_wb_ex2_warm_up;
wire            rbus_xx_ex1_split_inst;
wire            rbus_xx_ex2_lsu_wb_vld;
wire            rbus_xx_ex2_rbus_wb_vld;
wire            retire_rbus_dbg_stall;
wire            retire_rbus_ex1_cancel;
wire            retire_rbus_ex1_inst_dbg_hw;
wire            retire_rbus_ex2_wb_cancel;
wire            retire_xx_ex2_expt_raw;
wire            rtu_clic_warm_up;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mie_en_gate;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire    [31:0]  rtu_idu_ex1_fwd_data;
wire            rtu_idu_ex1_fwd_vld;
wire            rtu_idu_ex1_stall;
wire    [31:0]  rtu_idu_ex2_lsu_fwd_data;
wire    [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
wire            rtu_idu_ex2_lsu_fwd_vld;
wire    [31:0]  rtu_idu_ex2_rbus_fwd_data;
wire    [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
wire            rtu_idu_ex2_rbus_fwd_vld;
wire            rtu_isa_double_write_inst;
wire            rtu_iu_ex1_stall;
wire    [31:0]  rtu_iu_ex2_cur_pc;
wire            rtu_iu_ex2_div_wb_en;
wire            rtu_iu_ex2_stall;
wire            rtu_lsu_ex2_stall;
wire            rtu_yy_xx_flush;


parameter LSULEN = `FLEN;












assign fpu_rtu_ex1_inst_cmplt    = 1'b0;
assign fpu_rtu_ex1_inst_cmplt_dp = 1'b0;
assign fpu_rtu_ex1_wb_vld        = 1'b0;
assign fpu_rtu_ex1_wb_preg[4:0]  = {5{1'b0}};
assign fpu_rtu_ex1_wb_data[31:0] = {32{1'b0}};
assign fpu_rtu_ex1_stall         = 1'b0;

assign rbus_ex1_cmplt_dp[6:0] = {iu_rtu_ex1_alu_cmplt,
                                 iu_rtu_ex1_bju_cmplt_dp, iu_rtu_ex1_mul_cmplt,
                                 iu_rtu_ex1_div_cmplt, cp0_rtu_ex1_cmplt,
                                 lsu_rtu_ex1_cmplt_dp, fpu_rtu_ex1_inst_cmplt_dp};

assign rbus_ex1_cmplt[6:0]    = {iu_rtu_ex1_alu_cmplt,
                                 iu_rtu_ex1_bju_cmplt, iu_rtu_ex1_mul_cmplt,
                                 iu_rtu_ex1_div_cmplt, cp0_rtu_ex1_cmplt,
                                 lsu_rtu_ex1_cmplt, fpu_rtu_ex1_inst_cmplt};

assign rbus_ex1_source_vld[6:0] = {iu_rtu_ex1_alu_cmplt || idu_xx_ex1_warm_up,
                                   iu_rtu_ex1_bju_cmplt_dp, iu_rtu_ex1_mul_cmplt,
                                   iu_rtu_ex1_div_cmplt, cp0_rtu_ex1_cmplt,
                                   lsu_rtu_ex1_cmplt_dp, fpu_rtu_ex1_inst_cmplt_dp};
// &Force("input", "idu_rtu_ex1_lsu_sel"); @65


// &CombBeg; @68
always @( cp0_rtu_ex1_wb_preg[5:0]
       or iu_rtu_ex1_lsu_wb_preg[5:0]
       or iu_rtu_ex1_alu_data[31:0]
       or iu_rtu_ex1_lsu_wb_data[31:0]
       or iu_rtu_ex1_alu_cmplt
       or iu_rtu_ex1_div_data[31:0]
       or iu_rtu_ex1_bju_wb_vld
       or rbus_ex1_source_vld[6:0]
       or iu_rtu_ex1_lsu_wb_vld
       or iu_rtu_ex1_wb_vld
       or iu_rtu_ex1_div_wb_vld
       or cp0_rtu_ex1_wb_vld
       or fpu_rtu_ex1_wb_vld
       or fpu_rtu_ex1_wb_data[31:0]
       or cp0_rtu_ex1_data[31:0]
       or iu_rtu_ex1_bju_data[31:0]
       or iu_rtu_ex1_wb_preg[5:0]
       or fpu_rtu_ex1_wb_preg[4:0])
begin
  case (rbus_ex1_source_vld[6:0])
    7'b0000001:   // From FPU
    begin
      rbus_ex1_wb_vld        = fpu_rtu_ex1_wb_vld;
      rbus_ex1_wb_preg[5:0]  = {1'b0, fpu_rtu_ex1_wb_preg[4:0]};
      rbus_ex1_wb_data[31:0] = fpu_rtu_ex1_wb_data[31:0];
    end
    7'b0000010:   // From LSU
    begin
      rbus_ex1_wb_vld        = iu_rtu_ex1_lsu_wb_vld;
      rbus_ex1_wb_preg[5:0]  = iu_rtu_ex1_lsu_wb_preg[5:0];
      rbus_ex1_wb_data[31:0] = iu_rtu_ex1_lsu_wb_data[31:0];
    end
    7'b0000100:   // From CP0
    begin
      rbus_ex1_wb_vld        = cp0_rtu_ex1_wb_vld;
      rbus_ex1_wb_preg[5:0]  = cp0_rtu_ex1_wb_preg[5:0];
      rbus_ex1_wb_data[31:0] = cp0_rtu_ex1_data[31:0];
    end
    7'b0001000:   // From DIV
    begin
      rbus_ex1_wb_vld        = iu_rtu_ex1_div_wb_vld && iu_rtu_ex1_wb_vld;
      rbus_ex1_wb_preg[5:0]  = iu_rtu_ex1_wb_preg[5:0];
      rbus_ex1_wb_data[31:0] = iu_rtu_ex1_div_data[31:0];
    end
    7'b0010000:   // From MUL
    begin



      rbus_ex1_wb_vld        = 1'b0;
      rbus_ex1_wb_preg[5:0]  = iu_rtu_ex1_wb_preg[5:0];   // IDU will use preg to judge dependency.
      rbus_ex1_wb_data[31:0] = iu_rtu_ex1_alu_data[31:0]; // Data is not care.
    end
    7'b0100000:   // From BJU
    begin
      rbus_ex1_wb_vld        = iu_rtu_ex1_bju_wb_vld;
      rbus_ex1_wb_preg[5:0]  = iu_rtu_ex1_wb_preg[5:0];
      rbus_ex1_wb_data[31:0] = iu_rtu_ex1_bju_data[31:0];
    end
    7'b1000000:   // From ALU
    begin
      rbus_ex1_wb_vld        = iu_rtu_ex1_alu_cmplt && iu_rtu_ex1_wb_vld;
      rbus_ex1_wb_preg[5:0]  = iu_rtu_ex1_wb_preg[5:0];
      rbus_ex1_wb_data[31:0] = iu_rtu_ex1_alu_data[31:0];
    end
    default:
    begin
      rbus_ex1_wb_vld        = 1'b0;
      rbus_ex1_wb_preg[5:0]  = {6{1'bx}};
      rbus_ex1_wb_data[31:0] = {32{1'bx}};
    end
  endcase
// &CombEnd; @122
end

assign rbus_ex1_mul_wb_vld = iu_rtu_ex1_mul_cmplt && iu_rtu_ex1_wb_vld;




assign rtu_idu_ex1_fwd_vld        = rbus_ex1_wb_vld;
assign rtu_idu_ex1_fwd_data[31:0] = rbus_ex1_wb_data[31:0];




assign rbus_ex1_cur_pc[31:0]      = iu_rtu_ex1_cur_pc[31:0];

assign rbus_ex1_next_pc[31:0]     = rbus_ex1_cp0_chgflw_vld ? rbus_ex1_cp0_chgflw_pc[31:0]
                                                            : iu_rtu_ex1_next_pc[31:0];
assign rbus_ex1_split_inst        = iu_rtu_ex1_split_inst;
assign rbus_ex1_spec_inst         = idu_rtu_ipush_spec;
assign rbus_ex1_branch_inst       = iu_rtu_ex1_branch_inst;
assign rbus_ex1_retire_vld        = |rbus_ex1_cmplt[6:0];
assign rbus_ex1_retire_vld_dp     = |rbus_ex1_cmplt_dp[6:0];


// &Force("bus", "cp0_rtu_ex1_inst_bkpt", 8, 0); @146
assign rbus_ex1_inst_mbkpta = cp0_rtu_ex1_inst_bkpt[0];
assign rbus_ex1_inst_mbkptb = cp0_rtu_ex1_inst_bkpt[1];
assign rbus_ex1_data_mbkpta = lsu_rtu_ex1_bkpta_trap && lsu_rtu_ex1_cmplt_dp;
assign rbus_ex1_data_mbkptb = lsu_rtu_ex1_bkptb_trap && lsu_rtu_ex1_cmplt_dp;
assign rbus_ex1_inst_mbkptc = cp0_rtu_ex1_inst_bkpt[2];
assign rbus_ex1_inst_mbkptd = cp0_rtu_ex1_inst_bkpt[3];
assign rbus_ex1_inst_mbkpte = cp0_rtu_ex1_inst_bkpt[4];
assign rbus_ex1_data_mbkptc = lsu_rtu_ex1_bkptc_trap && lsu_rtu_ex1_cmplt_dp;
assign rbus_ex1_data_mbkptd = lsu_rtu_ex1_bkptd_trap && lsu_rtu_ex1_cmplt_dp;
assign rbus_ex1_data_mbkpte = lsu_rtu_ex1_bkpte_trap && lsu_rtu_ex1_cmplt_dp;
assign rbus_ex1_inst_ebreak       = cp0_rtu_ex1_inst_ebreak;
assign rbus_ex1_inst_mret         = cp0_rtu_ex1_inst_mret;


assign rbus_ex1_inst_expt         = cp0_rtu_ex1_expt_vld || lsu_rtu_ex1_expt_vld;
assign rbus_ex1_expt_vec[3:0]     = cp0_rtu_ex1_expt_vld ? cp0_rtu_ex1_expt_vec[3:0]
                                                         : lsu_rtu_ex1_expt_vec[3:0];

assign rbus_ex1_mtval[31:0]       = lsu_rtu_ex1_expt_vld ? lsu_rtu_ex1_mtval[31:0]
                                                         : cp0_rtu_ex1_data[31:0];


assign rbus_ex1_inst_nmi          = int_rbus_ex1_nmi_req;


assign rbus_ex1_inst_int          = int_rbus_ex1_int_vld;
assign rbus_ex1_inst_int_gate     = int_rbus_ex1_int_vld_gate;
assign rbus_ex1_inst_tail_int     = idu_rtu_ex1_tail_int_vld && !rbus_ex1_inst_nmi && !rbus_ex1_inst_int;
assign rbus_ex1_int_vec[11:0]     = int_xx_int_id[11:0];
assign rbus_ex1_int_hv            = int_rbus_int_hv;
assign rbus_ex1_int_lv[7:0]       = int_xx_int_lv[7:0];


assign rbus_ex1_trap_vec[11:0]    = rbus_ex1_inst_int ? rbus_ex1_int_vec[11:0]
                                                      : {8'b0, rbus_ex1_expt_vec[3:0]};

assign rbus_ex1_inst_ld           = lsu_rtu_ex1_inst_ld;


assign rbus_ex1_cp0_flush         = cp0_rtu_ex1_flush;
assign rbus_ex1_cp0_chgflw_vld    = cp0_rtu_chgflw_vld;
assign rbus_ex1_cp0_chgflw_pc[31:0] = cp0_rtu_chgflw_pc[31:0];


assign rbus_ex1_bju_chgflw_vld      = iu_rtu_ex1_bju_chgflw_vld;


assign rbus_ex1_flush             = rbus_ex1_cp0_flush || iu_rtu_ex1_bju_chgflw_vld;
assign rbus_ex1_chgflw_vld        = rbus_ex1_cp0_chgflw_vld || rbus_ex1_bju_chgflw_vld;


assign rbus_ex1_inst_dbg_hw       = retire_rbus_ex1_inst_dbg_hw;

assign rbus_xx_ex1_split_inst     = rbus_ex1_split_inst;


assign rbus_ex1_wb_mask           = !rbus_ex1_inst_expt
                                 && !retire_rbus_ex1_cancel;






assign rbus_ex2_stall             = lsu_rtu_ex2_stall
                                 || retire_rbus_dbg_stall;
assign rbus_ex2_stall_gate        = lsu_rtu_ex2_stall_gate
                                 || retire_rbus_dbg_stall;

assign rbus_retire_ex2_stall      = rbus_ex2_stall;
assign rbus_retire_ex2_stall_gate = rbus_ex2_stall_gate;

assign rbus_ex1_wb_pipe_down      = !rbus_ex2_stall;
assign rbus_ex1_retire_pipe_down  = !rbus_ex2_stall;

assign rbus_ex1_stall             = !rbus_ex1_retire_pipe_down && idu_rtu_ex1_inst_vld
                                 || cp0_rtu_ex1_stall
                                 || lsu_rtu_ex1_stall
                                 || iu_rtu_div_ex1_stall
                                 || iu_rtu_ex1_bju_stall
                                 || fpu_rtu_ex1_stall;

assign rtu_iu_ex1_stall           = rbus_ex1_stall;
assign rtu_idu_ex1_stall          = rbus_ex1_stall;
assign rtu_iu_ex2_stall           = !rbus_ex1_retire_pipe_down;
assign rtu_lsu_ex2_stall          = !rbus_ex1_retire_pipe_down;


assign rbus_retire_id_stall       = idu_rtu_ex1_inst_vld
                                && (rbus_ex1_cp0_flush
                                ||  rbus_ex1_bju_chgflw_vld
                                ||  rbus_ex1_inst_int
                                ||  rbus_ex1_inst_expt
                                ||  rbus_ex2_expt_pending
                                ||  rbus_ex2_pending_set
                                ||  rbus_ex1_inst_nmi
                                ||  rbus_ex1_inst_ebreak
                                ||  rbus_ex1_inst_dbg_hw
                                ||  had_rtu_ex1_trace_potential
                                ||  had_rtu_ex1_bkpt_potential);




always @ (posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    rbus_ex2_warm_up <= 1'b0;
  end
  else begin
    rbus_ex2_warm_up <= idu_xx_ex1_warm_up;
  end
end


always @ (posedge rbus_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    rbus_ex2_ex1_wb_vld <= 1'b0;
    rbus_ex2_mul_wb_vld <= 1'b0;
  end
  else if (rtu_yy_xx_flush) begin
    rbus_ex2_ex1_wb_vld <= 1'b0;
    rbus_ex2_mul_wb_vld <= 1'b0;
  end
  else if (rbus_ex1_wb_pipe_down) begin
    rbus_ex2_ex1_wb_vld <= rbus_ex1_wb_vld && rbus_ex1_wb_mask && rbus_ex1_retire_vld;
    rbus_ex2_mul_wb_vld <= rbus_ex1_mul_wb_vld && rbus_ex1_wb_mask && rbus_ex1_retire_vld;
  end
end

always @ (posedge rbus_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    rbus_ex2_retire_vld     <= 1'b0;
    rbus_ex2_flush          <= 1'b0;
    rbus_ex2_chgflw_vld     <= 1'b0;
  end
  else if (rtu_yy_xx_flush) begin
    rbus_ex2_retire_vld     <= 1'b0;
    rbus_ex2_flush          <= 1'b0;
    rbus_ex2_chgflw_vld     <= 1'b0;
  end
  else if (retire_rbus_ex1_cancel) begin
    rbus_ex2_retire_vld     <= 1'b0;
    rbus_ex2_flush          <= 1'b0;
    rbus_ex2_chgflw_vld     <= 1'b0;
  end
  else if (!rbus_ex2_stall) begin
    rbus_ex2_retire_vld     <= rbus_ex1_retire_vld;
    rbus_ex2_flush          <= rbus_ex1_flush;
    rbus_ex2_chgflw_vld     <= rbus_ex1_chgflw_vld;
  end
end





always @ (posedge rbus_ex2_wb_dp_clk)
begin
  if (rbus_ex1_wb_pipe_down && rbus_ex1_wb_vld || idu_xx_ex1_warm_up) begin
    rbus_ex2_ex1_wb_preg[5:0]  <= rbus_ex1_wb_preg[5:0];
    rbus_ex2_ex1_wb_data[31:0] <= rbus_ex1_wb_data[31:0];
  end
end


assign rbus_ex2_trap_dp_updt = rbus_ex1_retire_pipe_down && rbus_ex1_retire_vld_dp
                            && (rbus_ex1_inst_expt || rbus_ex1_inst_int)
                            || idu_xx_ex1_warm_up;
always @ (posedge rbus_ex2_trap_dp_clk)
begin
  if (rbus_ex2_trap_dp_updt) begin
    rbus_ex2_mtval[31:0]     <= rbus_ex1_mtval[31:0];
    rbus_ex2_int_hv          <= rbus_ex1_int_hv;
    rbus_ex2_int_lv[7:0]     <= rbus_ex1_int_lv[7:0];
    rbus_ex2_trap_vec[11:0]  <= rbus_ex1_trap_vec[11:0];

  end
  else if (lsu_rtu_pmp_deny && rbus_ex2_spec_inst) begin
    rbus_ex2_mtval[31:0]     <= lsu_rtu_async_mtval[31:0];
    rbus_ex2_int_hv          <= rbus_ex1_int_hv;
    rbus_ex2_int_lv[7:0]     <= rbus_ex1_int_lv[7:0];
    rbus_ex2_trap_vec[11:0]  <= 12'd7;

  end
end


// &Force("bus", "iu_rtu_ex2_chgflw_pc", 31, 0); @363

always @ (posedge rbus_ex2_dp_clk)
begin
  if (iu_rtu_ex2_chgflw_vld) begin
    rbus_ex2_next_pc_31[30:0] <= iu_rtu_ex2_chgflw_pc[31:1];
  end
  else if (rbus_ex1_retire_pipe_down && rbus_ex1_retire_vld_dp && !idu_rtu_tail_fail || idu_xx_ex1_warm_up) begin
    rbus_ex2_next_pc_31[30:0] <= rbus_ex1_next_pc[31:1];
  end
end
assign rbus_ex2_next_pc[31:0] = {rbus_ex2_next_pc_31[30:0], 1'b0};

always @ (posedge rbus_ex2_dp_clk)
begin
  if (rbus_ex1_retire_pipe_down && rbus_ex1_retire_vld_dp && !idu_rtu_tail_fail || idu_xx_ex1_warm_up)
    rbus_ex2_cur_pc_31[30:0] <= rbus_ex1_cur_pc[31:1];
end
assign rbus_ex2_cur_pc[31:0] = {rbus_ex2_cur_pc_31[30:0], 1'b0};

always @ (posedge rbus_ex2_dp_clk)
begin
  if (rbus_ex1_retire_pipe_down && rbus_ex1_retire_vld_dp || idu_xx_ex1_warm_up) begin
    rbus_ex2_split_inst      <= rbus_ex1_split_inst;
    rbus_ex2_spec_inst       <= rbus_ex1_spec_inst;
    rbus_ex2_branch_inst     <= rbus_ex1_branch_inst;
    rbus_ex2_inst_mbkpta     <= rbus_ex1_inst_mbkpta;
    rbus_ex2_inst_mbkptb     <= rbus_ex1_inst_mbkptb;
    rbus_ex2_data_mbkpta     <= rbus_ex1_data_mbkpta;
    rbus_ex2_data_mbkptb     <= rbus_ex1_data_mbkptb;
    rbus_ex2_inst_mbkptc     <= rbus_ex1_inst_mbkptc;
    rbus_ex2_inst_mbkptd     <= rbus_ex1_inst_mbkptd;
    rbus_ex2_inst_mbkpte     <= rbus_ex1_inst_mbkpte;
    rbus_ex2_data_mbkptc     <= rbus_ex1_data_mbkptc;
    rbus_ex2_data_mbkptd     <= rbus_ex1_data_mbkptd;
    rbus_ex2_data_mbkpte     <= rbus_ex1_data_mbkpte;
    rbus_ex2_inst_ebreak     <= rbus_ex1_inst_ebreak;
    rbus_ex2_inst_mret       <= rbus_ex1_inst_mret;
    rbus_ex2_inst_expt       <= rbus_ex1_inst_expt;
    rbus_ex2_inst_int        <= rbus_ex1_inst_int;
    rbus_ex2_inst_tail_int   <= rbus_ex1_inst_tail_int;
    rbus_ex2_inst_nmi        <= rbus_ex1_inst_nmi;
    rbus_ex2_inst_ld         <= rbus_ex1_inst_ld;
    rbus_ex2_inst_dbg_hw     <= rbus_ex1_inst_dbg_hw;
    rbus_ex2_inst_lsu_2wb    <= iu_rtu_ex1_lsu_wb_vld && rbus_ex1_wb_mask;
    rbus_ex2_ipop_int        <= idu_rtu_ex1_ipop_int_mask;
  end
end

assign rbus_ex1_spec_fail = idu_rtu_ex1_ipush_spec_fail;
assign rbus_ex2_pending_set = (lsu_rtu_pmp_deny
                            || rbus_ex2_inst_expt && rbus_ex2_retire_vld) && rbus_ex2_spec_inst;
always @ (posedge rbus_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    rbus_ex2_expt_pending <= 1'b0;
  else if (rbus_ex1_spec_fail || idu_xx_ex1_warm_up || rtu_yy_xx_flush)
    rbus_ex2_expt_pending <= 1'b0;
  else if (rbus_ex2_pending_set)
    rbus_ex2_expt_pending <= 1'b1;
  else if (rbus_ex1_retire_pipe_down && rbus_ex1_retire_vld_dp)
    rbus_ex2_expt_pending <= rbus_ex2_expt_pending && rbus_ex2_spec_inst;
end




assign rbus_ex2_lsu_wb_vld              = lsu_rtu_ex2_data_vld;
assign rbus_ex2_lsu_wb_vld_gate         = lsu_rtu_ex2_data_vld_gate;
assign rbus_ex2_lsu_wb_reg[5:0]         = lsu_rtu_ex2_dest_reg[5:0];
assign rbus_ex2_lsu_wb_data[LSULEN-1:0] = lsu_rtu_ex2_data[LSULEN-1:0];
assign rbus_ex2_lsu_wb_fls        = 1'b0;







assign rbus_ex2_ex1_data_vld = rbus_ex2_ex1_wb_vld || rbus_ex2_warm_up;
assign rbus_ex2_mul_data_vld = rbus_ex2_mul_wb_vld;
assign rbus_ex2_div_data_vld = iu_rtu_ex2_div_wb_vld && rbus_ex2_div_grant;

assign rbus_ex2_div_grant    = !rbus_ex2_ex1_data_vld && !rbus_ex2_mul_data_vld;
assign rbus_ex2_div_wb_en    = rbus_ex2_div_grant;

assign rtu_iu_ex2_div_wb_en = rbus_ex2_div_wb_en;

assign rbus_ex2_source_vld[2:0] = {rbus_ex2_ex1_data_vld, rbus_ex2_mul_data_vld, rbus_ex2_div_data_vld};

// &CombBeg @479
always @( iu_rtu_ex2_mul_wb_preg[5:0]
       or iu_rtu_ex2_div_preg[4:0]
       or rbus_ex2_source_vld[2:0]
       or rbus_ex2_ex1_wb_preg[5:0]
       or rbus_ex2_ex1_wb_data[31:0]
       or iu_rtu_ex2_mul_wb_data[31:0]
       or iu_rtu_ex2_div_data[31:0])
begin
  case(rbus_ex2_source_vld[2:0])
    3'b100: begin
      rbus_ex2_wb_preg[5:0]  = rbus_ex2_ex1_wb_preg[5:0];
      rbus_ex2_wb_data[31:0] = rbus_ex2_ex1_wb_data[31:0];
    end
    3'b010: begin
      rbus_ex2_wb_preg[5:0]  = iu_rtu_ex2_mul_wb_preg[5:0];
      rbus_ex2_wb_data[31:0] = iu_rtu_ex2_mul_wb_data[31:0];
    end
    3'b001: begin
      rbus_ex2_wb_preg[5:0]  = {1'b0, iu_rtu_ex2_div_preg[4:0]};
      rbus_ex2_wb_data[31:0] = iu_rtu_ex2_div_data[31:0];
    end
    default: begin
      rbus_ex2_wb_preg[5:0]  = {6{1'bx}};
      rbus_ex2_wb_data[31:0] = {32{1'bx}};
    end
  endcase
// &CombEnd @498
end


assign rbus_ex2_fwd_vld = |rbus_ex2_source_vld[2:0];

assign rbus_ex2_wb_mask[2:0] = {{2{!retire_rbus_ex2_wb_cancel && !rbus_ex2_stall}}, 1'b1};
assign rbus_ex2_wb_vld = |(rbus_ex2_source_vld[2:0] & rbus_ex2_wb_mask[2:0]);
// &Force("input", "idu_rtu_ex1_dst_vld"); @509


assign rtu_idu_ex2_rbus_fwd_vld        = rbus_ex2_fwd_vld;
assign rtu_idu_ex2_rbus_fwd_preg[5:0]  = rbus_ex2_wb_preg[5:0];
assign rtu_idu_ex2_rbus_fwd_data[31:0] = rbus_ex2_wb_data[31:0];

assign rtu_idu_ex2_lsu_fwd_vld              = rbus_ex2_lsu_wb_vld && !rbus_ex2_lsu_wb_fls;
assign rtu_idu_ex2_lsu_fwd_preg[5:0]        = rbus_ex2_lsu_wb_reg[5:0];
assign rtu_idu_ex2_lsu_fwd_data[31:0]       = rbus_ex2_lsu_wb_data[31:0];


assign rbus_xx_ex2_rbus_wb_vld         = rbus_ex2_wb_vld;
assign rbus_wb_ex2_rbus_wb_vld_gate    = rbus_ex2_fwd_vld;
assign rbus_wb_ex2_rbus_wb_preg[5:0]   = rbus_ex2_wb_preg[5:0];
assign rbus_wb_ex2_rbus_wb_data[31:0]  = rbus_ex2_wb_data[31:0];


assign rbus_xx_ex2_lsu_wb_vld               = rbus_ex2_lsu_wb_vld;
assign rbus_wb_ex2_lsu_wb_vld_gate          = rbus_ex2_lsu_wb_vld_gate; // For ICG.
assign rbus_wb_ex2_lsu_wb_reg[5:0]          = rbus_ex2_lsu_wb_reg[5:0];
assign rbus_wb_ex2_lsu_wb_data[LSULEN-1:0]  = rbus_ex2_lsu_wb_data[LSULEN-1:0];




assign rbus_clk_en = idu_xx_ex1_warm_up
                  || idu_rtu_ex1_inst_vld
                  || rbus_ex2_retire_vld
                  || rtu_yy_xx_flush
                  || rbus_ex1_spec_fail;
// &Instance("gated_clk_cell", "x_rbus_clk"); @555
gated_clk_cell  x_rbus_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rbus_clk            ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (rbus_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @556
//          .external_en (1'b0), @557
//          .global_en   (cp0_yy_clk_en), @558
//          .module_en   (1'b0), @559
//          .local_en    (rbus_clk_en), @560
//          .clk_out     (rbus_clk)); @561


assign rbus_ex2_wb_dp_clk_en = rbus_ex1_wb_vld // && rbus_ex1_wb_pipe_down
                            || idu_xx_ex1_warm_up;
// &Instance("gated_clk_cell", "x_rbus_ex2_wb_dp_clk"); @566
gated_clk_cell  x_rbus_ex2_wb_dp_clk (
  .clk_in                (forever_cpuclk       ),
  .clk_out               (rbus_ex2_wb_dp_clk   ),
  .external_en           (1'b0                 ),
  .global_en             (cp0_yy_clk_en        ),
  .local_en              (rbus_ex2_wb_dp_clk_en),
  .module_en             (1'b0                 ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b )
);

// &Connect(.clk_in      (forever_cpuclk), @567
//          .external_en (1'b0), @568
//          .global_en   (cp0_yy_clk_en), @569
//          .module_en   (1'b0), @570
//          .local_en    (rbus_ex2_wb_dp_clk_en), @571
//          .clk_out     (rbus_ex2_wb_dp_clk)); @572


assign rbus_ex2_trap_dp_clk_en = rbus_ex1_retire_vld_dp // && rbus_ex1_retire_pipe_down
                               && (rbus_ex1_inst_expt || rbus_ex1_inst_int_gate || rbus_ex1_inst_nmi)
                               || idu_xx_ex1_warm_up
                               || lsu_rtu_pmp_deny;
// &Instance("gated_clk_cell", "x_rbus_ex2_trap_dp_clk"); @579
gated_clk_cell  x_rbus_ex2_trap_dp_clk (
  .clk_in                  (forever_cpuclk         ),
  .clk_out                 (rbus_ex2_trap_dp_clk   ),
  .external_en             (1'b0                   ),
  .global_en               (cp0_yy_clk_en          ),
  .local_en                (rbus_ex2_trap_dp_clk_en),
  .module_en               (1'b0                   ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   )
);

// &Connect(.clk_in      (forever_cpuclk), @580
//          .external_en (1'b0), @581
//          .global_en   (cp0_yy_clk_en), @582
//          .module_en   (1'b0), @583
//          .local_en    (rbus_ex2_trap_dp_clk_en), @584
//          .clk_out     (rbus_ex2_trap_dp_clk)); @585


assign rbus_ex2_dp_clk_en = rbus_ex1_retire_vld_dp // && rbus_ex1_retire_pipe_down
                         || idu_xx_ex1_warm_up
                         || iu_rtu_ex2_chgflw_vld;
// &Instance("gated_clk_cell", "x_rbus_ex2_dp_clk"); @591
gated_clk_cell  x_rbus_ex2_dp_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rbus_ex2_dp_clk     ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (rbus_ex2_dp_clk_en  ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @592
//          .external_en (1'b0), @593
//          .global_en   (cp0_yy_clk_en), @594
//          .module_en   (1'b0), @595
//          .local_en    (rbus_ex2_dp_clk_en), @596
//          .clk_out     (rbus_ex2_dp_clk)); @597







assign rtu_iu_ex2_cur_pc[31:0] = rbus_ex2_cur_pc[31:0];




assign rbus_retire_ex2_cur_pc[31:0]  = rbus_ex2_cur_pc[31:0];
assign rbus_retire_ex2_next_pc[31:0] = iu_rtu_ex2_chgflw_vld ? iu_rtu_ex2_chgflw_pc[31:0]
                                                             : rbus_ex2_next_pc[31:0];
assign rbus_retire_ex2_split_inst    = rbus_ex2_split_inst;
assign rbus_retire_ex2_spec_inst     = rbus_ex2_spec_inst;
assign rbus_retire_ex2_branch_inst   = rbus_ex2_branch_inst;
assign rbus_retire_ex2_retire_vld    = rbus_ex2_retire_vld;
assign rbus_retire_ex2_inst_mbkpta   = rbus_ex2_inst_mbkpta;
assign rbus_retire_ex2_inst_mbkptb   = rbus_ex2_inst_mbkptb;
assign rbus_retire_ex2_data_mbkpta   = rbus_ex2_data_mbkpta;
assign rbus_retire_ex2_data_mbkptb   = rbus_ex2_data_mbkptb;
assign rbus_retire_ex2_inst_mbkptc   = rbus_ex2_inst_mbkptc;
assign rbus_retire_ex2_inst_mbkptd   = rbus_ex2_inst_mbkptd;
assign rbus_retire_ex2_inst_mbkpte   = rbus_ex2_inst_mbkpte;
assign rbus_retire_ex2_data_mbkptc   = rbus_ex2_data_mbkptc;
assign rbus_retire_ex2_data_mbkptd   = rbus_ex2_data_mbkptd;
assign rbus_retire_ex2_data_mbkpte   = rbus_ex2_data_mbkpte;
assign rbus_retire_ex2_inst_ebreak   = rbus_ex2_inst_ebreak;
assign rbus_retire_ex2_inst_mret     = rbus_ex2_inst_mret;
assign rbus_retire_ex2_inst_expt     = rbus_ex2_inst_expt
                                    || rbus_ex2_expt_pending;
assign rbus_retire_ex2_mtval[31:0]   = rbus_ex2_mtval[31:0];
assign rbus_retire_ex2_inst_int      = rbus_ex2_inst_int;
assign rbus_retire_ex2_inst_tail_int = rbus_ex2_inst_tail_int;
assign rbus_retire_ex2_inst_nmi      = rbus_ex2_inst_nmi;
assign rbus_retire_ex2_int_hv        = rbus_ex2_int_hv;
assign rbus_retire_ex2_int_lv[7:0]   = rbus_ex2_int_lv[7:0];
assign rbus_retire_ex2_trap_vec[11:0] = rbus_ex2_trap_vec[11:0];
assign rbus_retire_ex2_ipop_int      = rbus_ex2_ipop_int;
assign rbus_retire_ex2_inst_ld       = rbus_ex2_inst_ld;
assign rbus_retire_ex2_flush         = rbus_ex2_flush || iu_rtu_ex2_chgflw_vld;
assign rbus_retire_ex2_chgflw_vld    = rbus_ex2_chgflw_vld || iu_rtu_ex2_chgflw_vld;
assign rbus_retire_ex2_inst_dbg_hw   = rbus_ex2_inst_dbg_hw;
assign rbus_wb_ex2_warm_up           = rbus_ex2_warm_up;
assign rtu_clic_warm_up              = rbus_ex2_warm_up;

assign rtu_cp0_mie_en = idu_rtu_ex1_ipush_mie_en
                     && rbus_ex1_retire_vld
                     && !retire_xx_ex2_expt_raw;
assign rtu_cp0_mie_en_gate = idu_rtu_ex1_ipush_mie_en
                          && rbus_ex1_retire_vld_dp
                          && !retire_xx_ex2_expt_raw;




assign rtu_had_ex1_split = rbus_ex1_split_inst;
assign rtu_had_ex1_inst_ld = rbus_ex1_inst_ld;

assign rtu_had_ex1_spec_fail = rbus_ex1_spec_fail;

assign rtu_had_ex1_inst_bkpta_vld     = rbus_ex1_inst_mbkpta;
assign rtu_had_ex1_inst_bkptb_vld     = rbus_ex1_inst_mbkptb;
assign rtu_had_ex1_data_bkpta_vld     = rbus_ex1_data_mbkpta;
assign rtu_had_ex1_data_bkptb_vld     = rbus_ex1_data_mbkptb;
assign rtu_had_ex1_inst_bkptc_vld     = rbus_ex1_inst_mbkptc;
assign rtu_had_ex1_inst_bkptd_vld     = rbus_ex1_inst_mbkptd;
assign rtu_had_ex1_inst_bkpte_vld     = rbus_ex1_inst_mbkpte;
assign rtu_had_ex1_data_bkptc_vld     = rbus_ex1_data_mbkptc;
assign rtu_had_ex1_data_bkptd_vld     = rbus_ex1_data_mbkptd;
assign rtu_had_ex1_data_bkpte_vld     = rbus_ex1_data_mbkpte;


assign rtu_isa_double_write_inst = rbus_ex2_inst_lsu_2wb && !retire_rbus_ex2_wb_cancel;
// &Force("nonport", "rtu_isa_double_write_inst"); @724


// &ModuleEnd; @779
endmodule
























// &ModuleBeg; @23
module pa_rtu_retire(
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_in_nmi,
  cp0_xx_async_expt_en,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_yy_xx_exit_dbg,
  idu_rtu_ex1_inst_vld,
  ifu_rtu_cpu_in_init,
  int_retire_pending_int_hv,
  iu_xx_no_op,
  lockup_clk,
  lockup_clk_en,
  lockup_retire_dbg_vld,
  lockup_retire_nmi_vld,
  lsu_rtu_async_expt_vld,
  lsu_rtu_async_ld_inst,
  lsu_rtu_async_mtval,
  lsu_rtu_pmp_deny,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  rbus_retire_ex2_branch_inst,
  rbus_retire_ex2_chgflw_vld,
  rbus_retire_ex2_cur_pc,
  rbus_retire_ex2_data_mbkpta,
  rbus_retire_ex2_data_mbkptb,
  rbus_retire_ex2_data_mbkptc,
  rbus_retire_ex2_data_mbkptd,
  rbus_retire_ex2_data_mbkpte,
  rbus_retire_ex2_flush,
  rbus_retire_ex2_inst_dbg_hw,
  rbus_retire_ex2_inst_ebreak,
  rbus_retire_ex2_inst_expt,
  rbus_retire_ex2_inst_int,
  rbus_retire_ex2_inst_ld,
  rbus_retire_ex2_inst_mbkpta,
  rbus_retire_ex2_inst_mbkptb,
  rbus_retire_ex2_inst_mbkptc,
  rbus_retire_ex2_inst_mbkptd,
  rbus_retire_ex2_inst_mbkpte,
  rbus_retire_ex2_inst_mret,
  rbus_retire_ex2_inst_nmi,
  rbus_retire_ex2_inst_tail_int,
  rbus_retire_ex2_int_hv,
  rbus_retire_ex2_int_lv,
  rbus_retire_ex2_ipop_int,
  rbus_retire_ex2_mtval,
  rbus_retire_ex2_next_pc,
  rbus_retire_ex2_retire_vld,
  rbus_retire_ex2_spec_inst,
  rbus_retire_ex2_split_inst,
  rbus_retire_ex2_stall,
  rbus_retire_ex2_stall_gate,
  rbus_retire_ex2_trap_vec,
  rbus_retire_id_stall,
  rbus_xx_ex1_split_inst,
  rbus_xx_ex2_rbus_wb_vld,
  retire_int_nmi_ack,
  retire_lockup_dbg_req,
  retire_lockup_dbgon,
  retire_lockup_expt_vld,
  retire_lockup_nmi_exit,
  retire_lockup_retire_pc,
  retire_lockup_retire_vld,
  retire_rbus_dbg_stall,
  retire_rbus_ex1_cancel,
  retire_rbus_ex1_inst_dbg_hw,
  retire_rbus_ex2_wb_cancel,
  retire_xx_ex2_expt_raw,
  rtu_cp0_bus_error,
  rtu_cp0_epc,
  rtu_cp0_ex1_dbg_cancel,
  rtu_cp0_expt_mtval,
  rtu_cp0_int_level,
  rtu_cp0_int_vld_raw,
  rtu_cp0_nmi_vld,
  rtu_had_data_bkpta_vld,
  rtu_had_data_bkptb_vld,
  rtu_had_data_bkptc_vld,
  rtu_had_data_bkptd_vld,
  rtu_had_data_bkpte_vld,
  rtu_had_dbg_disable_for_tee,
  rtu_had_inst_bkpta_vld,
  rtu_had_inst_bkptb_vld,
  rtu_had_inst_bkptc_vld,
  rtu_had_inst_bkptd_vld,
  rtu_had_inst_bkpte_vld,
  rtu_had_inst_ld,
  rtu_had_int_ack,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_next_pc,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_retire_pc,
  rtu_had_xx_split,
  rtu_hpcp_retire_inst_vld,
  rtu_idu_id_cancel,
  rtu_idu_id_stall,
  rtu_idu_int_vld_raw,
  rtu_idu_late_flush,
  rtu_ifu_chgflow_pc,
  rtu_ifu_chgflow_vld,
  rtu_ifu_xx_fe_flush,
  rtu_ifu_xx_fe_flush_gate,
  rtu_lsu_async_expt_ack,
  rtu_lsu_ex1_cancel,
  rtu_lsu_expt_ack,
  rtu_lsu_expt_exit,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_xx_ex1_cancel,
  rtu_xx_ex2_cancel,
  rtu_xx_no_op,
  rtu_yy_xx_async_flush,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vec,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_flush,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_retire,
  rtu_yy_xx_tail_int_vld,
  wb_retire_wb_no_op
);

// &Ports; @24
input           cp0_rtu_ex1_inst_mret;
input           cp0_rtu_in_nmi;
input           cp0_xx_async_expt_en;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           had_rtu_async_dbgreq;
input           had_rtu_data_bkpt_dbgreq;
input           had_rtu_data_bkpt_dbgreq_raw;
input           had_rtu_ex1_inst_bkpt_dbgreq;
input           had_rtu_fdb;
input           had_rtu_hw_dbgreq;
input           had_rtu_inst_bkpt_dbgreq;
input           had_rtu_rst_dbgreq;
input           had_rtu_trace_dbgreq;
input           had_rtu_trace_dbgreq_raw;
input           had_yy_xx_exit_dbg;
input           idu_rtu_ex1_inst_vld;
input           ifu_rtu_cpu_in_init;
input           int_retire_pending_int_hv;
input           iu_xx_no_op;
input           lockup_clk_en;
input           lockup_retire_dbg_vld;
input           lockup_retire_nmi_vld;
input           lsu_rtu_async_expt_vld;
input           lsu_rtu_async_ld_inst;
input   [31:0]  lsu_rtu_async_mtval;
input           lsu_rtu_pmp_deny;
input           lsu_xx_no_op;
input           pad_yy_gate_clk_en_b;
input           rbus_retire_ex2_branch_inst;
input           rbus_retire_ex2_chgflw_vld;
input   [31:0]  rbus_retire_ex2_cur_pc;
input           rbus_retire_ex2_data_mbkpta;
input           rbus_retire_ex2_data_mbkptb;
input           rbus_retire_ex2_data_mbkptc;
input           rbus_retire_ex2_data_mbkptd;
input           rbus_retire_ex2_data_mbkpte;
input           rbus_retire_ex2_flush;
input           rbus_retire_ex2_inst_dbg_hw;
input           rbus_retire_ex2_inst_ebreak;
input           rbus_retire_ex2_inst_expt;
input           rbus_retire_ex2_inst_int;
input           rbus_retire_ex2_inst_ld;
input           rbus_retire_ex2_inst_mbkpta;
input           rbus_retire_ex2_inst_mbkptb;
input           rbus_retire_ex2_inst_mbkptc;
input           rbus_retire_ex2_inst_mbkptd;
input           rbus_retire_ex2_inst_mbkpte;
input           rbus_retire_ex2_inst_mret;
input           rbus_retire_ex2_inst_nmi;
input           rbus_retire_ex2_inst_tail_int;
input           rbus_retire_ex2_int_hv;
input   [7 :0]  rbus_retire_ex2_int_lv;
input           rbus_retire_ex2_ipop_int;
input   [31:0]  rbus_retire_ex2_mtval;
input   [31:0]  rbus_retire_ex2_next_pc;
input           rbus_retire_ex2_retire_vld;
input           rbus_retire_ex2_spec_inst;
input           rbus_retire_ex2_split_inst;
input           rbus_retire_ex2_stall;
input           rbus_retire_ex2_stall_gate;
input   [11:0]  rbus_retire_ex2_trap_vec;
input           rbus_retire_id_stall;
input           rbus_xx_ex1_split_inst;
input           rbus_xx_ex2_rbus_wb_vld;
input           wb_retire_wb_no_op;
output          lockup_clk;
output          retire_int_nmi_ack;
output          retire_lockup_dbg_req;
output          retire_lockup_dbgon;
output          retire_lockup_expt_vld;
output          retire_lockup_nmi_exit;
output  [31:0]  retire_lockup_retire_pc;
output          retire_lockup_retire_vld;
output          retire_rbus_dbg_stall;
output          retire_rbus_ex1_cancel;
output          retire_rbus_ex1_inst_dbg_hw;
output          retire_rbus_ex2_wb_cancel;
output          retire_xx_ex2_expt_raw;
output          rtu_cp0_bus_error;
output  [31:0]  rtu_cp0_epc;
output          rtu_cp0_ex1_dbg_cancel;
output  [31:0]  rtu_cp0_expt_mtval;
output  [7 :0]  rtu_cp0_int_level;
output          rtu_cp0_int_vld_raw;
output          rtu_cp0_nmi_vld;
output          rtu_had_data_bkpta_vld;
output          rtu_had_data_bkptb_vld;
output          rtu_had_data_bkptc_vld;
output          rtu_had_data_bkptd_vld;
output          rtu_had_data_bkpte_vld;
output          rtu_had_dbg_disable_for_tee;
output          rtu_had_inst_bkpta_vld;
output          rtu_had_inst_bkptb_vld;
output          rtu_had_inst_bkptc_vld;
output          rtu_had_inst_bkptd_vld;
output          rtu_had_inst_bkpte_vld;
output          rtu_had_inst_ld;
output          rtu_had_int_ack;
output          rtu_had_rst_dbgreq_ack;
output          rtu_had_xx_bkpt_inst;
output          rtu_had_xx_chgflow;
output          rtu_had_xx_dbg_ack_pc;
output  [31:0]  rtu_had_xx_next_pc;
output          rtu_had_xx_retire;
output          rtu_had_xx_retire_normal;
output          rtu_had_xx_retire_normal_for_dbg;
output  [31:0]  rtu_had_xx_retire_pc;
output          rtu_had_xx_split;
output          rtu_hpcp_retire_inst_vld;
output          rtu_idu_id_cancel;
output          rtu_idu_id_stall;
output          rtu_idu_int_vld_raw;
output          rtu_idu_late_flush;
output  [31:0]  rtu_ifu_chgflow_pc;
output          rtu_ifu_chgflow_vld;
output          rtu_ifu_xx_fe_flush;
output          rtu_ifu_xx_fe_flush_gate;
output          rtu_lsu_async_expt_ack;
output          rtu_lsu_ex1_cancel;
output          rtu_lsu_expt_ack;
output          rtu_lsu_expt_exit;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output          rtu_xx_ex1_cancel;
output          rtu_xx_ex2_cancel;
output          rtu_xx_no_op;
output          rtu_yy_xx_async_flush;
output          rtu_yy_xx_dbgon;
output          rtu_yy_xx_expt_int;
output  [11:0]  rtu_yy_xx_expt_vec;
output          rtu_yy_xx_expt_vld;
output          rtu_yy_xx_expt_vld_gate;
output          rtu_yy_xx_flush;
output          rtu_yy_xx_int_hv;
output          rtu_yy_xx_retire;
output          rtu_yy_xx_tail_int_vld;

// &Regs; @25
reg     [1 :0]  dbg_cur_state;
reg     [1 :0]  dbg_nxt_state;
reg             dbg_stall_cur_state;
reg             dbg_stall_next_state;
reg     [1 :0]  flush_cur_state;
reg     [1 :0]  flush_next_state;
reg     [11:0]  retire_expt_int_vec;
reg     [31:0]  retire_expt_mtval;
reg             retire_int_flush;
reg     [31:0]  rtu_cp0_epc;
reg             tar_pc_state;

// &Wires; @26
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_in_nmi;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            dbg_mode_on;
wire            dbgreq_ack;
wire            dbgreq_ack_async;
wire            dbgreq_ack_data_mbkpt;
wire            dbgreq_ack_ebreak;
wire            dbgreq_ack_ex1_inst_mbkpt;
wire            dbgreq_ack_for_ex1_cancel;
wire            dbgreq_ack_hw;
wire            dbgreq_ack_inst_mbkpt;
wire            dbgreq_ack_mbkpt;
wire            dbgreq_ack_raw;
wire            dbgreq_ack_raw_data_mbkpt;
wire            dbgreq_ack_raw_ebreak;
wire            dbgreq_ack_raw_hw;
wire            dbgreq_ack_raw_inst_mbkpt;
wire            dbgreq_ack_raw_mbkpt;
wire            dbgreq_ack_raw_trace;
wire            dbgreq_ack_rst;
wire            dbgreq_ack_trace;
wire            forever_cpuclk;
wire            fpu_xx_no_op;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_yy_xx_exit_dbg;
wire            idu_rtu_ex1_inst_vld;
wire            ifu_rtu_cpu_in_init;
wire            int_retire_pending_int_hv;
wire            iu_xx_no_op;
wire            lockup_clk;
wire            lockup_clk_en;
wire            lockup_retire_dbg_vld;
wire            lockup_retire_nmi_vld;
wire            lsu_rtu_async_expt_vld;
wire            lsu_rtu_async_ld_inst;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_pmp_deny;
wire            lsu_xx_no_op;
wire            pad_yy_gate_clk_en_b;
wire            rbus_retire_ex2_branch_inst;
wire            rbus_retire_ex2_chgflw_vld;
wire    [31:0]  rbus_retire_ex2_cur_pc;
wire            rbus_retire_ex2_data_mbkpta;
wire            rbus_retire_ex2_data_mbkptb;
wire            rbus_retire_ex2_data_mbkptc;
wire            rbus_retire_ex2_data_mbkptd;
wire            rbus_retire_ex2_data_mbkpte;
wire            rbus_retire_ex2_flush;
wire            rbus_retire_ex2_inst_dbg_hw;
wire            rbus_retire_ex2_inst_ebreak;
wire            rbus_retire_ex2_inst_expt;
wire            rbus_retire_ex2_inst_int;
wire            rbus_retire_ex2_inst_ld;
wire            rbus_retire_ex2_inst_mbkpta;
wire            rbus_retire_ex2_inst_mbkptb;
wire            rbus_retire_ex2_inst_mbkptc;
wire            rbus_retire_ex2_inst_mbkptd;
wire            rbus_retire_ex2_inst_mbkpte;
wire            rbus_retire_ex2_inst_mret;
wire            rbus_retire_ex2_inst_nmi;
wire            rbus_retire_ex2_inst_tail_int;
wire            rbus_retire_ex2_int_hv;
wire    [7 :0]  rbus_retire_ex2_int_lv;
wire            rbus_retire_ex2_ipop_int;
wire    [31:0]  rbus_retire_ex2_mtval;
wire    [31:0]  rbus_retire_ex2_next_pc;
wire            rbus_retire_ex2_retire_vld;
wire            rbus_retire_ex2_spec_inst;
wire            rbus_retire_ex2_split_inst;
wire            rbus_retire_ex2_stall;
wire            rbus_retire_ex2_stall_gate;
wire    [11:0]  rbus_retire_ex2_trap_vec;
wire            rbus_retire_id_stall;
wire            rbus_xx_ex1_split_inst;
wire            rbus_xx_ex2_rbus_wb_vld;
wire            retire_ack_inst_bkpt;
wire            retire_async_cancel_xx;
wire            retire_async_expt_ack;
wire            retire_async_expt_en;
wire    [11:0]  retire_async_expt_vec;
wire            retire_async_expt_vld;
wire    [31:0]  retire_async_mtval;
wire            retire_clk;
wire            retire_clk_en;
wire            retire_cpu_no_wb;
wire            retire_data_mbkpt_en;
wire            retire_dbg_disable;
wire            retire_dbg_need_retire;
wire            retire_dbg_stall;
wire            retire_dbg_stall_set;
wire            retire_dbg_wait;
wire            retire_ebreak_en;
wire            retire_enter_dbg;
wire            retire_ex1_cancel;
wire            retire_ex1_inst_vld;
wire            retire_ex2_data_bkpta;
wire            retire_ex2_data_bkptb;
wire            retire_ex2_data_bkptc;
wire            retire_ex2_data_bkptd;
wire            retire_ex2_data_bkpte;
wire            retire_ex2_retire_en;
wire            retire_ex2_retire_first;
wire            retire_ex2_retire_for_dbg;
wire            retire_ex2_retire_last;
wire            retire_ex2_retire_raw;
wire            retire_expt_inst_sync;
wire            retire_expt_int_vld;
wire            retire_expt_int_vld_raw;
wire            retire_expt_int_without_dbg;
wire            retire_expt_mtval_ex1;
wire            retire_expt_mtval_pc;
wire            retire_expt_raw;
wire            retire_expt_raw_without_spec;
wire            retire_flush_cancel_id;
wire            retire_flush_set;
wire            retire_flush_set_gate;
wire            retire_flush_wait;
wire            retire_hw_en;
wire            retire_id_cancel;
wire            retire_id_stall;
wire            retire_inst_mbkpt_en;
wire            retire_int_inst;
wire            retire_int_nmi_ack;
wire            retire_int_nmi_raw;
wire            retire_int_vld;
wire            retire_int_vld_raw;
wire            retire_lockup_dbg_req;
wire            retire_lockup_dbgon;
wire            retire_lockup_expt_vld;
wire            retire_lockup_nmi_exit;
wire    [31:0]  retire_lockup_retire_pc;
wire            retire_lockup_retire_vld;
wire            retire_nmi_inst;
wire            retire_nmi_vld;
wire            retire_normal_retire;
wire            retire_normal_retire_for_dbg;
wire            retire_rbus_dbg_stall;
wire            retire_rbus_ex1_cancel;
wire            retire_rbus_ex1_inst_dbg_hw;
wire            retire_rbus_ex2_wb_cancel;
wire            retire_tail_int_inst;
wire            retire_tail_int_raw;
wire            retire_tail_int_vld;
wire            retire_trace_en;
wire            retire_xx_ex2_expt_raw;
wire            rtu_cp0_bus_error;
wire            rtu_cp0_ex1_dbg_cancel;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_nmi_vld;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire    [30:0]  rtu_had_xx_retire_pc_31_1;
wire            rtu_had_xx_split;
wire            rtu_hpcp_retire_inst_vld;
wire            rtu_idu_id_cancel;
wire            rtu_idu_id_stall;
wire            rtu_idu_int_vld_raw;
wire            rtu_idu_late_flush;
wire    [31:0]  rtu_ifu_chgflow_pc;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;
wire            rtu_lsu_async_expt_ack;
wire            rtu_lsu_ex1_cancel;
wire            rtu_lsu_expt_ack;
wire            rtu_lsu_expt_exit;
wire            rtu_pad_inst_retire;
wire            rtu_pad_inst_split;
wire    [31:0]  rtu_pad_retire_pc;
wire            rtu_xx_ex1_cancel;
wire            rtu_xx_ex2_cancel;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_async_flush;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_retire;
wire            rtu_yy_xx_tail_int_vld;
wire            wb_retire_wb_no_op;


assign fpu_xx_no_op = 1'b1;







parameter IDLE  = 1'b0;
parameter STALL = 1'b1;

always @ (posedge retire_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    tar_pc_state <= IDLE;
  else if (rtu_yy_xx_flush)
    tar_pc_state <= IDLE;
  else if (retire_ex2_retire_raw && rbus_retire_ex2_stall)
    tar_pc_state <= STALL;
  else
    tar_pc_state <= IDLE;
end

assign retire_ex2_retire_en   = tar_pc_state == IDLE;

assign retire_ex2_retire_raw   = rbus_retire_ex2_retire_vld;
assign retire_ex2_retire_first = retire_ex2_retire_raw
                              && retire_ex2_retire_en
                              && !rbus_retire_ex2_spec_inst;
assign retire_ex2_retire_last  = retire_ex2_retire_raw && !rbus_retire_ex2_stall;

assign retire_ex1_inst_vld    = idu_rtu_ex1_inst_vld;

assign retire_normal_retire   = retire_ex2_retire_raw && !rbus_retire_ex2_stall
                             && !retire_expt_raw_without_spec;
assign retire_ex2_retire_for_dbg    = retire_ex2_retire_raw && !retire_dbg_stall;
assign retire_normal_retire_for_dbg = retire_ex2_retire_for_dbg && !retire_expt_raw_without_spec;



assign rtu_yy_xx_retire       = retire_ex2_retire_first;








assign retire_async_expt_vld = lsu_rtu_async_expt_vld || lsu_rtu_pmp_deny;

assign retire_expt_inst_sync = rbus_retire_ex2_inst_expt || lsu_rtu_pmp_deny;





assign retire_expt_raw       = (rbus_retire_ex2_inst_expt || retire_async_expt_vld)
                            && !rbus_retire_ex2_spec_inst;
assign retire_expt_raw_without_spec = rbus_retire_ex2_inst_expt || retire_async_expt_vld;






assign retire_int_inst       = rbus_retire_ex2_inst_int;
assign retire_nmi_inst       = rbus_retire_ex2_inst_nmi;




assign retire_int_nmi_raw    = retire_int_inst || retire_nmi_inst;
assign retire_tail_int_inst  = rbus_retire_ex2_inst_tail_int;
assign retire_tail_int_raw   = retire_tail_int_inst && !dbgreq_ack_raw_data_mbkpt;




// &CombBeg; @110
always @( retire_async_expt_vec[11:0]
       or retire_async_expt_vld
       or rbus_retire_ex2_trap_vec[11:0]
       or retire_int_inst
       or retire_nmi_inst
       or lockup_retire_nmi_vld)
begin
  if (retire_nmi_inst || lockup_retire_nmi_vld) // nmi
    retire_expt_int_vec[11:0] = 12'd24;
  else if (retire_async_expt_vld && !retire_int_inst) // async expt & pmp
    retire_expt_int_vec[11:0] = retire_async_expt_vec[11:0];
  else
    retire_expt_int_vec[11:0] = rbus_retire_ex2_trap_vec[11:0];
// &CombEnd; @117
end




assign retire_expt_mtval_pc = rbus_retire_ex2_trap_vec[3:0] == 4'h0
                           || rbus_retire_ex2_trap_vec[3:0] == 4'h1
                           || rbus_retire_ex2_trap_vec[3:0] == 4'hc;
assign retire_expt_mtval_ex1 = rbus_retire_ex2_trap_vec[3:0] == 4'h2
                            || rbus_retire_ex2_trap_vec[3:0] == 4'h4
                            || rbus_retire_ex2_trap_vec[3:0] == 4'h5
                            || rbus_retire_ex2_trap_vec[3:0] == 4'h6
                            || rbus_retire_ex2_trap_vec[3:0] == 4'h7;






// &CombBeg; @136
always @( rbus_retire_ex2_mtval[31:0]
       or rbus_retire_ex2_cur_pc[31:0]
       or retire_async_mtval[31:0]
       or retire_expt_mtval_pc
       or retire_expt_mtval_ex1
       or retire_async_expt_vld
       or retire_int_inst)
begin
  if (retire_int_inst)
    retire_expt_mtval[31:0] = 32'b0;
  else if (retire_async_expt_vld)
    retire_expt_mtval[31:0] = retire_async_mtval[31:0];
  else if (retire_expt_mtval_pc)
    retire_expt_mtval[31:0] = rbus_retire_ex2_cur_pc[31:0];
  else if (retire_expt_mtval_ex1)
    retire_expt_mtval[31:0] = rbus_retire_ex2_mtval[31:0];
  else
    retire_expt_mtval[31:0] = 32'b0;
// &CombEnd @147
end




assign retire_expt_int_vld    =  retire_ex2_retire_raw && !rbus_retire_ex2_stall
                             && !dbgreq_ack
                             && (retire_expt_raw || retire_int_nmi_raw);

assign retire_expt_int_vld_raw =  retire_ex2_retire_raw
                             && !dbgreq_ack
                             && (retire_expt_raw || retire_int_nmi_raw);

assign retire_tail_int_vld   =  retire_ex2_retire_raw && !rbus_retire_ex2_stall
                            && !dbgreq_ack
                            &&  retire_tail_int_raw && !retire_expt_raw;





assign retire_async_expt_vec[11:0] = lsu_rtu_async_ld_inst ? 12'd5
                                                           : 12'd7;
assign retire_async_mtval[31:0]    = lsu_rtu_async_mtval[31:0];

assign retire_async_cancel_xx      = retire_expt_int_vld_raw && !dbg_mode_on && retire_async_expt_vld;
assign retire_async_expt_ack  = (retire_expt_int_without_dbg && !retire_int_nmi_raw
                              || dbg_mode_on || retire_dbg_wait || dbgreq_ack
                              || retire_int_nmi_raw && !(cp0_xx_async_expt_en || !lsu_rtu_async_ld_inst))
                             && lsu_rtu_async_expt_vld;
assign rtu_lsu_async_expt_ack = retire_async_expt_ack;




assign retire_expt_int_without_dbg = retire_expt_int_vld && !dbg_mode_on
                                  || lockup_retire_nmi_vld;
assign retire_nmi_vld = retire_expt_int_without_dbg && retire_nmi_inst
                     || lockup_retire_nmi_vld;
assign retire_int_vld = retire_expt_int_without_dbg && retire_int_inst;
assign retire_int_vld_raw = retire_ex2_retire_raw && !dbg_mode_on && retire_int_inst;
assign rtu_yy_xx_expt_vld_gate = retire_ex2_retire_raw && (retire_expt_raw
                                                        || retire_int_nmi_raw
                                                        || retire_tail_int_raw)
                              || lockup_retire_nmi_vld;

assign rtu_yy_xx_expt_vld       = retire_expt_int_without_dbg;
assign rtu_yy_xx_tail_int_vld   = retire_tail_int_vld;
assign rtu_yy_xx_expt_int       = retire_int_vld;
assign rtu_yy_xx_expt_vec[11:0] = retire_expt_int_vec[11:0];

assign rtu_idu_int_vld_raw         = retire_int_vld_raw;
assign rtu_cp0_int_vld_raw         = retire_int_vld_raw;
// &Force("output", "rtu_yy_xx_expt_vec"); &Force("bus", "rtu_yy_xx_expt_vec", 11, 0); @200

assign rtu_yy_xx_int_hv            = retire_tail_int_raw ? int_retire_pending_int_hv
                                                         : rbus_retire_ex2_int_hv;


assign rtu_ifu_chgflow_vld      = rbus_retire_ex2_chgflw_vld || rbus_retire_ex2_flush;
assign rtu_ifu_chgflow_pc[31:0] = rbus_retire_ex2_next_pc[31:0];




assign rtu_lsu_expt_ack = retire_expt_int_without_dbg;




assign rtu_cp0_nmi_vld          = retire_nmi_vld;
assign rtu_cp0_expt_mtval[31:0] = retire_expt_mtval[31:0];
assign rtu_cp0_bus_error        = lsu_rtu_async_expt_vld;

// &CombBeg; @223
always @( rbus_retire_ex2_next_pc[31:0]
       or rbus_retire_ex2_cur_pc[31:0]
       or retire_expt_inst_sync
       or retire_expt_raw
       or retire_tail_int_raw
       or retire_async_expt_en
       or rbus_retire_ex2_ipop_int)
begin
  if (retire_expt_raw)
    if (retire_expt_inst_sync || !retire_async_expt_en || retire_tail_int_raw)
      rtu_cp0_epc[31:0] = rbus_retire_ex2_cur_pc[31:0];
    else
      rtu_cp0_epc[31:0] = rbus_retire_ex2_next_pc[31:0];
  else if (rbus_retire_ex2_ipop_int)
    rtu_cp0_epc[31:0] = rbus_retire_ex2_cur_pc[31:0];
  else
    rtu_cp0_epc[31:0] = rbus_retire_ex2_next_pc[31:0];
// &CombEnd; @233
end

assign rtu_cp0_int_level[7:0] = rbus_retire_ex2_int_lv[7:0];

assign retire_xx_ex2_expt_raw = retire_expt_raw_without_spec;










assign retire_rbus_ex1_inst_dbg_hw = had_rtu_hw_dbgreq
                                 && !rbus_xx_ex1_split_inst;






assign dbgreq_ack_raw_hw     = rbus_retire_ex2_inst_dbg_hw
                            && retire_ex2_retire_raw;

assign dbgreq_ack_raw_ebreak = had_rtu_fdb
                            && retire_ex2_retire_raw
                            && rbus_retire_ex2_inst_ebreak;

assign dbgreq_ack_raw_trace  = had_rtu_trace_dbgreq_raw
                            && retire_ex2_retire_raw;

assign dbgreq_ack_raw_inst_mbkpt = retire_ex2_retire_raw && had_rtu_inst_bkpt_dbgreq;// Inst bkpt will not cause ex2_stall.

assign dbgreq_ack_raw_data_mbkpt = retire_ex2_retire_raw && had_rtu_data_bkpt_dbgreq_raw;

assign dbgreq_ack_raw_mbkpt = dbgreq_ack_raw_inst_mbkpt || dbgreq_ack_raw_data_mbkpt;

assign dbgreq_ack_raw = !retire_dbg_disable && (dbgreq_ack_raw_hw
                                             || dbgreq_ack_raw_ebreak
                                             || dbgreq_ack_raw_trace
                                             || dbgreq_ack_raw_mbkpt);




assign dbgreq_ack_hw      = rbus_retire_ex2_inst_dbg_hw
                         && retire_normal_retire_for_dbg
                         && retire_hw_en;
assign dbgreq_ack_ebreak  = had_rtu_fdb
                         && retire_ex2_retire_for_dbg
                         && rbus_retire_ex2_inst_ebreak
                         && retire_ebreak_en;
assign dbgreq_ack_trace   = had_rtu_trace_dbgreq
                         && retire_normal_retire_for_dbg
                         && retire_trace_en;
assign dbgreq_ack_rst     = had_rtu_rst_dbgreq && !ifu_rtu_cpu_in_init;
assign dbgreq_ack_async   = had_rtu_async_dbgreq
                         || dbgreq_ack_rst;

assign dbgreq_ack_inst_mbkpt = retire_ex2_retire_for_dbg
                            && had_rtu_inst_bkpt_dbgreq
                            && retire_inst_mbkpt_en;

assign dbgreq_ack_ex1_inst_mbkpt = retire_ex1_inst_vld && had_rtu_ex1_inst_bkpt_dbgreq;

assign dbgreq_ack_data_mbkpt = retire_normal_retire_for_dbg
                            && had_rtu_data_bkpt_dbgreq
                            && retire_data_mbkpt_en;
assign dbgreq_ack_mbkpt      = dbgreq_ack_inst_mbkpt || dbgreq_ack_data_mbkpt;

assign dbgreq_ack_for_ex1_cancel = !retire_dbg_disable && dbgreq_ack_ex1_inst_mbkpt;
// &Force("nonport", "dbgreq_ack_for_ex1_cancel"); @306


assign dbgreq_ack = !retire_dbg_disable && (dbgreq_ack_hw
                                         || dbgreq_ack_ebreak
                                         || dbgreq_ack_trace
                                         || dbgreq_ack_mbkpt
                                         || lockup_retire_dbg_vld);




assign retire_dbg_disable = 1'b0;

assign retire_hw_en = !retire_tail_int_inst;
assign retire_ebreak_en = !lsu_rtu_async_expt_vld;
assign retire_trace_en = 1'b1;
assign retire_inst_mbkpt_en = !lsu_rtu_async_expt_vld; // inst bkpt will send nop, so it must be inst before inst bkpt.
assign retire_data_mbkpt_en = 1'b1;




parameter STALL_IDLE = 1'b0,
          STALL_SET  = 1'b1;

always @ (posedge retire_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dbg_stall_cur_state <= 1'b0;
  else
    dbg_stall_cur_state <= dbg_stall_next_state;
end

// &CombBeg; @340
always @( dbg_stall_cur_state
       or lsu_xx_no_op
       or retire_dbg_stall_set)
begin
  case(dbg_stall_cur_state)
  STALL_IDLE:
    if (retire_dbg_stall_set)
      dbg_stall_next_state = STALL_SET;
    else
      dbg_stall_next_state = STALL_IDLE;
  STALL_SET:
    if (lsu_xx_no_op)
      dbg_stall_next_state = STALL_IDLE;
    else
      dbg_stall_next_state = STALL_SET;
  default:
    dbg_stall_next_state = STALL_IDLE;
  endcase
// &CombEnd; @355
end

assign retire_dbg_stall_set = retire_dbg_need_retire && !lsu_xx_no_op;
assign retire_dbg_stall     = retire_dbg_stall_set || dbg_stall_cur_state == STALL_SET;

assign retire_dbg_need_retire = dbgreq_ack_raw;

assign retire_rbus_dbg_stall = retire_dbg_stall;

assign retire_async_expt_en = (cp0_xx_async_expt_en || !lsu_rtu_async_ld_inst)
                           && !dbgreq_ack_raw
                           && !rbus_retire_ex2_split_inst;




assign retire_cpu_no_wb = lsu_xx_no_op
                       && iu_xx_no_op
                       && fpu_xx_no_op
                       && rtu_xx_no_op;

parameter DBG_IDLE  = 2'b00,
          DBG_WAIT  = 2'b01,
          DBG_FLUSH = 2'b10,
          DBG_ON    = 2'b11;

always @ (posedge retire_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    dbg_cur_state[1:0] <= DBG_IDLE;
  else
    dbg_cur_state[1:0] <= dbg_nxt_state[1:0];
end

// &CombBeg; @389
always @( dbgreq_ack_async
       or dbg_cur_state
       or had_yy_xx_exit_dbg
       or retire_cpu_no_wb
       or dbgreq_ack)
begin
  case(dbg_cur_state)
    DBG_IDLE:
      if (dbgreq_ack_async)
        dbg_nxt_state = DBG_FLUSH;
      else if (dbgreq_ack)
        if (retire_cpu_no_wb)
          dbg_nxt_state = DBG_FLUSH;
        else
          dbg_nxt_state = DBG_WAIT;
      else
        dbg_nxt_state = DBG_IDLE;
    DBG_WAIT:
      if (dbgreq_ack_async)
        dbg_nxt_state = DBG_FLUSH;
      else if (retire_cpu_no_wb)
        dbg_nxt_state = DBG_FLUSH;
      else
        dbg_nxt_state = DBG_WAIT;
    DBG_FLUSH:
      dbg_nxt_state = DBG_ON;
    DBG_ON:
      if (had_yy_xx_exit_dbg)
        dbg_nxt_state = DBG_IDLE;
      else
        dbg_nxt_state = DBG_ON;
    default:
      dbg_nxt_state = DBG_IDLE;
  endcase
// &CombEnd; @418
end

assign retire_enter_dbg = dbg_cur_state == DBG_FLUSH;
assign retire_dbg_wait  = dbg_cur_state == DBG_WAIT;

assign dbg_mode_on  = dbg_cur_state == DBG_ON;
assign rtu_yy_xx_dbgon  = dbg_mode_on;


assign retire_ack_inst_bkpt = had_rtu_inst_bkpt_dbgreq;





assign rtu_had_xx_dbg_ack_pc           = dbgreq_ack || dbgreq_ack_async;
assign rtu_had_xx_retire_pc_31_1[30:0] = (rbus_retire_ex2_inst_expt
                                       || retire_ack_inst_bkpt
                                       || dbgreq_ack_async)
                                        ? rbus_retire_ex2_cur_pc[31:1]
                                        : rbus_retire_ex2_next_pc[31:1];
assign rtu_had_xx_retire_pc[31:0]      = {rtu_had_xx_retire_pc_31_1[30:0], 1'b0};

assign rtu_had_xx_split                = rbus_retire_ex2_split_inst;


assign rtu_had_xx_chgflow       = rbus_retire_ex2_branch_inst;
assign rtu_had_xx_next_pc[31:0] = rbus_retire_ex2_next_pc[31:0];


assign rtu_had_xx_bkpt_inst     = rbus_retire_ex2_inst_ebreak && retire_ebreak_en;


assign rtu_had_inst_bkpta_vld     = rbus_retire_ex2_inst_mbkpta && retire_ex2_retire_raw
                                    && !retire_dbg_disable && retire_inst_mbkpt_en;
assign rtu_had_inst_bkptb_vld     = rbus_retire_ex2_inst_mbkptb && retire_ex2_retire_raw
                                    && !retire_dbg_disable && retire_inst_mbkpt_en;
assign rtu_had_inst_bkptc_vld     = rbus_retire_ex2_inst_mbkptc && retire_ex2_retire_raw
                                    && !retire_dbg_disable && retire_inst_mbkpt_en;
assign rtu_had_inst_bkptd_vld     = rbus_retire_ex2_inst_mbkptd && retire_ex2_retire_raw
                                    && !retire_dbg_disable && retire_inst_mbkpt_en;
assign rtu_had_inst_bkpte_vld     = rbus_retire_ex2_inst_mbkpte && retire_ex2_retire_raw
                                    && !retire_dbg_disable && retire_inst_mbkpt_en;

assign retire_ex2_data_bkpta = rbus_retire_ex2_data_mbkpta;
assign retire_ex2_data_bkptb = rbus_retire_ex2_data_mbkptb;
assign retire_ex2_data_bkptc = rbus_retire_ex2_data_mbkptc;
assign retire_ex2_data_bkptd = rbus_retire_ex2_data_mbkptd;
assign retire_ex2_data_bkpte = rbus_retire_ex2_data_mbkpte;

assign rtu_had_data_bkpta_vld     = retire_ex2_retire_raw
                                    && retire_ex2_data_bkpta
                                    && !retire_dbg_disable;
assign rtu_had_data_bkptb_vld     = retire_ex2_retire_raw
                                    && retire_ex2_data_bkptb
                                    && !retire_dbg_disable;
assign rtu_had_data_bkptc_vld     = retire_ex2_retire_raw
                                    && retire_ex2_data_bkptc
                                    && !retire_dbg_disable;
assign rtu_had_data_bkptd_vld     = retire_ex2_retire_raw
                                    && retire_ex2_data_bkptd
                                    && !retire_dbg_disable;
assign rtu_had_data_bkpte_vld     = retire_ex2_retire_raw
                                    && retire_ex2_data_bkpte
                                    && !retire_dbg_disable;
assign rtu_had_inst_ld            = rbus_retire_ex2_inst_ld;

assign rtu_had_xx_retire                = retire_ex2_retire_last;
assign rtu_had_xx_retire_normal         = retire_normal_retire;
assign rtu_had_xx_retire_normal_for_dbg = retire_normal_retire_for_dbg;

assign rtu_xx_no_op               = !retire_ex2_retire_raw
                                 && !rbus_xx_ex2_rbus_wb_vld
                                 && wb_retire_wb_no_op;
// &Force("output", "rtu_xx_no_op"); @552


assign retire_rbus_ex2_wb_cancel = dbgreq_ack_inst_mbkpt
                                || retire_async_expt_ack && !retire_async_expt_en
                                || retire_expt_inst_sync;




parameter FLUSH_IDLE = 2'b00;
parameter FLUSH_WAIT = 2'b01;
parameter FLUSH_CMPLT = 2'b10;

always @ (posedge retire_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    flush_cur_state[1:0] <= FLUSH_IDLE;
  else
    flush_cur_state[1:0] <= flush_next_state[1:0];
end

// &CombBeg; @574
always @( retire_flush_set
       or retire_cpu_no_wb
       or flush_cur_state)
begin
case (flush_cur_state)
  FLUSH_IDLE:
    if (retire_flush_set)
      if (retire_cpu_no_wb)
        flush_next_state = FLUSH_CMPLT;
      else
        flush_next_state = FLUSH_WAIT;
    else
      flush_next_state = FLUSH_IDLE;
  FLUSH_WAIT:
    if (retire_cpu_no_wb)
      flush_next_state = FLUSH_CMPLT;
    else
      flush_next_state = FLUSH_WAIT;
  FLUSH_CMPLT:
    flush_next_state = FLUSH_IDLE;
  default:
    flush_next_state = FLUSH_IDLE;
endcase
// &CombEnd; @594
end





assign retire_flush_wait = flush_cur_state == FLUSH_WAIT;
assign rtu_yy_xx_flush  = flush_cur_state == FLUSH_CMPLT
                       || dbg_cur_state == DBG_FLUSH;
assign rtu_yy_xx_async_flush = dbg_cur_state == DBG_FLUSH && dbgreq_ack_async;
// &Force("output", "rtu_yy_xx_flush"); @604
assign retire_flush_set = retire_expt_int_vld && retire_expt_raw
                       || rbus_retire_ex2_flush && !(retire_expt_int_vld && retire_int_inst);
assign retire_flush_set_gate = retire_expt_int_vld_raw
                            || rbus_retire_ex2_flush;
assign rtu_ifu_xx_fe_flush = retire_enter_dbg
                          || retire_expt_int_without_dbg;
assign rtu_ifu_xx_fe_flush_gate = retire_enter_dbg
                               || retire_expt_int_vld_raw
                               || lockup_retire_nmi_vld;




always @ (posedge retire_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    retire_int_flush <= 1'b0;
  else if (rtu_yy_xx_flush)
    retire_int_flush <= 1'b0;
  else if (retire_expt_int_without_dbg && retire_expt_raw && retire_int_inst)
    retire_int_flush <= 1'b1;
end




assign retire_lockup_nmi_exit = cp0_rtu_ex1_inst_mret && cp0_rtu_in_nmi;

assign retire_lockup_dbg_req = had_rtu_hw_dbgreq || had_rtu_async_dbgreq;
assign retire_lockup_expt_vld = retire_expt_int_without_dbg
                             && !retire_int_inst
                             && !retire_nmi_inst
                             && rtu_yy_xx_expt_vec[11:0] != 12'd3
                             && rtu_yy_xx_expt_vec[11:0] != 12'd11;
assign retire_lockup_retire_vld = retire_ex2_retire_first;
assign retire_lockup_retire_pc[31:0] = rbus_retire_ex2_cur_pc[31:0];
assign retire_lockup_dbgon = dbg_mode_on;





assign rtu_pad_inst_retire     = retire_ex2_retire_first;
assign rtu_pad_inst_split      = rbus_retire_ex2_split_inst;
assign rtu_pad_retire_pc[31:0] = rbus_retire_ex2_cur_pc[31:0];





assign retire_clk_en = rtu_yy_xx_flush
                    || retire_ex2_retire_raw && rbus_retire_ex2_stall_gate
                    || tar_pc_state == STALL
                    || retire_dbg_stall
                    || dbgreq_ack
                    || dbgreq_ack_async
                    || dbg_cur_state != DBG_IDLE
                    || retire_flush_set_gate
                    || flush_cur_state != FLUSH_IDLE
                    || lockup_clk_en;

// &Instance("gated_clk_cell", "x_retire_clk"); @666
gated_clk_cell  x_retire_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (retire_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (retire_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @667
//          .external_en (1'b0), @668
//          .global_en   (cp0_yy_clk_en), @669
//          .module_en   (1'b0), @670
//          .local_en    (retire_clk_en), @671
//          .clk_out     (retire_clk)); @672

assign lockup_clk = retire_clk;









assign retire_id_cancel = dbgreq_ack_raw
                       || retire_flush_cancel_id;
assign retire_flush_cancel_id = retire_expt_int_vld_raw
                             || rbus_retire_ex2_flush;

assign retire_id_stall  = retire_dbg_wait
                       || retire_flush_wait
                       || rtu_yy_xx_flush
                       || rbus_retire_id_stall;


assign retire_rbus_ex1_cancel = retire_flush_set;



assign retire_ex1_cancel = rbus_retire_ex2_chgflw_vld
                        || retire_async_cancel_xx;

assign rtu_idu_id_cancel = retire_id_cancel;
assign rtu_idu_id_stall  = retire_id_stall
                        || retire_id_cancel;


assign rtu_cp0_ex1_dbg_cancel = 1'b0;
assign rtu_lsu_expt_exit      = rbus_retire_ex2_inst_mret;
assign rtu_lsu_ex1_cancel     = rbus_retire_ex2_chgflw_vld
                             || retire_ex2_retire_raw && lsu_rtu_async_expt_vld;
assign rtu_xx_ex1_cancel      = retire_ex1_cancel;
assign rtu_xx_ex2_cancel = retire_async_cancel_xx;

assign retire_int_nmi_ack     = retire_nmi_vld;

assign rtu_had_rst_dbgreq_ack = dbgreq_ack_rst;

assign rtu_idu_late_flush = retire_int_flush;
assign rtu_hpcp_retire_inst_vld = retire_ex2_retire_first;






assign rtu_had_dbg_disable_for_tee = 1'b0;
assign rtu_had_int_ack = 1'b0;





// &ModuleEnd; @737
endmodule
























// &ModuleBeg; @23
module pa_rtu_top(
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  cp0_rtu_chgflw_pc,
  cp0_rtu_chgflw_vld,
  cp0_rtu_ex1_cmplt,
  cp0_rtu_ex1_data,
  cp0_rtu_ex1_expt_vec,
  cp0_rtu_ex1_expt_vld,
  cp0_rtu_ex1_flush,
  cp0_rtu_ex1_inst_bkpt,
  cp0_rtu_ex1_inst_ebreak,
  cp0_rtu_ex1_inst_mret,
  cp0_rtu_ex1_stall,
  cp0_rtu_ex1_wb_preg,
  cp0_rtu_ex1_wb_vld,
  cp0_rtu_in_expt,
  cp0_rtu_in_nmi,
  cp0_rtu_int_id,
  cp0_rtu_int_level,
  cp0_rtu_int_mode,
  cp0_rtu_mie,
  cp0_rtu_mnxti_vld,
  cp0_rtu_mpil,
  cp0_rtu_pm_bypass,
  cp0_rtu_wfe_en,
  cp0_xx_async_expt_en,
  cp0_yy_clk_en,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpurst_b,
  forever_cpuclk,
  had_rtu_async_dbgreq,
  had_rtu_data_bkpt_dbgreq,
  had_rtu_data_bkpt_dbgreq_raw,
  had_rtu_ex1_bkpt_potential,
  had_rtu_ex1_inst_bkpt_dbgreq,
  had_rtu_ex1_trace_potential,
  had_rtu_fdb,
  had_rtu_hw_dbgreq,
  had_rtu_inst_bkpt_dbgreq,
  had_rtu_rst_dbgreq,
  had_rtu_trace_dbgreq,
  had_rtu_trace_dbgreq_raw,
  had_rtu_xx_tme,
  had_yy_xx_exit_dbg,
  idu_rtu_ex1_dst_vld,
  idu_rtu_ex1_inst_vld,
  idu_rtu_ex1_ipop_int_mask,
  idu_rtu_ex1_ipush_mie_en,
  idu_rtu_ex1_ipush_spec_fail,
  idu_rtu_ex1_lsu_sel,
  idu_rtu_ex1_tail_int_vld,
  idu_rtu_ipush_spec,
  idu_rtu_tail_fail,
  idu_xx_ex1_warm_up,
  idu_yy_xx_tail_ack,
  ifu_rtu_cpu_in_init,
  ifu_rtu_lockup_ack,
  ifu_xx_warm_up_clk,
  iu_rtu_div_ex1_stall,
  iu_rtu_ex1_alu_cmplt,
  iu_rtu_ex1_alu_data,
  iu_rtu_ex1_bju_chgflw_vld,
  iu_rtu_ex1_bju_cmplt,
  iu_rtu_ex1_bju_cmplt_dp,
  iu_rtu_ex1_bju_data,
  iu_rtu_ex1_bju_stall,
  iu_rtu_ex1_bju_wb_vld,
  iu_rtu_ex1_branch_inst,
  iu_rtu_ex1_cur_pc,
  iu_rtu_ex1_div_cmplt,
  iu_rtu_ex1_div_data,
  iu_rtu_ex1_div_wb_vld,
  iu_rtu_ex1_lsu_wb_data,
  iu_rtu_ex1_lsu_wb_preg,
  iu_rtu_ex1_lsu_wb_vld,
  iu_rtu_ex1_mul_cmplt,
  iu_rtu_ex1_next_pc,
  iu_rtu_ex1_split_inst,
  iu_rtu_ex1_wb_preg,
  iu_rtu_ex1_wb_vld,
  iu_rtu_ex2_chgflw_pc,
  iu_rtu_ex2_chgflw_vld,
  iu_rtu_ex2_div_data,
  iu_rtu_ex2_div_preg,
  iu_rtu_ex2_div_wb_vld,
  iu_rtu_ex2_mul_wb_data,
  iu_rtu_ex2_mul_wb_preg,
  iu_xx_no_op,
  lsu_rtu_async_expt_vld,
  lsu_rtu_async_ld_inst,
  lsu_rtu_async_mtval,
  lsu_rtu_ex1_bkpta_trap,
  lsu_rtu_ex1_bkptb_trap,
  lsu_rtu_ex1_bkptc_trap,
  lsu_rtu_ex1_bkptd_trap,
  lsu_rtu_ex1_bkpte_trap,
  lsu_rtu_ex1_cmplt,
  lsu_rtu_ex1_cmplt_dp,
  lsu_rtu_ex1_expt_vec,
  lsu_rtu_ex1_expt_vld,
  lsu_rtu_ex1_inst_ld,
  lsu_rtu_ex1_mtval,
  lsu_rtu_ex1_stall,
  lsu_rtu_ex2_data,
  lsu_rtu_ex2_data_vld,
  lsu_rtu_ex2_data_vld_gate,
  lsu_rtu_ex2_dest_reg,
  lsu_rtu_ex2_stall,
  lsu_rtu_ex2_stall_gate,
  lsu_rtu_pmp_deny,
  lsu_xx_no_op,
  pad_yy_gate_clk_en_b,
  rtu_clic_warm_up,
  rtu_cp0_bus_error,
  rtu_cp0_epc,
  rtu_cp0_ex1_dbg_cancel,
  rtu_cp0_expt_mtval,
  rtu_cp0_int_level,
  rtu_cp0_int_vld_raw,
  rtu_cp0_lockup_clr,
  rtu_cp0_lockup_vld,
  rtu_cp0_mie_en,
  rtu_cp0_mie_en_gate,
  rtu_cp0_mnxti_pending_vld,
  rtu_cp0_nmi_vld,
  rtu_cp0_pending_int_hv,
  rtu_cp0_pending_int_id,
  rtu_cp0_pending_int_level,
  rtu_cp0_wk_int,
  rtu_had_data_bkpta_vld,
  rtu_had_data_bkptb_vld,
  rtu_had_data_bkptc_vld,
  rtu_had_data_bkptd_vld,
  rtu_had_data_bkpte_vld,
  rtu_had_dbg_disable_for_tee,
  rtu_had_ex1_data_bkpta_vld,
  rtu_had_ex1_data_bkptb_vld,
  rtu_had_ex1_data_bkptc_vld,
  rtu_had_ex1_data_bkptd_vld,
  rtu_had_ex1_data_bkpte_vld,
  rtu_had_ex1_inst_bkpta_vld,
  rtu_had_ex1_inst_bkptb_vld,
  rtu_had_ex1_inst_bkptc_vld,
  rtu_had_ex1_inst_bkptd_vld,
  rtu_had_ex1_inst_bkpte_vld,
  rtu_had_ex1_inst_ld,
  rtu_had_ex1_spec_fail,
  rtu_had_ex1_split,
  rtu_had_inst_bkpta_vld,
  rtu_had_inst_bkptb_vld,
  rtu_had_inst_bkptc_vld,
  rtu_had_inst_bkptd_vld,
  rtu_had_inst_bkpte_vld,
  rtu_had_inst_ld,
  rtu_had_int_ack,
  rtu_had_rst_dbgreq_ack,
  rtu_had_xx_bkpt_inst,
  rtu_had_xx_chgflow,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_had_xx_dbg_ack_pc,
  rtu_had_xx_next_pc,
  rtu_had_xx_retire,
  rtu_had_xx_retire_normal,
  rtu_had_xx_retire_normal_for_dbg,
  rtu_had_xx_retire_pc,
  rtu_had_xx_split,
  rtu_hpcp_retire_inst_vld,
  rtu_idu_ex1_fwd_data,
  rtu_idu_ex1_fwd_vld,
  rtu_idu_ex1_stall,
  rtu_idu_ex2_lsu_fwd_data,
  rtu_idu_ex2_lsu_fwd_preg,
  rtu_idu_ex2_lsu_fwd_vld,
  rtu_idu_ex2_rbus_fwd_data,
  rtu_idu_ex2_rbus_fwd_preg,
  rtu_idu_ex2_rbus_fwd_vld,
  rtu_idu_id_cancel,
  rtu_idu_id_stall,
  rtu_idu_id_tail_int_vld,
  rtu_idu_int_vld_raw,
  rtu_idu_late_flush,
  rtu_idu_wb_lsu_data,
  rtu_idu_wb_lsu_preg,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_rbus_data,
  rtu_idu_wb_rbus_preg,
  rtu_idu_wb_rbus_vld,
  rtu_idu_wb_warm_up,
  rtu_ifu_chgflow_pc,
  rtu_ifu_chgflow_vld,
  rtu_ifu_lockup_expt_vld,
  rtu_ifu_lockup_mask,
  rtu_ifu_lockup_req,
  rtu_ifu_xx_fe_flush,
  rtu_ifu_xx_fe_flush_gate,
  rtu_iu_ex1_stall,
  rtu_iu_ex2_cur_pc,
  rtu_iu_ex2_div_wb_en,
  rtu_iu_ex2_stall,
  rtu_lsu_async_expt_ack,
  rtu_lsu_ex1_cancel,
  rtu_lsu_ex2_stall,
  rtu_lsu_expt_ack,
  rtu_lsu_expt_exit,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_pad_inst_retire,
  rtu_pad_inst_split,
  rtu_pad_retire_pc,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  rtu_sysio_lockup_on,
  rtu_xx_ex1_cancel,
  rtu_xx_ex2_cancel,
  rtu_xx_no_op,
  rtu_yy_xx_async_flush,
  rtu_yy_xx_dbgon,
  rtu_yy_xx_expt_int,
  rtu_yy_xx_expt_vec,
  rtu_yy_xx_expt_vld,
  rtu_yy_xx_expt_vld_gate,
  rtu_yy_xx_flush,
  rtu_yy_xx_int_hv,
  rtu_yy_xx_retire,
  rtu_yy_xx_tail_int_vld,
  sysio_rtu_nmi_int,
  sysio_rtu_wk_event
);

// &Ports; @24
input           clic_cpu_int_hv;
input   [11:0]  clic_cpu_int_id;
input   [7 :0]  clic_cpu_int_il;
input   [1 :0]  clic_cpu_int_priv;
input   [31:0]  cp0_rtu_chgflw_pc;
input           cp0_rtu_chgflw_vld;
input           cp0_rtu_ex1_cmplt;
input   [31:0]  cp0_rtu_ex1_data;
input   [3 :0]  cp0_rtu_ex1_expt_vec;
input           cp0_rtu_ex1_expt_vld;
input           cp0_rtu_ex1_flush;
input   [8 :0]  cp0_rtu_ex1_inst_bkpt;
input           cp0_rtu_ex1_inst_ebreak;
input           cp0_rtu_ex1_inst_mret;
input           cp0_rtu_ex1_stall;
input   [5 :0]  cp0_rtu_ex1_wb_preg;
input           cp0_rtu_ex1_wb_vld;
input           cp0_rtu_in_expt;
input           cp0_rtu_in_nmi;
input   [11:0]  cp0_rtu_int_id;
input   [7 :0]  cp0_rtu_int_level;
input   [1 :0]  cp0_rtu_int_mode;
input           cp0_rtu_mie;
input           cp0_rtu_mnxti_vld;
input   [7 :0]  cp0_rtu_mpil;
input   [1 :0]  cp0_rtu_pm_bypass;
input           cp0_rtu_wfe_en;
input           cp0_xx_async_expt_en;
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           had_rtu_async_dbgreq;
input           had_rtu_data_bkpt_dbgreq;
input           had_rtu_data_bkpt_dbgreq_raw;
input           had_rtu_ex1_bkpt_potential;
input           had_rtu_ex1_inst_bkpt_dbgreq;
input           had_rtu_ex1_trace_potential;
input           had_rtu_fdb;
input           had_rtu_hw_dbgreq;
input           had_rtu_inst_bkpt_dbgreq;
input           had_rtu_rst_dbgreq;
input           had_rtu_trace_dbgreq;
input           had_rtu_trace_dbgreq_raw;
input           had_rtu_xx_tme;
input           had_yy_xx_exit_dbg;
input           idu_rtu_ex1_dst_vld;
input           idu_rtu_ex1_inst_vld;
input           idu_rtu_ex1_ipop_int_mask;
input           idu_rtu_ex1_ipush_mie_en;
input           idu_rtu_ex1_ipush_spec_fail;
input           idu_rtu_ex1_lsu_sel;
input           idu_rtu_ex1_tail_int_vld;
input           idu_rtu_ipush_spec;
input           idu_rtu_tail_fail;
input           idu_xx_ex1_warm_up;
input           idu_yy_xx_tail_ack;
input           ifu_rtu_cpu_in_init;
input           ifu_rtu_lockup_ack;
input           ifu_xx_warm_up_clk;
input           iu_rtu_div_ex1_stall;
input           iu_rtu_ex1_alu_cmplt;
input   [31:0]  iu_rtu_ex1_alu_data;
input           iu_rtu_ex1_bju_chgflw_vld;
input           iu_rtu_ex1_bju_cmplt;
input           iu_rtu_ex1_bju_cmplt_dp;
input   [31:0]  iu_rtu_ex1_bju_data;
input           iu_rtu_ex1_bju_stall;
input           iu_rtu_ex1_bju_wb_vld;
input           iu_rtu_ex1_branch_inst;
input   [31:0]  iu_rtu_ex1_cur_pc;
input           iu_rtu_ex1_div_cmplt;
input   [31:0]  iu_rtu_ex1_div_data;
input           iu_rtu_ex1_div_wb_vld;
input   [31:0]  iu_rtu_ex1_lsu_wb_data;
input   [5 :0]  iu_rtu_ex1_lsu_wb_preg;
input           iu_rtu_ex1_lsu_wb_vld;
input           iu_rtu_ex1_mul_cmplt;
input   [31:0]  iu_rtu_ex1_next_pc;
input           iu_rtu_ex1_split_inst;
input   [5 :0]  iu_rtu_ex1_wb_preg;
input           iu_rtu_ex1_wb_vld;
input   [31:0]  iu_rtu_ex2_chgflw_pc;
input           iu_rtu_ex2_chgflw_vld;
input   [31:0]  iu_rtu_ex2_div_data;
input   [4 :0]  iu_rtu_ex2_div_preg;
input           iu_rtu_ex2_div_wb_vld;
input   [31:0]  iu_rtu_ex2_mul_wb_data;
input   [5 :0]  iu_rtu_ex2_mul_wb_preg;
input           iu_xx_no_op;
input           lsu_rtu_async_expt_vld;
input           lsu_rtu_async_ld_inst;
input   [31:0]  lsu_rtu_async_mtval;
input           lsu_rtu_ex1_bkpta_trap;
input           lsu_rtu_ex1_bkptb_trap;
input           lsu_rtu_ex1_bkptc_trap;
input           lsu_rtu_ex1_bkptd_trap;
input           lsu_rtu_ex1_bkpte_trap;
input           lsu_rtu_ex1_cmplt;
input           lsu_rtu_ex1_cmplt_dp;
input   [3 :0]  lsu_rtu_ex1_expt_vec;
input           lsu_rtu_ex1_expt_vld;
input           lsu_rtu_ex1_inst_ld;
input   [31:0]  lsu_rtu_ex1_mtval;
input           lsu_rtu_ex1_stall;
input   [31:0]  lsu_rtu_ex2_data;
input           lsu_rtu_ex2_data_vld;
input           lsu_rtu_ex2_data_vld_gate;
input   [5 :0]  lsu_rtu_ex2_dest_reg;
input           lsu_rtu_ex2_stall;
input           lsu_rtu_ex2_stall_gate;
input           lsu_rtu_pmp_deny;
input           lsu_xx_no_op;
input           pad_yy_gate_clk_en_b;
input           sysio_rtu_nmi_int;
input           sysio_rtu_wk_event;
output  [11:0]  cpu_clic_curid;
output          cpu_clic_int_exit;
output          rtu_clic_warm_up;
output          rtu_cp0_bus_error;
output  [31:0]  rtu_cp0_epc;
output          rtu_cp0_ex1_dbg_cancel;
output  [31:0]  rtu_cp0_expt_mtval;
output  [7 :0]  rtu_cp0_int_level;
output          rtu_cp0_int_vld_raw;
output          rtu_cp0_lockup_clr;
output          rtu_cp0_lockup_vld;
output          rtu_cp0_mie_en;
output          rtu_cp0_mie_en_gate;
output          rtu_cp0_mnxti_pending_vld;
output          rtu_cp0_nmi_vld;
output          rtu_cp0_pending_int_hv;
output  [11:0]  rtu_cp0_pending_int_id;
output  [7 :0]  rtu_cp0_pending_int_level;
output          rtu_cp0_wk_int;
output          rtu_had_data_bkpta_vld;
output          rtu_had_data_bkptb_vld;
output          rtu_had_data_bkptc_vld;
output          rtu_had_data_bkptd_vld;
output          rtu_had_data_bkpte_vld;
output          rtu_had_dbg_disable_for_tee;
output          rtu_had_ex1_data_bkpta_vld;
output          rtu_had_ex1_data_bkptb_vld;
output          rtu_had_ex1_data_bkptc_vld;
output          rtu_had_ex1_data_bkptd_vld;
output          rtu_had_ex1_data_bkpte_vld;
output          rtu_had_ex1_inst_bkpta_vld;
output          rtu_had_ex1_inst_bkptb_vld;
output          rtu_had_ex1_inst_bkptc_vld;
output          rtu_had_ex1_inst_bkptd_vld;
output          rtu_had_ex1_inst_bkpte_vld;
output          rtu_had_ex1_inst_ld;
output          rtu_had_ex1_spec_fail;
output          rtu_had_ex1_split;
output          rtu_had_inst_bkpta_vld;
output          rtu_had_inst_bkptb_vld;
output          rtu_had_inst_bkptc_vld;
output          rtu_had_inst_bkptd_vld;
output          rtu_had_inst_bkpte_vld;
output          rtu_had_inst_ld;
output          rtu_had_int_ack;
output          rtu_had_rst_dbgreq_ack;
output          rtu_had_xx_bkpt_inst;
output          rtu_had_xx_chgflow;
output  [31:0]  rtu_had_xx_data;
output          rtu_had_xx_data_vld;
output          rtu_had_xx_dbg_ack_pc;
output  [31:0]  rtu_had_xx_next_pc;
output          rtu_had_xx_retire;
output          rtu_had_xx_retire_normal;
output          rtu_had_xx_retire_normal_for_dbg;
output  [31:0]  rtu_had_xx_retire_pc;
output          rtu_had_xx_split;
output          rtu_hpcp_retire_inst_vld;
output  [31:0]  rtu_idu_ex1_fwd_data;
output          rtu_idu_ex1_fwd_vld;
output          rtu_idu_ex1_stall;
output  [31:0]  rtu_idu_ex2_lsu_fwd_data;
output  [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
output          rtu_idu_ex2_lsu_fwd_vld;
output  [31:0]  rtu_idu_ex2_rbus_fwd_data;
output  [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
output          rtu_idu_ex2_rbus_fwd_vld;
output          rtu_idu_id_cancel;
output          rtu_idu_id_stall;
output          rtu_idu_id_tail_int_vld;
output          rtu_idu_int_vld_raw;
output          rtu_idu_late_flush;
output  [31:0]  rtu_idu_wb_lsu_data;
output  [5 :0]  rtu_idu_wb_lsu_preg;
output          rtu_idu_wb_lsu_vld;
output  [31:0]  rtu_idu_wb_rbus_data;
output  [5 :0]  rtu_idu_wb_rbus_preg;
output          rtu_idu_wb_rbus_vld;
output          rtu_idu_wb_warm_up;
output  [31:0]  rtu_ifu_chgflow_pc;
output          rtu_ifu_chgflow_vld;
output          rtu_ifu_lockup_expt_vld;
output          rtu_ifu_lockup_mask;
output          rtu_ifu_lockup_req;
output          rtu_ifu_xx_fe_flush;
output          rtu_ifu_xx_fe_flush_gate;
output          rtu_iu_ex1_stall;
output  [31:0]  rtu_iu_ex2_cur_pc;
output          rtu_iu_ex2_div_wb_en;
output          rtu_iu_ex2_stall;
output          rtu_lsu_async_expt_ack;
output          rtu_lsu_ex1_cancel;
output          rtu_lsu_ex2_stall;
output          rtu_lsu_expt_ack;
output          rtu_lsu_expt_exit;
output  [31:0]  rtu_lsu_wb_fwd_data;
output          rtu_lsu_wb_fwd_fls;
output  [5 :0]  rtu_lsu_wb_fwd_reg;
output          rtu_lsu_wb_fwd_vld;
output          rtu_pad_inst_retire;
output          rtu_pad_inst_split;
output  [31:0]  rtu_pad_retire_pc;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output          rtu_sysio_lockup_on;
output          rtu_xx_ex1_cancel;
output          rtu_xx_ex2_cancel;
output          rtu_xx_no_op;
output          rtu_yy_xx_async_flush;
output          rtu_yy_xx_dbgon;
output          rtu_yy_xx_expt_int;
output  [11:0]  rtu_yy_xx_expt_vec;
output          rtu_yy_xx_expt_vld;
output          rtu_yy_xx_expt_vld_gate;
output          rtu_yy_xx_flush;
output          rtu_yy_xx_int_hv;
output          rtu_yy_xx_retire;
output          rtu_yy_xx_tail_int_vld;

// &Regs; @25

// &Wires; @26
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire    [31:0]  cp0_rtu_chgflw_pc;
wire            cp0_rtu_chgflw_vld;
wire            cp0_rtu_ex1_cmplt;
wire    [31:0]  cp0_rtu_ex1_data;
wire    [3 :0]  cp0_rtu_ex1_expt_vec;
wire            cp0_rtu_ex1_expt_vld;
wire            cp0_rtu_ex1_flush;
wire    [8 :0]  cp0_rtu_ex1_inst_bkpt;
wire            cp0_rtu_ex1_inst_ebreak;
wire            cp0_rtu_ex1_inst_mret;
wire            cp0_rtu_ex1_stall;
wire    [5 :0]  cp0_rtu_ex1_wb_preg;
wire            cp0_rtu_ex1_wb_vld;
wire            cp0_rtu_in_expt;
wire            cp0_rtu_in_nmi;
wire    [11:0]  cp0_rtu_int_id;
wire    [7 :0]  cp0_rtu_int_level;
wire    [1 :0]  cp0_rtu_int_mode;
wire            cp0_rtu_mie;
wire            cp0_rtu_mnxti_vld;
wire    [7 :0]  cp0_rtu_mpil;
wire    [1 :0]  cp0_rtu_pm_bypass;
wire            cp0_rtu_wfe_en;
wire            cp0_xx_async_expt_en;
wire            cp0_yy_clk_en;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpurst_b;
wire            forever_cpuclk;
wire            had_rtu_async_dbgreq;
wire            had_rtu_data_bkpt_dbgreq;
wire            had_rtu_data_bkpt_dbgreq_raw;
wire            had_rtu_ex1_bkpt_potential;
wire            had_rtu_ex1_inst_bkpt_dbgreq;
wire            had_rtu_ex1_trace_potential;
wire            had_rtu_fdb;
wire            had_rtu_hw_dbgreq;
wire            had_rtu_inst_bkpt_dbgreq;
wire            had_rtu_rst_dbgreq;
wire            had_rtu_trace_dbgreq;
wire            had_rtu_trace_dbgreq_raw;
wire            had_rtu_xx_tme;
wire            had_yy_xx_exit_dbg;
wire            idu_rtu_ex1_dst_vld;
wire            idu_rtu_ex1_inst_vld;
wire            idu_rtu_ex1_ipop_int_mask;
wire            idu_rtu_ex1_ipush_mie_en;
wire            idu_rtu_ex1_ipush_spec_fail;
wire            idu_rtu_ex1_lsu_sel;
wire            idu_rtu_ex1_tail_int_vld;
wire            idu_rtu_ipush_spec;
wire            idu_rtu_tail_fail;
wire            idu_xx_ex1_warm_up;
wire            idu_yy_xx_tail_ack;
wire            ifu_rtu_cpu_in_init;
wire            ifu_rtu_lockup_ack;
wire            ifu_xx_warm_up_clk;
wire            int_lockup_nmi_req;
wire            int_rbus_ex1_int_vld;
wire            int_rbus_ex1_int_vld_gate;
wire            int_rbus_ex1_nmi_req;
wire            int_rbus_int_hv;
wire            int_retire_pending_int_hv;
wire    [11:0]  int_xx_int_id;
wire    [7 :0]  int_xx_int_lv;
wire            iu_rtu_div_ex1_stall;
wire            iu_rtu_ex1_alu_cmplt;
wire    [31:0]  iu_rtu_ex1_alu_data;
wire            iu_rtu_ex1_bju_chgflw_vld;
wire            iu_rtu_ex1_bju_cmplt;
wire            iu_rtu_ex1_bju_cmplt_dp;
wire    [31:0]  iu_rtu_ex1_bju_data;
wire            iu_rtu_ex1_bju_stall;
wire            iu_rtu_ex1_bju_wb_vld;
wire            iu_rtu_ex1_branch_inst;
wire    [31:0]  iu_rtu_ex1_cur_pc;
wire            iu_rtu_ex1_div_cmplt;
wire    [31:0]  iu_rtu_ex1_div_data;
wire            iu_rtu_ex1_div_wb_vld;
wire    [31:0]  iu_rtu_ex1_lsu_wb_data;
wire    [5 :0]  iu_rtu_ex1_lsu_wb_preg;
wire            iu_rtu_ex1_lsu_wb_vld;
wire            iu_rtu_ex1_mul_cmplt;
wire    [31:0]  iu_rtu_ex1_next_pc;
wire            iu_rtu_ex1_split_inst;
wire    [5 :0]  iu_rtu_ex1_wb_preg;
wire            iu_rtu_ex1_wb_vld;
wire    [31:0]  iu_rtu_ex2_chgflw_pc;
wire            iu_rtu_ex2_chgflw_vld;
wire    [31:0]  iu_rtu_ex2_div_data;
wire    [4 :0]  iu_rtu_ex2_div_preg;
wire            iu_rtu_ex2_div_wb_vld;
wire    [31:0]  iu_rtu_ex2_mul_wb_data;
wire    [5 :0]  iu_rtu_ex2_mul_wb_preg;
wire            iu_xx_no_op;
wire            lockup_clk;
wire            lockup_clk_en;
wire            lockup_retire_dbg_vld;
wire            lockup_retire_nmi_vld;
wire            lsu_rtu_async_expt_vld;
wire            lsu_rtu_async_ld_inst;
wire    [31:0]  lsu_rtu_async_mtval;
wire            lsu_rtu_ex1_bkpta_trap;
wire            lsu_rtu_ex1_bkptb_trap;
wire            lsu_rtu_ex1_bkptc_trap;
wire            lsu_rtu_ex1_bkptd_trap;
wire            lsu_rtu_ex1_bkpte_trap;
wire            lsu_rtu_ex1_cmplt;
wire            lsu_rtu_ex1_cmplt_dp;
wire    [3 :0]  lsu_rtu_ex1_expt_vec;
wire            lsu_rtu_ex1_expt_vld;
wire            lsu_rtu_ex1_inst_ld;
wire    [31:0]  lsu_rtu_ex1_mtval;
wire            lsu_rtu_ex1_stall;
wire    [31:0]  lsu_rtu_ex2_data;
wire            lsu_rtu_ex2_data_vld;
wire            lsu_rtu_ex2_data_vld_gate;
wire    [5 :0]  lsu_rtu_ex2_dest_reg;
wire            lsu_rtu_ex2_stall;
wire            lsu_rtu_ex2_stall_gate;
wire            lsu_rtu_pmp_deny;
wire            lsu_xx_no_op;
wire            pad_yy_gate_clk_en_b;
wire            rbus_retire_ex2_branch_inst;
wire            rbus_retire_ex2_chgflw_vld;
wire    [31:0]  rbus_retire_ex2_cur_pc;
wire            rbus_retire_ex2_data_mbkpta;
wire            rbus_retire_ex2_data_mbkptb;
wire            rbus_retire_ex2_data_mbkptc;
wire            rbus_retire_ex2_data_mbkptd;
wire            rbus_retire_ex2_data_mbkpte;
wire            rbus_retire_ex2_flush;
wire            rbus_retire_ex2_inst_dbg_hw;
wire            rbus_retire_ex2_inst_ebreak;
wire            rbus_retire_ex2_inst_expt;
wire            rbus_retire_ex2_inst_int;
wire            rbus_retire_ex2_inst_ld;
wire            rbus_retire_ex2_inst_mbkpta;
wire            rbus_retire_ex2_inst_mbkptb;
wire            rbus_retire_ex2_inst_mbkptc;
wire            rbus_retire_ex2_inst_mbkptd;
wire            rbus_retire_ex2_inst_mbkpte;
wire            rbus_retire_ex2_inst_mret;
wire            rbus_retire_ex2_inst_nmi;
wire            rbus_retire_ex2_inst_tail_int;
wire            rbus_retire_ex2_int_hv;
wire    [7 :0]  rbus_retire_ex2_int_lv;
wire            rbus_retire_ex2_ipop_int;
wire    [31:0]  rbus_retire_ex2_mtval;
wire    [31:0]  rbus_retire_ex2_next_pc;
wire            rbus_retire_ex2_retire_vld;
wire            rbus_retire_ex2_spec_inst;
wire            rbus_retire_ex2_split_inst;
wire            rbus_retire_ex2_stall;
wire            rbus_retire_ex2_stall_gate;
wire    [11:0]  rbus_retire_ex2_trap_vec;
wire            rbus_retire_id_stall;
wire    [31:0]  rbus_wb_ex2_lsu_wb_data;
wire    [5 :0]  rbus_wb_ex2_lsu_wb_reg;
wire            rbus_wb_ex2_lsu_wb_vld_gate;
wire    [31:0]  rbus_wb_ex2_rbus_wb_data;
wire    [5 :0]  rbus_wb_ex2_rbus_wb_preg;
wire            rbus_wb_ex2_rbus_wb_vld_gate;
wire            rbus_wb_ex2_warm_up;
wire            rbus_xx_ex1_split_inst;
wire            rbus_xx_ex2_lsu_wb_vld;
wire            rbus_xx_ex2_rbus_wb_vld;
wire            retire_int_nmi_ack;
wire            retire_lockup_dbg_req;
wire            retire_lockup_dbgon;
wire            retire_lockup_expt_vld;
wire            retire_lockup_nmi_exit;
wire    [31:0]  retire_lockup_retire_pc;
wire            retire_lockup_retire_vld;
wire            retire_rbus_dbg_stall;
wire            retire_rbus_ex1_cancel;
wire            retire_rbus_ex1_inst_dbg_hw;
wire            retire_rbus_ex2_wb_cancel;
wire            retire_xx_ex2_expt_raw;
wire            rtu_clic_warm_up;
wire            rtu_cp0_bus_error;
wire    [31:0]  rtu_cp0_epc;
wire            rtu_cp0_ex1_dbg_cancel;
wire    [31:0]  rtu_cp0_expt_mtval;
wire    [7 :0]  rtu_cp0_int_level;
wire            rtu_cp0_int_vld_raw;
wire            rtu_cp0_lockup_clr;
wire            rtu_cp0_lockup_vld;
wire            rtu_cp0_mie_en;
wire            rtu_cp0_mie_en_gate;
wire            rtu_cp0_mnxti_pending_vld;
wire            rtu_cp0_nmi_vld;
wire            rtu_cp0_pending_int_hv;
wire    [11:0]  rtu_cp0_pending_int_id;
wire    [7 :0]  rtu_cp0_pending_int_level;
wire            rtu_cp0_wk_int;
wire            rtu_had_data_bkpta_vld;
wire            rtu_had_data_bkptb_vld;
wire            rtu_had_data_bkptc_vld;
wire            rtu_had_data_bkptd_vld;
wire            rtu_had_data_bkpte_vld;
wire            rtu_had_dbg_disable_for_tee;
wire            rtu_had_ex1_data_bkpta_vld;
wire            rtu_had_ex1_data_bkptb_vld;
wire            rtu_had_ex1_data_bkptc_vld;
wire            rtu_had_ex1_data_bkptd_vld;
wire            rtu_had_ex1_data_bkpte_vld;
wire            rtu_had_ex1_inst_bkpta_vld;
wire            rtu_had_ex1_inst_bkptb_vld;
wire            rtu_had_ex1_inst_bkptc_vld;
wire            rtu_had_ex1_inst_bkptd_vld;
wire            rtu_had_ex1_inst_bkpte_vld;
wire            rtu_had_ex1_inst_ld;
wire            rtu_had_ex1_spec_fail;
wire            rtu_had_ex1_split;
wire            rtu_had_inst_bkpta_vld;
wire            rtu_had_inst_bkptb_vld;
wire            rtu_had_inst_bkptc_vld;
wire            rtu_had_inst_bkptd_vld;
wire            rtu_had_inst_bkpte_vld;
wire            rtu_had_inst_ld;
wire            rtu_had_int_ack;
wire            rtu_had_rst_dbgreq_ack;
wire            rtu_had_xx_bkpt_inst;
wire            rtu_had_xx_chgflow;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire            rtu_had_xx_dbg_ack_pc;
wire    [31:0]  rtu_had_xx_next_pc;
wire            rtu_had_xx_retire;
wire            rtu_had_xx_retire_normal;
wire            rtu_had_xx_retire_normal_for_dbg;
wire    [31:0]  rtu_had_xx_retire_pc;
wire            rtu_had_xx_split;
wire            rtu_hpcp_retire_inst_vld;
wire    [31:0]  rtu_idu_ex1_fwd_data;
wire            rtu_idu_ex1_fwd_vld;
wire            rtu_idu_ex1_stall;
wire    [31:0]  rtu_idu_ex2_lsu_fwd_data;
wire    [5 :0]  rtu_idu_ex2_lsu_fwd_preg;
wire            rtu_idu_ex2_lsu_fwd_vld;
wire    [31:0]  rtu_idu_ex2_rbus_fwd_data;
wire    [5 :0]  rtu_idu_ex2_rbus_fwd_preg;
wire            rtu_idu_ex2_rbus_fwd_vld;
wire            rtu_idu_id_cancel;
wire            rtu_idu_id_stall;
wire            rtu_idu_id_tail_int_vld;
wire            rtu_idu_int_vld_raw;
wire            rtu_idu_late_flush;
wire    [31:0]  rtu_idu_wb_lsu_data;
wire    [5 :0]  rtu_idu_wb_lsu_preg;
wire            rtu_idu_wb_lsu_vld;
wire    [31:0]  rtu_idu_wb_rbus_data;
wire    [5 :0]  rtu_idu_wb_rbus_preg;
wire            rtu_idu_wb_rbus_vld;
wire            rtu_idu_wb_warm_up;
wire    [31:0]  rtu_ifu_chgflow_pc;
wire            rtu_ifu_chgflow_vld;
wire            rtu_ifu_lockup_expt_vld;
wire            rtu_ifu_lockup_mask;
wire            rtu_ifu_lockup_req;
wire            rtu_ifu_xx_fe_flush;
wire            rtu_ifu_xx_fe_flush_gate;
wire            rtu_iu_ex1_stall;
wire    [31:0]  rtu_iu_ex2_cur_pc;
wire            rtu_iu_ex2_div_wb_en;
wire            rtu_iu_ex2_stall;
wire            rtu_lsu_async_expt_ack;
wire            rtu_lsu_ex1_cancel;
wire            rtu_lsu_ex2_stall;
wire            rtu_lsu_expt_ack;
wire            rtu_lsu_expt_exit;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire            rtu_pad_inst_retire;
wire            rtu_pad_inst_split;
wire    [31:0]  rtu_pad_retire_pc;
wire    [31:0]  rtu_pad_wb0_data;
wire    [5 :0]  rtu_pad_wb0_preg;
wire            rtu_pad_wb0_vld;
wire    [31:0]  rtu_pad_wb1_data;
wire    [5 :0]  rtu_pad_wb1_preg;
wire            rtu_pad_wb1_vld;
wire            rtu_sysio_lockup_on;
wire            rtu_xx_ex1_cancel;
wire            rtu_xx_ex2_cancel;
wire            rtu_xx_no_op;
wire            rtu_yy_xx_async_flush;
wire            rtu_yy_xx_dbgon;
wire            rtu_yy_xx_expt_int;
wire    [11:0]  rtu_yy_xx_expt_vec;
wire            rtu_yy_xx_expt_vld;
wire            rtu_yy_xx_expt_vld_gate;
wire            rtu_yy_xx_flush;
wire            rtu_yy_xx_int_hv;
wire            rtu_yy_xx_retire;
wire            rtu_yy_xx_tail_int_vld;
wire            sysio_rtu_nmi_int;
wire            sysio_rtu_wk_event;
wire            wb_retire_wb_no_op;


// &Instance("pa_rtu_retire"); @28
pa_rtu_retire  x_pa_rtu_retire (
  .cp0_rtu_ex1_inst_mret            (cp0_rtu_ex1_inst_mret           ),
  .cp0_rtu_in_nmi                   (cp0_rtu_in_nmi                  ),
  .cp0_xx_async_expt_en             (cp0_xx_async_expt_en            ),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_rtu_async_dbgreq             (had_rtu_async_dbgreq            ),
  .had_rtu_data_bkpt_dbgreq         (had_rtu_data_bkpt_dbgreq        ),
  .had_rtu_data_bkpt_dbgreq_raw     (had_rtu_data_bkpt_dbgreq_raw    ),
  .had_rtu_ex1_inst_bkpt_dbgreq     (had_rtu_ex1_inst_bkpt_dbgreq    ),
  .had_rtu_fdb                      (had_rtu_fdb                     ),
  .had_rtu_hw_dbgreq                (had_rtu_hw_dbgreq               ),
  .had_rtu_inst_bkpt_dbgreq         (had_rtu_inst_bkpt_dbgreq        ),
  .had_rtu_rst_dbgreq               (had_rtu_rst_dbgreq              ),
  .had_rtu_trace_dbgreq             (had_rtu_trace_dbgreq            ),
  .had_rtu_trace_dbgreq_raw         (had_rtu_trace_dbgreq_raw        ),
  .had_yy_xx_exit_dbg               (had_yy_xx_exit_dbg              ),
  .idu_rtu_ex1_inst_vld             (idu_rtu_ex1_inst_vld            ),
  .ifu_rtu_cpu_in_init              (ifu_rtu_cpu_in_init             ),
  .int_retire_pending_int_hv        (int_retire_pending_int_hv       ),
  .iu_xx_no_op                      (iu_xx_no_op                     ),
  .lockup_clk                       (lockup_clk                      ),
  .lockup_clk_en                    (lockup_clk_en                   ),
  .lockup_retire_dbg_vld            (lockup_retire_dbg_vld           ),
  .lockup_retire_nmi_vld            (lockup_retire_nmi_vld           ),
  .lsu_rtu_async_expt_vld           (lsu_rtu_async_expt_vld          ),
  .lsu_rtu_async_ld_inst            (lsu_rtu_async_ld_inst           ),
  .lsu_rtu_async_mtval              (lsu_rtu_async_mtval             ),
  .lsu_rtu_pmp_deny                 (lsu_rtu_pmp_deny                ),
  .lsu_xx_no_op                     (lsu_xx_no_op                    ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .rbus_retire_ex2_branch_inst      (rbus_retire_ex2_branch_inst     ),
  .rbus_retire_ex2_chgflw_vld       (rbus_retire_ex2_chgflw_vld      ),
  .rbus_retire_ex2_cur_pc           (rbus_retire_ex2_cur_pc          ),
  .rbus_retire_ex2_data_mbkpta      (rbus_retire_ex2_data_mbkpta     ),
  .rbus_retire_ex2_data_mbkptb      (rbus_retire_ex2_data_mbkptb     ),
  .rbus_retire_ex2_data_mbkptc      (rbus_retire_ex2_data_mbkptc     ),
  .rbus_retire_ex2_data_mbkptd      (rbus_retire_ex2_data_mbkptd     ),
  .rbus_retire_ex2_data_mbkpte      (rbus_retire_ex2_data_mbkpte     ),
  .rbus_retire_ex2_flush            (rbus_retire_ex2_flush           ),
  .rbus_retire_ex2_inst_dbg_hw      (rbus_retire_ex2_inst_dbg_hw     ),
  .rbus_retire_ex2_inst_ebreak      (rbus_retire_ex2_inst_ebreak     ),
  .rbus_retire_ex2_inst_expt        (rbus_retire_ex2_inst_expt       ),
  .rbus_retire_ex2_inst_int         (rbus_retire_ex2_inst_int        ),
  .rbus_retire_ex2_inst_ld          (rbus_retire_ex2_inst_ld         ),
  .rbus_retire_ex2_inst_mbkpta      (rbus_retire_ex2_inst_mbkpta     ),
  .rbus_retire_ex2_inst_mbkptb      (rbus_retire_ex2_inst_mbkptb     ),
  .rbus_retire_ex2_inst_mbkptc      (rbus_retire_ex2_inst_mbkptc     ),
  .rbus_retire_ex2_inst_mbkptd      (rbus_retire_ex2_inst_mbkptd     ),
  .rbus_retire_ex2_inst_mbkpte      (rbus_retire_ex2_inst_mbkpte     ),
  .rbus_retire_ex2_inst_mret        (rbus_retire_ex2_inst_mret       ),
  .rbus_retire_ex2_inst_nmi         (rbus_retire_ex2_inst_nmi        ),
  .rbus_retire_ex2_inst_tail_int    (rbus_retire_ex2_inst_tail_int   ),
  .rbus_retire_ex2_int_hv           (rbus_retire_ex2_int_hv          ),
  .rbus_retire_ex2_int_lv           (rbus_retire_ex2_int_lv          ),
  .rbus_retire_ex2_ipop_int         (rbus_retire_ex2_ipop_int        ),
  .rbus_retire_ex2_mtval            (rbus_retire_ex2_mtval           ),
  .rbus_retire_ex2_next_pc          (rbus_retire_ex2_next_pc         ),
  .rbus_retire_ex2_retire_vld       (rbus_retire_ex2_retire_vld      ),
  .rbus_retire_ex2_spec_inst        (rbus_retire_ex2_spec_inst       ),
  .rbus_retire_ex2_split_inst       (rbus_retire_ex2_split_inst      ),
  .rbus_retire_ex2_stall            (rbus_retire_ex2_stall           ),
  .rbus_retire_ex2_stall_gate       (rbus_retire_ex2_stall_gate      ),
  .rbus_retire_ex2_trap_vec         (rbus_retire_ex2_trap_vec        ),
  .rbus_retire_id_stall             (rbus_retire_id_stall            ),
  .rbus_xx_ex1_split_inst           (rbus_xx_ex1_split_inst          ),
  .rbus_xx_ex2_rbus_wb_vld          (rbus_xx_ex2_rbus_wb_vld         ),
  .retire_int_nmi_ack               (retire_int_nmi_ack              ),
  .retire_lockup_dbg_req            (retire_lockup_dbg_req           ),
  .retire_lockup_dbgon              (retire_lockup_dbgon             ),
  .retire_lockup_expt_vld           (retire_lockup_expt_vld          ),
  .retire_lockup_nmi_exit           (retire_lockup_nmi_exit          ),
  .retire_lockup_retire_pc          (retire_lockup_retire_pc         ),
  .retire_lockup_retire_vld         (retire_lockup_retire_vld        ),
  .retire_rbus_dbg_stall            (retire_rbus_dbg_stall           ),
  .retire_rbus_ex1_cancel           (retire_rbus_ex1_cancel          ),
  .retire_rbus_ex1_inst_dbg_hw      (retire_rbus_ex1_inst_dbg_hw     ),
  .retire_rbus_ex2_wb_cancel        (retire_rbus_ex2_wb_cancel       ),
  .retire_xx_ex2_expt_raw           (retire_xx_ex2_expt_raw          ),
  .rtu_cp0_bus_error                (rtu_cp0_bus_error               ),
  .rtu_cp0_epc                      (rtu_cp0_epc                     ),
  .rtu_cp0_ex1_dbg_cancel           (rtu_cp0_ex1_dbg_cancel          ),
  .rtu_cp0_expt_mtval               (rtu_cp0_expt_mtval              ),
  .rtu_cp0_int_level                (rtu_cp0_int_level               ),
  .rtu_cp0_int_vld_raw              (rtu_cp0_int_vld_raw             ),
  .rtu_cp0_nmi_vld                  (rtu_cp0_nmi_vld                 ),
  .rtu_had_data_bkpta_vld           (rtu_had_data_bkpta_vld          ),
  .rtu_had_data_bkptb_vld           (rtu_had_data_bkptb_vld          ),
  .rtu_had_data_bkptc_vld           (rtu_had_data_bkptc_vld          ),
  .rtu_had_data_bkptd_vld           (rtu_had_data_bkptd_vld          ),
  .rtu_had_data_bkpte_vld           (rtu_had_data_bkpte_vld          ),
  .rtu_had_dbg_disable_for_tee      (rtu_had_dbg_disable_for_tee     ),
  .rtu_had_inst_bkpta_vld           (rtu_had_inst_bkpta_vld          ),
  .rtu_had_inst_bkptb_vld           (rtu_had_inst_bkptb_vld          ),
  .rtu_had_inst_bkptc_vld           (rtu_had_inst_bkptc_vld          ),
  .rtu_had_inst_bkptd_vld           (rtu_had_inst_bkptd_vld          ),
  .rtu_had_inst_bkpte_vld           (rtu_had_inst_bkpte_vld          ),
  .rtu_had_inst_ld                  (rtu_had_inst_ld                 ),
  .rtu_had_int_ack                  (rtu_had_int_ack                 ),
  .rtu_had_rst_dbgreq_ack           (rtu_had_rst_dbgreq_ack          ),
  .rtu_had_xx_bkpt_inst             (rtu_had_xx_bkpt_inst            ),
  .rtu_had_xx_chgflow               (rtu_had_xx_chgflow              ),
  .rtu_had_xx_dbg_ack_pc            (rtu_had_xx_dbg_ack_pc           ),
  .rtu_had_xx_next_pc               (rtu_had_xx_next_pc              ),
  .rtu_had_xx_retire                (rtu_had_xx_retire               ),
  .rtu_had_xx_retire_normal         (rtu_had_xx_retire_normal        ),
  .rtu_had_xx_retire_normal_for_dbg (rtu_had_xx_retire_normal_for_dbg),
  .rtu_had_xx_retire_pc             (rtu_had_xx_retire_pc            ),
  .rtu_had_xx_split                 (rtu_had_xx_split                ),
  .rtu_hpcp_retire_inst_vld         (rtu_hpcp_retire_inst_vld        ),
  .rtu_idu_id_cancel                (rtu_idu_id_cancel               ),
  .rtu_idu_id_stall                 (rtu_idu_id_stall                ),
  .rtu_idu_int_vld_raw              (rtu_idu_int_vld_raw             ),
  .rtu_idu_late_flush               (rtu_idu_late_flush              ),
  .rtu_ifu_chgflow_pc               (rtu_ifu_chgflow_pc              ),
  .rtu_ifu_chgflow_vld              (rtu_ifu_chgflow_vld             ),
  .rtu_ifu_xx_fe_flush              (rtu_ifu_xx_fe_flush             ),
  .rtu_ifu_xx_fe_flush_gate         (rtu_ifu_xx_fe_flush_gate        ),
  .rtu_lsu_async_expt_ack           (rtu_lsu_async_expt_ack          ),
  .rtu_lsu_ex1_cancel               (rtu_lsu_ex1_cancel              ),
  .rtu_lsu_expt_ack                 (rtu_lsu_expt_ack                ),
  .rtu_lsu_expt_exit                (rtu_lsu_expt_exit               ),
  .rtu_pad_inst_retire              (rtu_pad_inst_retire             ),
  .rtu_pad_inst_split               (rtu_pad_inst_split              ),
  .rtu_pad_retire_pc                (rtu_pad_retire_pc               ),
  .rtu_xx_ex1_cancel                (rtu_xx_ex1_cancel               ),
  .rtu_xx_ex2_cancel                (rtu_xx_ex2_cancel               ),
  .rtu_xx_no_op                     (rtu_xx_no_op                    ),
  .rtu_yy_xx_async_flush            (rtu_yy_xx_async_flush           ),
  .rtu_yy_xx_dbgon                  (rtu_yy_xx_dbgon                 ),
  .rtu_yy_xx_expt_int               (rtu_yy_xx_expt_int              ),
  .rtu_yy_xx_expt_vec               (rtu_yy_xx_expt_vec              ),
  .rtu_yy_xx_expt_vld               (rtu_yy_xx_expt_vld              ),
  .rtu_yy_xx_expt_vld_gate          (rtu_yy_xx_expt_vld_gate         ),
  .rtu_yy_xx_flush                  (rtu_yy_xx_flush                 ),
  .rtu_yy_xx_int_hv                 (rtu_yy_xx_int_hv                ),
  .rtu_yy_xx_retire                 (rtu_yy_xx_retire                ),
  .rtu_yy_xx_tail_int_vld           (rtu_yy_xx_tail_int_vld          ),
  .wb_retire_wb_no_op               (wb_retire_wb_no_op              )
);

// &Force("output", "rtu_yy_xx_dbgon"); @29
// &Force("output", "rtu_yy_xx_flush"); @30
// &Force("output", "rtu_yy_xx_expt_int"); @31

// &Instance("pa_rtu_rbus"); @33
pa_rtu_rbus  x_pa_rtu_rbus (
  .cp0_rtu_chgflw_pc             (cp0_rtu_chgflw_pc            ),
  .cp0_rtu_chgflw_vld            (cp0_rtu_chgflw_vld           ),
  .cp0_rtu_ex1_cmplt             (cp0_rtu_ex1_cmplt            ),
  .cp0_rtu_ex1_data              (cp0_rtu_ex1_data             ),
  .cp0_rtu_ex1_expt_vec          (cp0_rtu_ex1_expt_vec         ),
  .cp0_rtu_ex1_expt_vld          (cp0_rtu_ex1_expt_vld         ),
  .cp0_rtu_ex1_flush             (cp0_rtu_ex1_flush            ),
  .cp0_rtu_ex1_inst_bkpt         (cp0_rtu_ex1_inst_bkpt        ),
  .cp0_rtu_ex1_inst_ebreak       (cp0_rtu_ex1_inst_ebreak      ),
  .cp0_rtu_ex1_inst_mret         (cp0_rtu_ex1_inst_mret        ),
  .cp0_rtu_ex1_stall             (cp0_rtu_ex1_stall            ),
  .cp0_rtu_ex1_wb_preg           (cp0_rtu_ex1_wb_preg          ),
  .cp0_rtu_ex1_wb_vld            (cp0_rtu_ex1_wb_vld           ),
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .cpurst_b                      (cpurst_b                     ),
  .forever_cpuclk                (forever_cpuclk               ),
  .had_rtu_ex1_bkpt_potential    (had_rtu_ex1_bkpt_potential   ),
  .had_rtu_ex1_trace_potential   (had_rtu_ex1_trace_potential  ),
  .idu_rtu_ex1_dst_vld           (idu_rtu_ex1_dst_vld          ),
  .idu_rtu_ex1_inst_vld          (idu_rtu_ex1_inst_vld         ),
  .idu_rtu_ex1_ipop_int_mask     (idu_rtu_ex1_ipop_int_mask    ),
  .idu_rtu_ex1_ipush_mie_en      (idu_rtu_ex1_ipush_mie_en     ),
  .idu_rtu_ex1_ipush_spec_fail   (idu_rtu_ex1_ipush_spec_fail  ),
  .idu_rtu_ex1_lsu_sel           (idu_rtu_ex1_lsu_sel          ),
  .idu_rtu_ex1_tail_int_vld      (idu_rtu_ex1_tail_int_vld     ),
  .idu_rtu_ipush_spec            (idu_rtu_ipush_spec           ),
  .idu_rtu_tail_fail             (idu_rtu_tail_fail            ),
  .idu_xx_ex1_warm_up            (idu_xx_ex1_warm_up           ),
  .ifu_xx_warm_up_clk            (ifu_xx_warm_up_clk           ),
  .int_rbus_ex1_int_vld          (int_rbus_ex1_int_vld         ),
  .int_rbus_ex1_int_vld_gate     (int_rbus_ex1_int_vld_gate    ),
  .int_rbus_ex1_nmi_req          (int_rbus_ex1_nmi_req         ),
  .int_rbus_int_hv               (int_rbus_int_hv              ),
  .int_xx_int_id                 (int_xx_int_id                ),
  .int_xx_int_lv                 (int_xx_int_lv                ),
  .iu_rtu_div_ex1_stall          (iu_rtu_div_ex1_stall         ),
  .iu_rtu_ex1_alu_cmplt          (iu_rtu_ex1_alu_cmplt         ),
  .iu_rtu_ex1_alu_data           (iu_rtu_ex1_alu_data          ),
  .iu_rtu_ex1_bju_chgflw_vld     (iu_rtu_ex1_bju_chgflw_vld    ),
  .iu_rtu_ex1_bju_cmplt          (iu_rtu_ex1_bju_cmplt         ),
  .iu_rtu_ex1_bju_cmplt_dp       (iu_rtu_ex1_bju_cmplt_dp      ),
  .iu_rtu_ex1_bju_data           (iu_rtu_ex1_bju_data          ),
  .iu_rtu_ex1_bju_stall          (iu_rtu_ex1_bju_stall         ),
  .iu_rtu_ex1_bju_wb_vld         (iu_rtu_ex1_bju_wb_vld        ),
  .iu_rtu_ex1_branch_inst        (iu_rtu_ex1_branch_inst       ),
  .iu_rtu_ex1_cur_pc             (iu_rtu_ex1_cur_pc            ),
  .iu_rtu_ex1_div_cmplt          (iu_rtu_ex1_div_cmplt         ),
  .iu_rtu_ex1_div_data           (iu_rtu_ex1_div_data          ),
  .iu_rtu_ex1_div_wb_vld         (iu_rtu_ex1_div_wb_vld        ),
  .iu_rtu_ex1_lsu_wb_data        (iu_rtu_ex1_lsu_wb_data       ),
  .iu_rtu_ex1_lsu_wb_preg        (iu_rtu_ex1_lsu_wb_preg       ),
  .iu_rtu_ex1_lsu_wb_vld         (iu_rtu_ex1_lsu_wb_vld        ),
  .iu_rtu_ex1_mul_cmplt          (iu_rtu_ex1_mul_cmplt         ),
  .iu_rtu_ex1_next_pc            (iu_rtu_ex1_next_pc           ),
  .iu_rtu_ex1_split_inst         (iu_rtu_ex1_split_inst        ),
  .iu_rtu_ex1_wb_preg            (iu_rtu_ex1_wb_preg           ),
  .iu_rtu_ex1_wb_vld             (iu_rtu_ex1_wb_vld            ),
  .iu_rtu_ex2_chgflw_pc          (iu_rtu_ex2_chgflw_pc         ),
  .iu_rtu_ex2_chgflw_vld         (iu_rtu_ex2_chgflw_vld        ),
  .iu_rtu_ex2_div_data           (iu_rtu_ex2_div_data          ),
  .iu_rtu_ex2_div_preg           (iu_rtu_ex2_div_preg          ),
  .iu_rtu_ex2_div_wb_vld         (iu_rtu_ex2_div_wb_vld        ),
  .iu_rtu_ex2_mul_wb_data        (iu_rtu_ex2_mul_wb_data       ),
  .iu_rtu_ex2_mul_wb_preg        (iu_rtu_ex2_mul_wb_preg       ),
  .lsu_rtu_async_mtval           (lsu_rtu_async_mtval          ),
  .lsu_rtu_ex1_bkpta_trap        (lsu_rtu_ex1_bkpta_trap       ),
  .lsu_rtu_ex1_bkptb_trap        (lsu_rtu_ex1_bkptb_trap       ),
  .lsu_rtu_ex1_bkptc_trap        (lsu_rtu_ex1_bkptc_trap       ),
  .lsu_rtu_ex1_bkptd_trap        (lsu_rtu_ex1_bkptd_trap       ),
  .lsu_rtu_ex1_bkpte_trap        (lsu_rtu_ex1_bkpte_trap       ),
  .lsu_rtu_ex1_cmplt             (lsu_rtu_ex1_cmplt            ),
  .lsu_rtu_ex1_cmplt_dp          (lsu_rtu_ex1_cmplt_dp         ),
  .lsu_rtu_ex1_expt_vec          (lsu_rtu_ex1_expt_vec         ),
  .lsu_rtu_ex1_expt_vld          (lsu_rtu_ex1_expt_vld         ),
  .lsu_rtu_ex1_inst_ld           (lsu_rtu_ex1_inst_ld          ),
  .lsu_rtu_ex1_mtval             (lsu_rtu_ex1_mtval            ),
  .lsu_rtu_ex1_stall             (lsu_rtu_ex1_stall            ),
  .lsu_rtu_ex2_data              (lsu_rtu_ex2_data             ),
  .lsu_rtu_ex2_data_vld          (lsu_rtu_ex2_data_vld         ),
  .lsu_rtu_ex2_data_vld_gate     (lsu_rtu_ex2_data_vld_gate    ),
  .lsu_rtu_ex2_dest_reg          (lsu_rtu_ex2_dest_reg         ),
  .lsu_rtu_ex2_stall             (lsu_rtu_ex2_stall            ),
  .lsu_rtu_ex2_stall_gate        (lsu_rtu_ex2_stall_gate       ),
  .lsu_rtu_pmp_deny              (lsu_rtu_pmp_deny             ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .rbus_retire_ex2_branch_inst   (rbus_retire_ex2_branch_inst  ),
  .rbus_retire_ex2_chgflw_vld    (rbus_retire_ex2_chgflw_vld   ),
  .rbus_retire_ex2_cur_pc        (rbus_retire_ex2_cur_pc       ),
  .rbus_retire_ex2_data_mbkpta   (rbus_retire_ex2_data_mbkpta  ),
  .rbus_retire_ex2_data_mbkptb   (rbus_retire_ex2_data_mbkptb  ),
  .rbus_retire_ex2_data_mbkptc   (rbus_retire_ex2_data_mbkptc  ),
  .rbus_retire_ex2_data_mbkptd   (rbus_retire_ex2_data_mbkptd  ),
  .rbus_retire_ex2_data_mbkpte   (rbus_retire_ex2_data_mbkpte  ),
  .rbus_retire_ex2_flush         (rbus_retire_ex2_flush        ),
  .rbus_retire_ex2_inst_dbg_hw   (rbus_retire_ex2_inst_dbg_hw  ),
  .rbus_retire_ex2_inst_ebreak   (rbus_retire_ex2_inst_ebreak  ),
  .rbus_retire_ex2_inst_expt     (rbus_retire_ex2_inst_expt    ),
  .rbus_retire_ex2_inst_int      (rbus_retire_ex2_inst_int     ),
  .rbus_retire_ex2_inst_ld       (rbus_retire_ex2_inst_ld      ),
  .rbus_retire_ex2_inst_mbkpta   (rbus_retire_ex2_inst_mbkpta  ),
  .rbus_retire_ex2_inst_mbkptb   (rbus_retire_ex2_inst_mbkptb  ),
  .rbus_retire_ex2_inst_mbkptc   (rbus_retire_ex2_inst_mbkptc  ),
  .rbus_retire_ex2_inst_mbkptd   (rbus_retire_ex2_inst_mbkptd  ),
  .rbus_retire_ex2_inst_mbkpte   (rbus_retire_ex2_inst_mbkpte  ),
  .rbus_retire_ex2_inst_mret     (rbus_retire_ex2_inst_mret    ),
  .rbus_retire_ex2_inst_nmi      (rbus_retire_ex2_inst_nmi     ),
  .rbus_retire_ex2_inst_tail_int (rbus_retire_ex2_inst_tail_int),
  .rbus_retire_ex2_int_hv        (rbus_retire_ex2_int_hv       ),
  .rbus_retire_ex2_int_lv        (rbus_retire_ex2_int_lv       ),
  .rbus_retire_ex2_ipop_int      (rbus_retire_ex2_ipop_int     ),
  .rbus_retire_ex2_mtval         (rbus_retire_ex2_mtval        ),
  .rbus_retire_ex2_next_pc       (rbus_retire_ex2_next_pc      ),
  .rbus_retire_ex2_retire_vld    (rbus_retire_ex2_retire_vld   ),
  .rbus_retire_ex2_spec_inst     (rbus_retire_ex2_spec_inst    ),
  .rbus_retire_ex2_split_inst    (rbus_retire_ex2_split_inst   ),
  .rbus_retire_ex2_stall         (rbus_retire_ex2_stall        ),
  .rbus_retire_ex2_stall_gate    (rbus_retire_ex2_stall_gate   ),
  .rbus_retire_ex2_trap_vec      (rbus_retire_ex2_trap_vec     ),
  .rbus_retire_id_stall          (rbus_retire_id_stall         ),
  .rbus_wb_ex2_lsu_wb_data       (rbus_wb_ex2_lsu_wb_data      ),
  .rbus_wb_ex2_lsu_wb_reg        (rbus_wb_ex2_lsu_wb_reg       ),
  .rbus_wb_ex2_lsu_wb_vld_gate   (rbus_wb_ex2_lsu_wb_vld_gate  ),
  .rbus_wb_ex2_rbus_wb_data      (rbus_wb_ex2_rbus_wb_data     ),
  .rbus_wb_ex2_rbus_wb_preg      (rbus_wb_ex2_rbus_wb_preg     ),
  .rbus_wb_ex2_rbus_wb_vld_gate  (rbus_wb_ex2_rbus_wb_vld_gate ),
  .rbus_wb_ex2_warm_up           (rbus_wb_ex2_warm_up          ),
  .rbus_xx_ex1_split_inst        (rbus_xx_ex1_split_inst       ),
  .rbus_xx_ex2_lsu_wb_vld        (rbus_xx_ex2_lsu_wb_vld       ),
  .rbus_xx_ex2_rbus_wb_vld       (rbus_xx_ex2_rbus_wb_vld      ),
  .retire_rbus_dbg_stall         (retire_rbus_dbg_stall        ),
  .retire_rbus_ex1_cancel        (retire_rbus_ex1_cancel       ),
  .retire_rbus_ex1_inst_dbg_hw   (retire_rbus_ex1_inst_dbg_hw  ),
  .retire_rbus_ex2_wb_cancel     (retire_rbus_ex2_wb_cancel    ),
  .retire_xx_ex2_expt_raw        (retire_xx_ex2_expt_raw       ),
  .rtu_clic_warm_up              (rtu_clic_warm_up             ),
  .rtu_cp0_mie_en                (rtu_cp0_mie_en               ),
  .rtu_cp0_mie_en_gate           (rtu_cp0_mie_en_gate          ),
  .rtu_had_ex1_data_bkpta_vld    (rtu_had_ex1_data_bkpta_vld   ),
  .rtu_had_ex1_data_bkptb_vld    (rtu_had_ex1_data_bkptb_vld   ),
  .rtu_had_ex1_data_bkptc_vld    (rtu_had_ex1_data_bkptc_vld   ),
  .rtu_had_ex1_data_bkptd_vld    (rtu_had_ex1_data_bkptd_vld   ),
  .rtu_had_ex1_data_bkpte_vld    (rtu_had_ex1_data_bkpte_vld   ),
  .rtu_had_ex1_inst_bkpta_vld    (rtu_had_ex1_inst_bkpta_vld   ),
  .rtu_had_ex1_inst_bkptb_vld    (rtu_had_ex1_inst_bkptb_vld   ),
  .rtu_had_ex1_inst_bkptc_vld    (rtu_had_ex1_inst_bkptc_vld   ),
  .rtu_had_ex1_inst_bkptd_vld    (rtu_had_ex1_inst_bkptd_vld   ),
  .rtu_had_ex1_inst_bkpte_vld    (rtu_had_ex1_inst_bkpte_vld   ),
  .rtu_had_ex1_inst_ld           (rtu_had_ex1_inst_ld          ),
  .rtu_had_ex1_spec_fail         (rtu_had_ex1_spec_fail        ),
  .rtu_had_ex1_split             (rtu_had_ex1_split            ),
  .rtu_idu_ex1_fwd_data          (rtu_idu_ex1_fwd_data         ),
  .rtu_idu_ex1_fwd_vld           (rtu_idu_ex1_fwd_vld          ),
  .rtu_idu_ex1_stall             (rtu_idu_ex1_stall            ),
  .rtu_idu_ex2_lsu_fwd_data      (rtu_idu_ex2_lsu_fwd_data     ),
  .rtu_idu_ex2_lsu_fwd_preg      (rtu_idu_ex2_lsu_fwd_preg     ),
  .rtu_idu_ex2_lsu_fwd_vld       (rtu_idu_ex2_lsu_fwd_vld      ),
  .rtu_idu_ex2_rbus_fwd_data     (rtu_idu_ex2_rbus_fwd_data    ),
  .rtu_idu_ex2_rbus_fwd_preg     (rtu_idu_ex2_rbus_fwd_preg    ),
  .rtu_idu_ex2_rbus_fwd_vld      (rtu_idu_ex2_rbus_fwd_vld     ),
  .rtu_iu_ex1_stall              (rtu_iu_ex1_stall             ),
  .rtu_iu_ex2_cur_pc             (rtu_iu_ex2_cur_pc            ),
  .rtu_iu_ex2_div_wb_en          (rtu_iu_ex2_div_wb_en         ),
  .rtu_iu_ex2_stall              (rtu_iu_ex2_stall             ),
  .rtu_lsu_ex2_stall             (rtu_lsu_ex2_stall            ),
  .rtu_yy_xx_flush               (rtu_yy_xx_flush              )
);


// &Instance("pa_rtu_wb"); @35
pa_rtu_wb  x_pa_rtu_wb (
  .cp0_yy_clk_en                (cp0_yy_clk_en               ),
  .cpurst_b                     (cpurst_b                    ),
  .forever_cpuclk               (forever_cpuclk              ),
  .ifu_xx_warm_up_clk           (ifu_xx_warm_up_clk          ),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        ),
  .rbus_wb_ex2_lsu_wb_data      (rbus_wb_ex2_lsu_wb_data     ),
  .rbus_wb_ex2_lsu_wb_reg       (rbus_wb_ex2_lsu_wb_reg      ),
  .rbus_wb_ex2_lsu_wb_vld_gate  (rbus_wb_ex2_lsu_wb_vld_gate ),
  .rbus_wb_ex2_rbus_wb_data     (rbus_wb_ex2_rbus_wb_data    ),
  .rbus_wb_ex2_rbus_wb_preg     (rbus_wb_ex2_rbus_wb_preg    ),
  .rbus_wb_ex2_rbus_wb_vld_gate (rbus_wb_ex2_rbus_wb_vld_gate),
  .rbus_wb_ex2_warm_up          (rbus_wb_ex2_warm_up         ),
  .rbus_xx_ex2_lsu_wb_vld       (rbus_xx_ex2_lsu_wb_vld      ),
  .rbus_xx_ex2_rbus_wb_vld      (rbus_xx_ex2_rbus_wb_vld     ),
  .rtu_had_xx_data              (rtu_had_xx_data             ),
  .rtu_had_xx_data_vld          (rtu_had_xx_data_vld         ),
  .rtu_idu_wb_lsu_data          (rtu_idu_wb_lsu_data         ),
  .rtu_idu_wb_lsu_preg          (rtu_idu_wb_lsu_preg         ),
  .rtu_idu_wb_lsu_vld           (rtu_idu_wb_lsu_vld          ),
  .rtu_idu_wb_rbus_data         (rtu_idu_wb_rbus_data        ),
  .rtu_idu_wb_rbus_preg         (rtu_idu_wb_rbus_preg        ),
  .rtu_idu_wb_rbus_vld          (rtu_idu_wb_rbus_vld         ),
  .rtu_idu_wb_warm_up           (rtu_idu_wb_warm_up          ),
  .rtu_lsu_wb_fwd_data          (rtu_lsu_wb_fwd_data         ),
  .rtu_lsu_wb_fwd_fls           (rtu_lsu_wb_fwd_fls          ),
  .rtu_lsu_wb_fwd_reg           (rtu_lsu_wb_fwd_reg          ),
  .rtu_lsu_wb_fwd_vld           (rtu_lsu_wb_fwd_vld          ),
  .rtu_pad_wb0_data             (rtu_pad_wb0_data            ),
  .rtu_pad_wb0_preg             (rtu_pad_wb0_preg            ),
  .rtu_pad_wb0_vld              (rtu_pad_wb0_vld             ),
  .rtu_pad_wb1_data             (rtu_pad_wb1_data            ),
  .rtu_pad_wb1_preg             (rtu_pad_wb1_preg            ),
  .rtu_pad_wb1_vld              (rtu_pad_wb1_vld             ),
  .rtu_yy_xx_dbgon              (rtu_yy_xx_dbgon             ),
  .wb_retire_wb_no_op           (wb_retire_wb_no_op          )
);


// &Instance("pa_rtu_int"); @37
pa_rtu_int  x_pa_rtu_int (
  .clic_cpu_int_hv           (clic_cpu_int_hv          ),
  .clic_cpu_int_id           (clic_cpu_int_id          ),
  .clic_cpu_int_il           (clic_cpu_int_il          ),
  .clic_cpu_int_priv         (clic_cpu_int_priv        ),
  .cp0_rtu_ex1_inst_mret     (cp0_rtu_ex1_inst_mret    ),
  .cp0_rtu_in_nmi            (cp0_rtu_in_nmi           ),
  .cp0_rtu_int_id            (cp0_rtu_int_id           ),
  .cp0_rtu_int_level         (cp0_rtu_int_level        ),
  .cp0_rtu_int_mode          (cp0_rtu_int_mode         ),
  .cp0_rtu_mie               (cp0_rtu_mie              ),
  .cp0_rtu_mnxti_vld         (cp0_rtu_mnxti_vld        ),
  .cp0_rtu_mpil              (cp0_rtu_mpil             ),
  .cp0_rtu_pm_bypass         (cp0_rtu_pm_bypass        ),
  .cp0_rtu_wfe_en            (cp0_rtu_wfe_en           ),
  .cpu_clic_curid            (cpu_clic_curid           ),
  .cpu_clic_int_exit         (cpu_clic_int_exit        ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_rtu_xx_tme            (had_rtu_xx_tme           ),
  .idu_rtu_ex1_ipop_int_mask (idu_rtu_ex1_ipop_int_mask),
  .idu_rtu_ex1_ipush_mie_en  (idu_rtu_ex1_ipush_mie_en ),
  .idu_yy_xx_tail_ack        (idu_yy_xx_tail_ack       ),
  .int_lockup_nmi_req        (int_lockup_nmi_req       ),
  .int_rbus_ex1_int_vld      (int_rbus_ex1_int_vld     ),
  .int_rbus_ex1_int_vld_gate (int_rbus_ex1_int_vld_gate),
  .int_rbus_ex1_nmi_req      (int_rbus_ex1_nmi_req     ),
  .int_rbus_int_hv           (int_rbus_int_hv          ),
  .int_retire_pending_int_hv (int_retire_pending_int_hv),
  .int_xx_int_id             (int_xx_int_id            ),
  .int_xx_int_lv             (int_xx_int_lv            ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .rbus_xx_ex1_split_inst    (rbus_xx_ex1_split_inst   ),
  .retire_int_nmi_ack        (retire_int_nmi_ack       ),
  .retire_xx_ex2_expt_raw    (retire_xx_ex2_expt_raw   ),
  .rtu_cp0_mnxti_pending_vld (rtu_cp0_mnxti_pending_vld),
  .rtu_cp0_pending_int_hv    (rtu_cp0_pending_int_hv   ),
  .rtu_cp0_pending_int_id    (rtu_cp0_pending_int_id   ),
  .rtu_cp0_pending_int_level (rtu_cp0_pending_int_level),
  .rtu_cp0_wk_int            (rtu_cp0_wk_int           ),
  .rtu_idu_id_tail_int_vld   (rtu_idu_id_tail_int_vld  ),
  .rtu_yy_xx_expt_int        (rtu_yy_xx_expt_int       ),
  .sysio_rtu_nmi_int         (sysio_rtu_nmi_int        ),
  .sysio_rtu_wk_event        (sysio_rtu_wk_event       )
);


// &Instance("pa_rtu_lockup"); @39
pa_rtu_lockup  x_pa_rtu_lockup (
  .cp0_rtu_in_expt          (cp0_rtu_in_expt         ),
  .cp0_rtu_in_nmi           (cp0_rtu_in_nmi          ),
  .cpurst_b                 (cpurst_b                ),
  .ifu_rtu_lockup_ack       (ifu_rtu_lockup_ack      ),
  .int_lockup_nmi_req       (int_lockup_nmi_req      ),
  .lockup_clk               (lockup_clk              ),
  .lockup_clk_en            (lockup_clk_en           ),
  .lockup_retire_dbg_vld    (lockup_retire_dbg_vld   ),
  .lockup_retire_nmi_vld    (lockup_retire_nmi_vld   ),
  .retire_lockup_dbg_req    (retire_lockup_dbg_req   ),
  .retire_lockup_dbgon      (retire_lockup_dbgon     ),
  .retire_lockup_expt_vld   (retire_lockup_expt_vld  ),
  .retire_lockup_nmi_exit   (retire_lockup_nmi_exit  ),
  .retire_lockup_retire_pc  (retire_lockup_retire_pc ),
  .retire_lockup_retire_vld (retire_lockup_retire_vld),
  .rtu_cp0_lockup_clr       (rtu_cp0_lockup_clr      ),
  .rtu_cp0_lockup_vld       (rtu_cp0_lockup_vld      ),
  .rtu_ifu_lockup_expt_vld  (rtu_ifu_lockup_expt_vld ),
  .rtu_ifu_lockup_mask      (rtu_ifu_lockup_mask     ),
  .rtu_ifu_lockup_req       (rtu_ifu_lockup_req      ),
  .rtu_sysio_lockup_on      (rtu_sysio_lockup_on     )
);




// &ModuleEnd; @59
endmodule
























// &ModuleBeg; @23
module pa_rtu_wb(
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  ifu_xx_warm_up_clk,
  pad_yy_gate_clk_en_b,
  rbus_wb_ex2_lsu_wb_data,
  rbus_wb_ex2_lsu_wb_reg,
  rbus_wb_ex2_lsu_wb_vld_gate,
  rbus_wb_ex2_rbus_wb_data,
  rbus_wb_ex2_rbus_wb_preg,
  rbus_wb_ex2_rbus_wb_vld_gate,
  rbus_wb_ex2_warm_up,
  rbus_xx_ex2_lsu_wb_vld,
  rbus_xx_ex2_rbus_wb_vld,
  rtu_had_xx_data,
  rtu_had_xx_data_vld,
  rtu_idu_wb_lsu_data,
  rtu_idu_wb_lsu_preg,
  rtu_idu_wb_lsu_vld,
  rtu_idu_wb_rbus_data,
  rtu_idu_wb_rbus_preg,
  rtu_idu_wb_rbus_vld,
  rtu_idu_wb_warm_up,
  rtu_lsu_wb_fwd_data,
  rtu_lsu_wb_fwd_fls,
  rtu_lsu_wb_fwd_reg,
  rtu_lsu_wb_fwd_vld,
  rtu_pad_wb0_data,
  rtu_pad_wb0_preg,
  rtu_pad_wb0_vld,
  rtu_pad_wb1_data,
  rtu_pad_wb1_preg,
  rtu_pad_wb1_vld,
  rtu_yy_xx_dbgon,
  wb_retire_wb_no_op
);

// &Ports; @24
input           cp0_yy_clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           ifu_xx_warm_up_clk;
input           pad_yy_gate_clk_en_b;
input   [31:0]  rbus_wb_ex2_lsu_wb_data;
input   [5 :0]  rbus_wb_ex2_lsu_wb_reg;
input           rbus_wb_ex2_lsu_wb_vld_gate;
input   [31:0]  rbus_wb_ex2_rbus_wb_data;
input   [5 :0]  rbus_wb_ex2_rbus_wb_preg;
input           rbus_wb_ex2_rbus_wb_vld_gate;
input           rbus_wb_ex2_warm_up;
input           rbus_xx_ex2_lsu_wb_vld;
input           rbus_xx_ex2_rbus_wb_vld;
input           rtu_yy_xx_dbgon;
output  [31:0]  rtu_had_xx_data;
output          rtu_had_xx_data_vld;
output  [31:0]  rtu_idu_wb_lsu_data;
output  [5 :0]  rtu_idu_wb_lsu_preg;
output          rtu_idu_wb_lsu_vld;
output  [31:0]  rtu_idu_wb_rbus_data;
output  [5 :0]  rtu_idu_wb_rbus_preg;
output          rtu_idu_wb_rbus_vld;
output          rtu_idu_wb_warm_up;
output  [31:0]  rtu_lsu_wb_fwd_data;
output          rtu_lsu_wb_fwd_fls;
output  [5 :0]  rtu_lsu_wb_fwd_reg;
output          rtu_lsu_wb_fwd_vld;
output  [31:0]  rtu_pad_wb0_data;
output  [5 :0]  rtu_pad_wb0_preg;
output          rtu_pad_wb0_vld;
output  [31:0]  rtu_pad_wb1_data;
output  [5 :0]  rtu_pad_wb1_preg;
output          rtu_pad_wb1_vld;
output          wb_retire_wb_no_op;

// &Regs; @25
reg             wb_lsu_wb_vld;
reg             wb_rbus_wb_vld;
reg             wb_warm_up;
reg     [31:0]  wb_wb_lsu_data_l;
reg     [5 :0]  wb_wb_lsu_reg;
reg     [31:0]  wb_wb_rbus_data;
reg     [5 :0]  wb_wb_rbus_preg;

// &Wires; @26
wire            cp0_yy_clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire    [31:0]  fpu_rtu_ex3_wb_data;
wire    [4 :0]  fpu_rtu_ex3_wb_preg;
wire            fpu_rtu_ex3_wb_vld;
wire            ifu_xx_warm_up_clk;
wire            lsu_wb_clk;
wire            lsu_wb_clk_en;
wire            pad_yy_gate_clk_en_b;
wire            rbus_wb_clk;
wire            rbus_wb_clk_en;
wire    [31:0]  rbus_wb_ex2_lsu_wb_data;
wire    [5 :0]  rbus_wb_ex2_lsu_wb_reg;
wire            rbus_wb_ex2_lsu_wb_vld_gate;
wire    [31:0]  rbus_wb_ex2_rbus_wb_data;
wire    [5 :0]  rbus_wb_ex2_rbus_wb_preg;
wire            rbus_wb_ex2_rbus_wb_vld_gate;
wire            rbus_wb_ex2_warm_up;
wire            rbus_xx_ex2_lsu_wb_vld;
wire            rbus_xx_ex2_rbus_wb_vld;
wire    [31:0]  rtu_had_xx_data;
wire            rtu_had_xx_data_vld;
wire    [31:0]  rtu_idu_wb_lsu_data;
wire    [5 :0]  rtu_idu_wb_lsu_preg;
wire            rtu_idu_wb_lsu_vld;
wire    [31:0]  rtu_idu_wb_rbus_data;
wire    [5 :0]  rtu_idu_wb_rbus_preg;
wire            rtu_idu_wb_rbus_vld;
wire            rtu_idu_wb_warm_up;
wire    [31:0]  rtu_lsu_wb_fwd_data;
wire            rtu_lsu_wb_fwd_fls;
wire    [5 :0]  rtu_lsu_wb_fwd_reg;
wire            rtu_lsu_wb_fwd_vld;
wire    [31:0]  rtu_pad_wb0_data;
wire    [5 :0]  rtu_pad_wb0_preg;
wire            rtu_pad_wb0_vld;
wire    [31:0]  rtu_pad_wb1_data;
wire    [5 :0]  rtu_pad_wb1_preg;
wire            rtu_pad_wb1_vld;
wire            rtu_yy_xx_dbgon;
wire            wb_clk;
wire            wb_clk_en;
wire            wb_ex2_lsu_wb_vld;
wire            wb_ex2_lsu_wb_vld_gate;
wire            wb_ex2_rbus_wb_vld;
wire            wb_ex2_rbus_wb_vld_gate;
wire            wb_frbus_updt_vld;
wire            wb_lsu_preg_wb_vld;
wire            wb_retire_wb_no_op;
wire            wb_vld_updt;
wire            wb_vld_updt_gate;
wire    [31:0]  wb_wb0_data;
wire    [5 :0]  wb_wb0_preg;
wire            wb_wb0_vld;
wire    [31:0]  wb_wb1_data;
wire    [5 :0]  wb_wb1_preg;
wire            wb_wb1_vld;
wire    [31:0]  wb_wb_lsu_data;


parameter LSULEN = `FLEN;
parameter FLEN   = `FLEN;




assign wb_vld_updt_gate = wb_lsu_wb_vld
                       || wb_ex2_lsu_wb_vld_gate
                       || wb_rbus_wb_vld
                       || wb_ex2_rbus_wb_vld_gate
                       || wb_frbus_updt_vld
                       || rbus_wb_ex2_warm_up;

assign wb_vld_updt = wb_lsu_wb_vld  ^ wb_ex2_lsu_wb_vld
                  || wb_rbus_wb_vld ^ wb_ex2_rbus_wb_vld
                  || wb_frbus_updt_vld
                  || rbus_wb_ex2_warm_up;

assign wb_ex2_rbus_wb_vld = rbus_xx_ex2_rbus_wb_vld;
assign wb_ex2_rbus_wb_vld_gate = rbus_wb_ex2_rbus_wb_vld_gate;
assign wb_ex2_lsu_wb_vld  = rbus_xx_ex2_lsu_wb_vld;
assign wb_ex2_lsu_wb_vld_gate = rbus_wb_ex2_lsu_wb_vld_gate; // For ICG.

always @ (posedge wb_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    wb_rbus_wb_vld <= 1'b0;
    wb_lsu_wb_vld  <= 1'b0;
  end
  else if (wb_vld_updt) begin
    wb_rbus_wb_vld <= wb_ex2_rbus_wb_vld;
    wb_lsu_wb_vld  <= wb_ex2_lsu_wb_vld;
  end
end


always @ (posedge ifu_xx_warm_up_clk or negedge cpurst_b)
begin
  if (!cpurst_b) begin
    wb_warm_up <= 1'b0;
  end
  else begin
    wb_warm_up <= rbus_wb_ex2_warm_up;
  end
end




always @ (posedge rbus_wb_clk)
begin
  if (wb_ex2_rbus_wb_vld || rbus_wb_ex2_warm_up) begin
    wb_wb_rbus_preg[5:0]   <= rbus_wb_ex2_rbus_wb_preg[5:0];
    wb_wb_rbus_data[31:0]  <= rbus_wb_ex2_rbus_wb_data[31:0];
  end
end




always @ (posedge lsu_wb_clk)
begin
  if (wb_ex2_lsu_wb_vld || rbus_wb_ex2_warm_up) begin
    wb_wb_lsu_reg[5:0]         <= rbus_wb_ex2_lsu_wb_reg[5:0];
    wb_wb_lsu_data_l[31:0]     <= rbus_wb_ex2_lsu_wb_data[31:0];
  end
end

// &Instance("gated_clk_cell", "x_lsu_wb_h_clk"); @122
// &Connect(.clk_in      (forever_cpuclk), @123
//          .external_en (1'b0), @124
//          .global_en   (cp0_yy_clk_en), @125
//          .module_en   (1'b0), @126
//          .local_en    (lsu_wb_h_clk_en), @127
//          .clk_out     (lsu_wb_h_clk)); @128
assign wb_lsu_preg_wb_vld = wb_lsu_wb_vld;
assign wb_wb_lsu_data[LSULEN-1:0] = {wb_wb_lsu_data_l[31:0]};

assign rtu_lsu_wb_fwd_vld              = wb_lsu_wb_vld;
assign rtu_lsu_wb_fwd_reg[5:0]         = wb_wb_lsu_reg[5:0];
assign rtu_lsu_wb_fwd_fls              = 1'b0;
assign rtu_lsu_wb_fwd_data[LSULEN-1:0] = wb_wb_lsu_data[LSULEN-1:0];








assign wb_wb0_vld        = wb_rbus_wb_vld || fpu_rtu_ex3_wb_vld || wb_warm_up;
assign wb_wb0_preg[5:0]  = (fpu_rtu_ex3_wb_vld && !wb_rbus_wb_vld) ? {1'b0, fpu_rtu_ex3_wb_preg[4:0]}
                                                                   : wb_wb_rbus_preg[5:0];
assign wb_wb0_data[31:0] = (fpu_rtu_ex3_wb_vld && !wb_rbus_wb_vld) ? fpu_rtu_ex3_wb_data[31:0]
                                                                   : wb_wb_rbus_data[31:0];




assign wb_wb1_vld        = wb_lsu_preg_wb_vld;
assign wb_wb1_preg[5:0]  = wb_wb_lsu_reg[5:0];
assign wb_wb1_data[31:0] = wb_wb_lsu_data[31:0];

assign fpu_rtu_ex3_wb_vld = 1'b0;
assign fpu_rtu_ex3_wb_preg[4:0] = 5'b0;
assign fpu_rtu_ex3_wb_data[31:0] = 32'b0;




assign rtu_idu_wb_warm_up        = wb_warm_up;
assign rtu_idu_wb_lsu_vld        = wb_wb1_vld;
assign rtu_idu_wb_lsu_preg[5:0]  = wb_wb1_preg[5:0];
assign rtu_idu_wb_lsu_data[31:0] = wb_wb1_data[31:0];

assign rtu_idu_wb_rbus_vld        = wb_wb0_vld;
assign rtu_idu_wb_rbus_preg[5:0]  = wb_wb0_preg[5:0];
assign rtu_idu_wb_rbus_data[31:0] = wb_wb0_data[31:0];












assign rtu_had_xx_data_vld   = (wb_wb0_vld || wb_wb1_vld) && rtu_yy_xx_dbgon;
assign rtu_had_xx_data[31:0] = wb_wb0_vld ? wb_wb0_data[31:0]
                                          : wb_wb1_data[31:0];




assign rtu_pad_wb0_vld = wb_wb0_vld;

assign rtu_pad_wb0_preg[5:0]  = wb_wb0_preg[5:0];
assign rtu_pad_wb0_data[31:0] = wb_wb0_data[31:0];

assign rtu_pad_wb1_vld = wb_wb1_vld;

assign rtu_pad_wb1_preg[5:0]  = wb_wb1_preg[5:0];
assign rtu_pad_wb1_data[31:0] = wb_wb1_data[31:0];



assign wb_clk_en = wb_vld_updt_gate;
// &Instance("gated_clk_cell", "x_wb_clk"); @239
gated_clk_cell  x_wb_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (wb_clk              ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (wb_clk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @240
//          .external_en (1'b0), @241
//          .global_en   (cp0_yy_clk_en), @242
//          .module_en   (1'b0), @243
//          .local_en    (wb_clk_en), @244
//          .clk_out     (wb_clk)); @245

assign lsu_wb_clk_en = wb_ex2_lsu_wb_vld_gate
                    || rbus_wb_ex2_warm_up;
// &Instance("gated_clk_cell", "x_lsu_wb_clk"); @249
gated_clk_cell  x_lsu_wb_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lsu_wb_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (lsu_wb_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @250
//          .external_en (1'b0), @251
//          .global_en   (cp0_yy_clk_en), @252
//          .module_en   (1'b0), @253
//          .local_en    (lsu_wb_clk_en), @254
//          .clk_out     (lsu_wb_clk)); @255

assign rbus_wb_clk_en = wb_ex2_rbus_wb_vld_gate
                     || rbus_wb_ex2_warm_up;
// &Instance("gated_clk_cell", "x_rbus_wb_clk"); @259
gated_clk_cell  x_rbus_wb_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (rbus_wb_clk         ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (rbus_wb_clk_en      ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @260
//          .external_en (1'b0), @261
//          .global_en   (cp0_yy_clk_en), @262
//          .module_en   (1'b0), @263
//          .local_en    (rbus_wb_clk_en), @264
//          .clk_out     (rbus_wb_clk)); @265





// &Instance("gated_clk_cell", "x_frbus_wb_h_clk"); @314
// &Connect(.clk_in      (fpu_gated_cpuclk), @315
//          .external_en (1'b0), @316
//          .global_en   (cp0_yy_clk_en), @317
//          .module_en   (1'b0), @318
//          .local_en    (frbus_wb_h_clk_en), @319
//          .clk_out     (frbus_wb_h_clk)); @320
// &Instance("gated_clk_cell", "x_frbus_wb_clk"); @334
// &Connect(.clk_in      (fpu_gated_cpuclk), @335
//          .external_en (1'b0), @336
//          .global_en   (cp0_yy_clk_en), @337
//          .module_en   (1'b0), @338
//          .local_en    (frbus_wb_clk_en), @339
//          .clk_out     (frbus_wb_clk)); @340
assign wb_frbus_updt_vld = 1'b0;
assign wb_retire_wb_no_op = 1'b1;


// &ModuleEnd; @388
endmodule























// &ModuleBeg; @22
module pa_sahbl_top(
  bmu_sahbl_dbus_acc_deny,
  bmu_sahbl_dbus_addr,
  bmu_sahbl_dbus_burst,
  bmu_sahbl_dbus_lock,
  bmu_sahbl_dbus_lrsc,
  bmu_sahbl_dbus_prot,
  bmu_sahbl_dbus_req,
  bmu_sahbl_dbus_req_dp,
  bmu_sahbl_dbus_seq,
  bmu_sahbl_dbus_size,
  bmu_sahbl_dbus_wdata,
  bmu_sahbl_dbus_write,
  bmu_sahbl_had_acc_deny,
  bmu_sahbl_had_addr,
  bmu_sahbl_had_burst,
  bmu_sahbl_had_prot,
  bmu_sahbl_had_req,
  bmu_sahbl_had_req_dp,
  bmu_sahbl_had_seq,
  bmu_sahbl_had_size,
  bmu_sahbl_had_wdata,
  bmu_sahbl_had_write,
  bmu_sahbl_ibus_acc_deny,
  bmu_sahbl_ibus_addr,
  bmu_sahbl_ibus_burst,
  bmu_sahbl_ibus_prot,
  bmu_sahbl_ibus_req,
  bmu_sahbl_ibus_req_dp,
  bmu_sahbl_ibus_seq,
  bmu_sahbl_ibus_size,
  clk_en,
  cpurst_b,
  forever_cpuclk,
  lsu_biu_amo_pmp_deny,
  lsu_biu_async_expt_ack,
  lsu_xx_flush,
  lsu_xx_warm_up,
  pad_sahbl_hrdata,
  pad_sahbl_hready,
  pad_sahbl_hresp,
  pad_yy_gate_clk_en_b,
  sahbl_bmu_dbus_acc_err,
  sahbl_bmu_dbus_data,
  sahbl_bmu_dbus_grnt,
  sahbl_bmu_dbus_trans_cmplt,
  sahbl_bmu_had_acc_err,
  sahbl_bmu_had_data,
  sahbl_bmu_had_grnt,
  sahbl_bmu_had_trans_cmplt,
  sahbl_bmu_ibus_acc_err,
  sahbl_bmu_ibus_data,
  sahbl_bmu_ibus_grnt,
  sahbl_bmu_ibus_trans_cmplt,
  sahbl_pad_haddr,
  sahbl_pad_hburst,
  sahbl_pad_hlock,
  sahbl_pad_hprot,
  sahbl_pad_hsize,
  sahbl_pad_htrans,
  sahbl_pad_hwdata,
  sahbl_pad_hwrite,
  sahbl_sysio_idle,
  sysio_xx_halt_req
);

// &Ports; @23
input           bmu_sahbl_dbus_acc_deny;
input   [31:0]  bmu_sahbl_dbus_addr;
input   [2 :0]  bmu_sahbl_dbus_burst;
input           bmu_sahbl_dbus_lock;
input           bmu_sahbl_dbus_lrsc;
input   [3 :0]  bmu_sahbl_dbus_prot;
input           bmu_sahbl_dbus_req;
input           bmu_sahbl_dbus_req_dp;
input           bmu_sahbl_dbus_seq;
input   [1 :0]  bmu_sahbl_dbus_size;
input   [31:0]  bmu_sahbl_dbus_wdata;
input           bmu_sahbl_dbus_write;
input           bmu_sahbl_had_acc_deny;
input   [31:0]  bmu_sahbl_had_addr;
input   [2 :0]  bmu_sahbl_had_burst;
input   [3 :0]  bmu_sahbl_had_prot;
input           bmu_sahbl_had_req;
input           bmu_sahbl_had_req_dp;
input           bmu_sahbl_had_seq;
input   [1 :0]  bmu_sahbl_had_size;
input   [31:0]  bmu_sahbl_had_wdata;
input           bmu_sahbl_had_write;
input           bmu_sahbl_ibus_acc_deny;
input   [31:0]  bmu_sahbl_ibus_addr;
input   [2 :0]  bmu_sahbl_ibus_burst;
input   [3 :0]  bmu_sahbl_ibus_prot;
input           bmu_sahbl_ibus_req;
input           bmu_sahbl_ibus_req_dp;
input           bmu_sahbl_ibus_seq;
input   [1 :0]  bmu_sahbl_ibus_size;
input           clk_en;
input           cpurst_b;
input           forever_cpuclk;
input           lsu_biu_amo_pmp_deny;
input           lsu_biu_async_expt_ack;
input           lsu_xx_flush;
input           lsu_xx_warm_up;
input   [31:0]  pad_sahbl_hrdata;
input           pad_sahbl_hready;
input           pad_sahbl_hresp;
input           pad_yy_gate_clk_en_b;
input           sysio_xx_halt_req;
output          sahbl_bmu_dbus_acc_err;
output  [31:0]  sahbl_bmu_dbus_data;
output          sahbl_bmu_dbus_grnt;
output          sahbl_bmu_dbus_trans_cmplt;
output          sahbl_bmu_had_acc_err;
output  [31:0]  sahbl_bmu_had_data;
output          sahbl_bmu_had_grnt;
output          sahbl_bmu_had_trans_cmplt;
output          sahbl_bmu_ibus_acc_err;
output  [31:0]  sahbl_bmu_ibus_data;
output          sahbl_bmu_ibus_grnt;
output          sahbl_bmu_ibus_trans_cmplt;
output  [31:0]  sahbl_pad_haddr;
output  [2 :0]  sahbl_pad_hburst;
output          sahbl_pad_hlock;
output  [3 :0]  sahbl_pad_hprot;
output  [2 :0]  sahbl_pad_hsize;
output  [1 :0]  sahbl_pad_htrans;
output  [31:0]  sahbl_pad_hwdata;
output          sahbl_pad_hwrite;
output          sahbl_sysio_idle;

// &Regs; @24

// &Wires; @25
wire            bmu_sahbl_dbus_acc_deny;
wire    [31:0]  bmu_sahbl_dbus_addr;
wire    [2 :0]  bmu_sahbl_dbus_burst;
wire            bmu_sahbl_dbus_lock;
wire            bmu_sahbl_dbus_lrsc;
wire    [3 :0]  bmu_sahbl_dbus_prot;
wire            bmu_sahbl_dbus_req;
wire            bmu_sahbl_dbus_req_dp;
wire            bmu_sahbl_dbus_seq;
wire    [1 :0]  bmu_sahbl_dbus_size;
wire    [31:0]  bmu_sahbl_dbus_wdata;
wire            bmu_sahbl_dbus_write;
wire            bmu_sahbl_had_acc_deny;
wire    [31:0]  bmu_sahbl_had_addr;
wire    [2 :0]  bmu_sahbl_had_burst;
wire    [3 :0]  bmu_sahbl_had_prot;
wire            bmu_sahbl_had_req;
wire            bmu_sahbl_had_req_dp;
wire            bmu_sahbl_had_seq;
wire    [1 :0]  bmu_sahbl_had_size;
wire    [31:0]  bmu_sahbl_had_wdata;
wire            bmu_sahbl_had_write;
wire            bmu_sahbl_ibus_acc_deny;
wire    [31:0]  bmu_sahbl_ibus_addr;
wire    [2 :0]  bmu_sahbl_ibus_burst;
wire    [3 :0]  bmu_sahbl_ibus_prot;
wire            bmu_sahbl_ibus_req;
wire            bmu_sahbl_ibus_req_dp;
wire            bmu_sahbl_ibus_seq;
wire    [1 :0]  bmu_sahbl_ibus_size;
wire            clk_en;
wire            cpurst_b;
wire            forever_cpuclk;
wire            lsu_biu_amo_pmp_deny;
wire            lsu_biu_async_expt_ack;
wire            lsu_xx_flush;
wire            lsu_xx_warm_up;
wire    [31:0]  pad_sahbl_hrdata;
wire            pad_sahbl_hready;
wire            pad_sahbl_hresp;
wire            pad_yy_gate_clk_en_b;
wire            sahbl_bmu_dbus_acc_err;
wire    [31:0]  sahbl_bmu_dbus_data;
wire            sahbl_bmu_dbus_grnt;
wire            sahbl_bmu_dbus_trans_cmplt;
wire            sahbl_bmu_had_acc_err;
wire    [31:0]  sahbl_bmu_had_data;
wire            sahbl_bmu_had_grnt;
wire            sahbl_bmu_had_trans_cmplt;
wire            sahbl_bmu_ibus_acc_err;
wire    [31:0]  sahbl_bmu_ibus_data;
wire            sahbl_bmu_ibus_grnt;
wire            sahbl_bmu_ibus_trans_cmplt;
wire            sahbl_clk_en;
wire            sahbl_gated_clk;
wire    [31:0]  sahbl_pad_haddr;
wire    [2 :0]  sahbl_pad_hburst;
wire            sahbl_pad_hlock;
wire    [3 :0]  sahbl_pad_hprot;
wire    [2 :0]  sahbl_pad_hsize;
wire    [1 :0]  sahbl_pad_htrans;
wire    [31:0]  sahbl_pad_hwdata;
wire            sahbl_pad_hwrite;
wire            sahbl_sysio_idle;
wire            sysio_xx_halt_req;





// &Instance("gated_clk_cell", "x_pa_sahbl_cpuclk_cell"); @30
gated_clk_cell  x_pa_sahbl_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sahbl_gated_clk     ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (sahbl_clk_en        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in     (forever_cpuclk ), @31
//          .global_en  (1'b1           ), @32
//          .local_en   (sahbl_clk_en   ), @33
//          .module_en  (1'b0           ), @34
//          .external_en(1'b0           ), @35
//          .clk_out    (sahbl_gated_clk)); @36

// &ConnRule(s/ahbl/sahbl/);  @38
// &Instance("pa_ahbl_if_fo", "x_pa_ahbl_if"); @40
pa_ahbl_if_fo  x_pa_ahbl_if (
  .ahbl_bmu_dbus_acc_err      (sahbl_bmu_dbus_acc_err    ),
  .ahbl_bmu_dbus_data         (sahbl_bmu_dbus_data       ),
  .ahbl_bmu_dbus_grnt         (sahbl_bmu_dbus_grnt       ),
  .ahbl_bmu_dbus_trans_cmplt  (sahbl_bmu_dbus_trans_cmplt),
  .ahbl_bmu_had_acc_err       (sahbl_bmu_had_acc_err     ),
  .ahbl_bmu_had_data          (sahbl_bmu_had_data        ),
  .ahbl_bmu_had_grnt          (sahbl_bmu_had_grnt        ),
  .ahbl_bmu_had_trans_cmplt   (sahbl_bmu_had_trans_cmplt ),
  .ahbl_bmu_ibus_acc_err      (sahbl_bmu_ibus_acc_err    ),
  .ahbl_bmu_ibus_data         (sahbl_bmu_ibus_data       ),
  .ahbl_bmu_ibus_grnt         (sahbl_bmu_ibus_grnt       ),
  .ahbl_bmu_ibus_trans_cmplt  (sahbl_bmu_ibus_trans_cmplt),
  .ahbl_clk_en                (sahbl_clk_en              ),
  .ahbl_gated_clk             (sahbl_gated_clk           ),
  .ahbl_pad_haddr             (sahbl_pad_haddr           ),
  .ahbl_pad_hburst            (sahbl_pad_hburst          ),
  .ahbl_pad_hlock             (sahbl_pad_hlock           ),
  .ahbl_pad_hprot             (sahbl_pad_hprot           ),
  .ahbl_pad_hsize             (sahbl_pad_hsize           ),
  .ahbl_pad_htrans            (sahbl_pad_htrans          ),
  .ahbl_pad_hwdata            (sahbl_pad_hwdata          ),
  .ahbl_pad_hwrite            (sahbl_pad_hwrite          ),
  .ahbl_sysio_idle            (sahbl_sysio_idle          ),
  .bmu_ahbl_dbus_acc_deny     (bmu_sahbl_dbus_acc_deny   ),
  .bmu_ahbl_dbus_addr         (bmu_sahbl_dbus_addr       ),
  .bmu_ahbl_dbus_burst        (bmu_sahbl_dbus_burst      ),
  .bmu_ahbl_dbus_lock         (bmu_sahbl_dbus_lock       ),
  .bmu_ahbl_dbus_lrsc         (bmu_sahbl_dbus_lrsc       ),
  .bmu_ahbl_dbus_prot         (bmu_sahbl_dbus_prot       ),
  .bmu_ahbl_dbus_req          (bmu_sahbl_dbus_req        ),
  .bmu_ahbl_dbus_req_dp       (bmu_sahbl_dbus_req_dp     ),
  .bmu_ahbl_dbus_seq          (bmu_sahbl_dbus_seq        ),
  .bmu_ahbl_dbus_size         (bmu_sahbl_dbus_size       ),
  .bmu_ahbl_dbus_wdata        (bmu_sahbl_dbus_wdata      ),
  .bmu_ahbl_dbus_write        (bmu_sahbl_dbus_write      ),
  .bmu_ahbl_had_acc_deny      (bmu_sahbl_had_acc_deny    ),
  .bmu_ahbl_had_addr          (bmu_sahbl_had_addr        ),
  .bmu_ahbl_had_burst         (bmu_sahbl_had_burst       ),
  .bmu_ahbl_had_prot          (bmu_sahbl_had_prot        ),
  .bmu_ahbl_had_req           (bmu_sahbl_had_req         ),
  .bmu_ahbl_had_req_dp        (bmu_sahbl_had_req_dp      ),
  .bmu_ahbl_had_seq           (bmu_sahbl_had_seq         ),
  .bmu_ahbl_had_size          (bmu_sahbl_had_size        ),
  .bmu_ahbl_had_wdata         (bmu_sahbl_had_wdata       ),
  .bmu_ahbl_had_write         (bmu_sahbl_had_write       ),
  .bmu_ahbl_ibus_acc_deny     (bmu_sahbl_ibus_acc_deny   ),
  .bmu_ahbl_ibus_addr         (bmu_sahbl_ibus_addr       ),
  .bmu_ahbl_ibus_burst        (bmu_sahbl_ibus_burst      ),
  .bmu_ahbl_ibus_prot         (bmu_sahbl_ibus_prot       ),
  .bmu_ahbl_ibus_req          (bmu_sahbl_ibus_req        ),
  .bmu_ahbl_ibus_req_dp       (bmu_sahbl_ibus_req_dp     ),
  .bmu_ahbl_ibus_seq          (bmu_sahbl_ibus_seq        ),
  .bmu_ahbl_ibus_size         (bmu_sahbl_ibus_size       ),
  .clk_en                     (clk_en                    ),
  .cpurst_b                   (cpurst_b                  ),
  .lsu_biu_amo_pmp_deny       (lsu_biu_amo_pmp_deny      ),
  .lsu_biu_async_expt_ack     (lsu_biu_async_expt_ack    ),
  .lsu_xx_flush               (lsu_xx_flush              ),
  .lsu_xx_warm_up             (lsu_xx_warm_up            ),
  .pad_ahbl_hrdata            (pad_sahbl_hrdata          ),
  .pad_ahbl_hready            (pad_sahbl_hready          ),
  .pad_ahbl_hresp             (pad_sahbl_hresp           ),
  .sysio_xx_halt_req          (sysio_xx_halt_req         )
);

// &Force("input", "lsu_xx_warm_up"); @42
// &Instance("pa_ahbl_if", "x_pa_ahbl_if"); @43
// &Force("nonport","sahbl_dbginfo"); @45

// &ModuleEnd; @49
endmodule























// &ModuleBeg; @22
module pa_spsram_1024x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [9 :0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [9 :0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_1024x32"); @43
pa_f_spsram_1024x32  x_pa_f_spsram_1024x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_1024x32"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_1024x36(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [9 :0]  A;
input           CEN;
input           CLK;
input   [35:0]  D;
input           GWEN;
input   [35:0]  WEN;
output  [35:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [9 :0]  A;
wire            CEN;
wire            CLK;
wire    [35:0]  D;
wire            GWEN;
wire    [35:0]  Q;
wire    [35:0]  WEN;





parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 36;
parameter WE_WIDTH   = 36;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_1024x36"); @43
pa_f_spsram_1024x36  x_pa_f_spsram_1024x36 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_1024x36"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_1024x37(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [9 :0]  A;
input           CEN;
input           CLK;
input   [36:0]  D;
input           GWEN;
input   [36:0]  WEN;
output  [36:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [9 :0]  A;
wire            CEN;
wire            CLK;
wire    [36:0]  D;
wire            GWEN;
wire    [36:0]  Q;
wire    [36:0]  WEN;





parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 37;
parameter WE_WIDTH   = 37;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_1024x37"); @43
pa_f_spsram_1024x37  x_pa_f_spsram_1024x37 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_1024x37"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_1024x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [9:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [9:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 10;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_1024x4"); @43
pa_f_spsram_1024x4  x_pa_f_spsram_1024x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_1024x4"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_128x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [6 :0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [6 :0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_128x32"); @43
pa_f_spsram_128x32  x_pa_f_spsram_128x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_128x32"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_128x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [6:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [6:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_128x4"); @43
pa_f_spsram_128x4  x_pa_f_spsram_128x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_128x4"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_128x42(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [6 :0]  A;
input           CEN;
input           CLK;
input   [41:0]  D;
input           GWEN;
input   [41:0]  WEN;
output  [41:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [6 :0]  A;
wire            CEN;
wire            CLK;
wire    [41:0]  D;
wire            GWEN;
wire    [41:0]  Q;
wire    [41:0]  WEN;





parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 42;
parameter WE_WIDTH   = 42;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_128x42"); @43
pa_f_spsram_128x42  x_pa_f_spsram_128x42 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_128x42"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_128x43(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [6 :0]  A;
input           CEN;
input           CLK;
input   [42:0]  D;
input           GWEN;
input   [42:0]  WEN;
output  [42:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [6 :0]  A;
wire            CEN;
wire            CLK;
wire    [42:0]  D;
wire            GWEN;
wire    [42:0]  Q;
wire    [42:0]  WEN;





parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 43;
parameter WE_WIDTH   = 43;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_128x43"); @43
pa_f_spsram_128x43  x_pa_f_spsram_128x43 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_128x43"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_2048x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [10:0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [10:0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 11;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_2048x32"); @43
pa_f_spsram_2048x32  x_pa_f_spsram_2048x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_2048x32"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_256x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [7 :0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [7 :0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_256x32"); @43
pa_f_spsram_256x32  x_pa_f_spsram_256x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_256x32"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_256x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [7:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [7:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_256x4"); @43
pa_f_spsram_256x4  x_pa_f_spsram_256x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_256x4"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_256x40(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [7 :0]  A;
input           CEN;
input           CLK;
input   [39:0]  D;
input           GWEN;
input   [39:0]  WEN;
output  [39:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [7 :0]  A;
wire            CEN;
wire            CLK;
wire    [39:0]  D;
wire            GWEN;
wire    [39:0]  Q;
wire    [39:0]  WEN;





parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 40;
parameter WE_WIDTH   = 40;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_256x40"); @43
pa_f_spsram_256x40  x_pa_f_spsram_256x40 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_256x40"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_256x41(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [7 :0]  A;
input           CEN;
input           CLK;
input   [40:0]  D;
input           GWEN;
input   [40:0]  WEN;
output  [40:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [7 :0]  A;
wire            CEN;
wire            CLK;
wire    [40:0]  D;
wire            GWEN;
wire    [40:0]  Q;
wire    [40:0]  WEN;





parameter ADDR_WIDTH = 8;
parameter DATA_WIDTH = 41;
parameter WE_WIDTH   = 41;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_256x41"); @43
pa_f_spsram_256x41  x_pa_f_spsram_256x41 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_256x41"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_32x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [4:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [4:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 5;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_32x4"); @43
pa_f_spsram_32x4  x_pa_f_spsram_32x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_32x4"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_32x46(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [4 :0]  A;
input           CEN;
input           CLK;
input   [45:0]  D;
input           GWEN;
input   [45:0]  WEN;
output  [45:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [4 :0]  A;
wire            CEN;
wire            CLK;
wire    [45:0]  D;
wire            GWEN;
wire    [45:0]  Q;
wire    [45:0]  WEN;





parameter ADDR_WIDTH = 5;
parameter DATA_WIDTH = 46;
parameter WE_WIDTH   = 46;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_32x46"); @43
pa_f_spsram_32x46  x_pa_f_spsram_32x46 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_32x46"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_32x47(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [4 :0]  A;
input           CEN;
input           CLK;
input   [46:0]  D;
input           GWEN;
input   [46:0]  WEN;
output  [46:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [4 :0]  A;
wire            CEN;
wire            CLK;
wire    [46:0]  D;
wire            GWEN;
wire    [46:0]  Q;
wire    [46:0]  WEN;





parameter ADDR_WIDTH = 5;
parameter DATA_WIDTH = 47;
parameter WE_WIDTH   = 47;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_32x47"); @43
pa_f_spsram_32x47  x_pa_f_spsram_32x47 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_32x47"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_4096x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [11:0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [11:0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 12;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_4096x32"); @43
pa_f_spsram_4096x32  x_pa_f_spsram_4096x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_4096x32"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_512x16(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [8 :0]  A;
input           CEN;
input           CLK;
input   [15:0]  D;
input           GWEN;
input   [15:0]  WEN;
output  [15:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [8 :0]  A;
wire            CEN;
wire            CLK;
wire    [15:0]  D;
wire            GWEN;
wire    [15:0]  Q;
wire    [15:0]  WEN;





parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 16;
parameter WE_WIDTH   = 16;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_512x16"); @43
pa_f_spsram_512x16  x_pa_f_spsram_512x16 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_512x16"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_512x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [8 :0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [8 :0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_512x32"); @43
pa_f_spsram_512x32  x_pa_f_spsram_512x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_512x32"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_512x38(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [8 :0]  A;
input           CEN;
input           CLK;
input   [37:0]  D;
input           GWEN;
input   [37:0]  WEN;
output  [37:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [8 :0]  A;
wire            CEN;
wire            CLK;
wire    [37:0]  D;
wire            GWEN;
wire    [37:0]  Q;
wire    [37:0]  WEN;





parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 38;
parameter WE_WIDTH   = 38;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_512x38"); @43
pa_f_spsram_512x38  x_pa_f_spsram_512x38 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_512x38"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_512x39(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [8 :0]  A;
input           CEN;
input           CLK;
input   [38:0]  D;
input           GWEN;
input   [38:0]  WEN;
output  [38:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [8 :0]  A;
wire            CEN;
wire            CLK;
wire    [38:0]  D;
wire            GWEN;
wire    [38:0]  Q;
wire    [38:0]  WEN;





parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 39;
parameter WE_WIDTH   = 39;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_512x39"); @43
pa_f_spsram_512x39  x_pa_f_spsram_512x39 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_512x39"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_512x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [8:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [8:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 9;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_512x4"); @43
pa_f_spsram_512x4  x_pa_f_spsram_512x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_512x4"); @49

// &ModuleEnd; @59
endmodule























// &ModuleBeg; @22
module pa_spsram_64x4(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [5:0]  A;
input          CEN;
input          CLK;
input   [3:0]  D;
input          GWEN;
input   [3:0]  WEN;
output  [3:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [5:0]  A;
wire           CEN;
wire           CLK;
wire    [3:0]  D;
wire           GWEN;
wire    [3:0]  Q;
wire    [3:0]  WEN;





parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 4;
parameter WE_WIDTH   = 4;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_64x4"); @43
pa_f_spsram_64x4  x_pa_f_spsram_64x4 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_64x4"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_64x44(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [5 :0]  A;
input           CEN;
input           CLK;
input   [43:0]  D;
input           GWEN;
input   [43:0]  WEN;
output  [43:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [5 :0]  A;
wire            CEN;
wire            CLK;
wire    [43:0]  D;
wire            GWEN;
wire    [43:0]  Q;
wire    [43:0]  WEN;





parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 44;
parameter WE_WIDTH   = 44;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_64x44"); @43
pa_f_spsram_64x44  x_pa_f_spsram_64x44 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//   &Instance("pa_tsmc_spsram_64x44"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_64x45(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [5 :0]  A;
input           CEN;
input           CLK;
input   [44:0]  D;
input           GWEN;
input   [44:0]  WEN;
output  [44:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [5 :0]  A;
wire            CEN;
wire            CLK;
wire    [44:0]  D;
wire            GWEN;
wire    [44:0]  Q;
wire    [44:0]  WEN;





parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 45;
parameter WE_WIDTH   = 45;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_64x45"); @43
pa_f_spsram_64x45  x_pa_f_spsram_64x45 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);

//  &Instance("pa_tsmc_spsram_64x45"); @49

// &ModuleEnd; @65
endmodule























// &ModuleBeg; @22
module pa_spsram_8192x32(
  A,
  CEN,
  CLK,
  D,
  GWEN,
  Q,
  WEN
);

// &Ports; @23
input   [12:0]  A;
input           CEN;
input           CLK;
input   [31:0]  D;
input           GWEN;
input   [31:0]  WEN;
output  [31:0]  Q;

// &Regs; @24

// &Wires; @25
wire    [12:0]  A;
wire            CEN;
wire            CLK;
wire    [31:0]  D;
wire            GWEN;
wire    [31:0]  Q;
wire    [31:0]  WEN;





parameter ADDR_WIDTH = 13;
parameter DATA_WIDTH = 32;
parameter WE_WIDTH   = 32;

// &Force("bus","Q",DATA_WIDTH-1,0); @34
// &Force("bus","WEN",WE_WIDTH-1,0); @35
// &Force("bus","A",ADDR_WIDTH-1,0); @36
// &Force("bus","D",DATA_WIDTH-1,0); @37




//   &Instance("pa_f_spsram_8192x32"); @43
pa_f_spsram_8192x32  x_pa_f_spsram_8192x32 (
  .A    (A   ),
  .CEN  (CEN ),
  .CLK  (CLK ),
  .D    (D   ),
  .GWEN (GWEN),
  .Q    (Q   ),
  .WEN  (WEN )
);


// &ModuleEnd; @65
endmodule























// &Depend(cpu_cfig.h); @22
// &ModuleBeg; @23
module pa_sys_io(
  biu_sysio_idle,
  clk_en,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_sysio_srst,
  cpu_pad_dfs_ack,
  cpu_pad_lockup,
  cpu_pad_soft_rst,
  cpurst_b,
  dahbl_sysio_idle,
  forever_cpuclk,
  had_yy_xx_dbg,
  iahbl_sysio_idle,
  pad_cpu_dfs_req,
  pad_cpu_ext_int_b,
  pad_cpu_nmi,
  pad_cpu_rst_addr,
  pad_cpu_sys_cnt,
  pad_cpu_wakeup_event,
  pad_sysio_dbgrq_b,
  pad_yy_gate_clk_en_b,
  rtu_sysio_lockup_on,
  rtu_yy_xx_dbgon,
  sysio_clint_me_int,
  sysio_clint_mtime,
  sysio_cp0_clk_en,
  sysio_cp0_clkratio,
  sysio_cp0_rst_addr,
  sysio_cp0_sys_view_lpmd_b,
  sysio_had_sdb_req_b,
  sysio_hpcp_time,
  sysio_ifu_rst_addr,
  sysio_ifu_rst_addr_done,
  sysio_iu_rst_addr,
  sysio_pad_lpmd_b,
  sysio_rtu_nmi_int,
  sysio_rtu_wk_event,
  sysio_xx_halt_req
);

// &Ports; @24
input           biu_sysio_idle;
input           clk_en;
input           cp0_sysio_ipend_b;
input   [1 :0]  cp0_sysio_lpmd_b;
input   [1 :0]  cp0_sysio_srst;
input           cpurst_b;
input           dahbl_sysio_idle;
input           forever_cpuclk;
input           had_yy_xx_dbg;
input           iahbl_sysio_idle;
input           pad_cpu_dfs_req;
input           pad_cpu_ext_int_b;
input           pad_cpu_nmi;
input   [31:0]  pad_cpu_rst_addr;
input   [63:0]  pad_cpu_sys_cnt;
input           pad_cpu_wakeup_event;
input           pad_sysio_dbgrq_b;
input           pad_yy_gate_clk_en_b;
input           rtu_sysio_lockup_on;
input           rtu_yy_xx_dbgon;
output          cpu_pad_dfs_ack;
output          cpu_pad_lockup;
output  [1 :0]  cpu_pad_soft_rst;
output          sysio_clint_me_int;
output  [63:0]  sysio_clint_mtime;
output          sysio_cp0_clk_en;
output  [2 :0]  sysio_cp0_clkratio;
output  [31:0]  sysio_cp0_rst_addr;
output  [1 :0]  sysio_cp0_sys_view_lpmd_b;
output          sysio_had_sdb_req_b;
output  [63:0]  sysio_hpcp_time;
output  [31:0]  sysio_ifu_rst_addr;
output          sysio_ifu_rst_addr_done;
output  [31:0]  sysio_iu_rst_addr;
output  [1 :0]  sysio_pad_lpmd_b;
output          sysio_rtu_nmi_int;
output          sysio_rtu_wk_event;
output          sysio_xx_halt_req;

// &Regs; @25
reg     [63:0]  ccvr;
reg             cpu_ext_int_b;
reg             cpu_nmi;
reg     [30:0]  cpu_rst_addr_31;
reg             cpu_wk_event;
reg             pad_cpu_halt_ff1;
reg             pad_cpu_halt_ff2;
reg             sysio_pad_dbg_b;
reg             sysio_pad_ipend_b;
reg             sysio_pad_lockup;
reg     [1 :0]  sysio_pad_lpmd_b;
reg     [1 :0]  sysio_pad_srst;
reg             sysio_pad_wakeup_b;

// &Wires; @26
wire            biu_sysio_idle;
wire            ccvr_h_clk;
wire            ccvr_h_clk_en;
wire            ccvr_h_updt;
wire            clk_en;
wire            cp0_sysio_ipend_b;
wire    [1 :0]  cp0_sysio_lpmd_b;
wire    [1 :0]  cp0_sysio_srst;
wire            cpu_pad_dfs_ack;
wire            cpu_pad_lockup;
wire    [1 :0]  cpu_pad_soft_rst;
wire    [31:0]  cpu_rst_addr;
wire            cpu_wake_up_b;
wire            cpurst_b;
wire            dahbl_sysio_idle;
wire            forever_cpuclk;
wire            had_yy_xx_dbg;
wire            halt_clk;
wire            halt_clk_en;
wire            iahbl_sysio_idle;
wire            pad_cpu_dfs_req;
wire            pad_cpu_ext_int_b;
wire            pad_cpu_nmi;
wire    [31:0]  pad_cpu_rst_addr;
wire    [63:0]  pad_cpu_sys_cnt;
wire            pad_cpu_wakeup_event;
wire    [2 :0]  pad_sysio_clkratio;
wire            pad_sysio_dbgrq_b;
wire            pad_yy_gate_clk_en_b;
wire            rtu_sysio_lockup_on;
wire            rtu_yy_xx_dbgon;
wire            sample_clk;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;
wire            sysio_cp0_clk_en;
wire    [2 :0]  sysio_cp0_clkratio;
wire    [31:0]  sysio_cp0_rst_addr;
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;
wire            sysio_had_sdb_req_b;
wire    [63:0]  sysio_hpcp_time;
wire    [31:0]  sysio_ifu_rst_addr;
wire            sysio_ifu_rst_addr_done;
wire    [31:0]  sysio_iu_rst_addr;
wire            sysio_lpmd_gated_clk;
wire            sysio_lpmd_gated_en;
wire            sysio_rst_addr_neq;
wire            sysio_rtu_nmi_int;
wire            sysio_rtu_wk_event;
wire            sysio_xx_halt_req;


// &Instance("gated_clk_cell", "x_pa_gated_sysio_lpmd_cpuclk_cell"); @28
gated_clk_cell  x_pa_gated_sysio_lpmd_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sysio_lpmd_gated_clk),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (sysio_lpmd_gated_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in     (forever_cpuclk               ), @29
//          .global_en  (1'b1                         ), @30
//          .module_en  (1'b0                         ), @31
//          .local_en   (sysio_lpmd_gated_en          ), @32
//          .external_en(1'b0                         ), @33
//          .clk_out    (sysio_lpmd_gated_clk         )); @34

assign sysio_lpmd_gated_en = ((sysio_pad_dbg_b        ^ (~rtu_yy_xx_dbgon)) ||
                             |(sysio_pad_lpmd_b[1:0]  ^ cp0_sysio_lpmd_b[1:0]) ||
                              (sysio_pad_ipend_b      ^ cp0_sysio_ipend_b) ||
                              (sysio_pad_wakeup_b     ^ cpu_wake_up_b) ||
                             |(sysio_pad_srst[1:0]    ^ cp0_sysio_srst[1:0]) ||
                              (sysio_pad_lockup       ^ rtu_sysio_lockup_on) ||
                              (pad_cpu_ext_int_b      ^ cpu_ext_int_b) ||
                              (pad_cpu_nmi            ^ cpu_nmi) ||
                              (pad_cpu_wakeup_event   ^ cpu_wk_event) ||
                               sysio_rst_addr_neq)
                            && clk_en;





assign pad_sysio_clkratio[2:0]  = 3'b0;
assign sysio_cp0_clkratio[2:0]  = pad_sysio_clkratio[2:0];
assign sysio_had_sdb_req_b      = pad_sysio_dbgrq_b;

assign halt_clk_en = pad_cpu_halt_ff1 ^ pad_cpu_dfs_req |
                     pad_cpu_halt_ff2 ^ pad_cpu_halt_ff1;

// &Instance("gated_clk_cell", "x_pa_halt_clk"); @59
gated_clk_cell  x_pa_halt_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (halt_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (halt_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @60
//          .external_en (1'b0), @61
//          .global_en   (1'b1), @62
//          .module_en   (1'b0), @63
//          .local_en    (halt_clk_en), @64
//          .clk_out     (halt_clk)); @65

always @ (posedge halt_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    pad_cpu_halt_ff1 <= 1'b0;
    pad_cpu_halt_ff2 <= 1'b0;
  end
  else
  begin
    pad_cpu_halt_ff1 <= pad_cpu_dfs_req;
    pad_cpu_halt_ff2 <= pad_cpu_halt_ff1;
  end
end
assign cpu_pad_dfs_ack = iahbl_sysio_idle && dahbl_sysio_idle && biu_sysio_idle
                       && pad_cpu_halt_ff2;

assign sysio_xx_halt_req = pad_cpu_halt_ff2;

assign ccvr_h_updt = |(ccvr[63:12] ^ pad_cpu_sys_cnt[63:12]) && clk_en;
always @ (posedge ccvr_h_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ccvr[63:12] <= 52'b0;
  else if (ccvr_h_updt)
    ccvr[63:12] <= pad_cpu_sys_cnt[63:12];
  else
    ccvr[63:12] <= ccvr[63:12];
end

assign ccvr_h_clk_en = ccvr_h_updt;
// &Instance("gated_clk_cell", "x_pa_ccvr_h_clk"); @97
gated_clk_cell  x_pa_ccvr_h_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ccvr_h_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ccvr_h_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @98
//          .external_en (1'b0), @99
//          .global_en   (1'b1), @100
//          .module_en   (1'b0), @101
//          .local_en    (ccvr_h_clk_en), @102
//          .clk_out     (ccvr_h_clk)); @103

always @ (posedge sample_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ccvr[11:0] <= 12'b0;
  else if (clk_en)
    ccvr[11:0] <= pad_cpu_sys_cnt[11:0];
  else
    ccvr[11:0] <= ccvr[11:0];
end

assign sysio_clint_mtime[63:0] = ccvr[63:0];
assign sysio_hpcp_time[63:0] = ccvr[63:0];

always @ (posedge sysio_lpmd_gated_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    cpu_rst_addr_31[30:0] <= 31'b0;
  else if (clk_en)
    cpu_rst_addr_31[30:0] <= pad_cpu_rst_addr[31:1];
  else
    cpu_rst_addr_31[30:0] <= cpu_rst_addr_31[30:0];
end
assign cpu_rst_addr[31:0] = {cpu_rst_addr_31[30:0], 1'b0};
assign sysio_rst_addr_neq = cpu_rst_addr_31[30:0] != pad_cpu_rst_addr[31:1];
// &Force("bus", "pad_cpu_rst_addr", 31, 0); @134
assign sysio_ifu_rst_addr_done = !sysio_rst_addr_neq;

assign  sysio_cp0_rst_addr[31:0] = cpu_rst_addr[31:0];
assign  sysio_ifu_rst_addr[31:0] = cpu_rst_addr[31:0];
assign  sysio_iu_rst_addr[31:0]  = cpu_rst_addr[31:0];

always @ (posedge sysio_lpmd_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b) begin
    cpu_ext_int_b <= 1'b1;
    cpu_nmi       <= 1'b0;
    cpu_wk_event  <= 1'b0;
  end
  else if(clk_en) begin
    cpu_ext_int_b <= pad_cpu_ext_int_b;
    cpu_nmi       <= pad_cpu_nmi;
    cpu_wk_event  <= pad_cpu_wakeup_event;
  end
  else begin
    cpu_ext_int_b <= cpu_ext_int_b;
    cpu_nmi       <= cpu_nmi;
    cpu_wk_event  <= cpu_wk_event;
  end
end

assign sysio_clint_me_int = !cpu_ext_int_b;
assign sysio_rtu_nmi_int   = cpu_nmi;
assign sysio_rtu_wk_event  = cpu_wk_event;

// &Instance("gated_clk_cell", "x_pa_sample_clk"); @164
gated_clk_cell  x_pa_sample_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sample_clk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (clk_en              ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk), @165
//          .external_en (1'b0          ), @166
//          .global_en   (1'b1          ), @167
//          .module_en   (1'b0          ), @168
//          .local_en    (clk_en        ), @169
//          .clk_out     (sample_clk    ) @170
//         ); @171




// &Force("output","sysio_pad_ipend_b"); @176
// &Force("output","sysio_pad_dbg_b"); @177
// &Force("output","sysio_pad_lpmd_b"); @178
// &Force("output","sysio_pad_wakeup_b"); @179

assign cpu_wake_up_b = cp0_sysio_ipend_b && !had_yy_xx_dbg;

always @(posedge sysio_lpmd_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    sysio_pad_dbg_b       <= 1'b1;
    sysio_pad_lpmd_b[1:0] <= 2'b11;
    sysio_pad_ipend_b     <= 1'b0;
    sysio_pad_wakeup_b    <= 1'b0;
    sysio_pad_srst[1:0]   <= 2'b0;
    sysio_pad_lockup      <= 1'b0;
  end
  else if(clk_en)
  begin
    sysio_pad_dbg_b       <= ~rtu_yy_xx_dbgon;
    sysio_pad_lpmd_b[1:0] <= cp0_sysio_lpmd_b[1:0];
    sysio_pad_ipend_b     <= cp0_sysio_ipend_b;
    sysio_pad_wakeup_b    <= cpu_wake_up_b;
    sysio_pad_srst[1:0]   <= cp0_sysio_srst[1:0];
    sysio_pad_lockup      <= rtu_sysio_lockup_on;
  end
end
// &Force("nonport", "sysio_pad_dbg_b"); @204
// &Force("nonport", "sysio_pad_ipend_b"); @205
// &Force("nonport", "sysio_pad_wakeup_b"); @206
assign sysio_cp0_clk_en = clk_en;

assign sysio_cp0_sys_view_lpmd_b[1:0] = sysio_pad_lpmd_b[1:0];

assign cpu_pad_soft_rst[1:0] = sysio_pad_srst[1:0];
assign cpu_pad_lockup = sysio_pad_lockup;

// &ModuleEnd; @214
endmodule























// &Depend("sysmap.h"); @22

// &ModuleBeg; @24
module pa_sysmap_access(
  sysmap_base_addr0_value,
  sysmap_base_addr1_value,
  sysmap_base_addr2_value,
  sysmap_base_addr3_value,
  sysmap_base_addr4_value,
  sysmap_base_addr5_value,
  sysmap_base_addr6_value,
  sysmap_base_addr7_value,
  sysmap_flg0_value,
  sysmap_flg1_value,
  sysmap_flg2_value,
  sysmap_flg3_value,
  sysmap_flg4_value,
  sysmap_flg5_value,
  sysmap_flg6_value,
  sysmap_flg7_value,
  sysmap_flg_y,
  sysmap_pa_y
);

// &Ports; @25
input   [19:0]  sysmap_base_addr0_value;
input   [19:0]  sysmap_base_addr1_value;
input   [19:0]  sysmap_base_addr2_value;
input   [19:0]  sysmap_base_addr3_value;
input   [19:0]  sysmap_base_addr4_value;
input   [19:0]  sysmap_base_addr5_value;
input   [19:0]  sysmap_base_addr6_value;
input   [19:0]  sysmap_base_addr7_value;
input   [4 :0]  sysmap_flg0_value;
input   [4 :0]  sysmap_flg1_value;
input   [4 :0]  sysmap_flg2_value;
input   [4 :0]  sysmap_flg3_value;
input   [4 :0]  sysmap_flg4_value;
input   [4 :0]  sysmap_flg5_value;
input   [4 :0]  sysmap_flg6_value;
input   [4 :0]  sysmap_flg7_value;
input   [19:0]  sysmap_pa_y;
output  [4 :0]  sysmap_flg_y;

// &Regs; @26
reg     [4 :0]  sysmap_flg_y;

// &Wires; @27
wire            addr_ge_bottom0;
wire            addr_ge_bottom1;
wire            addr_ge_bottom2;
wire            addr_ge_bottom3;
wire            addr_ge_bottom4;
wire            addr_ge_bottom5;
wire            addr_ge_bottom6;
wire            addr_ge_bottom7;
wire            addr_ge_upaddr0;
wire            addr_ge_upaddr1;
wire            addr_ge_upaddr2;
wire            addr_ge_upaddr3;
wire            addr_ge_upaddr4;
wire            addr_ge_upaddr5;
wire            addr_ge_upaddr6;
wire            addr_ge_upaddr7;
wire    [19:0]  sysmap_base_addr0_value;
wire    [19:0]  sysmap_base_addr1_value;
wire    [19:0]  sysmap_base_addr2_value;
wire    [19:0]  sysmap_base_addr3_value;
wire    [19:0]  sysmap_base_addr4_value;
wire    [19:0]  sysmap_base_addr5_value;
wire    [19:0]  sysmap_base_addr6_value;
wire    [19:0]  sysmap_base_addr7_value;
wire            sysmap_comp_hit0;
wire            sysmap_comp_hit1;
wire            sysmap_comp_hit2;
wire            sysmap_comp_hit3;
wire            sysmap_comp_hit4;
wire            sysmap_comp_hit5;
wire            sysmap_comp_hit6;
wire            sysmap_comp_hit7;
wire    [4 :0]  sysmap_flg0_value;
wire    [4 :0]  sysmap_flg1_value;
wire    [4 :0]  sysmap_flg2_value;
wire    [4 :0]  sysmap_flg3_value;
wire    [4 :0]  sysmap_flg4_value;
wire    [4 :0]  sysmap_flg5_value;
wire    [4 :0]  sysmap_flg6_value;
wire    [4 :0]  sysmap_flg7_value;
wire    [7 :0]  sysmap_hit;
wire            sysmap_hit0;
wire            sysmap_hit1;
wire            sysmap_hit2;
wire            sysmap_hit3;
wire            sysmap_hit4;
wire            sysmap_hit5;
wire            sysmap_hit6;
wire            sysmap_hit7;
wire    [19:0]  sysmap_pa_y;


parameter ADDR_WIDTH = 32-12;
parameter FLG_WIDTH  = 5;


// &ConnRule(s/_x/0/); @33
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_0"); @34
pa_sysmap_hit  x_pa_sysmap_hit_0 (
  .addr_ge_bottom_x  (addr_ge_bottom0  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr0  ),
  .sysmap_comp_hit_x (sysmap_comp_hit0 ),
  .sysmap_hit_x      (sysmap_hit0      )
);


// &ConnRule(s/_x/1/); @36
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_1"); @37
pa_sysmap_hit  x_pa_sysmap_hit_1 (
  .addr_ge_bottom_x  (addr_ge_bottom1  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr1  ),
  .sysmap_comp_hit_x (sysmap_comp_hit1 ),
  .sysmap_hit_x      (sysmap_hit1      )
);


// &ConnRule(s/_x/2/); @39
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_2"); @40
pa_sysmap_hit  x_pa_sysmap_hit_2 (
  .addr_ge_bottom_x  (addr_ge_bottom2  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr2  ),
  .sysmap_comp_hit_x (sysmap_comp_hit2 ),
  .sysmap_hit_x      (sysmap_hit2      )
);


// &ConnRule(s/_x/3/); @42
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_3"); @43
pa_sysmap_hit  x_pa_sysmap_hit_3 (
  .addr_ge_bottom_x  (addr_ge_bottom3  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr3  ),
  .sysmap_comp_hit_x (sysmap_comp_hit3 ),
  .sysmap_hit_x      (sysmap_hit3      )
);


// &ConnRule(s/_x/4/); @45
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_4"); @46
pa_sysmap_hit  x_pa_sysmap_hit_4 (
  .addr_ge_bottom_x  (addr_ge_bottom4  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr4  ),
  .sysmap_comp_hit_x (sysmap_comp_hit4 ),
  .sysmap_hit_x      (sysmap_hit4      )
);


// &ConnRule(s/_x/5/); @48
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_5"); @49
pa_sysmap_hit  x_pa_sysmap_hit_5 (
  .addr_ge_bottom_x  (addr_ge_bottom5  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr5  ),
  .sysmap_comp_hit_x (sysmap_comp_hit5 ),
  .sysmap_hit_x      (sysmap_hit5      )
);


// &ConnRule(s/_x/6/); @51
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_6"); @52
pa_sysmap_hit  x_pa_sysmap_hit_6 (
  .addr_ge_bottom_x  (addr_ge_bottom6  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr6  ),
  .sysmap_comp_hit_x (sysmap_comp_hit6 ),
  .sysmap_hit_x      (sysmap_hit6      )
);


// &ConnRule(s/_x/7/); @54
// &Instance("pa_sysmap_hit", "x_pa_sysmap_hit_7"); @55
pa_sysmap_hit  x_pa_sysmap_hit_7 (
  .addr_ge_bottom_x  (addr_ge_bottom7  ),
  .addr_ge_upaddr_x  (addr_ge_upaddr7  ),
  .sysmap_comp_hit_x (sysmap_comp_hit7 ),
  .sysmap_hit_x      (sysmap_hit7      )
);


// &Force("nonport", "addr_ge_upaddr7"); @57
assign {addr_ge_bottom7, addr_ge_bottom6,
        addr_ge_bottom5, addr_ge_bottom4,
        addr_ge_bottom3, addr_ge_bottom2,
        addr_ge_bottom1, addr_ge_bottom0} =
       {addr_ge_upaddr6, addr_ge_upaddr5,
        addr_ge_upaddr4, addr_ge_upaddr3,
        addr_ge_upaddr2, addr_ge_upaddr1,
        addr_ge_upaddr0, 1'b1};


assign sysmap_hit[7:0] = {sysmap_hit7, sysmap_hit6,
                          sysmap_hit5, sysmap_hit4,
                          sysmap_hit3, sysmap_hit2,
                          sysmap_hit1, sysmap_hit0};

// &CombBeg; @73
always @( sysmap_flg2_value[4:0]
       or sysmap_flg1_value[4:0]
       or sysmap_flg6_value[4:0]
       or sysmap_hit[7:0]
       or sysmap_flg7_value[4:0]
       or sysmap_flg5_value[4:0]
       or sysmap_flg4_value[4:0]
       or sysmap_flg3_value[4:0]
       or sysmap_flg0_value[4:0])
begin
  casez(sysmap_hit[7:0])
    8'b00000001  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg0_value[FLG_WIDTH-1:0];
    8'b00000010  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg1_value[FLG_WIDTH-1:0];
    8'b00000100  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg2_value[FLG_WIDTH-1:0];
    8'b00001000  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg3_value[FLG_WIDTH-1:0];
    8'b00010000  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg4_value[FLG_WIDTH-1:0];
    8'b00100000  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg5_value[FLG_WIDTH-1:0];
    8'b01000000  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg6_value[FLG_WIDTH-1:0];
    8'b10000000  : sysmap_flg_y[FLG_WIDTH-1:0] = sysmap_flg7_value[FLG_WIDTH-1:0];

    default      : sysmap_flg_y[FLG_WIDTH-1:0] = 5'b10011;
endcase
// &CombEnd; @86
end


assign sysmap_comp_hit0 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr0_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit1 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr1_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit2 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr2_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit3 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr3_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit4 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr4_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit5 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr5_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit6 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr6_value[ADDR_WIDTH-1:0];
assign sysmap_comp_hit7 = sysmap_pa_y[ADDR_WIDTH-1:0]
                        < sysmap_base_addr7_value[ADDR_WIDTH-1:0];


// &ModuleEnd; @107
endmodule























// &ModuleBeg; @22
module pa_sysmap_hit(
  addr_ge_bottom_x,
  addr_ge_upaddr_x,
  sysmap_comp_hit_x,
  sysmap_hit_x
);

// &Ports; @23
input        addr_ge_bottom_x;
input        sysmap_comp_hit_x;
output       addr_ge_upaddr_x;
output       sysmap_hit_x;

// &Regs; @24

// &Wires; @25
wire         addr_ge_bottom_x;
wire         addr_ge_upaddr_x;
wire         addr_ls_top;
wire         sysmap_comp_hit_x;
wire         sysmap_hit_x;



assign addr_ls_top      = sysmap_comp_hit_x;

assign addr_ge_upaddr_x = !addr_ls_top;
assign sysmap_hit_x     = addr_ge_bottom_x && addr_ls_top;

// &ModuleEnd; @33
endmodule
























// &ModuleBeg; @23
module pa_sysmap_top(
  ifu_sysmap_pa,
  lsu_sysmap_pa,
  sysmap_ifu_flg,
  sysmap_lsu_flg
);

// &Ports; @24
input   [31:0]  ifu_sysmap_pa;
input   [31:0]  lsu_sysmap_pa;
output  [4 :0]  sysmap_ifu_flg;
output  [4 :0]  sysmap_lsu_flg;

// &Regs; @25

// &Wires; @26
wire    [31:0]  ifu_sysmap_pa;
wire    [31:0]  lsu_sysmap_pa;
wire    [19:0]  sysmap_base_addr0_value;
wire    [19:0]  sysmap_base_addr1_value;
wire    [19:0]  sysmap_base_addr2_value;
wire    [19:0]  sysmap_base_addr3_value;
wire    [19:0]  sysmap_base_addr4_value;
wire    [19:0]  sysmap_base_addr5_value;
wire    [19:0]  sysmap_base_addr6_value;
wire    [19:0]  sysmap_base_addr7_value;
wire    [4 :0]  sysmap_flg0;
wire    [4 :0]  sysmap_flg0_value;
wire    [4 :0]  sysmap_flg1;
wire    [4 :0]  sysmap_flg1_value;
wire    [4 :0]  sysmap_flg2_value;
wire    [4 :0]  sysmap_flg3_value;
wire    [4 :0]  sysmap_flg4_value;
wire    [4 :0]  sysmap_flg5_value;
wire    [4 :0]  sysmap_flg6_value;
wire    [4 :0]  sysmap_flg7_value;
wire    [4 :0]  sysmap_ifu_flg;
wire    [4 :0]  sysmap_lsu_flg;
wire    [19:0]  sysmap_pa0;
wire    [19:0]  sysmap_pa1;


parameter ADDR_WIDTH = 32-12;
parameter FLG_WIDTH  = 5;








// &ConnRule(s/_y/0/); @38
// &Instance("pa_sysmap_access", "x_ifu_pa_sysmap_access"); @39
pa_sysmap_access  x_ifu_pa_sysmap_access (
  .sysmap_base_addr0_value (sysmap_base_addr0_value),
  .sysmap_base_addr1_value (sysmap_base_addr1_value),
  .sysmap_base_addr2_value (sysmap_base_addr2_value),
  .sysmap_base_addr3_value (sysmap_base_addr3_value),
  .sysmap_base_addr4_value (sysmap_base_addr4_value),
  .sysmap_base_addr5_value (sysmap_base_addr5_value),
  .sysmap_base_addr6_value (sysmap_base_addr6_value),
  .sysmap_base_addr7_value (sysmap_base_addr7_value),
  .sysmap_flg0_value       (sysmap_flg0_value      ),
  .sysmap_flg1_value       (sysmap_flg1_value      ),
  .sysmap_flg2_value       (sysmap_flg2_value      ),
  .sysmap_flg3_value       (sysmap_flg3_value      ),
  .sysmap_flg4_value       (sysmap_flg4_value      ),
  .sysmap_flg5_value       (sysmap_flg5_value      ),
  .sysmap_flg6_value       (sysmap_flg6_value      ),
  .sysmap_flg7_value       (sysmap_flg7_value      ),
  .sysmap_flg_y            (sysmap_flg0            ),
  .sysmap_pa_y             (sysmap_pa0             )
);


// &ConnRule(s/_y/1/); @41
// &Instance("pa_sysmap_access", "x_lsu_pa_sysmap_access"); @42
pa_sysmap_access  x_lsu_pa_sysmap_access (
  .sysmap_base_addr0_value (sysmap_base_addr0_value),
  .sysmap_base_addr1_value (sysmap_base_addr1_value),
  .sysmap_base_addr2_value (sysmap_base_addr2_value),
  .sysmap_base_addr3_value (sysmap_base_addr3_value),
  .sysmap_base_addr4_value (sysmap_base_addr4_value),
  .sysmap_base_addr5_value (sysmap_base_addr5_value),
  .sysmap_base_addr6_value (sysmap_base_addr6_value),
  .sysmap_base_addr7_value (sysmap_base_addr7_value),
  .sysmap_flg0_value       (sysmap_flg0_value      ),
  .sysmap_flg1_value       (sysmap_flg1_value      ),
  .sysmap_flg2_value       (sysmap_flg2_value      ),
  .sysmap_flg3_value       (sysmap_flg3_value      ),
  .sysmap_flg4_value       (sysmap_flg4_value      ),
  .sysmap_flg5_value       (sysmap_flg5_value      ),
  .sysmap_flg6_value       (sysmap_flg6_value      ),
  .sysmap_flg7_value       (sysmap_flg7_value      ),
  .sysmap_flg_y            (sysmap_flg1            ),
  .sysmap_pa_y             (sysmap_pa1             )
);



// &Force("bus", "ifu_sysmap_pa", 31, 0); @45
assign sysmap_pa0[19:0] = ifu_sysmap_pa[31:12];
assign sysmap_ifu_flg[4:0] = sysmap_flg0[4:0];


// &Force("bus", "lsu_sysmap_pa", 31, 0); @50
assign sysmap_pa1[19:0] = lsu_sysmap_pa[31:12];
assign sysmap_lsu_flg[4:0] = sysmap_flg1[4:0];

// &Instance("pa_sysmap_busif"); @55
assign sysmap_base_addr0_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR0;
assign sysmap_base_addr1_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR1;
assign sysmap_base_addr2_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR2;
assign sysmap_base_addr3_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR3;
assign sysmap_base_addr4_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR4;
assign sysmap_base_addr5_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR5;
assign sysmap_base_addr6_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR6;
assign sysmap_base_addr7_value[ADDR_WIDTH-1:0] = `SYSMAP_BASE_ADDR7;
assign sysmap_flg0_value[FLG_WIDTH-1:0] = `SYSMAP_FLG0;
assign sysmap_flg1_value[FLG_WIDTH-1:0] = `SYSMAP_FLG1;
assign sysmap_flg2_value[FLG_WIDTH-1:0] = `SYSMAP_FLG2;
assign sysmap_flg3_value[FLG_WIDTH-1:0] = `SYSMAP_FLG3;
assign sysmap_flg4_value[FLG_WIDTH-1:0] = `SYSMAP_FLG4;
assign sysmap_flg5_value[FLG_WIDTH-1:0] = `SYSMAP_FLG5;
assign sysmap_flg6_value[FLG_WIDTH-1:0] = `SYSMAP_FLG6;
assign sysmap_flg7_value[FLG_WIDTH-1:0] = `SYSMAP_FLG7;

// &ModuleEnd; @75
endmodule
























// &ModuleBeg; @23
module pa_tcipif_behavior_bus(
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_req_dp,
  bmu_tcipif_dbus_size,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_had_acc_deny,
  bmu_tcipif_had_addr,
  bmu_tcipif_had_req,
  bmu_tcipif_had_req_dp,
  bmu_tcipif_had_size,
  bmu_tcipif_had_supv_mode,
  bmu_tcipif_had_wdata,
  bmu_tcipif_had_write,
  clic_tcipif_cmplt,
  clic_tcipif_rdata,
  clint_tcipif_cmplt,
  clint_tcipif_rdata,
  cpurst_b,
  forever_cpuclk,
  had_img_tcipif_cmplt,
  had_img_tcipif_rdata,
  pad_yy_gate_clk_en_b,
  rtu_yy_xx_dbgon,
  tcip_cp0_clic_base,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_had_acc_err,
  tcipif_bmu_had_data,
  tcipif_bmu_had_grnt,
  tcipif_bmu_had_trans_cmplt,
  tcipif_clic_sel,
  tcipif_clic_size,
  tcipif_clint_sel,
  tcipif_had_img_sel,
  tcipif_xx_addr,
  tcipif_xx_wdata,
  tcipif_xx_write
);

// &Ports; @24
input           bmu_tcipif_dbus_acc_deny;
input   [31:0]  bmu_tcipif_dbus_addr;
input           bmu_tcipif_dbus_req;
input           bmu_tcipif_dbus_req_dp;
input   [1 :0]  bmu_tcipif_dbus_size;
input           bmu_tcipif_dbus_supv_mode;
input   [31:0]  bmu_tcipif_dbus_wdata;
input           bmu_tcipif_dbus_write;
input           bmu_tcipif_had_acc_deny;
input   [31:0]  bmu_tcipif_had_addr;
input           bmu_tcipif_had_req;
input           bmu_tcipif_had_req_dp;
input   [1 :0]  bmu_tcipif_had_size;
input           bmu_tcipif_had_supv_mode;
input   [31:0]  bmu_tcipif_had_wdata;
input           bmu_tcipif_had_write;
input           clic_tcipif_cmplt;
input   [31:0]  clic_tcipif_rdata;
input           clint_tcipif_cmplt;
input   [31:0]  clint_tcipif_rdata;
input           cpurst_b;
input           forever_cpuclk;
input           had_img_tcipif_cmplt;
input   [31:0]  had_img_tcipif_rdata;
input           pad_yy_gate_clk_en_b;
input           rtu_yy_xx_dbgon;
output  [31:0]  tcip_cp0_clic_base;
output          tcipif_bmu_dbus_acc_err;
output  [31:0]  tcipif_bmu_dbus_data;
output          tcipif_bmu_dbus_grnt;
output          tcipif_bmu_dbus_trans_cmplt;
output          tcipif_bmu_had_acc_err;
output  [31:0]  tcipif_bmu_had_data;
output          tcipif_bmu_had_grnt;
output          tcipif_bmu_had_trans_cmplt;
output          tcipif_clic_sel;
output  [1 :0]  tcipif_clic_size;
output          tcipif_clint_sel;
output          tcipif_had_img_sel;
output  [15:0]  tcipif_xx_addr;
output  [31:0]  tcipif_xx_wdata;
output          tcipif_xx_write;

// &Regs; @25
reg             clic_sel_ff;
reg     [1 :0]  clic_size_ff;
reg             clint_sel_ff;
reg             dummy_addr_cmplt;
reg             had_img_sel_ff;
reg             tcip_acc_deny_ff;
reg             tcipif_acc_err;
reg     [15:0]  tcipif_xx_addr;
reg             tcipif_xx_write;
reg             xx_tcip_grant;

// &Wires; @26
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire            bmu_tcipif_had_acc_deny;
wire    [31:0]  bmu_tcipif_had_addr;
wire            bmu_tcipif_had_req;
wire            bmu_tcipif_had_req_dp;
wire    [1 :0]  bmu_tcipif_had_size;
wire            bmu_tcipif_had_supv_mode;
wire    [31:0]  bmu_tcipif_had_wdata;
wire            bmu_tcipif_had_write;
wire            clic_req_mask;
wire            clic_sel;
wire            clic_tcipif_cmplt;
wire    [31:0]  clic_tcipif_rdata;
wire            clint_req_mask;
wire            clint_sel;
wire            clint_tcipif_cmplt;
wire    [31:0]  clint_tcipif_rdata;
wire            cpurst_b;
wire            dbus_err;
wire            dbus_req_pre;
wire            dbus_sel;
wire            dummy_addr_sel;
wire            forever_cpuclk;
wire            had_err;
wire            had_img_req_mask;
wire            had_img_sel;
wire            had_img_tcipif_cmplt;
wire    [31:0]  had_img_tcipif_rdata;
wire            had_req_pre;
wire            had_sel;
wire            pad_yy_gate_clk_en_b;
wire            rtu_yy_xx_dbgon;
wire            sysmap_req_mask;
wire            sysmap_sel;
wire            sysmap_tcipif_cmplt;
wire    [31:0]  sysmap_tcipif_rdata;
wire            tcip_acc_deny;
wire    [31:0]  tcip_cp0_clic_base;
wire            tcip_ctrl_clk;
wire            tcip_ctrl_clk_en;
wire            tcip_dp_clk;
wire            tcip_err;
wire    [31:0]  tcip_req_addr;
wire            tcip_req_gate;
wire            tcip_req_mask;
wire            tcip_req_pre;
wire    [1 :0]  tcip_req_size;
wire            tcip_req_write;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_bmu_had_acc_err;
wire    [31:0]  tcipif_bmu_had_data;
wire            tcipif_bmu_had_grnt;
wire            tcipif_bmu_had_trans_cmplt;
wire            tcipif_clic_sel;
wire    [1 :0]  tcipif_clic_size;
wire            tcipif_clint_sel;
wire            tcipif_had_img_sel;
wire    [31:0]  tcipif_rdata;
wire            tcipif_trans_cmplt;
wire    [31:0]  tcipif_xx_wdata;
wire            xx_tcipif_cmplt;








parameter CLINT_IN    = 16'hE000;



parameter CLIC_IN     = 16'hE080;



parameter HAD_IMG_IN = 20'hE4010;




parameter SYSMAP_IN = 20'hEFFFF;






assign dbus_req_pre = bmu_tcipif_dbus_req && !tcip_req_mask
                  && !had_sel;
assign had_req_pre  = bmu_tcipif_had_req  && !tcip_req_mask;
assign tcip_req_pre = dbus_req_pre || had_req_pre;

assign tcip_req_gate = bmu_tcipif_dbus_req_dp | bmu_tcipif_had_req_dp;

assign dbus_sel = bmu_tcipif_dbus_req_dp && !tcip_req_mask
              && !had_sel;
assign had_sel  = bmu_tcipif_had_req_dp && !tcip_req_mask;


assign dbus_err = !bmu_tcipif_dbus_supv_mode && !rtu_yy_xx_dbgon;// | bmu_tcipif_dbus_acc_deny;
assign had_err  = !bmu_tcipif_had_supv_mode;// | bmu_tcipif_had_acc_deny;
assign tcip_err = dbus_sel && dbus_err
               || had_sel  && had_err;

assign tcip_acc_deny       = dbus_sel & bmu_tcipif_dbus_acc_deny
                           | had_sel  & bmu_tcipif_had_acc_deny;

assign tcip_req_addr[31:0] = {32{dbus_sel}} & bmu_tcipif_dbus_addr[31:0]
                           | {32{had_sel}}  & bmu_tcipif_had_addr[31:0];

assign tcip_req_write      = dbus_sel & bmu_tcipif_dbus_write
                           | had_sel  & bmu_tcipif_had_write;

assign tcip_req_size[1:0]  = {2{dbus_sel}} & bmu_tcipif_dbus_size[1:0]
                            |{2{had_sel}}  & bmu_tcipif_had_size[1:0];





assign clint_sel  =  (tcip_req_addr[31:16] == CLINT_IN);

assign clic_sel  =  (tcip_req_addr[31:16] == CLIC_IN);
assign tcip_cp0_clic_base[31:0] = {CLIC_IN, 16'b0};

assign had_img_sel    = (tcip_req_addr[31:12] == HAD_IMG_IN);

assign sysmap_sel     = 1'b0;

assign dummy_addr_sel = !(clint_sel | clic_sel | had_img_sel | sysmap_sel);





always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    tcipif_acc_err <= 1'b0;
  else if(tcip_req_pre)
    tcipif_acc_err <= tcip_err;
  else if(tcipif_acc_err)
    tcipif_acc_err <= 1'b0;
end

always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    clint_sel_ff <= 1'b0;
  else if(tcip_req_pre)
    clint_sel_ff <= clint_sel;
  else if(clint_tcipif_cmplt)
    clint_sel_ff <= 1'b0;
end
assign clint_req_mask   = clint_sel_ff && !clint_tcipif_cmplt;
assign tcipif_clint_sel = clint_sel_ff && !tcipif_acc_err & !tcip_acc_deny_ff;

always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    clic_sel_ff <= 1'b0;
  else if(tcip_req_pre)
    clic_sel_ff <= clic_sel;
  else if(clic_tcipif_cmplt)
    clic_sel_ff <= 1'b0;
end

always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    clic_size_ff[1:0] <= 2'b0;
  else if(tcip_req_pre)
    clic_size_ff[1:0] <= tcip_req_size[1:0];
end
assign clic_req_mask   = clic_sel_ff && !clic_tcipif_cmplt;
assign tcipif_clic_sel = clic_sel_ff && !tcipif_acc_err && !tcip_acc_deny_ff;
assign tcipif_clic_size[1:0] = clic_size_ff[1:0];
// &Force("nonport", "tcip_req_size"); @162


always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    had_img_sel_ff   <= 1'b0;
  else if(tcip_req_pre)
    had_img_sel_ff   <= had_img_sel;
  else if(had_img_tcipif_cmplt)
    had_img_sel_ff   <= 1'b0;
end
assign had_img_req_mask   = had_img_sel_ff && !had_img_tcipif_cmplt;
assign tcipif_had_img_sel = had_img_sel_ff & !tcipif_acc_err && !tcip_acc_deny_ff;

assign sysmap_req_mask           = 1'b0;
assign sysmap_tcipif_cmplt       = 1'b0;
assign sysmap_tcipif_rdata[31:0] = 32'b0;

always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    dummy_addr_cmplt <= 1'b0;
  else if(tcip_req_pre)
    dummy_addr_cmplt <= dummy_addr_sel;
  else if(dummy_addr_cmplt)
    dummy_addr_cmplt <= 1'b0;
end

assign tcip_req_mask  = clint_req_mask
                     || clic_req_mask
                     || had_img_req_mask
                     || sysmap_req_mask;


always @(posedge tcip_ctrl_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    tcip_acc_deny_ff <= 1'b0;
  else if (tcip_req_pre)
    tcip_acc_deny_ff <= tcip_acc_deny;
  else if (tcip_acc_deny_ff)
    tcip_acc_deny_ff <= 1'b0;
end





always @(posedge tcip_dp_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    xx_tcip_grant <= 1'b0;
  else if(tcip_req_pre)
    xx_tcip_grant <= had_req_pre;
end


always @(posedge tcip_dp_clk)
begin
  if(tcip_req_pre)
  begin
    tcipif_xx_write      <= tcip_req_write;
    tcipif_xx_addr[15:0] <= tcip_req_addr[15:0];
  end
end

assign tcipif_xx_wdata[31:0] = xx_tcip_grant ? bmu_tcipif_had_wdata[31:0]
                                             : bmu_tcipif_dbus_wdata[31:0];







assign xx_tcipif_cmplt = clint_tcipif_cmplt
                       | clic_tcipif_cmplt
                       | had_img_tcipif_cmplt
                       | sysmap_tcipif_cmplt;

assign tcipif_trans_cmplt =  xx_tcipif_cmplt
                          |  dummy_addr_cmplt
                          |  tcipif_acc_err
                          |  tcip_acc_deny_ff;

assign tcipif_rdata[31:0]   = {32{clint_tcipif_cmplt}}   & clint_tcipif_rdata[31:0]
                            | {32{clic_tcipif_cmplt}}    & clic_tcipif_rdata[31:0]
                            | {32{had_img_tcipif_cmplt}} & had_img_tcipif_rdata[31:0]
                            | {32{sysmap_tcipif_cmplt}}  & sysmap_tcipif_rdata[31:0];

assign tcipif_bmu_dbus_grnt        = dbus_sel;
assign tcipif_bmu_dbus_trans_cmplt = !xx_tcip_grant && tcipif_trans_cmplt;
assign tcipif_bmu_dbus_acc_err     = !xx_tcip_grant && tcipif_acc_err;
assign tcipif_bmu_dbus_data[31:0]  = tcipif_rdata[31:0];

assign tcipif_bmu_had_grnt         = had_sel;
assign tcipif_bmu_had_trans_cmplt  = xx_tcip_grant && tcipif_trans_cmplt;
assign tcipif_bmu_had_acc_err      = xx_tcip_grant && tcipif_acc_err;
assign tcipif_bmu_had_data[31:0]   = tcipif_rdata[31:0];

assign tcip_ctrl_clk_en = tcip_req_gate | tcipif_trans_cmplt;
// &Instance("gated_clk_cell", "x_tcipif_dbus_ctrl_clk"); @291
gated_clk_cell  x_tcipif_dbus_ctrl_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (tcip_ctrl_clk       ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tcip_ctrl_clk_en    ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk     ), @292
//          .external_en (1'b0               ), @293
//          .global_en   (1'b1               ), @294
//          .module_en   (1'b0               ), @295
//          .local_en    (tcip_ctrl_clk_en   ), @296
//          .clk_out     (tcip_ctrl_clk      ) @297
//         ); @298

// &Instance("gated_clk_cell", "x_tcipif_dbus_dp_clk"); @300
gated_clk_cell  x_tcipif_dbus_dp_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (tcip_dp_clk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tcip_req_gate       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk     ), @301
//          .external_en (1'b0               ), @302
//          .global_en   (1'b1               ), @303
//          .module_en   (1'b0               ), @304
//          .local_en    (tcip_req_gate      ), @305
//          .clk_out     (tcip_dp_clk        ) @306
//         ); @307

//     &Force("nonport", "dbus_new_req"); @334
//     &Force("nonport", "had_new_req"); @335

// &ModuleEnd; @339
endmodule























// &ModuleBeg; @22
module pa_tcipif_dummy_bus(
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_req_dp,
  bmu_tcipif_ibus_size,
  bmu_tcipif_ibus_supv_mode,
  bmu_tcipif_ibus_wdata,
  bmu_tcipif_ibus_write,
  cpurst_b,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);

// &Ports; @23
input           bmu_tcipif_ibus_acc_deny;
input   [31:0]  bmu_tcipif_ibus_addr;
input           bmu_tcipif_ibus_req;
input           bmu_tcipif_ibus_req_dp;
input   [1 :0]  bmu_tcipif_ibus_size;
input           bmu_tcipif_ibus_supv_mode;
input   [31:0]  bmu_tcipif_ibus_wdata;
input           bmu_tcipif_ibus_write;
input           cpurst_b;
input           forever_cpuclk;
input           pad_yy_gate_clk_en_b;
output          tcipif_bmu_ibus_acc_err;
output  [31:0]  tcipif_bmu_ibus_data;
output          tcipif_bmu_ibus_grnt;
output          tcipif_bmu_ibus_trans_cmplt;

// &Regs; @24
reg             bus_next_state;
reg             bus_state;

// &Wires; @25
wire            bmu_tcipif_ibus_req;
wire            bmu_tcipif_ibus_req_dp;
wire            cpurst_b;
wire            forever_cpuclk;
wire            ibus_acc_err;
wire            ibus_busy;
wire            ibus_req;
wire            pad_yy_gate_clk_en_b;
wire            sel_clk;
wire            sel_clk_en;
wire            tcipif_bmu_ibus_acc_err;
wire    [31:0]  tcipif_bmu_ibus_data;
wire            tcipif_bmu_ibus_grnt;
wire            tcipif_bmu_ibus_trans_cmplt;





// &Force("input","bmu_tcipif_ibus_addr"); @30
// &Force("input","bmu_tcipif_ibus_write"); @31
// &Force("input","bmu_tcipif_ibus_size"); @32
// &Force("input","bmu_tcipif_ibus_acc_deny"); @33
// &Force("input","bmu_tcipif_ibus_supv_mode"); @34
// &Force("input","bmu_tcipif_ibus_wdata"); @35
// &Force("input","bmu_tcipif_ibus_sec"); @37
// &Force("bus","bmu_tcipif_ibus_addr",31,0); @39
// &Force("bus","bmu_tcipif_ibus_size",1,0); @40
// &Force("bus","bmu_tcipif_ibus_wdata",31,0); @41

parameter IDLE  = 1'b0,
          ERROR = 1'b1;

assign sel_clk_en = bmu_tcipif_ibus_req_dp | ibus_busy;
// &Instance("gated_clk_cell", "x_tcipif_ibus_sel_clk"); @47
gated_clk_cell  x_tcipif_ibus_sel_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sel_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (sel_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);

// &Connect(.clk_in      (forever_cpuclk     ), @48
//          .external_en (1'b0               ), @49
//          .global_en   (1'b1               ), @50
//          .module_en   (1'b0               ), @51
//          .local_en    (sel_clk_en         ), @52
//          .clk_out     (sel_clk            ) @53
//         ); @54

always@(posedge sel_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bus_state <= IDLE;
  else
    bus_state <= bus_next_state;
end

// &CombBeg; @64
always @( bus_state
       or ibus_req)
begin
case(bus_state)
  IDLE:
    if(ibus_req)
      bus_next_state = ERROR;
    else
      bus_next_state = IDLE;
  ERROR:
    if(ibus_req)
      bus_next_state = ERROR;
    else
      bus_next_state = IDLE;
  default:
    bus_next_state = IDLE;
endcase
// &CombEnd; @79
end

assign ibus_req     = bmu_tcipif_ibus_req;
assign ibus_busy    = (bus_state != IDLE);
assign ibus_acc_err = (bus_state == ERROR);

assign tcipif_bmu_ibus_grnt        = bmu_tcipif_ibus_req_dp;
assign tcipif_bmu_ibus_trans_cmplt = ibus_acc_err;
assign tcipif_bmu_ibus_acc_err     = ibus_acc_err;
assign tcipif_bmu_ibus_data[31:0]  = 32'b0;

// &ModuleEnd; @90
endmodule
























// &ModuleBeg; @22
module pa_tcipif_top(
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_req_dp,
  bmu_tcipif_dbus_size,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_had_acc_deny,
  bmu_tcipif_had_addr,
  bmu_tcipif_had_req,
  bmu_tcipif_had_req_dp,
  bmu_tcipif_had_size,
  bmu_tcipif_had_supv_mode,
  bmu_tcipif_had_wdata,
  bmu_tcipif_had_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_req_dp,
  bmu_tcipif_ibus_size,
  bmu_tcipif_ibus_supv_mode,
  bmu_tcipif_ibus_wdata,
  bmu_tcipif_ibus_write,
  clic_cpu_int_hv,
  clic_cpu_int_id,
  clic_cpu_int_il,
  clic_cpu_int_priv,
  cp0_yy_priv_mode,
  cpu_clic_curid,
  cpu_clic_int_exit,
  cpurst_b,
  forever_cpuclk,
  had_tcipif_cmplt,
  had_tcipif_rdata,
  pad_clic_int_vld,
  pad_yy_gate_clk_en_b,
  rtu_clic_warm_up,
  rtu_yy_xx_dbgon,
  sysio_clint_me_int,
  sysio_clint_mtime,
  tcip_cp0_clic_base,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_had_acc_err,
  tcipif_bmu_had_data,
  tcipif_bmu_had_grnt,
  tcipif_bmu_had_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt,
  tcipif_had_addr,
  tcipif_had_sel,
  tcipif_had_wdata,
  tcipif_had_write
);

// &Ports; @23
input           bmu_tcipif_dbus_acc_deny;
input   [31:0]  bmu_tcipif_dbus_addr;
input           bmu_tcipif_dbus_req;
input           bmu_tcipif_dbus_req_dp;
input   [1 :0]  bmu_tcipif_dbus_size;
input           bmu_tcipif_dbus_supv_mode;
input   [31:0]  bmu_tcipif_dbus_wdata;
input           bmu_tcipif_dbus_write;
input           bmu_tcipif_had_acc_deny;
input   [31:0]  bmu_tcipif_had_addr;
input           bmu_tcipif_had_req;
input           bmu_tcipif_had_req_dp;
input   [1 :0]  bmu_tcipif_had_size;
input           bmu_tcipif_had_supv_mode;
input   [31:0]  bmu_tcipif_had_wdata;
input           bmu_tcipif_had_write;
input           bmu_tcipif_ibus_acc_deny;
input   [31:0]  bmu_tcipif_ibus_addr;
input           bmu_tcipif_ibus_req;
input           bmu_tcipif_ibus_req_dp;
input   [1 :0]  bmu_tcipif_ibus_size;
input           bmu_tcipif_ibus_supv_mode;
input   [31:0]  bmu_tcipif_ibus_wdata;
input           bmu_tcipif_ibus_write;
input   [1 :0]  cp0_yy_priv_mode;
input   [11:0]  cpu_clic_curid;
input           cpu_clic_int_exit;
input           cpurst_b;
input           forever_cpuclk;
input           had_tcipif_cmplt;
input   [31:0]  had_tcipif_rdata;
input   [31:0]  pad_clic_int_vld;
input           pad_yy_gate_clk_en_b;
input           rtu_clic_warm_up;
input           rtu_yy_xx_dbgon;
input           sysio_clint_me_int;
input   [63:0]  sysio_clint_mtime;
output          clic_cpu_int_hv;
output  [11:0]  clic_cpu_int_id;
output  [7 :0]  clic_cpu_int_il;
output  [1 :0]  clic_cpu_int_priv;
output  [31:0]  tcip_cp0_clic_base;
output          tcipif_bmu_dbus_acc_err;
output  [31:0]  tcipif_bmu_dbus_data;
output          tcipif_bmu_dbus_grnt;
output          tcipif_bmu_dbus_trans_cmplt;
output          tcipif_bmu_had_acc_err;
output  [31:0]  tcipif_bmu_had_data;
output          tcipif_bmu_had_grnt;
output          tcipif_bmu_had_trans_cmplt;
output          tcipif_bmu_ibus_acc_err;
output  [31:0]  tcipif_bmu_ibus_data;
output          tcipif_bmu_ibus_grnt;
output          tcipif_bmu_ibus_trans_cmplt;
output  [15:0]  tcipif_had_addr;
output          tcipif_had_sel;
output  [31:0]  tcipif_had_wdata;
output          tcipif_had_write;

// &Regs; @24

// &Wires; @25
wire            bmu_tcipif_dbus_acc_deny;
wire    [31:0]  bmu_tcipif_dbus_addr;
wire            bmu_tcipif_dbus_req;
wire            bmu_tcipif_dbus_req_dp;
wire    [1 :0]  bmu_tcipif_dbus_size;
wire            bmu_tcipif_dbus_supv_mode;
wire    [31:0]  bmu_tcipif_dbus_wdata;
wire            bmu_tcipif_dbus_write;
wire            bmu_tcipif_had_acc_deny;
wire    [31:0]  bmu_tcipif_had_addr;
wire            bmu_tcipif_had_req;
wire            bmu_tcipif_had_req_dp;
wire    [1 :0]  bmu_tcipif_had_size;
wire            bmu_tcipif_had_supv_mode;
wire    [31:0]  bmu_tcipif_had_wdata;
wire            bmu_tcipif_had_write;
wire            bmu_tcipif_ibus_acc_deny;
wire    [31:0]  bmu_tcipif_ibus_addr;
wire            bmu_tcipif_ibus_req;
wire            bmu_tcipif_ibus_req_dp;
wire    [1 :0]  bmu_tcipif_ibus_size;
wire            bmu_tcipif_ibus_supv_mode;
wire    [31:0]  bmu_tcipif_ibus_wdata;
wire            bmu_tcipif_ibus_write;
wire            clic_cpu_int_hv;
wire    [11:0]  clic_cpu_int_id;
wire    [7 :0]  clic_cpu_int_il;
wire    [1 :0]  clic_cpu_int_priv;
wire            clic_tcipif_cmplt;
wire    [31:0]  clic_tcipif_rdata;
wire            clint_cpu_me_int;
wire            clint_cpu_ms_int;
wire            clint_cpu_mt_int;
wire            clint_tcipif_cmplt;
wire    [31:0]  clint_tcipif_rdata;
wire    [1 :0]  cp0_yy_priv_mode;
wire    [11:0]  cpu_clic_curid;
wire            cpu_clic_int_exit;
wire            cpurst_b;
wire            forever_cpuclk;
wire            had_img_tcipif_cmplt;
wire    [31:0]  had_img_tcipif_rdata;
wire            had_tcipif_cmplt;
wire    [31:0]  had_tcipif_rdata;
wire    [31:0]  pad_clic_int_vld;
wire            pad_yy_gate_clk_en_b;
wire            rtu_clic_warm_up;
wire            rtu_yy_xx_dbgon;
wire            sysio_clint_me_int;
wire    [63:0]  sysio_clint_mtime;
wire    [31:0]  tcip_cp0_clic_base;
wire            tcipif_bmu_dbus_acc_err;
wire    [31:0]  tcipif_bmu_dbus_data;
wire            tcipif_bmu_dbus_grnt;
wire            tcipif_bmu_dbus_trans_cmplt;
wire            tcipif_bmu_had_acc_err;
wire    [31:0]  tcipif_bmu_had_data;
wire            tcipif_bmu_had_grnt;
wire            tcipif_bmu_had_trans_cmplt;
wire            tcipif_bmu_ibus_acc_err;
wire    [31:0]  tcipif_bmu_ibus_data;
wire            tcipif_bmu_ibus_grnt;
wire            tcipif_bmu_ibus_trans_cmplt;
wire            tcipif_clic_sel;
wire    [1 :0]  tcipif_clic_size;
wire            tcipif_clint_sel;
wire    [15:0]  tcipif_had_addr;
wire            tcipif_had_img_sel;
wire            tcipif_had_sel;
wire    [31:0]  tcipif_had_wdata;
wire            tcipif_had_write;
wire    [15:0]  tcipif_xx_addr;
wire    [31:0]  tcipif_xx_wdata;
wire            tcipif_xx_write;





// &Instance("pa_tcipif_behavior_bus","x_pa_tcipif_dbus"); @30
pa_tcipif_behavior_bus  x_pa_tcipif_dbus (
  .bmu_tcipif_dbus_acc_deny    (bmu_tcipif_dbus_acc_deny   ),
  .bmu_tcipif_dbus_addr        (bmu_tcipif_dbus_addr       ),
  .bmu_tcipif_dbus_req         (bmu_tcipif_dbus_req        ),
  .bmu_tcipif_dbus_req_dp      (bmu_tcipif_dbus_req_dp     ),
  .bmu_tcipif_dbus_size        (bmu_tcipif_dbus_size       ),
  .bmu_tcipif_dbus_supv_mode   (bmu_tcipif_dbus_supv_mode  ),
  .bmu_tcipif_dbus_wdata       (bmu_tcipif_dbus_wdata      ),
  .bmu_tcipif_dbus_write       (bmu_tcipif_dbus_write      ),
  .bmu_tcipif_had_acc_deny     (bmu_tcipif_had_acc_deny    ),
  .bmu_tcipif_had_addr         (bmu_tcipif_had_addr        ),
  .bmu_tcipif_had_req          (bmu_tcipif_had_req         ),
  .bmu_tcipif_had_req_dp       (bmu_tcipif_had_req_dp      ),
  .bmu_tcipif_had_size         (bmu_tcipif_had_size        ),
  .bmu_tcipif_had_supv_mode    (bmu_tcipif_had_supv_mode   ),
  .bmu_tcipif_had_wdata        (bmu_tcipif_had_wdata       ),
  .bmu_tcipif_had_write        (bmu_tcipif_had_write       ),
  .clic_tcipif_cmplt           (clic_tcipif_cmplt          ),
  .clic_tcipif_rdata           (clic_tcipif_rdata          ),
  .clint_tcipif_cmplt          (clint_tcipif_cmplt         ),
  .clint_tcipif_rdata          (clint_tcipif_rdata         ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_img_tcipif_cmplt        (had_img_tcipif_cmplt       ),
  .had_img_tcipif_rdata        (had_img_tcipif_rdata       ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .rtu_yy_xx_dbgon             (rtu_yy_xx_dbgon            ),
  .tcip_cp0_clic_base          (tcip_cp0_clic_base         ),
  .tcipif_bmu_dbus_acc_err     (tcipif_bmu_dbus_acc_err    ),
  .tcipif_bmu_dbus_data        (tcipif_bmu_dbus_data       ),
  .tcipif_bmu_dbus_grnt        (tcipif_bmu_dbus_grnt       ),
  .tcipif_bmu_dbus_trans_cmplt (tcipif_bmu_dbus_trans_cmplt),
  .tcipif_bmu_had_acc_err      (tcipif_bmu_had_acc_err     ),
  .tcipif_bmu_had_data         (tcipif_bmu_had_data        ),
  .tcipif_bmu_had_grnt         (tcipif_bmu_had_grnt        ),
  .tcipif_bmu_had_trans_cmplt  (tcipif_bmu_had_trans_cmplt ),
  .tcipif_clic_sel             (tcipif_clic_sel            ),
  .tcipif_clic_size            (tcipif_clic_size           ),
  .tcipif_clint_sel            (tcipif_clint_sel           ),
  .tcipif_had_img_sel          (tcipif_had_img_sel         ),
  .tcipif_xx_addr              (tcipif_xx_addr             ),
  .tcipif_xx_wdata             (tcipif_xx_wdata            ),
  .tcipif_xx_write             (tcipif_xx_write            )
);

// &Instance("pa_tcipif_dummy_bus","x_pa_tcipif_ibus"); @31
pa_tcipif_dummy_bus  x_pa_tcipif_ibus (
  .bmu_tcipif_ibus_acc_deny    (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_ibus_addr        (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_ibus_req         (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_ibus_req_dp      (bmu_tcipif_ibus_req_dp     ),
  .bmu_tcipif_ibus_size        (bmu_tcipif_ibus_size       ),
  .bmu_tcipif_ibus_supv_mode   (bmu_tcipif_ibus_supv_mode  ),
  .bmu_tcipif_ibus_wdata       (bmu_tcipif_ibus_wdata      ),
  .bmu_tcipif_ibus_write       (bmu_tcipif_ibus_write      ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .tcipif_bmu_ibus_acc_err     (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_ibus_data        (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_ibus_grnt        (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_ibus_trans_cmplt (tcipif_bmu_ibus_trans_cmplt)
);









// &Instance("pa_clint_top"); @40
pa_clint_top  x_pa_clint_top (
  .clint_cpu_me_int     (clint_cpu_me_int    ),
  .clint_cpu_ms_int     (clint_cpu_ms_int    ),
  .clint_cpu_mt_int     (clint_cpu_mt_int    ),
  .clint_tcipif_cmplt   (clint_tcipif_cmplt  ),
  .clint_tcipif_rdata   (clint_tcipif_rdata  ),
  .cpu_clint_mode       (cp0_yy_priv_mode    ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .sysio_clint_me_int   (sysio_clint_me_int  ),
  .sysio_clint_mtime    (sysio_clint_mtime   ),
  .tcipif_clint_addr    (tcipif_xx_addr      ),
  .tcipif_clint_sel     (tcipif_clint_sel    ),
  .tcipif_clint_wdata   (tcipif_xx_wdata     ),
  .tcipif_clint_write   (tcipif_xx_write     )
);

// &Connect( @41
//          .tcipif_clint_addr    (tcipif_xx_addr    ), @42
//          .tcipif_clint_wdata   (tcipif_xx_wdata   ), @43
//          .tcipif_clint_write   (tcipif_xx_write   ), @44
//          .cpu_clint_mode       (cp0_yy_priv_mode  ), @45
// ); @46




// &Instance("pa_clic_top"); @52
pa_clic_top  x_pa_clic_top (
  .clic_cpu_int_hv      (clic_cpu_int_hv     ),
  .clic_cpu_int_id      (clic_cpu_int_id     ),
  .clic_cpu_int_il      (clic_cpu_int_il     ),
  .clic_cpu_int_priv    (clic_cpu_int_priv   ),
  .clic_tcipif_cmplt    (clic_tcipif_cmplt   ),
  .clic_tcipif_rdata    (clic_tcipif_rdata   ),
  .clint_cpu_me_int     (clint_cpu_me_int    ),
  .clint_cpu_ms_int     (clint_cpu_ms_int    ),
  .clint_cpu_mt_int     (clint_cpu_mt_int    ),
  .cpu_clic_curid       (cpu_clic_curid      ),
  .cpu_clic_int_exit    (cpu_clic_int_exit   ),
  .cpu_clic_mode        (cp0_yy_priv_mode    ),
  .cpurst_b             (cpurst_b            ),
  .forever_cpuclk       (forever_cpuclk      ),
  .pad_clic_int_vld     (pad_clic_int_vld    ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b),
  .rtu_clic_warm_up     (rtu_clic_warm_up    ),
  .tcipif_clic_addr     (tcipif_xx_addr      ),
  .tcipif_clic_sel      (tcipif_clic_sel     ),
  .tcipif_clic_size     (tcipif_clic_size    ),
  .tcipif_clic_wdata    (tcipif_xx_wdata     ),
  .tcipif_clic_write    (tcipif_xx_write     )
);

// &Connect( @53
//          .tcipif_clic_addr     (tcipif_xx_addr    ), @54
//          .tcipif_clic_wdata    (tcipif_xx_wdata   ), @55
//          .tcipif_clic_write    (tcipif_xx_write   ), @56
//          .cpu_clic_mode        (cp0_yy_priv_mode), @57
//        ); @58

//  &Connect( @61
//     .clic_pad_int_sec    (clic_cpu_int_sec), @62
//   ); @63


assign tcipif_had_sel             = tcipif_had_img_sel;
assign tcipif_had_addr[15:0]      = tcipif_xx_addr[15:0];
assign tcipif_had_write           = tcipif_xx_write;
assign tcipif_had_wdata[31:0]     = tcipif_xx_wdata[31:0];


assign had_img_tcipif_cmplt       = had_tcipif_cmplt;
assign had_img_tcipif_rdata[31:0] = had_tcipif_rdata[31:0];


// &ModuleEnd; @88
endmodule



